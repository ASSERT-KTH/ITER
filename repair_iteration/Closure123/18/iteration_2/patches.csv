bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ":     ",  true);  cc.addOp( ":   ",  true);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	cc.addOp(   ":       ",    true);    cc.addOp( ":   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	3	5	add
2	[BUG]  [BUGGY]  cc.addOp(   ":     ",  true);  cc.addOp( ":   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ":     ",  true);  cc.addOp( ":   ",  true);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ":       ",    true);    cc.addOp( ":   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	3	5	add
3	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ":     ",  true);  cc.addOp( ".:   ",  true);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	cc.addOp(   ":       ",    true);    cc.addOp( ".:   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	3	5	add
4	[BUG]  [BUGGY]  cc.addOp(   ":     ",  true);  cc.addOp( ".:   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ":     ",  true);  cc.addOp( ".:   ",  true);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ":       ",    true);    cc.addOp( ".:   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	3	5	add
5	[BUG]  [BUGGY]  cc.addOp(   ":     ",  true);  cc.addOp(':',  true);  [CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ":     ",  true);  cc.addOp(':',  true);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ":       ",    true);    cc.addOp(':',  true);	  	non-compiled	[CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;	3	None	add
6	[BUG]  [BUGGY]  cc.addOp(   ":     ",  true);  cc.addOp( ",  true);  [CE]  unclosed  string  literal  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ":     ",  true);  cc.addOp( ",  true);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ":       ",    true);    cc.addOp( ",  true);	  	non-compiled	[CE]  unclosed  string  literal	3	None	add
7	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.getLastChild().getNext();  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	n.getLastChild().getNext();	  n.getFirstChild().getNext();    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  	190	5	replace
8	[BUG]  [BUGGY]  n.getLastChild().getNext();  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.getLastChild().getNext();  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.getLastChild().getNext();	  n.getFirstChild().getNext();    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  	190	5	replace
9	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.getFirstChild().removeChild(first);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	n.getFirstChild().removeChild(first);	  n.getFirstChild().getNext();    	compilable	  [FE]  NullPointerException  	190	5	replace
10	[BUG]  [BUGGY]  n.getFirstChild().removeChild(first);  [FE]  NullPointerException  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.getFirstChild().removeChild(first);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.getFirstChild().removeChild(first);	  n.getFirstChild().getNext();    	compilable	  [FE]  NullPointerException  	190	5	replace
11	[BUG]  [BUGGY]  n.getFirstChild().addOp( ": ");  [CE]  cannot  find  symbol  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.getFirstChild().addOp( ": ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.getFirstChild().addOp( ": ");	  n.getFirstChild().getNext();    	non-compiled	[CE]  cannot  find  symbol	190	None	replace
12	[BUG]  [BUGGY]  n.getFirstChild().removeChild(context);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.getFirstChild().removeChild(context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.getFirstChild().removeChild(context);	  n.getFirstChild().getNext();    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	190	None	replace
13	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ",     ",  false);  cc.addOp( ",   ",  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	cc.addOp(   ",       ",    false);    cc.addOp( ",   ",  false);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	72	5	add
14	[BUG]  [BUGGY]  cc.addOp(   ",     ",  false);  cc.addOp( ",   ",  false);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ",     ",  false);  cc.addOp( ",   ",  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ",       ",    false);    cc.addOp( ",   ",  false);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	72	5	add
15	[BUG]  [BUGGY]  cc.addOp(   ",     ",  false);  cc.addOp( ",  false);  [CE]  unclosed  string  literal  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ",     ",  false);  cc.addOp( ",  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ",       ",    false);    cc.addOp( ",  false);	  	non-compiled	[CE]  unclosed  string  literal	72	None	add
16	[BUG]  [BUGGY]  cc.addOp(   ",     ",  false);  cc.addOp(, ",   ",  false);  [CE]  illegal  start  of  expression  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ",     ",  false);  cc.addOp(, ",   ",  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ",       ",    false);    cc.addOp(, ",   ",  false);	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
17	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ",     ",  false);  cc.addOp( ".,   ",  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	cc.addOp(   ",       ",    false);    cc.addOp( ".,   ",  false);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	72	5	add
18	[BUG]  [BUGGY]  cc.addOp(   ",     ",  false);  cc.addOp( ".,   ",  false);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ",     ",  false);  cc.addOp( ".,   ",  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ",       ",    false);    cc.addOp( ".,   ",  false);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	72	5	add
19	[BUG]  [BUGGY]  n.addChildToFront(first,  context);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addChildToFront(first,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addChildToFront(first,  context);	  n.addChildToFront(context);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	187	None	replace
20	[BUG]  [BUGGY]  n.addChildToFront(last,  context);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addChildToFront(last,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addChildToFront(last,  context);	  n.addChildToFront(context);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	187	None	replace
21	[BUG]  [BUGGY]  n.addChildToFront(p,  context);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addChildToFront(p,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addChildToFront(p,  context);	  n.addChildToFront(context);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	187	None	replace
22	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addChildToFront(first);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	n.addChildToFront(first);	  n.addChildToFront(context);    	compilable	  [FE]  IllegalArgumentException  	187	5	replace
23	[BUG]  [BUGGY]  n.addChildToFront(first);  [FE]  IllegalArgumentException  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addChildToFront(first);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addChildToFront(first);	  n.addChildToFront(context);    	compilable	  [FE]  IllegalArgumentException  	187	5	replace
24	[BUG]  [BUGGY]  n.addChildToFront(context,  first);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addChildToFront(context,  first);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addChildToFront(context,  first);	  n.addChildToFront(context);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	187	None	replace
25	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  0);  Preconditions.checkState(childCount  ==  0);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	Preconditions.checkState(childCount    ==    0);    Preconditions.checkState(childCount  ==  0);	  	compilable	  [FE]  IllegalStateException  	54	5	add
26	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  0);  Preconditions.checkState(childCount  ==  0);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  0);  Preconditions.checkState(childCount  ==  0);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount    ==    0);    Preconditions.checkState(childCount  ==  0);	  	compilable	  [FE]  IllegalStateException  	54	5	add
27	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  0);  Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  0);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]      IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  0);  Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  0);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount    ==    0);    Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  0);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	54	None	add
28	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  0);  int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  0);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]        IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  0);  int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  0);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount    ==    0);    int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  0);	  	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	54	None	add
29	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  0);  Context.checkState(childCount  ==  0);  [CE]  cannot  find  symbol  [FE]          IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  0);  Context.checkState(childCount  ==  0);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount    ==    0);    Context.checkState(childCount  ==  0);	  	non-compiled	[CE]  cannot  find  symbol	54	None	add
30	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  0);  int  childCount  =  NodeUtil.precedence(type);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]            IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  0);  int  childCount  =  NodeUtil.precedence(type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount    ==    0);    int  childCount  =  NodeUtil.precedence(type);	  	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	54	None	add
31	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  0);  Integer  p  =  NodeUtil.precedence(type);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]              IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  0);  Integer  p  =  NodeUtil.precedence(type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount    ==    0);    Integer  p  =  NodeUtil.precedence(type);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	54	None	add
32	[BUG]  [BUGGY]  Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  3);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]        ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  3);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  3);	          Preconditions.checkState(childCount    ==    3);    Integer    p    =    NodeUtil.precedence(type);    Preconditions.checkState(childCount    ==    3);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	200	None	replace
33	[BUG]  [BUGGY]  Integer  p  =  NodeUtil.precedence(type);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]          ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Integer  p  =  NodeUtil.precedence(type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Integer  p  =  NodeUtil.precedence(type);	          Preconditions.checkState(childCount    ==    3);    Integer    p    =    NodeUtil.precedence(type);    Preconditions.checkState(childCount    ==    3);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	200	None	replace
34	[BUG]  [BUGGY]  int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  3);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]            ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  3);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  3);	          Preconditions.checkState(childCount    ==    3);    Integer    p    =    NodeUtil.precedence(type);    Preconditions.checkState(childCount    ==    3);    	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	200	None	replace
35	[BUG]  [BUGGY]  int  childCount  =  NodeUtil.precedence(type);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]              ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  int  childCount  =  NodeUtil.precedence(type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	int  childCount  =  NodeUtil.precedence(type);	          Preconditions.checkState(childCount    ==    3);    Integer    p    =    NodeUtil.precedence(type);    Preconditions.checkState(childCount    ==    3);    	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	200	None	replace
36	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  false);	  cc.addOp(       "?       ",    false);    cc.addOp(   ",?       ",    false);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	139	5	replace
37	[BUG]  [BUGGY]  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  false);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  false);	  cc.addOp(       "?       ",    false);    cc.addOp(   ",?       ",    false);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	139	5	replace
38	[BUG]  [BUGGY]  n.addOp( "?   ",  false);  n.addOp( ",?   ",  false);  [CE]  cannot  find  symbol  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addOp( "?   ",  false);  n.addOp( ",?   ",  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addOp( "?   ",  false);  n.addOp( ",?   ",  false);	  cc.addOp(       "?       ",    false);    cc.addOp(   ",?       ",    false);    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
39	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp( ",?   ",  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	cc.addOp( ",?   ",  false);	  cc.addOp(       "?       ",    false);    cc.addOp(   ",?       ",    false);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  	139	5	replace
40	[BUG]  [BUGGY]  cc.addOp( ",?   ",  false);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp( ",?   ",  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( ",?   ",  false);	  cc.addOp(       "?       ",    false);    cc.addOp(   ",?       ",    false);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  	139	5	replace
41	[BUG]  [BUGGY]  cc.addOp( ",  true);  [CE]  unclosed  string  literal  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp( ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( ",  true);	          cc.addOp(       "?       ",    true);    cc.addOp('?',    true);    	non-compiled	[CE]  unclosed  string  literal	96	None	replace
42	[BUG]  [BUGGY]  n.addOp( "?   ",  true);  cc.addOp('?',  true);  [CE]  cannot  find  symbol  [FE]                junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addOp( "?   ",  true);  cc.addOp('?',  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addOp( "?   ",  true);  cc.addOp('?',  true);	          cc.addOp(       "?       ",    true);    cc.addOp('?',    true);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
43	[BUG]  [BUGGY]  n.addOp( "?   ",  true);  n.addOp('?',  true);  [CE]  cannot  find  symbol  [FE]                  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addOp( "?   ",  true);  n.addOp('?',  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addOp( "?   ",  true);  n.addOp('?',  true);	          cc.addOp(       "?       ",    true);    cc.addOp('?',    true);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
44	[BUG]  [BUGGY]  Integer  p  =  NodeUtil.precedence(type).intValue();  Preconditions.checkState(childCount  ==  2);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]                IllegalStateException      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Integer  p  =  NodeUtil.precedence(type).intValue();  Preconditions.checkState(childCount  ==  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Integer  p  =  NodeUtil.precedence(type).intValue();  Preconditions.checkState(childCount  ==  2);	          Preconditions.checkState(childCount    ==    2);    Integer    p    =    NodeUtil.precedence(type).intValue();    Preconditions.checkState(childCount    ==    2);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	185	None	replace
45	[BUG]  [BUGGY]  Integer  p  =  NodeUtil.precedence(type).intValue();  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]                  IllegalStateException      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Integer  p  =  NodeUtil.precedence(type).intValue();  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Integer  p  =  NodeUtil.precedence(type).intValue();	          Preconditions.checkState(childCount    ==    2);    Integer    p    =    NodeUtil.precedence(type).intValue();    Preconditions.checkState(childCount    ==    2);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	185	None	replace
46	[BUG]  [BUGGY]  Integer  p  =  NodeUtil.precedence(type).intValue();  Preconditions.checkState(childCount  ==  1);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]                    IllegalStateException      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Integer  p  =  NodeUtil.precedence(type).intValue();  Preconditions.checkState(childCount  ==  1);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Integer  p  =  NodeUtil.precedence(type).intValue();  Preconditions.checkState(childCount  ==  1);	          Preconditions.checkState(childCount    ==    2);    Integer    p    =    NodeUtil.precedence(type).intValue();    Preconditions.checkState(childCount    ==    2);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	185	None	replace
47	[BUG]  [BUGGY]  Context.checkState(childCount  ==  2);  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context.checkState(childCount  ==  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context.checkState(childCount  ==  2);	          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount    ==    2);    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
48	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(last,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	cc.addOp(   ":   ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp( ":   ",  true);  addExpr(last,  0,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	36	5	add
49	[BUG]  [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(last,  0,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(last,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ":   ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp( ":   ",  true);  addExpr(last,  0,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	36	5	add
50	[BUG]  [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( ": ".,  true);  addExpr(last,  0,  rhsContext);  [CE]  <identifier>  expected  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( ": ".,  true);  addExpr(last,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ":   ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp( ": ".,  true);  addExpr(last,  0,  rhsContext);	  	non-compiled	[CE]  <identifier>  expected	36	None	add
51	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(first,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	cc.addOp(   ":   ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp( ":   ",  true);  addExpr(first,  0,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	36	5	add
52	[BUG]  [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(first,  0,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(first,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ":   ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp( ":   ",  true);  addExpr(first,  0,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	36	5	add
53	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	cc.addOp(   ":   ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	36	5	add
54	[BUG]  [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ":   ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	36	5	add
55	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForNode(n);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  cc  =  getCurrentContextForNode(n);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContextForNode(n);	  Context    cc    =    getCurrentContextForNode();    	non-compiled	[CE]  cannot  find  symbol	159	None	replace
56	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForNode(p);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  cc  =  getCurrentContextForNode(p);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContextForNode(p);	  Context    cc    =    getCurrentContextForNode();    	non-compiled	[CE]  cannot  find  symbol	159	None	replace
57	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForNonNode();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  cc  =  getCurrentContextForNonNode();  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContextForNonNode();	  Context    cc    =    getCurrentContextForNode();    	non-compiled	[CE]  cannot  find  symbol	159	None	replace
58	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	cc.addOp( "?   ",  true);  cc.addOp( "?   ",  false);	  cc.addOp(       "?       ",    false);    cc.addOp(?   "?       ",    false);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	141	5	replace
59	[BUG]  [BUGGY]  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  false);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( "?   ",  true);  cc.addOp( "?   ",  false);	  cc.addOp(       "?       ",    false);    cc.addOp(?   "?       ",    false);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	141	5	replace
60	[BUG]  [BUGGY]  n.addOp( "?   ",  false);  n.addOp( "?   ",  false);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addOp( "?   ",  false);  n.addOp( "?   ",  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addOp( "?   ",  false);  n.addOp( "?   ",  false);	  cc.addOp(       "?       ",    false);    cc.addOp(?   "?       ",    false);    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
61	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  2,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  2,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	                cc.addOp(       "?       ",        true);        addExpr(first.getNext(),        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    2,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first.getNext(),  2,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	201	5	add
62	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  2,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  2,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  2,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  2,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first.getNext(),        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    2,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first.getNext(),  2,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	201	5	add
63	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  2,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	                cc.addOp(       "?       ",        true);        addExpr(first.getNext(),        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    2,    rhsContext);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	201	5	add
64	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  2,  rhsContext);  cc.addOp( "?   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  2,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first.getNext(),        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    2,    rhsContext);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	201	5	add
65	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  2,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  2,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first.getNext(),        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    2,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);	  	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	201	None	add
66	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  2,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  2,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first.getNext(),        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    2,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalArgumentException( " ");	  	non-compiled	[CE]  not  a  statement	201	None	add
67	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  2,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  addExpr(first,  1,  rhsContext);  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  2,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first.getNext(),        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    2,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  addExpr(first,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	201	None	add
68	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  2,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  2,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first.getNext(),        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    2,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	201	None	add
69	[BUG]  [BUGGY]  n.addOp( "?   ",  true);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addOp( "?   ",  true);	          addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    true);    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	170	None	replace
70	[BUG]  [BUGGY]  n.removeChild(first);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.removeChild(first);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.removeChild(first);	          addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    true);    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	170	None	replace
71	[BUG]  [BUGGY]  n.removeChild(last);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.removeChild(last);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.removeChild(last);	          addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    true);    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	170	None	replace
72	[BUG]  [BUGGY]  n.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    2,    rhsContext);    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	202	None	replace
73	[BUG]  [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  ;  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  ;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  ;	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    2,    rhsContext);    	non-compiled	[CE]  not  a  statement	202	None	replace
74	[BUG]  [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    2,    rhsContext);    	non-compiled	[CE]  not  a  statement	202	None	replace
75	[BUG]  [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  a:1  }  ;  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  a:1  }  ;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	junit.framework.ComparisonFailure:  expected:  <  a:1  }  ;	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    2,    rhsContext);    	non-compiled	[CE]  not  a  statement	202	None	replace
76	[BUG]  [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:3  }  ;  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:3  }  ;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:3  }  ;	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    2,    rhsContext);    	non-compiled	[CE]  not  a  statement	202	None	replace
77	[BUG]  [BUGGY]  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  break;  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                    ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  break;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  break;	  cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    break;    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	86	None	replace
78	[BUG]  [BUGGY]  n.addChildToFront(first,  rhsContext);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addChildToFront(first,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addChildToFront(first,  rhsContext);	  n.addChildToFront(rhsContext);    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	188	None	replace
79	[BUG]  [BUGGY]  n.addChildToFront(last,  rhsContext);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addChildToFront(last,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addChildToFront(last,  rhsContext);	  n.addChildToFront(rhsContext);    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	188	None	replace
80	[BUG]  [BUGGY]  n.addChildToFront(context,  rhsContext);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addChildToFront(context,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addChildToFront(context,  rhsContext);	  n.addChildToFront(rhsContext);    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	188	None	replace
81	[BUG]  [BUGGY]  n.addChildToFront(p,  rhsContext);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addChildToFront(p,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addChildToFront(p,  rhsContext);	  n.addChildToFront(rhsContext);    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	188	None	replace
82	[BUG]  [BUGGY]  addExpr(first,  0,  rhsContext);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(first,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(first,  0,  rhsContext);	  addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	33	None	replace
83	[BUG]  [BUGGY]  addExpr(last,  0,  p);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  0,  p);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,  0,  p);	  addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	33	None	replace
84	[BUG]  [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  a:[]1;  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  a:[]1;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	junit.framework.ComparisonFailure:  expected:  <  a:[]1;	  addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	33	None	replace
85	[BUG]  [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[?]  {  a:3  }  ;  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[?]  {  a:3  }  ;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	junit.framework.ComparisonFailure:  expected:  <  var  foo=x[?]  {  a:3  }  ;	  addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	33	None	replace
86	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  cc.addOp(   "?     ",  true);  Preconditions.checkState(childCount  ==  3);  cc.addOp( "?   ",  true);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  cc.addOp(   "?     ",  true);  Preconditions.checkState(childCount  ==  3);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        3);        Preconditions.checkState(childCount    ==    3);    cc.addOp(   "?       ",    true);    Preconditions.checkState(childCount  ==  3);  cc.addOp( "?   ",  true);	  	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	115	None	add
87	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        3);        Preconditions.checkState(childCount    ==    3);    cc.addOp(   "?       ",    true);    cc.addOp( "?   ",  true);	  	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	115	None	add
88	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  cc.addOp(   "?     ",  true);  Preconditions.checkState(childCount  ==  3);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  cc.addOp(   "?     ",  true);  Preconditions.checkState(childCount  ==  3);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        3);        Preconditions.checkState(childCount    ==    3);    cc.addOp(   "?       ",    true);    Preconditions.checkState(childCount  ==  3);	  	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	115	None	add
89	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  cc.addOp(   "?     ",  true);  Preconditions.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  cc.addOp(   "?     ",  true);  Preconditions.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        3);        Preconditions.checkState(childCount    ==    3);    cc.addOp(   "?       ",    true);    Preconditions.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);	  	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	115	None	add
90	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  cc.addOp(   "?     ",  true);  Context.checkState(childCount  ==  3);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  cc.addOp(   "?     ",  true);  Context.checkState(childCount  ==  3);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        3);        Preconditions.checkState(childCount    ==    3);    cc.addOp(   "?       ",    true);    Context.checkState(childCount  ==  3);	  	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	115	None	add
91	[BUG]  [BUGGY]  n.removeChild(p);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.removeChild(p);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.removeChild(p);	          cc.addOp(       "?       ",    true);    cc.addOp(   "?       ",    true);    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	91	None	replace
92	[BUG]  [BUGGY]  n.addOp( "?   ",  false);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addOp( "?   ",  false);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addOp( "?   ",  false);	          cc.addOp(       "?       ",    true);    cc.addOp(   "?       ",    true);    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	91	None	replace
93	[BUG]  [BUGGY]  addExpr(first.getNext(),  2,  rhsContext);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(first.getNext(),  2,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(first.getNext(),  2,  rhsContext);	  addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	39	None	replace
94	[BUG]  [BUGGY]  addExpr(first.getNext(),  0,  rhsContext);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(first.getNext(),  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(first.getNext(),  0,  rhsContext);	  addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	39	None	replace
95	[BUG]  [BUGGY]  addExpr(first.getNext(),  1,  p);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(first.getNext(),  1,  p);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(first.getNext(),  1,  p);	  addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	39	None	replace
96	[BUG]  [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[?]  {  a:1  }  ;  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[?]  {  a:1  }  ;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	junit.framework.ComparisonFailure:  expected:  <  var  foo=x[?]  {  a:1  }  ;	  addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	39	None	replace
97	[BUG]  [BUGGY]  cc.addOp( "?   ",  true);  cc.addOp('?',  false);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]              ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp( "?   ",  true);  cc.addOp('?',  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( "?   ",  true);  cc.addOp('?',  false);	  cc.addOp(       "?       ",    false);    cc.addOp('?       ",    false);    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	140	None	replace
98	[BUG]  [BUGGY]  cc.addOp('?',  false);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp('?',  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp('?',  false);	  cc.addOp(       "?       ",    false);    cc.addOp('?       ",    false);    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	140	None	replace
99	[BUG]  [BUGGY]  Integer  p  =  NodeUtil.precedence(type);  addExpr(last,  p  +  1,  context);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]        IllegalStateException      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Integer  p  =  NodeUtil.precedence(type);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Integer  p  =  NodeUtil.precedence(type);  addExpr(last,  p  +  1,  context);	          Preconditions.checkState(childCount    ==    2);    Integer    p    =    NodeUtil.precedence(type);    addExpr(last,    p    +    1,    context);    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	186	None	replace
100	[BUG]  [BUGGY]  Context.checkState(childCount  ==  2);  Integer  p  =  NodeUtil.precedence(type);  addExpr(last,  p  +  1,  context);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]          IllegalStateException      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context.checkState(childCount  ==  2);  Integer  p  =  NodeUtil.precedence(type);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context.checkState(childCount  ==  2);  Integer  p  =  NodeUtil.precedence(type);  addExpr(last,  p  +  1,  context);	          Preconditions.checkState(childCount    ==    2);    Integer    p    =    NodeUtil.precedence(type);    addExpr(last,    p    +    1,    context);    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	186	None	replace
101	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  int  p  =  NodeUtil.precedence(type);  addExpr(last,  p  +  1,  context);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]            IllegalStateException      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  2);  int  p  =  NodeUtil.precedence(type);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount  ==  2);  int  p  =  NodeUtil.precedence(type);  addExpr(last,  p  +  1,  context);	          Preconditions.checkState(childCount    ==    2);    Integer    p    =    NodeUtil.precedence(type);    addExpr(last,    p    +    1,    context);    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	186	None	replace
102	[BUG]  [BUGGY]  Node  first  =  context.getFirstChild().getNext();  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                      ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Node  first  =  context.getFirstChild().getNext();  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Node  first  =  context.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	146	None	replace
103	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext()  +  1;  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                        ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Node  first  =  n.getFirstChild().getNext()  +  1;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Node  first  =  n.getFirstChild().getNext()  +  1;	  Node    first    =    n.getFirstChild().getNext();    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	146	None	replace
104	[BUG]  [BUGGY]  Node  first  =  n.getLastChild().getNext();  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                          ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Node  first  =  n.getLastChild().getNext();  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Node  first  =  n.getLastChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	146	None	replace
105	[BUG]  [BUGGY]  Node  first  =  node.getFirstChild().getNext();  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                            ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Node  first  =  node.getFirstChild().getNext();  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Node  first  =  node.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	146	None	replace
106	[BUG]  [BUGGY]  cc.addOp( ": ", "  false);  [CE]  unclosed  string  literal  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp( ": ", "  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( ": ", "  false);	  cc.addOp(   ":       ",    false);    	non-compiled	[CE]  unclosed  string  literal	2	None	replace
107	[BUG]  [BUGGY]  cc.addOp(     "?     ",    false);    cc.addOp(   "?     ",  false);  cc.addOp( "?   ",  false);  cc.addOp( "?   ",  false);  [CE]  unclosed  string  literal  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(     "?     ",    false);    cc.addOp(   "?     ",  false);  cc.addOp( "?   ",  false);  cc.addOp( "?   ",  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(       "?       ",        false);        cc.addOp(   "?       ",    false);    cc.addOp( "?   ",  false);  cc.addOp( "?   ",  false);	  	non-compiled	[CE]  unclosed  string  literal	134	None	add
108	[BUG]  [BUGGY]  cc.addOp(     "?     ",    false);    cc.addOp(   "?     ",  false);  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  false);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(     "?     ",    false);    cc.addOp(   "?     ",  false);  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(       "?       ",        false);        cc.addOp(   "?       ",    false);    cc.addOp( "?   ",  true);  cc.addOp( "?   ",  false);	  	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	134	None	add
109	[BUG]  [BUGGY]  cc.addOp(     "?     ",    false);    cc.addOp(   "?     ",  false);  cc.addOp( ",?   ",  false);  cc.addOp( "?   ",  false);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(     "?     ",    false);    cc.addOp(   "?     ",  false);  cc.addOp( ",?   ",  false);  cc.addOp( "?   ",  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(       "?       ",        false);        cc.addOp(   "?       ",    false);    cc.addOp( ",?   ",  false);  cc.addOp( "?   ",  false);	  	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	134	None	add
110	[BUG]  [BUGGY]  cc.addOp(     "?     ",    false);    cc.addOp(   "?     ",  false);  cc.addOp( ",  false);  cc.addOp( "?   ",  false);  [CE]  unclosed  string  literal  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(     "?     ",    false);    cc.addOp(   "?     ",  false);  cc.addOp( ",  false);  cc.addOp( "?   ",  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(       "?       ",        false);        cc.addOp(   "?       ",    false);    cc.addOp( ",  false);  cc.addOp( "?   ",  false);	  	non-compiled	[CE]  unclosed  string  literal	134	None	add
111	[BUG]  [BUGGY]  cc.addOp(     "?     ",    false);    cc.addOp(   "?     ",  false);  cc.addOp( "?   ",  false);  cc.addOp( "?   ",  true);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(     "?     ",    false);    cc.addOp(   "?     ",  false);  cc.addOp( "?   ",  false);  cc.addOp( "?   ",  true);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(       "?       ",        false);        cc.addOp(   "?       ",    false);    cc.addOp( "?   ",  false);  cc.addOp( "?   ",  true);	  	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	134	None	add
112	[BUG]  [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  {  a:3  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  {  a:3  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  {  a:3  }	          cc.addOp(       "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first,    2,    rhsContext);    	non-compiled	[CE]  not  a  statement	204	None	replace
113	[BUG]  [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalArgumentException( " ");	          cc.addOp(       "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first,    2,    rhsContext);    	non-compiled	[CE]  not  a  statement	204	None	replace
114	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]    IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount    ==    2);    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	182	None	add
115	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]      IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount    ==    2);    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);	  	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	182	None	add
116	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]        IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount    ==    2);    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);	  	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	182	None	add
117	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]          IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount    ==    2);    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);	  	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	182	None	add
118	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]            IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount    ==    2);    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	182	None	add
119	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]              IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount    ==    2);    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	182	None	add
120	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  3);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]    ComparisonFailure    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  3);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        3);        Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  3);	  	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	110	None	add
121	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  Context.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  3);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]      ComparisonFailure    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  Context.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  3);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        3);        Preconditions.checkState(childCount    ==    3);    Context.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  3);	  	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	110	None	add
122	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  3);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  3);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        3);        Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  3);	  	non-compiled	[CE]  illegal  start  of  expression	110	None	add
123	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  >=  3);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  >=  3);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        3);        Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  >=  3);	  	non-compiled	[CE]  illegal  start  of  expression	110	None	add
124	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  [CE]  illegal  start  of  expression  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   "?       ",    true);    cc.addOp( "?   ",  true);	  	non-compiled	[CE]  illegal  start  of  expression	156	None	add
125	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  [CE]  illegal  start  of  expression  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   "?       ",    true);    cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);	  	non-compiled	[CE]  illegal  start  of  expression	156	None	add
126	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  addExpr(first,  0,  rhsContext);  [CE]  illegal  start  of  expression  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  addExpr(first,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   "?       ",    true);    cc.addOp( "?   ",  true);  addExpr(first,  0,  rhsContext);	  	non-compiled	[CE]  illegal  start  of  expression	156	None	add
127	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [CE]  illegal  start  of  expression  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   "?       ",    true);    cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  illegal  start  of  expression	156	None	add
128	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  junit.framework.ComparisonFailure:  expected:  <  a:[]  {  a:1  }  :  {  a:3  }  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  junit.framework.ComparisonFailure:  expected:  <  a:[]  {  a:1  }  :  {  a:3  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   "?       ",    true);    junit.framework.ComparisonFailure:  expected:  <  a:[]  {  a:1  }  :  {  a:3  }	  	non-compiled	[CE]  not  a  statement	156	None	add
129	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  [CE]  illegal  start  of  expression  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   "?       ",    true);    cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);	  	non-compiled	[CE]  illegal  start  of  expression	156	None	add
130	[BUG]  [BUGGY]  Node  first  =  context.getNext();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Node  first  =  context.getNext();  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Node  first  =  context.getNext();	  Node    first    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
131	[BUG]  [BUGGY]  Node  first  =  n.getNext()  +  1;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Node  first  =  n.getNext()  +  1;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Node  first  =  n.getNext()  +  1;	  Node    first    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
132	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [CE]  illegal  start  of  expression  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
133	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [CE]  illegal  start  of  expression  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
134	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  [CE]  ';'  expected  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp( "?   ",  true);	  	non-compiled	[CE]  ';'  expected	70	None	add
135	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  a:[]  {  a:1  }  :  {  a:3  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  a:[]  {  a:1  }  :  {  a:3  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  a:[]  {  a:1  }  :  {  a:3  }	  	non-compiled	[CE]  not  a  statement	70	None	add
136	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:[]1  }  :  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:[]1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:[]1  }  :	  	non-compiled	[CE]  not  a  statement	70	None	add
137	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  a:[]  {  a:1  }  :  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  a:[]  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  a:[]  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	70	None	add
138	[BUG]  [BUGGY]  n.getNext();  [CE]  ';'  expected  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.getNext();  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.getNext();	          cc.addOp(       "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    true);    	non-compiled	[CE]  ';'  expected	178	None	replace
139	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");	  	non-compiled	[CE]  not  a  statement	14	None	add
140	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  addExpr(first,  1,  rhsContext);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  addExpr(first,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	14	None	add
141	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [CE]  ';'  expected  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  ';'  expected	14	None	add
142	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	14	None	add
143	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalStateException( " ");  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalStateException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalStateException( " ");	  	non-compiled	[CE]  not  a  statement	14	None	add
144	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  return;  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  return;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  return;	  	non-compiled	[CE]  not  a  statement	14	None	add
145	[BUG]  [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  },  true);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  },  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  },  true);	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	59	None	replace
146	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  ';'  expected  [FE]    IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);	          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount    ==    2);    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  ';'  expected	181	None	replace
147	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  ';'  expected  [FE]      IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  1);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount  ==  1);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);	          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount    ==    2);    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  ';'  expected	181	None	replace
148	[BUG]  [BUGGY]  Context.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  ';'  expected  [FE]        IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);	          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount    ==    2);    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  ';'  expected	181	None	replace
149	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(context,  type);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  int  p  =  NodeUtil.precedence(context,  type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	int  p  =  NodeUtil.precedence(context,  type);	  int    p    =    NodeUtil.precedence(type,    context);    	non-compiled	[CE]  ';'  expected	82	None	replace
150	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(n,  context);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  int  p  =  NodeUtil.precedence(n,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	int  p  =  NodeUtil.precedence(n,  context);	  int    p    =    NodeUtil.precedence(type,    context);    	non-compiled	[CE]  ';'  expected	82	None	replace
151	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type,  n);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  int  p  =  NodeUtil.precedence(type,  n);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	int  p  =  NodeUtil.precedence(type,  n);	  int    p    =    NodeUtil.precedence(type,    context);    	non-compiled	[CE]  ';'  expected	82	None	replace
152	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(n,  type);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  int  p  =  NodeUtil.precedence(n,  type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	int  p  =  NodeUtil.precedence(n,  type);	  int    p    =    NodeUtil.precedence(type,    context);    	non-compiled	[CE]  ';'  expected	82	None	replace
153	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type,  childCount);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  int  p  =  NodeUtil.precedence(type,  childCount);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	int  p  =  NodeUtil.precedence(type,  childCount);	  int    p    =    NodeUtil.precedence(childCount);    	non-compiled	[CE]  ';'  expected	83	None	replace
154	[BUG]  [BUGGY]  char  p  =  NodeUtil.precedence(childCount);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  char  p  =  NodeUtil.precedence(childCount);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	char  p  =  NodeUtil.precedence(childCount);	  int    p    =    NodeUtil.precedence(childCount);    	non-compiled	[CE]  ';'  expected	83	None	replace
155	[BUG]  [BUGGY]  cc.addOp(     ",     ",    true);    cc.addOp(   ",     ",  true);  cc.addOp( ",   ",  true);  cc.addOp( ",   ",  true);  [CE]  ';'  expected  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(     ",     ",    true);    cc.addOp(   ",     ",  true);  cc.addOp( ",   ",  true);  cc.addOp( ",   ",  true);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(       ",       ",        true);        cc.addOp(   ",       ",    true);    cc.addOp( ",   ",  true);  cc.addOp( ",   ",  true);	  	non-compiled	[CE]  ';'  expected	46	None	add
156	[BUG]  [BUGGY]  cc.addOp(     ",     ",    true);    cc.addOp(   ",     ",  true);  cc.addOp( ",  true);  cc.addOp( ",   ",  true);  [CE]  unclosed  string  literal  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(     ",     ",    true);    cc.addOp(   ",     ",  true);  cc.addOp( ",  true);  cc.addOp( ",   ",  true);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(       ",       ",        true);        cc.addOp(   ",       ",    true);    cc.addOp( ",  true);  cc.addOp( ",   ",  true);	  	non-compiled	[CE]  unclosed  string  literal	46	None	add
157	[BUG]  [BUGGY]  cc.addOp(     ",     ",    true);    cc.addOp(   ",     ",  true);  cc.addOp( "   ",  true);  cc.addOp( ",   ",  true);  [CE]  ';'  expected  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(     ",     ",    true);    cc.addOp(   ",     ",  true);  cc.addOp( "   ",  true);  cc.addOp( ",   ",  true);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(       ",       ",        true);        cc.addOp(   ",       ",    true);    cc.addOp( "   ",  true);  cc.addOp( ",   ",  true);	  	non-compiled	[CE]  ';'  expected	46	None	add
158	[BUG]  [BUGGY]  cc.addOp(     "?     ",    false);    cc.addOp(   ".?     ",  false);  cc.addOp( "?   ",  false);  cc.addOp( ".?   ",  false);  [CE]  ';'  expected  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(     "?     ",    false);    cc.addOp(   ".?     ",  false);  cc.addOp( "?   ",  false);  cc.addOp( ".?   ",  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(       "?       ",        false);        cc.addOp(   ".?       ",    false);    cc.addOp( "?   ",  false);  cc.addOp( ".?   ",  false);	  	non-compiled	[CE]  ';'  expected	136	None	add
159	[BUG]  [BUGGY]  cc.addOp(     "?     ",    false);    cc.addOp(   ".?     ",  false);  cc.addOp( ".?   ",  false);  cc.addOp( ".?   ",  false);  [CE]  ';'  expected  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(     "?     ",    false);    cc.addOp(   ".?     ",  false);  cc.addOp( ".?   ",  false);  cc.addOp( ".?   ",  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(       "?       ",        false);        cc.addOp(   ".?       ",    false);    cc.addOp( ".?   ",  false);  cc.addOp( ".?   ",  false);	  	non-compiled	[CE]  ';'  expected	136	None	add
160	[BUG]  [BUGGY]  cc.addOp(     "?     ",    false);    cc.addOp(   ".?     ",  false);  cc.addOp( ",?   ",  false);  cc.addOp( ".?   ",  false);  [CE]  ';'  expected  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(     "?     ",    false);    cc.addOp(   ".?     ",  false);  cc.addOp( ",?   ",  false);  cc.addOp( ".?   ",  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(       "?       ",        false);        cc.addOp(   ".?       ",    false);    cc.addOp( ",?   ",  false);  cc.addOp( ".?   ",  false);	  	non-compiled	[CE]  ';'  expected	136	None	add
161	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  context);  [CE]  ';'  expected  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,  p  +  1,  context);	  addExpr(last,    p    +    1,    rhsContext);    	non-compiled	[CE]  ';'  expected	133	None	replace
162	[BUG]  [BUGGY]  addExpr(first,  p  +  1,  rhsContext);  [CE]  ';'  expected  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(first,  p  +  1,  rhsContext);	  addExpr(last,    p    +    1,    rhsContext);    	non-compiled	[CE]  ';'  expected	133	None	replace
163	[BUG]  [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[?]  {  a:1  }  :  addExpr(last,  p  +  1,  context);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[?]  {  a:1  }  :  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	junit.framework.ComparisonFailure:  expected:  <  var  foo=x[?]  {  a:1  }  :  addExpr(last,  p  +  1,  context);	  addExpr(last,    p    +    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	133	None	replace
164	[BUG]  [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[?]  {  a:1  }  :  addExpr(last,  p  +  1,  rhsContext);  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[?]  {  a:1  }  :  addExpr(last,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	junit.framework.ComparisonFailure:  expected:  <  var  foo=x[?]  {  a:1  }  :  addExpr(last,  p  +  1,  rhsContext);	  addExpr(last,    p    +    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	133	None	replace
165	[BUG]  [BUGGY]  Context  cc  =  getCurrentStatementContext(n);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  cc  =  getCurrentStatementContext(n);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentStatementContext(n);	  Context    cc    =    getCurrentStatementContext();    	non-compiled	[CE]  ';'  expected	158	None	replace
166	[BUG]  [BUGGY]  Context  cc  =  getCurrentStatementContext().getCurrentStatementContext();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  cc  =  getCurrentStatementContext().getCurrentStatementContext();  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentStatementContext().getCurrentStatementContext();	  Context    cc    =    getCurrentStatementContext();    	non-compiled	[CE]  ';'  expected	158	None	replace
167	[BUG]  [BUGGY]  Context  cc  =  createCurrentStatementContext();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  cc  =  createCurrentStatementContext();  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  createCurrentStatementContext();	  Context    cc    =    getCurrentStatementContext();    	non-compiled	[CE]  ';'  expected	158	None	replace
168	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");	  	non-compiled	[CE]  not  a  statement	16	None	add
169	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ": ",  true);  [CE]  ';'  expected  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ": ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp( ": ",  true);	  	non-compiled	[CE]  ';'  expected	16	None	add
170	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  ';'  expected  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);	  	non-compiled	[CE]  ';'  expected	16	None	add
171	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ": ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  ';'  expected  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ": ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp( ": ",  true);  addExpr(first.getNext(),  1,  rhsContext);	  	non-compiled	[CE]  ';'  expected	16	None	add
172	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  addExpr(first,  1,  rhsContext);  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  addExpr(first,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	16	None	add
173	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	16	None	add
174	[BUG]  [BUGGY]  Node  first  =  context.getLastChild();  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Node  first  =  context.getLastChild();  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Node  first  =  context.getLastChild();	  Node    first    =    context.getFirstChild();    	non-compiled	[CE]  not  a  statement	7	None	replace
175	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3);  Context.checkState(childCount  ==  2);  [CE]  not  a  statement  [FE]          IllegalStateException      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  3);  Context.checkState(childCount  ==  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount  ==  3);  Context.checkState(childCount  ==  2);	          Preconditions.checkState(childCount    ==    2);    Context.checkState(childCount    ==    2);    	non-compiled	[CE]  not  a  statement	127	None	replace
176	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  Context.checkState(childCount  ==  2);  [CE]  not  a  statement  [FE]            IllegalStateException      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  1);  Context.checkState(childCount  ==  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount  ==  1);  Context.checkState(childCount  ==  2);	          Preconditions.checkState(childCount    ==    2);    Context.checkState(childCount    ==    2);    	non-compiled	[CE]  not  a  statement	127	None	replace
177	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2  -  childCount);  Context.checkState(childCount  ==  2);  [CE]  not  a  statement  [FE]              IllegalStateException      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  2  -  childCount);  Context.checkState(childCount  ==  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount  ==  2  -  childCount);  Context.checkState(childCount  ==  2);	          Preconditions.checkState(childCount    ==    2);    Context.checkState(childCount    ==    2);    	non-compiled	[CE]  not  a  statement	127	None	replace
178	[BUG]  [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[?]  {  a:1  }  :  addExpr(first,  1,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[?]  {  a:1  }  :  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	junit.framework.ComparisonFailure:  expected:  <  var  foo=x[?]  {  a:1  }  :  addExpr(first,  1,  rhsContext);	  addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	99	None	replace
179	[BUG]  [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[?]  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[?]  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	junit.framework.ComparisonFailure:  expected:  <  var  foo=x[?]  {  a:1  }  :  throw  new  IllegalArgumentException( " ");	  addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	99	None	replace
180	[BUG]  [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[?]  {  a:1  }  :  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[?]  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	junit.framework.ComparisonFailure:  expected:  <  var  foo=x[?]  {  a:1  }  :	  addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	99	None	replace
181	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  2);  [CE]  not  a  statement  [FE]    IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  2);	  	non-compiled	[CE]  not  a  statement	125	None	add
182	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  Context.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  2);  [CE]  not  a  statement  [FE]      IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  Context.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount    ==    2);    Context.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  2);	  	non-compiled	[CE]  not  a  statement	125	None	add
183	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  2);  [CE]  not  a  statement  [FE]        IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount    ==    2);    int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  2);	  	non-compiled	[CE]  not  a  statement	125	None	add
184	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  2);  [CE]  not  a  statement  [FE]          IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  2);	  	non-compiled	[CE]  not  a  statement	125	None	add
185	[BUG]  [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  addExpr(last,  3,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  addExpr(last,  3,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  addExpr(last,  3,  rhsContext);	  addExpr(last,    3,    rhsContext);    	non-compiled	[CE]  not  a  statement	155	None	replace
186	[BUG]  [BUGGY]  addExpr(first,  3,  rhsContext);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(first,  3,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(first,  3,  rhsContext);	  addExpr(last,    3,    rhsContext);    	non-compiled	[CE]  not  a  statement	155	None	replace
187	[BUG]  [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  addExpr(last,  1,  rhsContext);	  addExpr(last,    3,    rhsContext);    	non-compiled	[CE]  not  a  statement	155	None	replace
188	[BUG]  [BUGGY]  addExpr(first,  1,  rhsContext);  addExpr(first,  1,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(first,  1,  rhsContext);  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(first,    1,    rhsContext);    addExpr(first,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	98	None	add
189	[BUG]  [BUGGY]  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(first,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	98	None	add
190	[BUG]  [BUGGY]  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(first,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalArgumentException( " ");	  	non-compiled	[CE]  not  a  statement	98	None	add
191	[BUG]  [BUGGY]  addExpr(first,  1,  rhsContext);  if(childCount  ==  1)  {  addExpr(first,  1,  rhsContext);  }  else  {  addExpr(first,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(first,  1,  rhsContext);  if(childCount  ==  1)  {  addExpr(first,  1,  rhsContext);  }  else  {  addExpr(first,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(first,    1,    rhsContext);    if(childCount  ==  1)  {  addExpr(first,  1,  rhsContext);  }  else  {  addExpr(first,  1,  rhsContext);  }	  	non-compiled	[CE]  not  a  statement	98	None	add
192	[BUG]  [BUGGY]  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  return;  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  return;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(first,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  return;	  	non-compiled	[CE]  not  a  statement	98	None	add
193	[BUG]  [BUGGY]  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalStateException( " ");  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalStateException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(first,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalStateException( " ");	  	non-compiled	[CE]  not  a  statement	98	None	add
194	[BUG]  [BUGGY]  Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  2);  [CE]  not  a  statement  [FE]        IllegalStateException      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  2);	          Preconditions.checkState(childCount    ==    2);    Integer    p    =    NodeUtil.precedence(type);    Preconditions.checkState(childCount    ==    2);    	non-compiled	[CE]  not  a  statement	179	None	replace
195	[BUG]  [BUGGY]  int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  2);  [CE]  not  a  statement  [FE]          IllegalStateException      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  2);	          Preconditions.checkState(childCount    ==    2);    Integer    p    =    NodeUtil.precedence(type);    Preconditions.checkState(childCount    ==    2);    	non-compiled	[CE]  not  a  statement	179	None	replace
196	[BUG]  [BUGGY]  n.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	          cc.addOp(       "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp('?',    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	69	None	replace
197	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	122	None	replace
198	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(first,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(first,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(first,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	122	None	replace
199	[BUG]  [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  a:[]  {  foo=x?[]  {  a:1  }  :  {  a:3  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  a:[]  {  foo=x?[]  {  a:1  }  :  {  a:3  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	junit.framework.ComparisonFailure:  expected:  <  a:[]  {  foo=x?[]  {  a:1  }  :  {  a:3  }	          cc.addOp(       "?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	122	None	replace
200	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	122	None	replace
201	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first.getNext(),        1,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	62	None	add
202	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first.getNext(),        1,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp( "?   ",  true);	  	non-compiled	[CE]  not  a  statement	62	None	add
203	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first.getNext(),        1,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	62	None	add
204	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first.getNext(),        1,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalArgumentException( " ");	  	non-compiled	[CE]  not  a  statement	62	None	add
205	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first.getNext(),        1,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	62	None	add
206	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalStateException( " ");  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalStateException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first.getNext(),        1,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalStateException( " ");	  	non-compiled	[CE]  not  a  statement	62	None	add
207	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  2,  rhsContext);  addExpr(last,  1,  rhsContext);  addExpr(last,  2,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  2,  rhsContext);  addExpr(last,  1,  rhsContext);  addExpr(last,  2,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        addExpr(last,    2,    rhsContext);    addExpr(last,  1,  rhsContext);  addExpr(last,  2,  rhsContext);	  	non-compiled	[CE]  not  a  statement	167	None	add
208	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  2,  rhsContext);  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  2,  rhsContext);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        addExpr(last,    2,    rhsContext);    addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	167	None	add
209	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        addExpr(last,    2,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");	  	non-compiled	[CE]  not  a  statement	167	None	add
210	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  2,  rhsContext);  addExpr(first,  1,  rhsContext);  addExpr(last,  2,  rhsContext);  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  2,  rhsContext);  addExpr(first,  1,  rhsContext);  addExpr(last,  2,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        addExpr(last,    2,    rhsContext);    addExpr(first,  1,  rhsContext);  addExpr(last,  2,  rhsContext);	  	non-compiled	[CE]  not  a  statement	167	None	add
211	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        addExpr(last,    2,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	167	None	add
212	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  addExpr(first,  1,  rhsContext);  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        addExpr(last,    2,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  addExpr(first,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	167	None	add
213	[BUG]  [BUGGY]  n.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ": ",  true);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ": ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ": ",  true);	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?       ",    true);    	non-compiled	[CE]  not  a  statement	174	None	replace
214	[BUG]  [BUGGY]  n.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?       ",    true);    	non-compiled	[CE]  not  a  statement	174	None	replace
215	[BUG]  [BUGGY]  n.addOp( "?   ",  true);  first.getNext(),  1,  rhsContext);  cc.addOp( ": ",  true);  [CE]  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addOp( "?   ",  true);  first.getNext(),  1,  rhsContext);  cc.addOp( ": ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addOp( "?   ",  true);  first.getNext(),  1,  rhsContext);  cc.addOp( ": ",  true);	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?       ",    true);    	non-compiled	[CE]  	174	None	replace
216	[BUG]  [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  a:[]  {  foo=x?[]  {  a:3  }  ;  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  a:[]  {  foo=x?[]  {  a:3  }  ;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	junit.framework.ComparisonFailure:  expected:  <  a:[]  {  foo=x?[]  {  a:3  }  ;	          cc.addOp(       "?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?       ",    false);    addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	124	None	replace
217	[BUG]  [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  {  a:3  ==  junit.framework.ComparisonFailure  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  {  a:3  ==  junit.framework.ComparisonFailure  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  {  a:3  ==  junit.framework.ComparisonFailure	          cc.addOp(       "?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?       ",    false);    addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	124	None	replace
218	[BUG]  [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  a:[]  {  foo=x?[]  {  a:1  }  ;  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  a:[]  {  foo=x?[]  {  a:1  }  ;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	junit.framework.ComparisonFailure:  expected:  <  a:[]  {  foo=x?[]  {  a:1  }  ;	          cc.addOp(       "?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?       ",    false);    addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	124	None	replace
219	[BUG]  [BUGGY]  Integer  childCount  =  NodeUtil.precedence(type);  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Integer  childCount  =  NodeUtil.precedence(type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Integer  childCount  =  NodeUtil.precedence(type);	          Preconditions.checkState(childCount    ==    3);    int    childCount    =    NodeUtil.precedence(type);    	non-compiled	[CE]  not  a  statement	114	None	replace
220	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  int  childCount  =  NodeUtil.precedence(type);  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  1);  int  childCount  =  NodeUtil.precedence(type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount  ==  1);  int  childCount  =  NodeUtil.precedence(type);	          Preconditions.checkState(childCount    ==    3);    int    childCount    =    NodeUtil.precedence(type);    	non-compiled	[CE]  not  a  statement	114	None	replace
221	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3);  int  childCount  =  NodeUtil.precedence(type,  rhsContext);  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  3);  int  childCount  =  NodeUtil.precedence(type,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount  ==  3);  int  childCount  =  NodeUtil.precedence(type,  rhsContext);	          Preconditions.checkState(childCount    ==    3);    int    childCount    =    NodeUtil.precedence(type);    	non-compiled	[CE]  not  a  statement	114	None	replace
222	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  [CE]  not  a  statement  [FE]    IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount    ==    2);    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);	  	non-compiled	[CE]  not  a  statement	180	None	add
223	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  not  a  statement  [FE]      IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount    ==    2);    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	180	None	add
224	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  not  a  statement  [FE]        IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount    ==    2);    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);  addExpr(first.getNext(),  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	180	None	add
225	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ": ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  not  a  statement  [FE]          IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ": ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount    ==    2);    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp( ": ",  true);  addExpr(first.getNext(),  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	180	None	add
226	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  not  a  statement  [FE]            IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount    ==    2);    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	180	None	add
227	[BUG]  [BUGGY]  addExpr(first,  1,  rhsContext);  break;  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(first,  1,  rhsContext);  break;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(first,  1,  rhsContext);  break;	  cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    break;    	non-compiled	[CE]  not  a  statement	89	None	replace
228	[BUG]  [BUGGY]  cc.addOp( ": ",  true);  addExpr(first,  1,  rhsContext);  break;  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp( ": ",  true);  addExpr(first,  1,  rhsContext);  break;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( ": ",  true);  addExpr(first,  1,  rhsContext);  break;	  cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    break;    	non-compiled	[CE]  not  a  statement	89	None	replace
229	[BUG]  [BUGGY]  Preconditions.checkState(childCount  >=  2);  [CE]  not  a  statement  [FE]    IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  >=  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount  >=  2);	          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount    >=    2);    	non-compiled	[CE]  not  a  statement	129	None	replace
230	[BUG]  [BUGGY]  n.addOp( "?   ",  true);  n.getNext(),  1,  rhsContext);  [CE]  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:1}[]:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addOp( "?   ",  true);  n.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addOp( "?   ",  true);  n.getNext(),  1,  rhsContext);	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  	60	None	replace
231	[BUG]  [BUGGY]  cc.addOp( "?   ",  true);  cc.addOp( ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  unclosed  string  literal  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:1}[]:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp( "?   ",  true);  cc.addOp( ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( "?   ",  true);  cc.addOp( ",  true);  addExpr(first.getNext(),  1,  rhsContext);	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  unclosed  string  literal	60	None	replace
232	[BUG]  [BUGGY]  n.addOp( "?   ",  true);  n.addOp( ".?   ",  true);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addOp( "?   ",  true);  n.addOp( ".?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addOp( "?   ",  true);  n.addOp( ".?   ",  true);	          cc.addOp(       "?       ",    true);    cc.addOp(   ".?       ",    true);    	non-compiled	[CE]  not  a  statement	93	None	replace
233	[BUG]  [BUGGY]  n.addOp( "?   ",  false);  n.addOp( ".?   ",  true);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addOp( "?   ",  false);  n.addOp( ".?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addOp( "?   ",  false);  n.addOp( ".?   ",  true);	          cc.addOp(       "?       ",    true);    cc.addOp(   ".?       ",    true);    	non-compiled	[CE]  not  a  statement	93	None	replace
234	[BUG]  [BUGGY]  n.addOp( "?   ",  false);  n.addOp( ".?   ",  false);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addOp( "?   ",  false);  n.addOp( ".?   ",  false);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addOp( "?   ",  false);  n.addOp( ".?   ",  false);	          cc.addOp(       "?       ",    true);    cc.addOp(   ".?       ",    true);    	non-compiled	[CE]  not  a  statement	93	None	replace
235	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   ".?     ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   ".?     ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   ".?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp( "?   ",  true);	  	non-compiled	[CE]  not  a  statement	198	None	add
236	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   ".?     ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   ".?     ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   ".?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);	  	non-compiled	[CE]  not  a  statement	198	None	add
237	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   ".?     ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  0,  rhsContext);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   ".?     ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   ".?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first,  0,  rhsContext);	  	non-compiled	[CE]  not  a  statement	198	None	add
238	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   ".?     ",  true);  addExpr(last,  0,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  a:[]  {  a:1  }  :  {  a:3  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   ".?     ",  true);  addExpr(last,  0,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  a:[]  {  a:1  }  :  {  a:3  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   ".?       ",    true);    addExpr(last,    0,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  a:[]  {  a:1  }  :  {  a:3  }	  	non-compiled	[CE]  not  a  statement	198	None	add
239	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   ".?     ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   ".?     ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   ".?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	198	None	add
240	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   ".?     ",  true);  addExpr(last,  0,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:[]1  }  :  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   ".?     ",  true);  addExpr(last,  0,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:[]1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   ".?       ",    true);    addExpr(last,    0,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:[]1  }  :	  	non-compiled	[CE]  not  a  statement	198	None	add
241	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  4);  Preconditions.checkState(childCount  ==  4);  [CE]  not  a  statement  [FE]    IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  4);  Preconditions.checkState(childCount  ==  4);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount    ==    4);    Preconditions.checkState(childCount  ==  4);	  	non-compiled	[CE]  not  a  statement	56	None	add
242	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  4);  Context.checkState(childCount  ==  4);  [CE]  not  a  statement  [FE]      IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  4);  Context.checkState(childCount  ==  4);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount    ==    4);    Context.checkState(childCount  ==  4);	  	non-compiled	[CE]  not  a  statement	56	None	add
243	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  4);  Preconditions.checkState(childCount  >=  4);  [CE]  not  a  statement  [FE]        IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  4);  Preconditions.checkState(childCount  >=  4);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount    ==    4);    Preconditions.checkState(childCount  >=  4);	  	non-compiled	[CE]  not  a  statement	56	None	add
244	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  4);  Preconditions.checkState(childCount!=  4);  [CE]  not  a  statement  [FE]          IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  4);  Preconditions.checkState(childCount!=  4);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount    ==    4);    Preconditions.checkState(childCount!=  4);	  	non-compiled	[CE]  not  a  statement	56	None	add
245	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  4);  Preconditions.checkState(childCount  >>  4);  [CE]  not  a  statement  [FE]            IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  4);  Preconditions.checkState(childCount  >>  4);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount    ==    4);    Preconditions.checkState(childCount  >>  4);	  	non-compiled	[CE]  not  a  statement	56	None	add
246	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(rhsContext)&&  NodeUtil.isExpressionNode(rhsContext))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isExpressionNode(rhsContext)&&  NodeUtil.isExpressionNode(rhsContext))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isExpressionNode(rhsContext)&&  NodeUtil.isExpressionNode(rhsContext))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }	  if(NodeUtil.isExpressionNode(rhsContext))    {    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    break;    }    	non-compiled	[CE]  not  a  statement	195	None	replace
247	[BUG]  [BUGGY]  Context.checkState(childCount  ==  3);  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context.checkState(childCount  ==  3);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context.checkState(childCount  ==  3);	          Preconditions.checkState(childCount    ==    3);    Context.checkState(childCount    ==    3);    	non-compiled	[CE]  not  a  statement	113	None	replace
248	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  Context.checkState(childCount  ==  3);  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  1);  Context.checkState(childCount  ==  3);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount  ==  1);  Context.checkState(childCount  ==  3);	          Preconditions.checkState(childCount    ==    3);    Context.checkState(childCount    ==    3);    	non-compiled	[CE]  not  a  statement	113	None	replace
249	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  Context.checkState(childCount  ==  3);  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  2);  Context.checkState(childCount  ==  3);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount  ==  2);  Context.checkState(childCount  ==  3);	          Preconditions.checkState(childCount    ==    3);    Context.checkState(childCount    ==    3);    	non-compiled	[CE]  not  a  statement	113	None	replace
250	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3);  Context.checkState(p  ==  3);  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  3);  Context.checkState(p  ==  3);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount  ==  3);  Context.checkState(p  ==  3);	          Preconditions.checkState(childCount    ==    3);    Context.checkState(childCount    ==    3);    	non-compiled	[CE]  not  a  statement	113	None	replace
251	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp( "?   ",  true);	  	non-compiled	[CE]  not  a  statement	117	None	add
252	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);	  	non-compiled	[CE]  not  a  statement	117	None	add
253	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  0,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  a:[]  {  a:1  }  :  {  a:3  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  0,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  a:[]  {  a:1  }  :  {  a:3  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  a:[]  {  a:1  }  :  {  a:3  }	  	non-compiled	[CE]  not  a  statement	117	None	add
254	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  0,  rhsContext);  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first,  0,  rhsContext);	  	non-compiled	[CE]  not  a  statement	117	None	add
255	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  0,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:[]1  }  :  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  0,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:[]1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:[]1  }  :	  	non-compiled	[CE]  not  a  statement	117	None	add
256	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	117	None	add
257	[BUG]  [BUGGY]  n.addChildToBack(first);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addChildToBack(first);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addChildToBack(first);	  cc.addOp(   "?       ",    false);    addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	101	None	replace
258	[BUG]  [BUGGY]  cc.addOp(     "?     ",    false);    cc.addOp(   ",?     ",  false);  cc.addOp( "?   ",  false);  cc.addOp( ",?   ",  false);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(     "?     ",    false);    cc.addOp(   ",?     ",  false);  cc.addOp( "?   ",  false);  cc.addOp( ",?   ",  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(       "?       ",        false);        cc.addOp(   ",?       ",    false);    cc.addOp( "?   ",  false);  cc.addOp( ",?   ",  false);	  	non-compiled	[CE]  not  a  statement	138	None	add
259	[BUG]  [BUGGY]  cc.addOp(     "?     ",    false);    cc.addOp(   ",?     ",  false);  cc.addOp( ",?   ",  false);  cc.addOp( ",?   ",  false);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(     "?     ",    false);    cc.addOp(   ",?     ",  false);  cc.addOp( ",?   ",  false);  cc.addOp( ",?   ",  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(       "?       ",        false);        cc.addOp(   ",?       ",    false);    cc.addOp( ",?   ",  false);  cc.addOp( ",?   ",  false);	  	non-compiled	[CE]  not  a  statement	138	None	add
260	[BUG]  [BUGGY]  cc.addOp(     "?     ",    false);    cc.addOp(   ",?     ",  false);  cc.addOp( ".?   ",  false);  cc.addOp( ",?   ",  false);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(     "?     ",    false);    cc.addOp(   ",?     ",  false);  cc.addOp( ".?   ",  false);  cc.addOp( ",?   ",  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(       "?       ",        false);        cc.addOp(   ",?       ",    false);    cc.addOp( ".?   ",  false);  cc.addOp( ",?   ",  false);	  	non-compiled	[CE]  not  a  statement	138	None	add
261	[BUG]  [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ":   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp( ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	42	None	add
262	[BUG]  [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ": ".,  true);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  <identifier>  expected  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ": ".,  true);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ":   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp( ": ".,  true);  addExpr(first.getNext(),  1,  rhsContext);	  	non-compiled	[CE]  <identifier>  expected	42	None	add
263	[BUG]  [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  unclosed  string  literal  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ":   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp( ",  true);  addExpr(first.getNext(),  1,  rhsContext);	  	non-compiled	[CE]  unclosed  string  literal	42	None	add
264	[BUG]  [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ":   ",  true);  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ":   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ":   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp( ":   ",  true);	  	non-compiled	[CE]  not  a  statement	42	None	add
265	[BUG]  [BUGGY]  cc.addOp( ": ",  false);  addExpr(last,  1,  rhsContext);  break;  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp( ": ",  false);  addExpr(last,  1,  rhsContext);  break;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( ": ",  false);  addExpr(last,  1,  rhsContext);  break;	  cc.addOp(   ":   ",    true);    addExpr(last,    1,    rhsContext);    break;    	non-compiled	[CE]  not  a  statement	88	None	replace
266	[BUG]  [BUGGY]  n.removeChild(context);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.removeChild(context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.removeChild(context);	  cc.addOp(   "?       ",    false);    addExpr(first,    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	172	None	replace
267	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(last,    2,    rhsContext);    	non-compiled	[CE]  not  a  statement	176	None	replace
268	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(last,    2,    rhsContext);    	non-compiled	[CE]  not  a  statement	176	None	replace
269	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  2,  rhsContext);  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  2,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  2,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(last,    2,    rhsContext);    	non-compiled	[CE]  not  a  statement	176	None	replace
270	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	76	None	add
271	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  addExpr(first,  1,  rhsContext);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  addExpr(first,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	76	None	add
272	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalArgumentException( " ");	  	non-compiled	[CE]  not  a  statement	76	None	add
273	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	76	None	add
274	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  return;  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  return;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  return;	  	non-compiled	[CE]  not  a  statement	76	None	add
275	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalStateException( " ");  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalStateException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalStateException( " ");	  	non-compiled	[CE]  not  a  statement	76	None	add
276	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  cc.addOp( "?   ",  true);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  1);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount  ==  1);  cc.addOp( "?   ",  true);	          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount    ==    3);    cc.addOp(   "?       ",    true);    	non-compiled	[CE]  not  a  statement	116	None	replace
277	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3);  cc.addOp( "?   ",  true);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  3);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount  ==  3);  cc.addOp( "?   ",  true);	          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount    ==    3);    cc.addOp(   "?       ",    true);    	non-compiled	[CE]  not  a  statement	116	None	replace
278	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);	          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount    ==    3);    cc.addOp(   "?       ",    true);    	non-compiled	[CE]  not  a  statement	116	None	replace
279	[BUG]  [BUGGY]  Context.checkState(childCount  ==  3);  cc.addOp( "?   ",  true);  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context.checkState(childCount  ==  3);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context.checkState(childCount  ==  3);  cc.addOp( "?   ",  true);	          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount    ==    3);    cc.addOp(   "?       ",    true);    	non-compiled	[CE]  not  a  statement	116	None	replace
280	[BUG]  [BUGGY]  n.addOp( ": ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addOp( ": ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addOp( ": ",  true);  addExpr(first.getNext(),  1,  rhsContext);	  cc.addOp(   ":   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	43	None	replace
281	[BUG]  [BUGGY]  n.addOp( ": ",  true);  addExpr(last.getNext(),  1,  rhsContext);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addOp( ": ",  true);  addExpr(last.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addOp( ": ",  true);  addExpr(last.getNext(),  1,  rhsContext);	  cc.addOp(   ":   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	43	None	replace
282	[BUG]  [BUGGY]  addExpr(last,  3,  rhsContext);  addExpr(last,  3,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  3,  rhsContext);  addExpr(last,  3,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    3,    rhsContext);    addExpr(last,  3,  rhsContext);	  	non-compiled	[CE]  not  a  statement	154	None	add
283	[BUG]  [BUGGY]  addExpr(last,  3,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  3,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    3,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");	  	non-compiled	[CE]  not  a  statement	154	None	add
284	[BUG]  [BUGGY]  addExpr(last,  3,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  addExpr(last,  3,  rhsContext);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  3,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  addExpr(last,  3,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    3,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  addExpr(last,  3,  rhsContext);	  	non-compiled	[CE]  not  a  statement	154	None	add
285	[BUG]  [BUGGY]  addExpr(last,  3,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  3,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    3,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	154	None	add
286	[BUG]  [BUGGY]  addExpr(last,  3,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalStateException( " ");  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  3,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalStateException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    3,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalStateException( " ");	  	non-compiled	[CE]  not  a  statement	154	None	add
287	[BUG]  [BUGGY]  addExpr(last,  3,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  addExpr(first,  3,  rhsContext);  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  3,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  addExpr(first,  3,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    3,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  addExpr(first,  3,  rhsContext);	  	non-compiled	[CE]  not  a  statement	154	None	add
288	[BUG]  [BUGGY]  n.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);	  cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	41	None	replace
289	[BUG]  [BUGGY]  n.addOp( "?   ",  false);  addExpr(last.getNext(),  1,  rhsContext);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addOp( "?   ",  false);  addExpr(last.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addOp( "?   ",  false);  addExpr(last.getNext(),  1,  rhsContext);	  cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	41	None	replace
290	[BUG]  [BUGGY]  n.addOp( "?   ",  false);  addExpr(first.getNext(),  0,  rhsContext);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addOp( "?   ",  false);  addExpr(first.getNext(),  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addOp( "?   ",  false);  addExpr(first.getNext(),  0,  rhsContext);	  cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	41	None	replace
291	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isExpressionNode(n))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isExpressionNode(n))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isExpressionNode(n))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }	  if(NodeUtil.isExpressionNode(n))    {    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    break;    }    	non-compiled	[CE]  not  a  statement	145	None	replace
292	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isExpressionNode(rhsContext))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isExpressionNode(rhsContext))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isExpressionNode(rhsContext))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }	  if(NodeUtil.isExpressionNode(n))    {    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    break;    }    	non-compiled	[CE]  not  a  statement	145	None	replace
293	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]    IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount    ==    2);    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	183	None	replace
294	[BUG]  [BUGGY]  Context.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]      IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount    ==    2);    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	183	None	replace
295	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  >=  2);  Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  >=  2);  [CE]  not  a  statement  [FE]    IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  >=  2);  Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  >=  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount    >=    2);    Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  >=  2);	  	non-compiled	[CE]  not  a  statement	128	None	add
296	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  >=  2);  Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  >>  2);  [CE]  not  a  statement  [FE]      IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  >=  2);  Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  >>  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount    >=    2);    Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  >>  2);	  	non-compiled	[CE]  not  a  statement	128	None	add
297	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  >=  2);  Context.checkState(childCount  ==  2);  Preconditions.checkState(childCount  >=  2);  [CE]  not  a  statement  [FE]        IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  >=  2);  Context.checkState(childCount  ==  2);  Preconditions.checkState(childCount  >=  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount    >=    2);    Context.checkState(childCount  ==  2);  Preconditions.checkState(childCount  >=  2);	  	non-compiled	[CE]  not  a  statement	128	None	add
298	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  >=  2);  Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount!=  2);  [CE]  not  a  statement  [FE]          IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  >=  2);  Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount!=  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount    >=    2);    Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount!=  2);	  	non-compiled	[CE]  not  a  statement	128	None	add
299	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  >=  2);  Context.checkState(childCount  ==  2);  Preconditions.checkState(childCount  >>  2);  [CE]  not  a  statement  [FE]            IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  >=  2);  Context.checkState(childCount  ==  2);  Preconditions.checkState(childCount  >>  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount    >=    2);    Context.checkState(childCount  ==  2);  Preconditions.checkState(childCount  >>  2);	  	non-compiled	[CE]  not  a  statement	128	None	add
300	[BUG]  [BUGGY]  Node  first  =  rhsContext.getLastChild();  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Node  first  =  rhsContext.getLastChild();  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Node  first  =  rhsContext.getLastChild();	  Node    first    =    rhsContext.getFirstChild();    	non-compiled	[CE]  not  a  statement	8	None	replace
301	[BUG]  [BUGGY]  Node  first  =  p.getFirstChild();  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Node  first  =  p.getFirstChild();  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Node  first  =  p.getFirstChild();	  Node    first    =    rhsContext.getFirstChild();    	non-compiled	[CE]  not  a  statement	8	None	replace
302	[BUG]  [BUGGY]  addExpr(last,  0,  rhsContext);  addExpr(last,  0,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  0,  rhsContext);  addExpr(last,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    0,    rhsContext);    addExpr(last,  0,  rhsContext);	  	non-compiled	[CE]  not  a  statement	32	None	add
303	[BUG]  [BUGGY]  addExpr(last,  0,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:[]1  }  :  throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  0,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:[]1  }  :  throw  new  IllegalArgumentException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    0,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:[]1  }  :  throw  new  IllegalArgumentException( " ");	  	non-compiled	[CE]  not  a  statement	32	None	add
304	[BUG]  [BUGGY]  addExpr(last,  0,  rhsContext);  if(childCount  ==  1)  {  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(first,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  0,  rhsContext);  if(childCount  ==  1)  {  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(first,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    0,    rhsContext);    if(childCount  ==  1)  {  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(first,  1,  rhsContext);  }	  	non-compiled	[CE]  not  a  statement	32	None	add
305	[BUG]  [BUGGY]  addExpr(last,  0,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  a:[]1;  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  0,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  a:[]1;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    0,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  a:[]1;	  	non-compiled	[CE]  not  a  statement	32	None	add
306	[BUG]  [BUGGY]  addExpr(last,  0,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:[]1  }  :  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  0,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:[]1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    0,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:[]1  }  :	  	non-compiled	[CE]  not  a  statement	32	None	add
307	[BUG]  [BUGGY]  addExpr(last,  0,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  a:[]1  }  :  {  a:3  }  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  0,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  a:[]1  }  :  {  a:3  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    0,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  a:[]1  }  :  {  a:3  }	  	non-compiled	[CE]  not  a  statement	32	None	add
308	[BUG]  [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");	          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	19	None	replace
309	[BUG]  [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalStateException( " ");  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalStateException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalStateException( " ");	          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	19	None	replace
310	[BUG]  [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :	          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	19	None	replace
311	[BUG]  [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  return;  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  return;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  return;	          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	19	None	replace
312	[BUG]  [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  true;  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  true;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  true;	          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	19	None	replace
313	[BUG]  [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  {  a:3  [Delete]  junit.framework.ComparisonFailure  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  {  a:3  [Delete]  junit.framework.ComparisonFailure  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  {  a:3  [Delete]  junit.framework.ComparisonFailure	          cc.addOp(       "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	71	None	replace
314	[BUG]  [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  {  a:3!=  junit.framework.ComparisonFailure  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  {  a:3!=  junit.framework.ComparisonFailure  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  {  a:3!=  junit.framework.ComparisonFailure	          cc.addOp(       "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	71	None	replace
315	[BUG]  [BUGGY]  Context  rhsContext  =  Context.OTHER;  Preconditions.checkState(childCount  ==  3);  [CE]  not  a  statement  [FE]        ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  rhsContext  =  Context.OTHER;  Preconditions.checkState(childCount  ==  3);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  rhsContext  =  Context.OTHER;  Preconditions.checkState(childCount  ==  3);	          Preconditions.checkState(childCount    ==    3);    Context    rhsContext    =    Context.OTHER;    Preconditions.checkState(childCount    ==    3);    	non-compiled	[CE]  not  a  statement	164	None	replace
316	[BUG]  [BUGGY]  Context  rhsContext  =  Context.OTHER;  Preconditions.checkState(childCount!=  3);  [CE]  not  a  statement  [FE]          ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  rhsContext  =  Context.OTHER;  Preconditions.checkState(childCount!=  3);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  rhsContext  =  Context.OTHER;  Preconditions.checkState(childCount!=  3);	          Preconditions.checkState(childCount    ==    3);    Context    rhsContext    =    Context.OTHER;    Preconditions.checkState(childCount    ==    3);    	non-compiled	[CE]  not  a  statement	164	None	replace
317	[BUG]  [BUGGY]  Context  rhsContext  =  Context.OTHER;  Preconditions.checkState(childCount  ==  1);  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  rhsContext  =  Context.OTHER;  Preconditions.checkState(childCount  ==  1);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  rhsContext  =  Context.OTHER;  Preconditions.checkState(childCount  ==  1);	          Preconditions.checkState(childCount    ==    3);    Context    rhsContext    =    Context.OTHER;    Preconditions.checkState(childCount    ==    3);    	non-compiled	[CE]  not  a  statement	164	None	replace
318	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(first,  0,  rhsContext);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(first,  0,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(first,  0,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   ".?       ",    true);    addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	199	None	replace
319	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	64	None	add
320	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  true);	  	non-compiled	[CE]  not  a  statement	64	None	add
321	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	64	None	add
322	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  a:[]  {  a:1  }  :  {  a:3  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  a:[]  {  a:1  }  :  {  a:3  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  a:[]  {  a:1  }  :  {  a:3  }	  	non-compiled	[CE]  not  a  statement	64	None	add
323	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:[]1  }  :  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:[]1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:[]1  }  :	  	non-compiled	[CE]  not  a  statement	64	None	add
324	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  a:[]  {  a:1  }  :  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  a:[]  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  a:[]  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	64	None	add
325	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator(n);  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator(n);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContextForNoInOperator(n);	  Context    cc    =    getCurrentContextForNoInOperator(context);    	non-compiled	[CE]  not  a  statement	192	None	replace
326	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator(rhsContext);  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator(rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContextForNoInOperator(rhsContext);	  Context    cc    =    getCurrentContextForNoInOperator(context);    	non-compiled	[CE]  not  a  statement	192	None	replace
327	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator(context,  n);  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator(context,  n);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContextForNoInOperator(context,  n);	  Context    cc    =    getCurrentContextForNoInOperator(context);    	non-compiled	[CE]  not  a  statement	192	None	replace
328	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator(context,  first);  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator(context,  first);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContextForNoInOperator(context,  first);	  Context    cc    =    getCurrentContextForNoInOperator(context);    	non-compiled	[CE]  not  a  statement	192	None	replace
329	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ": ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ": ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   ":   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp( ": ",  true);  addExpr(first.getNext(),  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	22	None	add
330	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   ":   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");	  	non-compiled	[CE]  not  a  statement	22	None	add
331	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ": ",  true);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ": ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   ":   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp( ": ",  true);	  	non-compiled	[CE]  not  a  statement	22	None	add
332	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  addExpr(first,  1,  rhsContext);  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   ":   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  addExpr(first,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	22	None	add
333	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   ":   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	22	None	add
334	[BUG]  [BUGGY]  cc.addOp( ",.?   ",  true);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp( ",.?   ",  true);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( ",.?   ",  true);	  cc.addOp(       ".?       ",    false);    cc.addOp(   ",.?       ",    false);    	non-compiled	[CE]  not  a  statement	107	None	replace
335	[BUG]  [BUGGY]  cc.addOp( ",.?   ",  false);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp( ",.?   ",  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( ",.?   ",  false);	  cc.addOp(       ".?       ",    false);    cc.addOp(   ",.?       ",    false);    	non-compiled	[CE]  not  a  statement	107	None	replace
336	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isExpressionNode(n))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isExpressionNode(n))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isExpressionNode(n))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }	  if(NodeUtil.isExpressionNode(last))    {    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    break;    }    	non-compiled	[CE]  not  a  statement	144	None	replace
337	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isExpressionNode(rhsContext))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isExpressionNode(rhsContext))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isExpressionNode(rhsContext))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }	  if(NodeUtil.isExpressionNode(last))    {    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    break;    }    	non-compiled	[CE]  not  a  statement	144	None	replace
338	[BUG]  [BUGGY]  n.addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addExpr(last,  1,  rhsContext);	          addExpr(last,    1,    rhsContext);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	13	None	replace
339	[BUG]  [BUGGY]  n.addChildToFront(last);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addChildToFront(last);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addChildToFront(last);	          addExpr(last,    1,    rhsContext);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	13	None	replace
340	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");	  	non-compiled	[CE]  not  a  statement	165	None	add
341	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	165	None	add
342	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  addExpr(first,  1,  rhsContext);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  addExpr(first,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	165	None	add
343	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	165	None	add
344	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  false);	  	non-compiled	[CE]  not  a  statement	165	None	add
345	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalStateException( " ");  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalStateException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalStateException( " ");	  	non-compiled	[CE]  not  a  statement	165	None	add
346	[BUG]  [BUGGY]  cc.addOp(   ":?     ",  false);  cc.addOp( ":?   ",  false);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ":?     ",  false);  cc.addOp( ":?   ",  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ":?       ",    false);    cc.addOp( ":?   ",  false);	  	non-compiled	[CE]  not  a  statement	160	None	add
347	[BUG]  [BUGGY]  cc.addOp(   ":?     ",  false);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ":?     ",  false);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ":?       ",    false);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");	  	non-compiled	[CE]  not  a  statement	160	None	add
348	[BUG]  [BUGGY]  cc.addOp(   ":?     ",  false);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ":?     ",  false);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ":?       ",    false);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	160	None	add
349	[BUG]  [BUGGY]  cc.addOp(   ":?     ",  false);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalStateException( " ");  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ":?     ",  false);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalStateException( " ");  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ":?       ",    false);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalStateException( " ");	  	non-compiled	[CE]  not  a  statement	160	None	add
350	[BUG]  [BUGGY]  cc.addOp(   ":?     ",  false);  cc.addOp( ".:?   ",  false);  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ":?     ",  false);  cc.addOp( ".:?   ",  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ":?       ",    false);    cc.addOp( ".:?   ",  false);	  	non-compiled	[CE]  not  a  statement	160	None	add
351	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	24	None	add
352	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  false);	  	non-compiled	[CE]  not  a  statement	24	None	add
353	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	24	None	add
354	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	24	None	add
355	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  cc.addOp( ",  false);  addExpr(last,  1,  rhsContext);  [CE]  unclosed  string  literal  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  cc.addOp( ",  false);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    cc.addOp( ",  false);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  unclosed  string  literal	24	None	add
356	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextInstance(context);  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  cc  =  getCurrentContextInstance(context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContextInstance(context);	  Context    cc    =    getCurrentContextInstance();    	non-compiled	[CE]  not  a  statement	30	None	replace
357	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextInstance(n);  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  cc  =  getCurrentContextInstance(n);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContextInstance(n);	  Context    cc    =    getCurrentContextInstance();    	non-compiled	[CE]  not  a  statement	30	None	replace
358	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextInstance(p);  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  cc  =  getCurrentContextInstance(p);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContextInstance(p);	  Context    cc    =    getCurrentContextInstance();    	non-compiled	[CE]  not  a  statement	30	None	replace
359	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextInstance(parent);  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  cc  =  getCurrentContextInstance(parent);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContextInstance(parent);	  Context    cc    =    getCurrentContextInstance();    	non-compiled	[CE]  not  a  statement	30	None	replace
360	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  addExpr(last,  p  +  1,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  addExpr(last,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    p    +    1,    rhsContext);    addExpr(last,  p  +  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	132	None	add
361	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  addExpr(last,  p  +  1,  rhsContext);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  addExpr(last,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    p    +    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  addExpr(last,  p  +  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	132	None	add
362	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    p    +    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");	  	non-compiled	[CE]  not  a  statement	132	None	add
363	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  addExpr(first,  p  +  1,  rhsContext);  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    p    +    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  addExpr(first,  p  +  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	132	None	add
364	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  addExpr(first,  p  +  1,  rhsContext);  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	132	None	add
365	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    p    +    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	132	None	add
366	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	40	None	add
367	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  false);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  false);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp( "?   ",  false);	  	non-compiled	[CE]  not  a  statement	40	None	add
368	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	40	None	add
369	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ",  false);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  unclosed  string  literal  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ",  false);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp( ",  false);  addExpr(first.getNext(),  1,  rhsContext);	  	non-compiled	[CE]  unclosed  string  literal	40	None	add
370	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  break;  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  break;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  break;	  	non-compiled	[CE]  not  a  statement	40	None	add
371	[BUG]  [BUGGY]  addExpr(last,  2,  rhsContext);  addExpr(last,  2,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  2,  rhsContext);  addExpr(last,  2,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    2,    rhsContext);    addExpr(last,  2,  rhsContext);	  	non-compiled	[CE]  not  a  statement	152	None	add
372	[BUG]  [BUGGY]  addExpr(last,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    2,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");	  	non-compiled	[CE]  not  a  statement	152	None	add
373	[BUG]  [BUGGY]  addExpr(last,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  addExpr(last,  2,  rhsContext);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  addExpr(last,  2,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    2,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  addExpr(last,  2,  rhsContext);	  	non-compiled	[CE]  not  a  statement	152	None	add
374	[BUG]  [BUGGY]  addExpr(last,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    2,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	152	None	add
375	[BUG]  [BUGGY]  addExpr(last,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  addExpr(first,  2,  rhsContext);  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  addExpr(first,  2,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    2,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  addExpr(first,  2,  rhsContext);	  	non-compiled	[CE]  not  a  statement	152	None	add
376	[BUG]  [BUGGY]  addExpr(last,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalStateException( " ");  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalStateException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    2,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalStateException( " ");	  	non-compiled	[CE]  not  a  statement	152	None	add
377	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first,  0,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first,  0,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first,  0,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    false);    addExpr(first,    0,    rhsContext);    cc.addOp( "?   ",  false);  addExpr(first,  0,  rhsContext);	  	non-compiled	[CE]  not  a  statement	171	None	add
378	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first,  0,  rhsContext);  cc.addOp( "?   ",  false);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first,  0,  rhsContext);  cc.addOp( "?   ",  false);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    false);    addExpr(first,    0,    rhsContext);    cc.addOp( "?   ",  false);	  	non-compiled	[CE]  not  a  statement	171	None	add
379	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first,  0,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first,  0,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    false);    addExpr(first,    0,    rhsContext);    cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);	  	non-compiled	[CE]  not  a  statement	171	None	add
380	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first,  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  0,  rhsContext);  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first,  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    false);    addExpr(first,    0,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first,  0,  rhsContext);	  	non-compiled	[CE]  not  a  statement	171	None	add
381	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first,  0,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first,  0,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    false);    addExpr(first,    0,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	171	None	add
382	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(childCount  +  1);  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  int  p  =  NodeUtil.precedence(childCount  +  1);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	int  p  =  NodeUtil.precedence(childCount  +  1);	  int    p    =    NodeUtil.precedence(type    +    1);    	non-compiled	[CE]  not  a  statement	142	None	replace
383	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type)+  1;  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  int  p  =  NodeUtil.precedence(type)+  1;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	int  p  =  NodeUtil.precedence(type)+  1;	  int    p    =    NodeUtil.precedence(type    +    1);    	non-compiled	[CE]  not  a  statement	142	None	replace
384	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type,  1);  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  int  p  =  NodeUtil.precedence(type,  1);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	int  p  =  NodeUtil.precedence(type,  1);	  int    p    =    NodeUtil.precedence(type    +    1);    	non-compiled	[CE]  not  a  statement	142	None	replace
385	[BUG]  [BUGGY]  cc.addOp(     ",     ",    true);    cc.addOp(   ".,     ",  true);  cc.addOp( ",   ",  true);  cc.addOp( ".,   ",  true);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(     ",     ",    true);    cc.addOp(   ".,     ",  true);  cc.addOp( ",   ",  true);  cc.addOp( ".,   ",  true);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(       ",       ",        true);        cc.addOp(   ".,       ",    true);    cc.addOp( ",   ",  true);  cc.addOp( ".,   ",  true);	  	non-compiled	[CE]  not  a  statement	48	None	add
386	[BUG]  [BUGGY]  cc.addOp(     ",     ",    true);    cc.addOp(   ".,     ",  true);  cc.addOp( ",  true);  cc.addOp( ".,   ",  true);  [CE]  <identifier>  expected  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(     ",     ",    true);    cc.addOp(   ".,     ",  true);  cc.addOp( ",  true);  cc.addOp( ".,   ",  true);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(       ",       ",        true);        cc.addOp(   ".,       ",    true);    cc.addOp( ",  true);  cc.addOp( ".,   ",  true);	  	non-compiled	[CE]  <identifier>  expected	48	None	add
387	[BUG]  [BUGGY]  cc.addOp(     ",     ",    true);    cc.addOp(   ".,     ",  true);  cc.addOp( ".,   ",  true);  cc.addOp( ".,   ",  true);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(     ",     ",    true);    cc.addOp(   ".,     ",  true);  cc.addOp( ".,   ",  true);  cc.addOp( ".,   ",  true);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(       ",       ",        true);        cc.addOp(   ".,       ",    true);    cc.addOp( ".,   ",  true);  cc.addOp( ".,   ",  true);	  	non-compiled	[CE]  not  a  statement	48	None	add
388	[BUG]  [BUGGY]  n.addOp( ",   ",  true);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addOp( ",   ",  true);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addOp( ",   ",  true);	  cc.addOp(       ",       ",    true);    cc.addOp(   ".,       ",    true);    	non-compiled	[CE]  not  a  statement	49	None	replace
389	[BUG]  [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  {  a:3  }  ;  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  {  a:3  }  ;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  {  a:3  }  ;	          cc.addOp(       "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?       ",    false);    addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	80	None	replace
390	[BUG]  [BUGGY]  cc.addOp(   ".?     ",  true);  cc.addOp( ".?   ",  true);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ".?     ",  true);  cc.addOp( ".?   ",  true);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ".?       ",    true);    cc.addOp( ".?   ",  true);	  	non-compiled	[CE]  not  a  statement	162	None	add
391	[BUG]  [BUGGY]  cc.addOp(   ".?     ",  true);  cc.addOp(. ".?   ",  true);  [CE]  illegal  start  of  expression  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ".?     ",  true);  cc.addOp(. ".?   ",  true);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ".?       ",    true);    cc.addOp(. ".?   ",  true);	  	non-compiled	[CE]  illegal  start  of  expression	162	None	add
392	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type,  Context.OTHER);  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  int  p  =  NodeUtil.precedence(type,  Context.OTHER);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	int  p  =  NodeUtil.precedence(type,  Context.OTHER);	  int    p    =    NodeUtil.precedence(type,    rhsContext);    	non-compiled	[CE]  not  a  statement	84	None	replace
393	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type,  rhsContext,  context);  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  int  p  =  NodeUtil.precedence(type,  rhsContext,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	int  p  =  NodeUtil.precedence(type,  rhsContext,  context);	  int    p    =    NodeUtil.precedence(type,    rhsContext);    	non-compiled	[CE]  not  a  statement	84	None	replace
394	[BUG]  [BUGGY]  int  rhsContext  =  NodeUtil.precedence(type);  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  int  rhsContext  =  NodeUtil.precedence(type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	int  rhsContext  =  NodeUtil.precedence(type);	  int    p    =    NodeUtil.precedence(type,    rhsContext);    	non-compiled	[CE]  not  a  statement	84	None	replace
395	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    cc.addOp( "?   ",  true);	  	non-compiled	[CE]  not  a  statement	177	None	add
396	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	177	None	add
397	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	177	None	add
398	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  junit.framework.ComparisonFailure:  expected:  <  a:[]  {  a:1  }  :  {  a:3  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  junit.framework.ComparisonFailure:  expected:  <  a:[]  {  a:1  }  :  {  a:3  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    junit.framework.ComparisonFailure:  expected:  <  a:[]  {  a:1  }  :  {  a:3  }	  	non-compiled	[CE]  not  a  statement	177	None	add
399	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:[]1  }  :  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:[]1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:[]1  }  :	  	non-compiled	[CE]  not  a  statement	177	None	add
400	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	177	None	add
401	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(first,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(first,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(first,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	68	None	replace
402	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(n,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(n,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(n,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	68	None	replace
403	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext(rhsContext);  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  cc  =  getCurrentContext(rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContext(rhsContext);	  Context    cc    =    getCurrentContext(context);    	non-compiled	[CE]  not  a  statement	29	None	replace
404	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext(context,  p);  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  cc  =  getCurrentContext(context,  p);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContext(context,  p);	  Context    cc    =    getCurrentContext(context);    	non-compiled	[CE]  not  a  statement	29	None	replace
405	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext(context,  first);  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  cc  =  getCurrentContext(context,  first);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContext(context,  first);	  Context    cc    =    getCurrentContext(context);    	non-compiled	[CE]  not  a  statement	29	None	replace
406	[BUG]  [BUGGY]  n.getFirstChild().getNext();  n.getFirstChild().getNext();  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.getFirstChild().getNext();  n.getFirstChild().getNext();  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.getFirstChild().getNext();    n.getFirstChild().getNext();	  	non-compiled	[CE]  not  a  statement	189	None	add
407	[BUG]  [BUGGY]  n.getFirstChild().getNext();  n.getFirstChild().getNext();  addExpr(first,  1,  rhsContext);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.getFirstChild().getNext();  n.getFirstChild().getNext();  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.getFirstChild().getNext();    n.getFirstChild().getNext();  addExpr(first,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	189	None	add
408	[BUG]  [BUGGY]  n.getFirstChild().getNext();  Preconditions.checkState(childCount  ==  3);  n.getFirstChild().getNext();  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.getFirstChild().getNext();  Preconditions.checkState(childCount  ==  3);  n.getFirstChild().getNext();  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.getFirstChild().getNext();    Preconditions.checkState(childCount  ==  3);  n.getFirstChild().getNext();	  	non-compiled	[CE]  not  a  statement	189	None	add
409	[BUG]  [BUGGY]  n.getFirstChild().getNext();  n.getFirstChild().getNext();  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.getFirstChild().getNext();  n.getFirstChild().getNext();  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.getFirstChild().getNext();    n.getFirstChild().getNext();  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	189	None	add
410	[BUG]  [BUGGY]  n.getFirstChild().getNext();  n.getLastChild().getNext();  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.getFirstChild().getNext();  n.getLastChild().getNext();  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.getFirstChild().getNext();    n.getLastChild().getNext();	  	non-compiled	[CE]  not  a  statement	189	None	add
411	[BUG]  [BUGGY]  n.getFirstChild().getNext();  n.getFirstChild().getNext();  break;  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.getFirstChild().getNext();  n.getFirstChild().getNext();  break;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.getFirstChild().getNext();    n.getFirstChild().getNext();  break;	  	non-compiled	[CE]  not  a  statement	189	None	add
412	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first.getNext(),        1,        rhsContext);        cc.addOp(   "?       ",    true);    cc.addOp( "?   ",  true);	  	non-compiled	[CE]  not  a  statement	173	None	add
413	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first.getNext(),        1,        rhsContext);        cc.addOp(   "?       ",    true);    cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	173	None	add
414	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first.getNext(),        1,        rhsContext);        cc.addOp(   "?       ",    true);    cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	173	None	add
415	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first.getNext(),        1,        rhsContext);        cc.addOp(   "?       ",    true);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	173	None	add
416	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  return;  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  return;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first.getNext(),        1,        rhsContext);        cc.addOp(   "?       ",    true);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  return;	  	non-compiled	[CE]  not  a  statement	173	None	add
417	[BUG]  [BUGGY]  n.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [CE]  not  a  statement  [FE]                junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);	          cc.addOp(       "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp('?',    true);    addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	81	None	replace
418	[BUG]  [BUGGY]  cc.addOp( ": ".,  true);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp( ": ".,  true);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( ": ".,  true);	  cc.addOp(   ":   ".,    false);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
419	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  2,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  2,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  2,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  2,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    2,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  2,  rhsContext);	  	non-compiled	[CE]  not  a  statement	175	None	add
420	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  2,  rhsContext);  cc.addOp( "?   ",  true);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  2,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    2,    rhsContext);    cc.addOp( "?   ",  true);	  	non-compiled	[CE]  not  a  statement	175	None	add
421	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  2,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  2,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    2,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	175	None	add
422	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  a:[]  {  a:1  }  :  {  a:3  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  a:[]  {  a:1  }  :  {  a:3  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    2,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  a:[]  {  a:1  }  :  {  a:3  }	  	non-compiled	[CE]  not  a  statement	175	None	add
423	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:[]1  }  :  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:[]1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    2,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:[]1  }  :	  	non-compiled	[CE]  not  a  statement	175	None	add
424	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  2,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  2,  rhsContext);  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  2,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  2,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    2,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first,  2,  rhsContext);	  	non-compiled	[CE]  not  a  statement	175	None	add
425	[BUG]  [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  addExpr(last,  2,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  addExpr(last,  2,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  addExpr(last,  2,  rhsContext);	  addExpr(last,    2,    rhsContext);    	non-compiled	[CE]  not  a  statement	153	None	replace
426	[BUG]  [BUGGY]  addExpr(first,  2,  rhsContext);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(first,  2,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(first,  2,  rhsContext);	  addExpr(last,    2,    rhsContext);    	non-compiled	[CE]  not  a  statement	153	None	replace
427	[BUG]  [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[?]  {  a:1  }  :  addExpr(last,  2,  rhsContext);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[?]  {  a:1  }  :  addExpr(last,  2,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	junit.framework.ComparisonFailure:  expected:  <  var  foo=x[?]  {  a:1  }  :  addExpr(last,  2,  rhsContext);	  addExpr(last,    2,    rhsContext);    	non-compiled	[CE]  not  a  statement	153	None	replace
428	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	67	None	add
429	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  true);	  	non-compiled	[CE]  not  a  statement	67	None	add
430	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	67	None	add
431	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:[]1  }  :  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:[]1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:[]1  }  :	  	non-compiled	[CE]  not  a  statement	67	None	add
432	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  a:[]  {  a:1  }  :  {  a:3  }  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  a:[]  {  a:1  }  :  {  a:3  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  a:[]  {  a:1  }  :  {  a:3  }	  	non-compiled	[CE]  not  a  statement	67	None	add
433	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  a:[]  {  a:1  }  :  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  a:[]  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  a:[]  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	67	None	add
434	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        addExpr(last,    1,    rhsContext);    addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	12	None	add
435	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        addExpr(last,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");	  	non-compiled	[CE]  not  a  statement	12	None	add
436	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  1,  rhsContext);  addExpr(first,  1,  rhsContext);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  1,  rhsContext);  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        addExpr(last,    1,    rhsContext);    addExpr(first,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	12	None	add
437	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        addExpr(last,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	12	None	add
438	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalStateException( " ");  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalStateException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        addExpr(last,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalStateException( " ");	  	non-compiled	[CE]  not  a  statement	12	None	add
439	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  return;  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  return;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        addExpr(last,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  return;	  	non-compiled	[CE]  not  a  statement	12	None	add
440	[BUG]  [BUGGY]  n.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);	          cc.addOp(       "?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp('?',    true);    addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	120	None	replace
441	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    cc.addOp( "?   ",  true);	  	non-compiled	[CE]  not  a  statement	169	None	add
442	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);	  	non-compiled	[CE]  not  a  statement	169	None	add
443	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  cc.addOp( ": ",  true);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  cc.addOp( ": ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    cc.addOp( ": ",  true);	  	non-compiled	[CE]  not  a  statement	169	None	add
444	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  false);  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  false);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    cc.addOp( "?   ",  false);	  	non-compiled	[CE]  not  a  statement	169	None	add
445	[BUG]  [BUGGY]  cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  0,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    0,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first.getNext(),  0,  rhsContext);	  	non-compiled	[CE]  not  a  statement	44	None	add
446	[BUG]  [BUGGY]  cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  0,  rhsContext);  cc.addOp( "?   ",  true);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  0,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    0,    rhsContext);    cc.addOp( "?   ",  true);	  	non-compiled	[CE]  not  a  statement	44	None	add
447	[BUG]  [BUGGY]  cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    0,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	44	None	add
448	[BUG]  [BUGGY]  cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  0,  rhsContext);  cc.addOp( ",  true);  addExpr(first.getNext(),  0,  rhsContext);  [CE]  unclosed  string  literal  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  0,  rhsContext);  cc.addOp( ",  true);  addExpr(first.getNext(),  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    0,    rhsContext);    cc.addOp( ",  true);  addExpr(first.getNext(),  0,  rhsContext);	  	non-compiled	[CE]  unclosed  string  literal	44	None	add
449	[BUG]  [BUGGY]  Node  first  =  node.getLastChild();  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Node  first  =  node.getLastChild();  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Node  first  =  node.getLastChild();	  Node    first    =    n.getLastChild();    	non-compiled	[CE]  not  a  statement	6	None	replace
450	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    false);    addExpr(first,    1,    rhsContext);    cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	100	None	add
451	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  false);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  false);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    false);    addExpr(first,    1,    rhsContext);    cc.addOp( "?   ",  false);	  	non-compiled	[CE]  not  a  statement	100	None	add
452	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    false);    addExpr(first,    1,    rhsContext);    cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	100	None	add
453	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    false);    addExpr(first,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	100	None	add
454	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    false);    addExpr(first,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	100	None	add
455	[BUG]  [BUGGY]  n.addOp( "?   ",  true);  n.addOp( ",?   ",  true);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addOp( "?   ",  true);  n.addOp( ",?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addOp( "?   ",  true);  n.addOp( ",?   ",  true);	          cc.addOp(       "?       ",    true);    cc.addOp(   ",?       ",    true);    	non-compiled	[CE]  not  a  statement	95	None	replace
456	[BUG]  [BUGGY]  n.addOp( "?   ",  false);  n.addOp( ",?   ",  true);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addOp( "?   ",  false);  n.addOp( ",?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addOp( "?   ",  false);  n.addOp( ",?   ",  true);	          cc.addOp(       "?       ",    true);    cc.addOp(   ",?       ",    true);    	non-compiled	[CE]  not  a  statement	95	None	replace
457	[BUG]  [BUGGY]  cc.addOp( "?   ",  true);  cc.addExpr(first.getNext(),  1,  context);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:1}[]:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp( "?   ",  true);  cc.addExpr(first.getNext(),  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( "?   ",  true);  cc.addExpr(first.getNext(),  1,  context);	  cc.addOp(   "?       ",    true);    cc.addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	147	None	replace
458	[BUG]  [BUGGY]  n.addOp( "?   ",  true);  n.addExpr(first.getNext(),  1,  rhsContext);  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:1}[]:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addOp( "?   ",  true);  n.addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addOp( "?   ",  true);  n.addExpr(first.getNext(),  1,  rhsContext);	  cc.addOp(   "?       ",    true);    cc.addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	147	None	replace
459	[BUG]  [BUGGY]  cc.addOp( "?   ",  true);  cc.addExpr(last.getNext(),  1,  rhsContext);  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:1}[]:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp( "?   ",  true);  cc.addExpr(last.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( "?   ",  true);  cc.addExpr(last.getNext(),  1,  rhsContext);	  cc.addOp(   "?       ",    true);    cc.addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	147	None	replace
460	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    false);    addExpr(last,    0,    rhsContext);    cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);	  	non-compiled	[CE]  not  a  statement	34	None	add
461	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  false);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  false);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    false);    addExpr(last,    0,    rhsContext);    cc.addOp( "?   ",  false);	  	non-compiled	[CE]  not  a  statement	34	None	add
462	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first,  0,  rhsContext);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    false);    addExpr(last,    0,    rhsContext);    cc.addOp( "?   ",  false);  addExpr(first,  0,  rhsContext);	  	non-compiled	[CE]  not  a  statement	34	None	add
463	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    false);    addExpr(last,    0,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);	  	non-compiled	[CE]  not  a  statement	34	None	add
464	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    false);    addExpr(last,    0,    rhsContext);    cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	34	None	add
465	[BUG]  [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  a:[]  {  foo=x?,  1,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  a:[]  {  foo=x?,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	junit.framework.ComparisonFailure:  expected:  <  a:[]  {  foo=x?,  1,  rhsContext);	          cc.addOp(       "?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	118	None	replace
466	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(first,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(first,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        addExpr(first,    1,    rhsContext);    addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	20	None	add
467	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        addExpr(first,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");	  	non-compiled	[CE]  not  a  statement	20	None	add
468	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        addExpr(first,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	20	None	add
469	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalStateException( " ");  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalStateException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        addExpr(first,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  throw  new  IllegalStateException( " ");	  	non-compiled	[CE]  not  a  statement	20	None	add
470	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  return;  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  return;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        addExpr(first,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  return;	  	non-compiled	[CE]  not  a  statement	20	None	add
471	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  a:3  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  a:3  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        addExpr(first,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  a:3	  	non-compiled	[CE]  not  a  statement	20	None	add
472	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext(n,  context);  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  cc  =  getCurrentContext(n,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContext(n,  context);	  Context    cc    =    getCurrentContext(n);    	non-compiled	[CE]  not  a  statement	31	None	replace
473	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext(last);  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  cc  =  getCurrentContext(last);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContext(last);	  Context    cc    =    getCurrentContext(n);    	non-compiled	[CE]  not  a  statement	31	None	replace
474	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext(p);  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  cc  =  getCurrentContext(p);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContext(p);	  Context    cc    =    getCurrentContext(n);    	non-compiled	[CE]  not  a  statement	31	None	replace
475	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	121	None	add
476	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  true);	  	non-compiled	[CE]  not  a  statement	121	None	add
477	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  a:[]  {  a:1  }  :  {  a:3  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  a:[]  {  a:1  }  :  {  a:3  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  a:[]  {  a:1  }  :  {  a:3  }	  	non-compiled	[CE]  not  a  statement	121	None	add
478	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	121	None	add
479	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:[]1  }  :  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:[]1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:[]1  }  :	  	non-compiled	[CE]  not  a  statement	121	None	add
480	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);	  	non-compiled	[CE]  not  a  statement	121	None	add
481	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(last,  type))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isLiteralValue(last,  type))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isLiteralValue(last,  type))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }	  if(NodeUtil.isLiteralValue(type))    {    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    break;    }    	non-compiled	[CE]  not  a  statement	197	None	replace
482	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(type,  false))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isLiteralValue(type,  false))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isLiteralValue(type,  false))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }	  if(NodeUtil.isLiteralValue(type))    {    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    break;    }    	non-compiled	[CE]  not  a  statement	197	None	replace
483	[BUG]  [BUGGY]  cc.addOp( ",  true);  addExpr(last,  1,  rhsContext);  break;  [CE]  unclosed  string  literal  [FE]                            ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp( ",  true);  addExpr(last,  1,  rhsContext);  break;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( ",  true);  addExpr(last,  1,  rhsContext);  break;	  if(NodeUtil.isLiteralValue(type))    {    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    break;    }    	non-compiled	[CE]  unclosed  string  literal	197	None	replace
484	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(first,  type);  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  int  p  =  NodeUtil.precedence(first,  type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	int  p  =  NodeUtil.precedence(first,  type);	  int    p    =    NodeUtil.precedence(type,    first);    	non-compiled	[CE]  not  a  statement	143	None	replace
485	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type,  first,  context);  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  int  p  =  NodeUtil.precedence(type,  first,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	int  p  =  NodeUtil.precedence(type,  first,  context);	  int    p    =    NodeUtil.precedence(type,    first);    	non-compiled	[CE]  not  a  statement	143	None	replace
486	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(last,  type);  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  int  p  =  NodeUtil.precedence(last,  type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	int  p  =  NodeUtil.precedence(last,  type);	  int    p    =    NodeUtil.precedence(type,    first);    	non-compiled	[CE]  not  a  statement	143	None	replace
487	[BUG]  [BUGGY]  cc.addOp('.',  false);  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp('.',  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp('.',  false);	  cc.addOp(       ".?       ",    false);    cc.addOp('.?       ",    false);    	non-compiled	[CE]  not  a  statement	109	None	replace
488	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext(),  context.getCurrentContext();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  cc  =  getCurrentContext(),  context.getCurrentContext();  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContext(),  context.getCurrentContext();	  Context    cc    =    getCurrentContext().getCurrentContext();    	non-compiled	[CE]  	28	None	replace
489	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext(),  rhsContext.getCurrentContext();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  cc  =  getCurrentContext(),  rhsContext.getCurrentContext();  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContext(),  rhsContext.getCurrentContext();	  Context    cc    =    getCurrentContext().getCurrentContext();    	non-compiled	[CE]  	28	None	replace
490	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().cloneTree();  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  cc  =  getCurrentContext().cloneTree();  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContext().cloneTree();	  Context    cc    =    getCurrentContext().getCurrentContext();    	non-compiled	[CE]  not  a  statement	28	None	replace
491	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  2,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  2,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  2,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  2,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first,    2,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first,  2,  rhsContext);	  	non-compiled	[CE]  not  a  statement	203	None	add
492	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first,    2,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	203	None	add
493	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first,    2,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalArgumentException( " ");	  	non-compiled	[CE]  not  a  statement	203	None	add
494	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  addExpr(first,  2,  rhsContext);  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  addExpr(first,  2,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first,    2,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  addExpr(first,  2,  rhsContext);	  	non-compiled	[CE]  not  a  statement	203	None	add
495	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  2,  rhsContext);  cc.addOp( "?   ",  true);  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  2,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first,    2,    rhsContext);    cc.addOp( "?   ",  true);	  	non-compiled	[CE]  not  a  statement	203	None	add
496	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  return;  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  return;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first,    2,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  return;	  	non-compiled	[CE]  not  a  statement	203	None	add
497	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    cc.addOp(   ".?     ",  true);  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    cc.addOp(   ".?     ",  true);  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        cc.addOp(   ".?       ",    true);    cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);	  	non-compiled	[CE]  not  a  statement	92	None	add
498	[BUG]  [BUGGY]  cc.addOp(   ":     ",  false);  cc.addOp( ":   ",  false);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ":     ",  false);  cc.addOp( ":   ",  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ":       ",    false);    cc.addOp( ":   ",  false);	  	non-compiled	[CE]  not  a  statement	1	None	add
499	[BUG]  [BUGGY]  cc.addOp(   ":     ",  false);  cc.addOp( ".:   ",  false);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ":     ",  false);  cc.addOp( ".:   ",  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ":       ",    false);    cc.addOp( ".:   ",  false);	  	non-compiled	[CE]  not  a  statement	1	None	add
500	[BUG]  [BUGGY]  cc.addOp(   ":     ",  false);  cc.addOp(':',  false);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ":     ",  false);  cc.addOp(':',  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ":       ",    false);    cc.addOp(':',  false);	  	non-compiled	[CE]  not  a  statement	1	None	add
501	[BUG]  [BUGGY]  cc.addOp(   ":     ",  false);  cc.addOp( ":   ",  true);  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ":     ",  false);  cc.addOp( ":   ",  true);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ":       ",    false);    cc.addOp( ":   ",  true);	  	non-compiled	[CE]  not  a  statement	1	None	add
502	[BUG]  [BUGGY]  addExpr(last,  0,  rhsContext);  break;  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  0,  rhsContext);  break;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,  0,  rhsContext);  break;	  addExpr(last,    1,    rhsContext);    break;    	non-compiled	[CE]  not  a  statement	87	None	replace
503	[BUG]  [BUGGY]  addExpr(n,  1,  rhsContext);  break;  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(n,  1,  rhsContext);  break;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(n,  1,  rhsContext);  break;	  addExpr(last,    1,    rhsContext);    break;    	non-compiled	[CE]  not  a  statement	87	None	replace
504	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    cc.addOp(   ",?     ",  true);  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    cc.addOp(   ",?     ",  true);  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        cc.addOp(   ",?       ",    true);    cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);	  	non-compiled	[CE]  not  a  statement	94	None	add
505	[BUG]  [BUGGY]  Context.checkState(childCount  ==  2);  Integer  p  =  NodeUtil.precedence(type);  [CE]  not  a  statement  [FE]              IllegalStateException      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context.checkState(childCount  ==  2);  Integer  p  =  NodeUtil.precedence(type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context.checkState(childCount  ==  2);  Integer  p  =  NodeUtil.precedence(type);	          Preconditions.checkState(childCount    ==    2);    Integer    p    =    NodeUtil.precedence(type);    	non-compiled	[CE]  not  a  statement	184	None	replace
506	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  Integer  p  =  NodeUtil.precedence(type,  context);  [CE]  not  a  statement  [FE]                IllegalStateException      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  2);  Integer  p  =  NodeUtil.precedence(type,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount  ==  2);  Integer  p  =  NodeUtil.precedence(type,  context);	          Preconditions.checkState(childCount    ==    2);    Integer    p    =    NodeUtil.precedence(type);    	non-compiled	[CE]  not  a  statement	184	None	replace
507	[BUG]  [BUGGY]  n.getNext(),  1,  rhsContext);  [CE]  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.getNext(),  1,  rhsContext);	  cc.addOp(   ":   ",    true);    addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  	103	None	replace
508	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	74	None	add
509	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  addExpr(first,  1,  rhsContext);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  addExpr(first,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	74	None	add
510	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalArgumentException( " ");	  	non-compiled	[CE]  not  a  statement	74	None	add
511	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	74	None	add
512	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  return;  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  return;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  return;	  	non-compiled	[CE]  not  a  statement	74	None	add
513	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalStateException( " ");  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalStateException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalStateException( " ");	  	non-compiled	[CE]  not  a  statement	74	None	add
514	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    true);    cc.addOp( "?   ",  true);	  	non-compiled	[CE]  not  a  statement	150	None	add
515	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    true);    cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	150	None	add
516	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    true);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	150	None	add
517	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    true);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalArgumentException( " ");	  	non-compiled	[CE]  not  a  statement	150	None	add
518	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  addExpr(first,  1,  rhsContext);  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    true);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  addExpr(first,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	150	None	add
519	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    true);    cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	150	None	add
520	[BUG]  [BUGGY]  cc.addOp( ":   ".equals(p),  rhsContext);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp( ":   ".equals(p),  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( ":   ".equals(p),  rhsContext);	  cc.addOp(   ":   ".equals(p));    	non-compiled	[CE]  not  a  statement	10	None	replace
521	[BUG]  [BUGGY]  cc.addOp( ":   ".equals(type));  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp( ":   ".equals(type));  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( ":   ".equals(type));	  cc.addOp(   ":   ".equals(p));    	non-compiled	[CE]  not  a  statement	10	None	replace
522	[BUG]  [BUGGY]  cc.addOp( ":   ".equals(p,  rhsContext));  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp( ":   ".equals(p,  rhsContext));  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( ":   ".equals(p,  rhsContext));	  cc.addOp(   ":   ".equals(p));    	non-compiled	[CE]  not  a  statement	10	None	replace
523	[BUG]  [BUGGY]  cc.addOp( ":   ".equals(p,  context));  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp( ":   ".equals(p,  context));  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( ":   ".equals(p,  context));	  cc.addOp(   ":   ".equals(p));    	non-compiled	[CE]  not  a  statement	10	None	replace
524	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(last,    0,    rhsContext);    cc.addOp( "?   ",  true);	  	non-compiled	[CE]  not  a  statement	123	None	add
525	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(last,    0,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);	  	non-compiled	[CE]  not  a  statement	123	None	add
526	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  0,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:[]1  }  :  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  0,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:[]1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(last,    0,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:[]1  }  :	  	non-compiled	[CE]  not  a  statement	123	None	add
527	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  0,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  a:[]  {  a:1  }  :  {  a:3  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  0,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  a:[]  {  a:1  }  :  {  a:3  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(last,    0,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  a:[]  {  a:1  }  :  {  a:3  }	  	non-compiled	[CE]  not  a  statement	123	None	add
528	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  0,  rhsContext);  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(last,    0,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first,  0,  rhsContext);	  	non-compiled	[CE]  not  a  statement	123	None	add
529	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(last,    0,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	123	None	add
530	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(p)||  NodeUtil.isExpressionNode(rhsContext))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isExpressionNode(p)||  NodeUtil.isExpressionNode(rhsContext))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isExpressionNode(p)||  NodeUtil.isExpressionNode(rhsContext))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }	  if(NodeUtil.isExpressionNode(p))    {    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    break;    }    	non-compiled	[CE]  not  a  statement	196	None	replace
531	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(p)&&  NodeUtil.isExpressionNode(rhsContext))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isExpressionNode(p)&&  NodeUtil.isExpressionNode(rhsContext))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isExpressionNode(p)&&  NodeUtil.isExpressionNode(rhsContext))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }	  if(NodeUtil.isExpressionNode(p))    {    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    break;    }    	non-compiled	[CE]  not  a  statement	196	None	replace
532	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first.getNext(),  0,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  0,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first.getNext(),  0,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    0,    rhsContext);    cc.addOp( "?   ",  false);  addExpr(first.getNext(),  0,  rhsContext);	  	non-compiled	[CE]  not  a  statement	148	None	add
533	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first.getNext(),  0,  rhsContext);  cc.addOp( "?   ",  false);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first.getNext(),  0,  rhsContext);  cc.addOp( "?   ",  false);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    0,    rhsContext);    cc.addOp( "?   ",  false);	  	non-compiled	[CE]  not  a  statement	148	None	add
534	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first.getNext(),  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  0,  rhsContext);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first.getNext(),  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    0,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first.getNext(),  0,  rhsContext);	  	non-compiled	[CE]  not  a  statement	148	None	add
535	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first.getNext(),  0,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first.getNext(),  0,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    0,    rhsContext);    cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	148	None	add
536	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first.getNext(),  0,  rhsContext);  cc.addOp( ",  false);  addExpr(first.getNext(),  0,  rhsContext);  [CE]  unclosed  string  literal  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first.getNext(),  0,  rhsContext);  cc.addOp( ",  false);  addExpr(first.getNext(),  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    0,    rhsContext);    cc.addOp( ",  false);  addExpr(first.getNext(),  0,  rhsContext);	  	non-compiled	[CE]  unclosed  string  literal	148	None	add
537	[BUG]  [BUGGY]  cc.addOp(     ".?     ",    false);    cc.addOp(   ",.?     ",  false);  cc.addOp( ".?   ",  false);  cc.addOp( ",.?   ",  false);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(     ".?     ",    false);    cc.addOp(   ",.?     ",  false);  cc.addOp( ".?   ",  false);  cc.addOp( ",.?   ",  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(       ".?       ",        false);        cc.addOp(   ",.?       ",    false);    cc.addOp( ".?   ",  false);  cc.addOp( ",.?   ",  false);	  	non-compiled	[CE]  not  a  statement	106	None	add
538	[BUG]  [BUGGY]  cc.addOp(     ".?     ",    false);    cc.addOp(   ",.?     ",  false);  cc.addOp( ".?   ",  true);  cc.addOp( ",.?   ",  false);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(     ".?     ",    false);    cc.addOp(   ",.?     ",  false);  cc.addOp( ".?   ",  true);  cc.addOp( ",.?   ",  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(       ".?       ",        false);        cc.addOp(   ",.?       ",    false);    cc.addOp( ".?   ",  true);  cc.addOp( ",.?   ",  false);	  	non-compiled	[CE]  not  a  statement	106	None	add
539	[BUG]  [BUGGY]  cc.addOp(     ".?     ",    false);    cc.addOp(   ",.?     ",  false);  cc.addOp( ".?   ",  false);  cc.addOp( ".?   ",  false);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(     ".?     ",    false);    cc.addOp(   ",.?     ",  false);  cc.addOp( ".?   ",  false);  cc.addOp( ".?   ",  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(       ".?       ",        false);        cc.addOp(   ",.?       ",    false);    cc.addOp( ".?   ",  false);  cc.addOp( ".?   ",  false);	  	non-compiled	[CE]  not  a  statement	106	None	add
540	[BUG]  [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(first,  1,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ":   ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp( ":   ",  true);  addExpr(first,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	102	None	add
541	[BUG]  [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( ": ".,  true);  addExpr(first,  1,  rhsContext);  [CE]  <identifier>  expected  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( ": ".,  true);  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ":   ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp( ": ".,  true);  addExpr(first,  1,  rhsContext);	  	non-compiled	[CE]  <identifier>  expected	102	None	add
542	[BUG]  [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ":   ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	102	None	add
543	[BUG]  [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ":   ",    true);    addExpr(first,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	102	None	add
544	[BUG]  [BUGGY]  cc.addOp( "?   ",  true);  cc.addOp(first.getNext(),  1,  rhsContext);  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:1}[]:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp( "?   ",  true);  cc.addOp(first.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( "?   ",  true);  cc.addOp(first.getNext(),  1,  rhsContext);	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp('?',    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	61	None	replace
545	[BUG]  [BUGGY]  cc.addOp(     ".?     ",    false);    cc.addOp(   ".?     ",  false);  cc.addOp( ".?   ",  false);  cc.addOp( ".?   ",  false);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(     ".?     ",    false);    cc.addOp(   ".?     ",  false);  cc.addOp( ".?   ",  false);  cc.addOp( ".?   ",  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(       ".?       ",        false);        cc.addOp(   ".?       ",    false);    cc.addOp( ".?   ",  false);  cc.addOp( ".?   ",  false);	  	non-compiled	[CE]  not  a  statement	104	None	add
546	[BUG]  [BUGGY]  cc.addOp(     ".?     ",    false);    cc.addOp(   ".?     ",  false);  cc.addOp( ".?   ",  true);  cc.addOp( ".?   ",  false);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(     ".?     ",    false);    cc.addOp(   ".?     ",  false);  cc.addOp( ".?   ",  true);  cc.addOp( ".?   ",  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(       ".?       ",        false);        cc.addOp(   ".?       ",    false);    cc.addOp( ".?   ",  true);  cc.addOp( ".?   ",  false);	  	non-compiled	[CE]  not  a  statement	104	None	add
547	[BUG]  [BUGGY]  cc.addOp(     ".?     ",    false);    cc.addOp(   ".?     ",  false);  cc.addOp( ".?   ",  false);  cc.addOp( ".?   ",  true);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(     ".?     ",    false);    cc.addOp(   ".?     ",  false);  cc.addOp( ".?   ",  false);  cc.addOp( ".?   ",  true);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(       ".?       ",        false);        cc.addOp(   ".?       ",    false);    cc.addOp( ".?   ",  false);  cc.addOp( ".?   ",  true);	  	non-compiled	[CE]  not  a  statement	104	None	add
548	[BUG]  [BUGGY]  n.addExpr(first,  1,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addExpr(first,  1,  rhsContext);	          addExpr(last,    1,    rhsContext);    addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	21	None	replace
549	[BUG]  [BUGGY]  n.addExpr(last,  p);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addExpr(last,  p);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addExpr(last,  p);	          addExpr(last,    1,    rhsContext);    addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	21	None	replace
550	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(first,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	79	None	add
551	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  addExpr(first,  1,  rhsContext);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(first,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  addExpr(first,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	79	None	add
552	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(first,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalArgumentException( " ");	  	non-compiled	[CE]  not  a  statement	79	None	add
553	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(first,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	79	None	add
554	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  return;  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  return;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(first,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  return;	  	non-compiled	[CE]  not  a  statement	79	None	add
555	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalStateException( " ");  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalStateException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(first,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalStateException( " ");	  	non-compiled	[CE]  not  a  statement	79	None	add
556	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(last);  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  int  p  =  NodeUtil.precedence(last);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	int  p  =  NodeUtil.precedence(last);	  int    p    =    NodeUtil.precedence(n);    	non-compiled	[CE]  not  a  statement	85	None	replace
557	[BUG]  [BUGGY]  cc.addOp( ":? ",  true);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp( ":? ",  true);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( ":? ",  true);	  cc.addOp(   ":?       ",    false);    	non-compiled	[CE]  not  a  statement	161	None	replace
558	[BUG]  [BUGGY]  Context.removeFirst();  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context.removeFirst();  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context.removeFirst();	  n.removeFirst();    	non-compiled	[CE]  not  a  statement	191	None	replace
559	[BUG]  [BUGGY]  NodeUtil.removeFirstChild(n);  [CE]  not  a  statement  [FE]                junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  NodeUtil.removeFirstChild(n);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	NodeUtil.removeFirstChild(n);	  n.removeFirst();    	non-compiled	[CE]  not  a  statement	191	None	replace
560	[BUG]  [BUGGY]  NodeUtil.removeFirstChild(first,  n);  [CE]  not  a  statement  [FE]                  junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  NodeUtil.removeFirstChild(first,  n);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	NodeUtil.removeFirstChild(first,  n);	  n.removeFirst();    	non-compiled	[CE]  not  a  statement	191	None	replace
561	[BUG]  [BUGGY]  NodeUtil.removeFirstChild(first);  [CE]  not  a  statement  [FE]                    junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  NodeUtil.removeFirstChild(first);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	NodeUtil.removeFirstChild(first);	  n.removeFirst();    	non-compiled	[CE]  not  a  statement	191	None	replace
562	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type)/  1;  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  int  p  =  NodeUtil.precedence(type)/  1;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	int  p  =  NodeUtil.precedence(type)/  1;	  int    p    =    NodeUtil.precedence(type)-    1;    	non-compiled	[CE]  not  a  statement	194	None	replace
563	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(n)-  1;  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  int  p  =  NodeUtil.precedence(n)-  1;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	int  p  =  NodeUtil.precedence(n)-  1;	  int    p    =    NodeUtil.precedence(type)-    1;    	non-compiled	[CE]  not  a  statement	194	None	replace
564	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type)-  1  +  1;  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  int  p  =  NodeUtil.precedence(type)-  1  +  1;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	int  p  =  NodeUtil.precedence(type)-  1  +  1;	  int    p    =    NodeUtil.precedence(type)-    1;    	non-compiled	[CE]  not  a  statement	194	None	replace
565	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first.getNext(),        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	58	None	add
566	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first.getNext(),        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp( "?   ",  true);	  	non-compiled	[CE]  not  a  statement	58	None	add
567	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first.getNext(),        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalArgumentException( " ");	  	non-compiled	[CE]  not  a  statement	58	None	add
568	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first.getNext(),        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	58	None	add
569	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalStateException( " ");  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalStateException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first.getNext(),        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  throw  new  IllegalStateException( " ");	  	non-compiled	[CE]  not  a  statement	58	None	add
570	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  return;  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  return;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first.getNext(),        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  return;	  	non-compiled	[CE]  not  a  statement	58	None	add
571	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        cc.addOp(   "?       ",    true);    cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);	  	non-compiled	[CE]  not  a  statement	90	None	add
572	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    cc.addOp(   "?     ",  true);  cc.addOp( ",  true);  cc.addOp( "?   ",  true);  [CE]  unclosed  string  literal  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    cc.addOp(   "?     ",  true);  cc.addOp( ",  true);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        cc.addOp(   "?       ",    true);    cc.addOp( ",  true);  cc.addOp( "?   ",  true);	  	non-compiled	[CE]  unclosed  string  literal	90	None	add
573	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  false);  cc.addOp( "?   ",  true);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  false);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        cc.addOp(   "?       ",    true);    cc.addOp( "?   ",  false);  cc.addOp( "?   ",  true);	  	non-compiled	[CE]  not  a  statement	90	None	add
574	[BUG]  [BUGGY]  n.addOp( "?   ",  true);  addExpr(first.getNext(),  0,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addOp( "?   ",  true);  addExpr(first.getNext(),  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addOp( "?   ",  true);  addExpr(first.getNext(),  0,  rhsContext);	  cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	45	None	replace
575	[BUG]  [BUGGY]  n.addOp( "?   ",  true);  addExpr(first.getNext(),  2,  rhsContext);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addOp( "?   ",  true);  addExpr(first.getNext(),  2,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addOp( "?   ",  true);  addExpr(first.getNext(),  2,  rhsContext);	  cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	45	None	replace
576	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount!=  2);  Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount!=  2);  [CE]  not  a  statement  [FE]    IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount!=  2);  Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount!=  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount!=    2);    Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount!=  2);	  	non-compiled	[CE]  not  a  statement	130	None	add
577	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount!=  2);  Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  >=  2);  [CE]  not  a  statement  [FE]      IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount!=  2);  Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  >=  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount!=    2);    Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  >=  2);	  	non-compiled	[CE]  not  a  statement	130	None	add
578	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount!=  2);  Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  >>  2);  [CE]  not  a  statement  [FE]        IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount!=  2);  Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  >>  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount!=    2);    Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  >>  2);	  	non-compiled	[CE]  not  a  statement	130	None	add
579	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount!=  2);  Context.checkState(childCount  ==  2);  Preconditions.checkState(childCount!=  2);  [CE]  not  a  statement  [FE]          IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount!=  2);  Context.checkState(childCount  ==  2);  Preconditions.checkState(childCount!=  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount!=    2);    Context.checkState(childCount  ==  2);  Preconditions.checkState(childCount!=  2);	  	non-compiled	[CE]  not  a  statement	130	None	add
580	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount!=  2);  Context.checkState(childCount  ==  2);  Preconditions.checkState(childCount  >=  2);  [CE]  not  a  statement  [FE]            IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount!=  2);  Context.checkState(childCount  ==  2);  Preconditions.checkState(childCount  >=  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount!=    2);    Context.checkState(childCount  ==  2);  Preconditions.checkState(childCount  >=  2);	  	non-compiled	[CE]  not  a  statement	130	None	add
581	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForNonInOperator();  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  cc  =  getCurrentContextForNonInOperator();  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContextForNonInOperator();	  Context    cc    =    getCurrentContextForNoInOperator();    	non-compiled	[CE]  not  a  statement	193	None	replace
582	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForNonOperator();  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  cc  =  getCurrentContextForNonOperator();  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContextForNonOperator();	  Context    cc    =    getCurrentContextForNoInOperator();    	non-compiled	[CE]  not  a  statement	193	None	replace
583	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForNonEscaped();  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  cc  =  getCurrentContextForNonEscaped();  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContextForNonEscaped();	  Context    cc    =    getCurrentContextForNoInOperator();    	non-compiled	[CE]  not  a  statement	193	None	replace
584	[BUG]  [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ":   ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	26	None	add
585	[BUG]  [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( ": ".,  true);  addExpr(last,  1,  rhsContext);  [CE]  <identifier>  expected  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( ": ".,  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ":   ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp( ": ".,  true);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  <identifier>  expected	26	None	add
586	[BUG]  [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(first,  1,  rhsContext);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ":   ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp( ":   ",  true);  addExpr(first,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	26	None	add
587	[BUG]  [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( ":   ",  true);  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( ":   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ":   ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp( ":   ",  true);	  	non-compiled	[CE]  not  a  statement	26	None	add
588	[BUG]  [BUGGY]  addExpr(first.getNext(),  1,  rhsContext);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(first.getNext(),  1,  rhsContext);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(first.getNext(),    1,    rhsContext);    addExpr(first.getNext(),  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	38	None	add
589	[BUG]  [BUGGY]  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(first.getNext(),    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");	  	non-compiled	[CE]  not  a  statement	38	None	add
590	[BUG]  [BUGGY]  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:1  }  :  throw  new  IllegalStateException( " ");  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:1  }  :  throw  new  IllegalStateException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(first.getNext(),    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:1  }  :  throw  new  IllegalStateException( " ");	  	non-compiled	[CE]  not  a  statement	38	None	add
591	[BUG]  [BUGGY]  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:1  }  :  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(first.getNext(),    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	38	None	add
592	[BUG]  [BUGGY]  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:1  }  :  return;  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:1  }  :  return;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(first.getNext(),    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:1  }  :  return;	  	non-compiled	[CE]  not  a  statement	38	None	add
593	[BUG]  [BUGGY]  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:1  }  :  1;  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:1  }  :  1;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(first.getNext(),    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:1  }  :  1;	  	non-compiled	[CE]  not  a  statement	38	None	add
594	[BUG]  [BUGGY]  cc.addOp('?',  true);  [CE]  not  a  statement  [FE]                junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp('?',  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp('?',  true);	          cc.addOp(       "?       ",    true);    cc.addOp('?       ",    true);    	non-compiled	[CE]  not  a  statement	97	None	replace
595	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  1);  [CE]  not  a  statement  [FE]    IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  1);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  1);	  	non-compiled	[CE]  not  a  statement	52	None	add
596	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  1);  [CE]  not  a  statement  [FE]      IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  1);  Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  1);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount    ==    1);    Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  1);	  	non-compiled	[CE]  not  a  statement	52	None	add
597	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  1);  [CE]  not  a  statement  [FE]        IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  1);  int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  1);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount    ==    1);    int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  1);	  	non-compiled	[CE]  not  a  statement	52	None	add
598	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  Context.checkState(childCount  ==  1);  [CE]  not  a  statement  [FE]          IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  1);  Context.checkState(childCount  ==  1);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount    ==    1);    Context.checkState(childCount  ==  1);	  	non-compiled	[CE]  not  a  statement	52	None	add
599	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  Integer  p  =  NodeUtil.precedence(type);  [CE]  not  a  statement  [FE]            IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  1);  Integer  p  =  NodeUtil.precedence(type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount    ==    1);    Integer  p  =  NodeUtil.precedence(type);	  	non-compiled	[CE]  not  a  statement	52	None	add
600	[BUG]  [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }	          addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	166	None	replace
601	[BUG]  [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	166	None	replace
602	[BUG]  [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  }  else  {  addExpr(last,  1,  rhsContext);  }	          addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	166	None	replace
603	[BUG]  [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }	          addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	166	None	replace
604	[BUG]  [BUGGY]  n.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);	          addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	166	None	replace
605	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( ": ",  true);  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( ": ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   ":   ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp( ": ",  true);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	18	None	add
606	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( ": ",  true);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( ": ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   ":   ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp( ": ",  true);	  	non-compiled	[CE]  not  a  statement	18	None	add
607	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   ":   ",    true);    addExpr(last,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	18	None	add
608	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( ": ",  true);  addExpr(first,  1,  rhsContext);  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( ": ",  true);  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   ":   ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp( ": ",  true);  addExpr(first,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	18	None	add
609	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  return;  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  return;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   ":   ",    true);    addExpr(last,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  return;	  	non-compiled	[CE]  not  a  statement	18	None	add
610	[BUG]  [BUGGY]  n.removeChild(type);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.removeChild(type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.removeChild(type);	          cc.addOp(       "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?       ",    false);    addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	80	None	replace
611	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    cc.addOp(   ",?     ",  true);  cc.addOp( ",  true);  cc.addOp( "?   ",  true);  [CE]  unclosed  string  literal  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    cc.addOp(   ",?     ",  true);  cc.addOp( ",  true);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        cc.addOp(   ",?       ",    true);    cc.addOp( ",  true);  cc.addOp( "?   ",  true);	  	non-compiled	[CE]  unclosed  string  literal	94	None	add
612	[BUG]  [BUGGY]  n.addOp( "?   ",  true);  n.addExpr(first.getNext(),  0,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addOp( "?   ",  true);  n.addExpr(first.getNext(),  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addOp( "?   ",  true);  n.addExpr(first.getNext(),  0,  rhsContext);	  cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	45	None	replace
613	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  0);  cc.addOp( "?   ",  true);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  0);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount  ==  0);  cc.addOp( "?   ",  true);	          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount    ==    3);    cc.addOp(   "?       ",    true);    	non-compiled	[CE]  not  a  statement	116	None	replace
614	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp('?',  true);  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp('?',  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp('?',  true);  addExpr(last,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp('?',    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	69	None	replace
615	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp('?',  true);  addExpr(last,  1,  rhs  [CE]  [FE]                junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp('?',  true);  addExpr(last,  1,  rhs  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp('?',  true);  addExpr(last,  1,  rhs	          cc.addOp(       "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp('?',    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  	69	None	replace
616	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(rhsContext))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp('?',  true);  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]                  junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isLiteralValue(rhsContext))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp('?',  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isLiteralValue(rhsContext))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp('?',  true);  addExpr(last,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp('?',    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	69	None	replace
617	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  0,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  0,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	117	None	add
618	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  0,  rhsContext);  junit.framework.ComparisonFailure:  expected:  {  a:1  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  0,  rhsContext);  junit.framework.ComparisonFailure:  expected:  {  a:1  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    junit.framework.ComparisonFailure:  expected:  {  a:1  }	  	non-compiled	[CE]  not  a  statement	117	None	add
619	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  0,  rhsContext);  junit.framework.ComparisonFailure:  expected  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  0,  rhsContext);  junit.framework.ComparisonFailure:  expected  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    junit.framework.ComparisonFailure:  expected	  	non-compiled	[CE]  not  a  statement	117	None	add
620	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	177	None	add
621	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( ": ",  true);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( ": ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp( ": ",  true);	  	non-compiled	[CE]  not  a  statement	14	None	add
622	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( ": ",  true);  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( ": ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp( ": ",  true);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	14	None	add
623	[BUG]  [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  a:[]  {  foo=x?  {  a:1  }  :  addExpr(last,  0,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  a:[]  {  foo=x?  {  a:1  }  :  addExpr(last,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	junit.framework.ComparisonFailure:  expected:  <  a:[]  {  foo=x?  {  a:1  }  :  addExpr(last,  0,  rhsContext);	  addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	33	None	replace
624	[BUG]  [BUGGY]  Node  first  =  last.getLastChild();  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Node  first  =  last.getLastChild();  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Node  first  =  last.getLastChild();	  Node    first    =    n.getLastChild();    	non-compiled	[CE]  not  a  statement	6	None	replace
625	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  {  a:1  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  {  a:1  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first.getNext(),        1,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  {  a:1  }	  	non-compiled	[CE]  not  a  statement	62	None	add
626	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  ;  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  ;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first.getNext(),        1,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  ;	  	non-compiled	[CE]  not  a  statement	62	None	add
627	[BUG]  [BUGGY]  addExpr(last,  2,  rhsContext);  break;  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  2,  rhsContext);  break;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,  2,  rhsContext);  break;	  addExpr(last,    1,    rhsContext);    break;    	non-compiled	[CE]  not  a  statement	87	None	replace
628	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  2,  rhsContext);  junit.framework.ComparisonFailure:  expected:  {  a:1  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  2,  rhsContext);  junit.framework.ComparisonFailure:  expected:  {  a:1  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first.getNext(),        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    2,    rhsContext);    junit.framework.ComparisonFailure:  expected:  {  a:1  }	  	non-compiled	[CE]  not  a  statement	201	None	add
629	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  2,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  3,  rhsContext);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  2,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  3,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first.getNext(),        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    2,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first.getNext(),  3,  rhsContext);	  	non-compiled	[CE]  not  a  statement	201	None	add
630	[BUG]  [BUGGY]  cc.addOp(     ",     ",    true);    cc.addOp(   ",     ",  true);  cc.addOp( ",  true);  cc.addOp( ",  true);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(     ",     ",    true);    cc.addOp(   ",     ",  true);  cc.addOp( ",  true);  cc.addOp( ",  true);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(       ",       ",        true);        cc.addOp(   ",       ",    true);    cc.addOp( ",  true);  cc.addOp( ",  true);	  	non-compiled	[CE]  not  a  statement	46	None	add
631	[BUG]  [BUGGY]  cc.addOp(     ",     ",    true);    cc.addOp(   ",     ",  true);  cc.addOp( ": ",  true);  cc.addOp( ": ",  true);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(     ",     ",    true);    cc.addOp(   ",     ",  true);  cc.addOp( ": ",  true);  cc.addOp( ": ",  true);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(       ",       ",        true);        cc.addOp(   ",       ",    true);    cc.addOp( ": ",  true);  cc.addOp( ": ",  true);	  	non-compiled	[CE]  not  a  statement	46	None	add
632	[BUG]  [BUGGY]  addExpr(last.getNext(),  1,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last.getNext(),  1,  rhsContext);	  addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	39	None	replace
633	[BUG]  [BUGGY]  addExpr(first.getNext(),  1,  context);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(first.getNext(),  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(first.getNext(),  1,  context);	  addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	39	None	replace
634	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(last,  rhsContext);  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  int  p  =  NodeUtil.precedence(last,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	int  p  =  NodeUtil.precedence(last,  rhsContext);	  int    p    =    NodeUtil.precedence(type,    rhsContext);    	non-compiled	[CE]  not  a  statement	84	None	replace
635	[BUG]  [BUGGY]  Integer  p  =  NodeUtil.precedence(childCount);  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Integer  p  =  NodeUtil.precedence(childCount);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Integer  p  =  NodeUtil.precedence(childCount);	  int    p    =    NodeUtil.precedence(childCount);    	non-compiled	[CE]  not  a  statement	83	None	replace
636	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	59	None	replace
637	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhs  [CE]  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhs  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhs	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  	59	None	replace
638	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  else  {  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  else  {  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  else  {	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	59	None	replace
639	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	59	None	replace
640	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type  +  1,  context);  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  int  p  =  NodeUtil.precedence(type  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	int  p  =  NodeUtil.precedence(type  +  1,  context);	  int    p    =    NodeUtil.precedence(type    +    1);    	non-compiled	[CE]  not  a  statement	142	None	replace
641	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type  +  2);  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  int  p  =  NodeUtil.precedence(type  +  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	int  p  =  NodeUtil.precedence(type  +  2);	  int    p    =    NodeUtil.precedence(type    +    1);    	non-compiled	[CE]  not  a  statement	142	None	replace
642	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  2);  [CE]  not  a  statement  [FE]    IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);	  	non-compiled	[CE]  not  a  statement	125	None	add
643	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  2);  [CE]  not  a  statement  [FE]      IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount    ==    2);    Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  2);	  	non-compiled	[CE]  not  a  statement	125	None	add
644	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type),  rhsContext  -  1;  [CE]  [FE]            ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  int  p  =  NodeUtil.precedence(type),  rhsContext  -  1;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	int  p  =  NodeUtil.precedence(type),  rhsContext  -  1;	  int    p    =    NodeUtil.precedence(type)-    1;    	non-compiled	[CE]  	194	None	replace
645	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type  +  1)-  1;  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  int  p  =  NodeUtil.precedence(type  +  1)-  1;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	int  p  =  NodeUtil.precedence(type  +  1)-  1;	  int    p    =    NodeUtil.precedence(type)-    1;    	non-compiled	[CE]  not  a  statement	194	None	replace
646	[BUG]  [BUGGY]  n.setJSType(type);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.setJSType(type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.setJSType(type);	          cc.addOp(       "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	65	None	replace
647	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   ".?     ",  true);  addExpr(last,  0,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   ".?     ",  true);  addExpr(last,  0,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   ".?       ",    true);    addExpr(last,    0,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	198	None	add
648	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   ".?     ",  true);  addExpr(last,  0,  rhsContext);  junit.framework.ComparisonFailure:  expected:  {  a:1  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   ".?     ",  true);  addExpr(last,  0,  rhsContext);  junit.framework.ComparisonFailure:  expected:  {  a:1  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   ".?       ",    true);    addExpr(last,    0,    rhsContext);    junit.framework.ComparisonFailure:  expected:  {  a:1  }	  	non-compiled	[CE]  not  a  statement	198	None	add
649	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   ".?     ",  true);  addExpr(last,  0,  rhsContext);  junit.framework.ComparisonFailure:  expected  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   ".?     ",  true);  addExpr(last,  0,  rhsContext);  junit.framework.ComparisonFailure:  expected  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   ".?       ",    true);    addExpr(last,    0,    rhsContext);    junit.framework.ComparisonFailure:  expected	  	non-compiled	[CE]  not  a  statement	198	None	add
650	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  2,  rhsContext);  addExpr(last,  2,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  2,  rhsContext);  addExpr(last,  2,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        addExpr(last,    2,    rhsContext);    addExpr(last,  2,  rhsContext);	  	non-compiled	[CE]  not  a  statement	167	None	add
651	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        addExpr(last,    2,    rhsContext);    junit.framework.ComparisonFailure:  expected	  	non-compiled	[CE]  not  a  statement	167	None	add
652	[BUG]  [BUGGY]  Preconditions.checkState(childCount!=  2);  [CE]  not  a  statement  [FE]    IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount!=  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount!=  2);	          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount!=    2);    	non-compiled	[CE]  not  a  statement	131	None	replace
653	[BUG]  [BUGGY]  n.removeChild(rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.removeChild(rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.removeChild(rhsContext);	          addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    true);    	non-compiled	[CE]  not  a  statement	170	None	replace
654	[BUG]  [BUGGY]  if(first!=  null)  {  cc.addOp( "?   ",  true);  cc.addExpr(first.getNext(),  1,  rhsContext);  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:1}[]:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(first!=  null)  {  cc.addOp( "?   ",  true);  cc.addExpr(first.getNext(),  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(first!=  null)  {  cc.addOp( "?   ",  true);  cc.addExpr(first.getNext(),  1,  rhsContext);  }	  cc.addOp(   "?       ",    true);    cc.addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	147	None	replace
655	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getLastChild();  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Node  first  =  n.getFirstChild().getLastChild();  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Node  first  =  n.getFirstChild().getLastChild();	  Node    first    =    n.getFirstChild().getNext();    	non-compiled	[CE]  not  a  statement	146	None	replace
656	[BUG]  [BUGGY]  cc.addOp(     ",     ",    true);    cc.addOp(   ".,     ",  true);  cc.addOp( ".,  true);  cc.addOp( ".,   ",  true);  [CE]  <identifier>  expected  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(     ",     ",    true);    cc.addOp(   ".,     ",  true);  cc.addOp( ".,  true);  cc.addOp( ".,   ",  true);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(       ",       ",        true);        cc.addOp(   ".,       ",    true);    cc.addOp( ".,  true);  cc.addOp( ".,   ",  true);	  	non-compiled	[CE]  <identifier>  expected	48	None	add
657	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(last))  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  break;  }  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isExpressionNode(last))  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isExpressionNode(last))  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  break;  }	  cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    break;    	non-compiled	[CE]  not  a  statement	86	None	replace
658	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(rhsContext))  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  break;  }  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isLiteralValue(rhsContext))  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isLiteralValue(rhsContext))  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  break;  }	  cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    break;    	non-compiled	[CE]  not  a  statement	86	None	replace
659	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  break;  }  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isExpressionNode(n))  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  break;  }	  cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    break;    	non-compiled	[CE]  not  a  statement	86	None	replace
660	[BUG]  [BUGGY]  cc.addOp(     "?     ",    false);    cc.addOp(   "?     ",  false);  cc.addOp( ".?   ",  false);  cc.addOp( "?   ",  false);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(     "?     ",    false);    cc.addOp(   "?     ",  false);  cc.addOp( ".?   ",  false);  cc.addOp( "?   ",  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(       "?       ",        false);        cc.addOp(   "?       ",    false);    cc.addOp( ".?   ",  false);  cc.addOp( "?   ",  false);	  	non-compiled	[CE]  not  a  statement	134	None	add
661	[BUG]  [BUGGY]  NodeUtil.removeFirst(first);  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  NodeUtil.removeFirst(first);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	NodeUtil.removeFirst(first);	  n.removeFirst();    	non-compiled	[CE]  not  a  statement	191	None	replace
662	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	121	None	add
663	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  {  a:1  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  {  a:1  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  {  a:1  }	  	non-compiled	[CE]  not  a  statement	121	None	add
664	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected	  	non-compiled	[CE]  not  a  statement	121	None	add
665	[BUG]  [BUGGY]  cc.addOp(, ",   ",  true);  [CE]  illegal  start  of  expression  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(, ",   ",  true);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(, ",   ",  true);	  cc.addOp(       ",       ",    true);    cc.addOp(,   ",       ",    true);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
666	[BUG]  [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( ",  true);  addExpr(last,  1,  rhsContext);  [CE]  unclosed  string  literal  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ":   ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp( ",  true);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  unclosed  string  literal	26	None	add
667	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getCurrentContext(rhsContext);  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  cc  =  getCurrentContext().getCurrentContext(rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContext().getCurrentContext(rhsContext);	  Context    cc    =    getCurrentContext().getCurrentContext();    	non-compiled	[CE]  not  a  statement	28	None	replace
668	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getCurrentContext(context);  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  cc  =  getCurrentContext().getCurrentContext(context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContext().getCurrentContext(context);	  Context    cc    =    getCurrentContext().getCurrentContext();    	non-compiled	[CE]  not  a  statement	28	None	replace
669	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getCurrentContext(n);  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  cc  =  getCurrentContext().getCurrentContext(n);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContext().getCurrentContext(n);	  Context    cc    =    getCurrentContext().getCurrentContext();    	non-compiled	[CE]  not  a  statement	28	None	replace
670	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]    IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount    ==    2);    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	180	None	add
671	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);  [CE]  not  a  statement  [FE]      IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount    ==    2);    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);	  	non-compiled	[CE]  not  a  statement	180	None	add
672	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  not  a  statement  [FE]        IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount    ==    2);    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	180	None	add
673	[BUG]  [BUGGY]  n.addOp( ": ",  true);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addOp( ": ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addOp( ": ",  true);	          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	19	None	replace
674	[BUG]  [BUGGY]  cc.addOp('.',  true);  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp('.',  true);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp('.',  true);	  cc.addOp(       ".?       ",    false);    cc.addOp('.?       ",    false);    	non-compiled	[CE]  not  a  statement	109	None	replace
675	[BUG]  [BUGGY]  cc.addOp('.?',  false);  [CE]  unclosed  character  literal  [FE]                junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp('.?',  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp('.?',  false);	  cc.addOp(       ".?       ",    false);    cc.addOp('.?       ",    false);    	non-compiled	[CE]  unclosed  character  literal	109	None	replace
676	[BUG]  [BUGGY]  Node  first  =  node.getFirstChild();  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Node  first  =  node.getFirstChild();  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Node  first  =  node.getFirstChild();	  Node    first    =    context.getFirstChild();    	non-compiled	[CE]  not  a  statement	7	None	replace
677	[BUG]  [BUGGY]  n.getFirstChild().getNext();  Node  n  =  first.getFirstChild();  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.getFirstChild().getNext();  Node  n  =  first.getFirstChild();  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.getFirstChild().getNext();    Node  n  =  first.getFirstChild();	  	non-compiled	[CE]  not  a  statement	189	None	add
678	[BUG]  [BUGGY]  n.getFirstChild().getNext();  junit.framework.ComparisonFailure:  expected;  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.getFirstChild().getNext();  junit.framework.ComparisonFailure:  expected;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.getFirstChild().getNext();    junit.framework.ComparisonFailure:  expected;	  	non-compiled	[CE]  not  a  statement	189	None	add
679	[BUG]  [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[0]?  {  a:1  }  :  addExpr(last,  p  +  1,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[0]?  {  a:1  }  :  addExpr(last,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	junit.framework.ComparisonFailure:  expected:  <  var  foo=x[0]?  {  a:1  }  :  addExpr(last,  p  +  1,  rhsContext);	  addExpr(last,    p    +    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	133	None	replace
680	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  Preconditions.checkState(childCount  ==  1);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]    IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  Preconditions.checkState(childCount  ==  1);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount    ==    2);    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	182	None	add
681	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext(context,  rhsContext);  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  cc  =  getCurrentContext(context,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContext(context,  rhsContext);	  Context    cc    =    getCurrentContext(context);    	non-compiled	[CE]  not  a  statement	29	None	replace
682	[BUG]  [BUGGY]  cc.addOp( ".   ",  false);  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp( ".   ",  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( ".   ",  false);	  cc.addOp(       ".?       ",    false);    cc.addOp(.   ".?       ",    false);    	non-compiled	[CE]  not  a  statement	108	None	replace
683	[BUG]  [BUGGY]  cc.addOp('?',  true);  addExpr(first,  1,  rhsContext);  [CE]  not  a  statement  [FE]                junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp('?',  true);  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp('?',  true);  addExpr(first,  1,  rhsContext);	          cc.addOp(       "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp('?',    true);    addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	81	None	replace
684	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3);  Integer  p  =  NodeUtil.precedence(type);  [CE]  not  a  statement  [FE]              IllegalStateException      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  3);  Integer  p  =  NodeUtil.precedence(type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount  ==  3);  Integer  p  =  NodeUtil.precedence(type);	          Preconditions.checkState(childCount    ==    2);    Integer    p    =    NodeUtil.precedence(type);    	non-compiled	[CE]  not  a  statement	184	None	replace
685	[BUG]  [BUGGY]  cc.addOp( ":   ".equals(p),  context);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp( ":   ".equals(p),  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( ":   ".equals(p),  context);	  cc.addOp(   ":   ".equals(p));    	non-compiled	[CE]  not  a  statement	10	None	replace
686	[BUG]  [BUGGY]  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected;  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(first,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected;	  	non-compiled	[CE]  not  a  statement	98	None	add
687	[BUG]  [BUGGY]  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(first,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected	  	non-compiled	[CE]  not  a  statement	98	None	add
688	[BUG]  [BUGGY]  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(first,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	98	None	add
689	[BUG]  [BUGGY]  cc.addOp(   ":?     ",  false);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[?]  {  a:1  }  :  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ":?     ",  false);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[?]  {  a:1  }  :  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ":?       ",    false);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[?]  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	160	None	add
690	[BUG]  [BUGGY]  n.addChildToFront(type,  context);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addChildToFront(type,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addChildToFront(type,  context);	  n.addChildToFront(context);    	non-compiled	[CE]  not  a  statement	187	None	replace
691	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  if(childCount  ==  1)  {  addExpr(last,  p  +  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  rhsContext);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  if(childCount  ==  1)  {  addExpr(last,  p  +  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    p    +    1,    rhsContext);    if(childCount  ==  1)  {  addExpr(last,  p  +  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  rhsContext);  }	  	non-compiled	[CE]  not  a  statement	132	None	add
692	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  if(childCount  ==  1)  {  addExpr(last,  p  +  1,  rhsContext);  }  else  {  addExpr(last,  p  +  1,  rhsContext);  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  if(childCount  ==  1)  {  addExpr(last,  p  +  1,  rhsContext);  }  else  {  addExpr(last,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    p    +    1,    rhsContext);    if(childCount  ==  1)  {  addExpr(last,  p  +  1,  rhsContext);  }  else  {  addExpr(last,  p  +  1,  rhsContext);  }	  	non-compiled	[CE]  not  a  statement	132	None	add
693	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  if(childCount  ==  1)  {  addExpr(last,  p  +  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(last,  p  +  1,  rhsContext);  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  if(childCount  ==  1)  {  addExpr(last,  p  +  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(last,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    p    +    1,    rhsContext);    if(childCount  ==  1)  {  addExpr(last,  p  +  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(last,  p  +  1,  rhsContext);  }	  	non-compiled	[CE]  not  a  statement	132	None	add
694	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  if(childCount  ==  1)  {  addExpr(last,  p  +  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  2);  addExpr(last,  p  +  1,  rhsContext);  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  if(childCount  ==  1)  {  addExpr(last,  p  +  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  2);  addExpr(last,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    p    +    1,    rhsContext);    if(childCount  ==  1)  {  addExpr(last,  p  +  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  2);  addExpr(last,  p  +  1,  rhsContext);  }	  	non-compiled	[CE]  not  a  statement	132	None	add
695	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  if(childCount  ==  1)  {  addExpr(last,  p  +  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  }  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  if(childCount  ==  1)  {  addExpr(last,  p  +  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    p    +    1,    rhsContext);    if(childCount  ==  1)  {  addExpr(last,  p  +  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  }	  	non-compiled	[CE]  not  a  statement	132	None	add
696	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isExpressionNode(last))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isExpressionNode(last))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isExpressionNode(last))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }	  if(NodeUtil.isExpressionNode(n))    {    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    break;    }    	non-compiled	[CE]  not  a  statement	145	None	replace
697	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  {  a:1  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  {  a:1  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(first,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  {  a:1  }	  	non-compiled	[CE]  not  a  statement	79	None	add
698	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(first,    1,    rhsContext);    cc.addOp( "?   ",  true);	  	non-compiled	[CE]  not  a  statement	79	None	add
699	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(first,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected	  	non-compiled	[CE]  not  a  statement	79	None	add
700	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForNode(context);  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  cc  =  getCurrentContextForNode(context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContextForNode(context);	  Context    cc    =    getCurrentContextForNode();    	non-compiled	[CE]  not  a  statement	159	None	replace
701	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForElement();  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  cc  =  getCurrentContextForElement();  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContextForElement();	  Context    cc    =    getCurrentContextForNode();    	non-compiled	[CE]  not  a  statement	159	None	replace
702	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3);  Integer  p  =  NodeUtil.precedence(type).intValue();  Preconditions.checkState(childCount  ==  2);  [CE]  not  a  statement  [FE]                IllegalStateException      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  3);  Integer  p  =  NodeUtil.precedence(type).intValue();  Preconditions.checkState(childCount  ==  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount  ==  3);  Integer  p  =  NodeUtil.precedence(type).intValue();  Preconditions.checkState(childCount  ==  2);	          Preconditions.checkState(childCount    ==    2);    Integer    p    =    NodeUtil.precedence(type).intValue();    Preconditions.checkState(childCount    ==    2);    	non-compiled	[CE]  not  a  statement	185	None	replace
703	[BUG]  [BUGGY]  Context  rhsContext  =  Context.OTHER;  [CE]  not  a  statement  [FE]        IllegalStateException      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  rhsContext  =  Context.OTHER;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  rhsContext  =  Context.OTHER;	          Preconditions.checkState(childCount    ==    2);    Integer    p    =    NodeUtil.precedence(type);    Preconditions.checkState(childCount    ==    2);    	non-compiled	[CE]  not  a  statement	179	None	replace
704	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount!=  2);  Preconditions.checkState(childCount  ==  2);  [CE]  not  a  statement  [FE]    IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount!=  2);  Preconditions.checkState(childCount  ==  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount!=    2);    Preconditions.checkState(childCount  ==  2);	  	non-compiled	[CE]  not  a  statement	130	None	add
705	[BUG]  [BUGGY]  n.addOp( "?   ",  true);  n.addOp(first.getNext(),  1,  rhsContext);  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:1}[]:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addOp( "?   ",  true);  n.addOp(first.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addOp( "?   ",  true);  n.addOp(first.getNext(),  1,  rhsContext);	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp('?',    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	61	None	replace
706	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  4);  Preconditions.checkState(childCount  ==  3);  [CE]  not  a  statement  [FE]    IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  4);  Preconditions.checkState(childCount  ==  3);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount    ==    4);    Preconditions.checkState(childCount  ==  3);	  	non-compiled	[CE]  not  a  statement	56	None	add
707	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  4);  Preconditions.checkState(childCount  ==  5);  [CE]  not  a  statement  [FE]      IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  4);  Preconditions.checkState(childCount  ==  5);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount    ==    4);    Preconditions.checkState(childCount  ==  5);	  	non-compiled	[CE]  not  a  statement	56	None	add
708	[BUG]  [BUGGY]  n.addChildToBack(context);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addChildToBack(context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addChildToBack(context);	  cc.addOp(   "?       ",    false);    addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	35	None	replace
709	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]    IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  1);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount  ==  1);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount    ==    2);    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	183	None	replace
710	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]      IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  3);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount  ==  3);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount    ==    2);    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	183	None	replace
711	[BUG]  [BUGGY]  cc.addOp(   ":     ",  true);  cc.addOp( ": ".,  true);  [CE]  <identifier>  expected  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ":     ",  true);  cc.addOp( ": ".,  true);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ":       ",    true);    cc.addOp( ": ".,  true);	  	non-compiled	[CE]  <identifier>  expected	3	None	add
712	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  junit.framework.ComparisonFailure:  expected:  {  a:1  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  junit.framework.ComparisonFailure:  expected:  {  a:1  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first.getNext(),        1,        rhsContext);        cc.addOp(   "?       ",    true);    junit.framework.ComparisonFailure:  expected:  {  a:1  }	  	non-compiled	[CE]  not  a  statement	173	None	add
713	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  2,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  2,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  false);  addExpr(last,  2,  rhsContext);	  	non-compiled	[CE]  not  a  statement	24	None	add
714	[BUG]  [BUGGY]  n.getFirstChild().removeChild(last);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.getFirstChild().removeChild(last);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.getFirstChild().removeChild(last);	  n.getFirstChild().getNext();    	non-compiled	[CE]  not  a  statement	190	None	replace
715	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        addExpr(last,    1,    rhsContext);    addExpr(last,  1,  rhsContext);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	12	None	add
716	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        addExpr(last,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected	  	non-compiled	[CE]  not  a  statement	12	None	add
717	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected;  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        addExpr(last,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected;	  	non-compiled	[CE]  not  a  statement	12	None	add
718	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(last))  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isExpressionNode(last))  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isExpressionNode(last))  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }	  cc.addOp(   ":   ",    true);    addExpr(last,    1,    rhsContext);    break;    	non-compiled	[CE]  not  a  statement	88	None	replace
719	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    2,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	175	None	add
720	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected:  {  a:1  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected:  {  a:1  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    2,    rhsContext);    junit.framework.ComparisonFailure:  expected:  {  a:1  }	  	non-compiled	[CE]  not  a  statement	175	None	add
721	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    2,    rhsContext);    junit.framework.ComparisonFailure:  expected	  	non-compiled	[CE]  not  a  statement	175	None	add
722	[BUG]  [BUGGY]  addExpr(last,  3,  rhsContext);  if(childCount  ==  1)  {  addExpr(last,  3,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  3,  rhsContext);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  3,  rhsContext);  if(childCount  ==  1)  {  addExpr(last,  3,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  3,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    3,    rhsContext);    if(childCount  ==  1)  {  addExpr(last,  3,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  3,  rhsContext);  }	  	non-compiled	[CE]  not  a  statement	154	None	add
723	[BUG]  [BUGGY]  addExpr(last,  3,  rhsContext);  if(childCount  ==  1)  {  addExpr(last,  3,  rhsContext);  }  else  {  addExpr(last,  3,  rhsContext);  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  3,  rhsContext);  if(childCount  ==  1)  {  addExpr(last,  3,  rhsContext);  }  else  {  addExpr(last,  3,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    3,    rhsContext);    if(childCount  ==  1)  {  addExpr(last,  3,  rhsContext);  }  else  {  addExpr(last,  3,  rhsContext);  }	  	non-compiled	[CE]  not  a  statement	154	None	add
724	[BUG]  [BUGGY]  addExpr(last,  3,  rhsContext);  if(childCount  ==  1)  {  addExpr(last,  3,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  4,  rhsContext);  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  3,  rhsContext);  if(childCount  ==  1)  {  addExpr(last,  3,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  4,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    3,    rhsContext);    if(childCount  ==  1)  {  addExpr(last,  3,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  4,  rhsContext);  }	  	non-compiled	[CE]  not  a  statement	154	None	add
725	[BUG]  [BUGGY]  addExpr(last,  3,  rhsContext);  if(childCount  ==  1)  {  addExpr(last,  3,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(last,  3,  rhsContext);  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  3,  rhsContext);  if(childCount  ==  1)  {  addExpr(last,  3,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(last,  3,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    3,    rhsContext);    if(childCount  ==  1)  {  addExpr(last,  3,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(last,  3,  rhsContext);  }	  	non-compiled	[CE]  not  a  statement	154	None	add
726	[BUG]  [BUGGY]  addExpr(last,  3,  rhsContext);  if(childCount  ==  1)  {  addExpr(last,  3,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  2,  rhsContext);  }  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  3,  rhsContext);  if(childCount  ==  1)  {  addExpr(last,  3,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  2,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    3,    rhsContext);    if(childCount  ==  1)  {  addExpr(last,  3,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  2,  rhsContext);  }	  	non-compiled	[CE]  not  a  statement	154	None	add
727	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }  [CE]  not  a  statement  [FE]                junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isExpressionNode(n))  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }	          cc.addOp(       "?       ",    true);    cc.addOp('?       ",    true);    	non-compiled	[CE]  not  a  statement	97	None	replace
728	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]                  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isExpressionNode(n))  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }  else  {  addExpr(last,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    cc.addOp('?       ",    true);    	non-compiled	[CE]  not  a  statement	97	None	replace
729	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(last))  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }  [CE]  not  a  statement  [FE]                    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isExpressionNode(last))  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isExpressionNode(last))  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }	          cc.addOp(       "?       ",    true);    cc.addOp('?       ",    true);    	non-compiled	[CE]  not  a  statement	97	None	replace
730	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]                      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isExpressionNode(n))  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }  else  {  addExpr(first,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    cc.addOp('?       ",    true);    	non-compiled	[CE]  not  a  statement	97	None	replace
731	[BUG]  [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ":   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	42	None	add
732	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  3);  [CE]  not  a  statement  [FE]    ComparisonFailure    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  3);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        3);        Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);	  	non-compiled	[CE]  not  a  statement	110	None	add
733	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  3);  [CE]  not  a  statement  [FE]      ComparisonFailure    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  3);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        3);        Preconditions.checkState(childCount    ==    3);    int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  3);	  	non-compiled	[CE]  not  a  statement	110	None	add
734	[BUG]  [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( ":   ",  true);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( ":   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ":   ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp( ":   ",  true);	  	non-compiled	[CE]  not  a  statement	36	None	add
735	[BUG]  [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( ",  true);  addExpr(last,  0,  rhsContext);  [CE]  unclosed  string  literal  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( ",  true);  addExpr(last,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ":   ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp( ",  true);  addExpr(last,  0,  rhsContext);	  	non-compiled	[CE]  unclosed  string  literal	36	None	add
736	[BUG]  [BUGGY]  addExpr(last,  0,  rhsContext);  if(childCount  ==  1)  {  addExpr(last,  0,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  0,  rhsContext);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  0,  rhsContext);  if(childCount  ==  1)  {  addExpr(last,  0,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  0,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    0,    rhsContext);    if(childCount  ==  1)  {  addExpr(last,  0,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  0,  rhsContext);  }	  	non-compiled	[CE]  not  a  statement	32	None	add
737	[BUG]  [BUGGY]  addExpr(last,  0,  rhsContext);  if(childCount  ==  1)  {  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  0,  rhsContext);  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  0,  rhsContext);  if(childCount  ==  1)  {  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  0,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    0,    rhsContext);    if(childCount  ==  1)  {  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  0,  rhsContext);  }	  	non-compiled	[CE]  not  a  statement	32	None	add
738	[BUG]  [BUGGY]  addExpr(last,  0,  rhsContext);  if(childCount  ==  1)  {  addExpr(last,  0,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(last,  0,  rhsContext);  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  0,  rhsContext);  if(childCount  ==  1)  {  addExpr(last,  0,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(last,  0,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    0,    rhsContext);    if(childCount  ==  1)  {  addExpr(last,  0,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(last,  0,  rhsContext);  }	  	non-compiled	[CE]  not  a  statement	32	None	add
739	[BUG]  [BUGGY]  addExpr(last,  0,  rhsContext);  if(childCount  ==  1)  {  addExpr(last,  0,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  2);  addExpr(last,  0,  rhsContext);  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  0,  rhsContext);  if(childCount  ==  1)  {  addExpr(last,  0,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  2);  addExpr(last,  0,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    0,    rhsContext);    if(childCount  ==  1)  {  addExpr(last,  0,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  2);  addExpr(last,  0,  rhsContext);  }	  	non-compiled	[CE]  not  a  statement	32	None	add
740	[BUG]  [BUGGY]  addExpr(last,  0,  rhsContext);  if(childCount  ==  1)  {  addExpr(last,  0,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  0,  rhsContext);  if(childCount  ==  1)  {  addExpr(last,  0,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    0,    rhsContext);    if(childCount  ==  1)  {  addExpr(last,  0,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  1,  rhsContext);  }	  	non-compiled	[CE]  not  a  statement	32	None	add
741	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  0,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  0,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(last,    0,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	123	None	add
742	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  0,  rhsContext);  junit.framework.ComparisonFailure:  expected:  {  a:1  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  0,  rhsContext);  junit.framework.ComparisonFailure:  expected:  {  a:1  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(last,    0,    rhsContext);    junit.framework.ComparisonFailure:  expected:  {  a:1  }	  	non-compiled	[CE]  not  a  statement	123	None	add
743	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  0,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  a:[]  {  a:1  }  :  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  0,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  a:[]  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(last,    0,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  a:[]  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	123	None	add
744	[BUG]  [BUGGY]  n.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);	          cc.addOp(       "?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?       ",    false);    addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	124	None	replace
745	[BUG]  [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  false);  cc.addOp('?',  false);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  false);  cc.addOp('?',  false);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(childCount  ==  1)  {  cc.addOp( "?   ",  false);  cc.addOp('?',  false);  }  else  {  addExpr(last,  1,  rhsContext);  }	  cc.addOp(       "?       ",    false);    cc.addOp('?       ",    false);    	non-compiled	[CE]  not  a  statement	140	None	replace
746	[BUG]  [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  false);  cc.addOp('?',  false);  }  else  {  addExpr(last,  1,  rhsContext);  break;  }  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  false);  cc.addOp('?',  false);  }  else  {  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(childCount  ==  1)  {  cc.addOp( "?   ",  false);  cc.addOp('?',  false);  }  else  {  addExpr(last,  1,  rhsContext);  break;  }	  cc.addOp(       "?       ",    false);    cc.addOp('?       ",    false);    	non-compiled	[CE]  not  a  statement	140	None	replace
747	[BUG]  [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  false);  cc.addOp('?',  false);  }  else  {  addExpr(first,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  false);  cc.addOp('?',  false);  }  else  {  addExpr(first,  1,  rhsContext);  }  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(childCount  ==  1)  {  cc.addOp( "?   ",  false);  cc.addOp('?',  false);  }  else  {  addExpr(first,  1,  rhsContext);  }	  cc.addOp(       "?       ",    false);    cc.addOp('?       ",    false);    	non-compiled	[CE]  not  a  statement	140	None	replace
748	[BUG]  [BUGGY]  Context  cc  =  getCurrentStatementContext(context);  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  cc  =  getCurrentStatementContext(context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentStatementContext(context);	  Context    cc    =    getCurrentStatementContext();    	non-compiled	[CE]  not  a  statement	158	None	replace
749	[BUG]  [BUGGY]  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  false);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  false);	  cc.addOp(       "?       ",    false);    cc.addOp(   ".?       ",    false);    	non-compiled	[CE]  not  a  statement	137	None	replace
750	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForNonEmptyContext();  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  cc  =  getCurrentContextForNonEmptyContext();  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContextForNonEmptyContext();	  Context    cc    =    getCurrentContextForNoInOperator();    	non-compiled	[CE]  not  a  statement	193	None	replace
751	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForOperator();  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  cc  =  getCurrentContextForOperator();  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContextForOperator();	  Context    cc    =    getCurrentContextForNoInOperator();    	non-compiled	[CE]  not  a  statement	193	None	replace
752	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhs  [CE]  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhs  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhs	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  	63	None	replace
753	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  }  else  {  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  }  else  {  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  }  else  {	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	63	None	replace
754	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rh  [CE]  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rh  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rh	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  	63	None	replace
755	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsCon  [CE]  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsCon  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsCon	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  	63	None	replace
756	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  {  a:1  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  {  a:1  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  {  a:1  }	  	non-compiled	[CE]  not  a  statement	74	None	add
757	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected	  	non-compiled	[CE]  not  a  statement	74	None	add
758	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp( "?   ",  true);	  	non-compiled	[CE]  not  a  statement	74	None	add
759	[BUG]  [BUGGY]  n.addOp( "?   ",  false);  n.addExpr(first.getNext(),  1,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addOp( "?   ",  false);  n.addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addOp( "?   ",  false);  n.addExpr(first.getNext(),  1,  rhsContext);	  cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	41	None	replace
760	[BUG]  [BUGGY]  n.addOp( "?   ",  false);  addExpr(first.getNext(),  2,  rhsContext);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addOp( "?   ",  false);  addExpr(first.getNext(),  2,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addOp( "?   ",  false);  addExpr(first.getNext(),  2,  rhsContext);	  cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	41	None	replace
761	[BUG]  [BUGGY]  cc.addOp( ",?   ",  true);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp( ",?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( ",?   ",  true);	          cc.addOp(       "?       ",    true);    cc.addOp(   ",?       ",    true);    	non-compiled	[CE]  not  a  statement	95	None	replace
762	[BUG]  [BUGGY]  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected;  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(first.getNext(),    1,    rhsContext);    junit.framework.ComparisonFailure:  expected;	  	non-compiled	[CE]  not  a  statement	38	None	add
763	[BUG]  [BUGGY]  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(first.getNext(),    1,    rhsContext);    junit.framework.ComparisonFailure:  expected	  	non-compiled	[CE]  not  a  statement	38	None	add
764	[BUG]  [BUGGY]  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(first.getNext(),    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	38	None	add
765	[BUG]  [BUGGY]  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  {  a:1  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  {  a:1  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(first.getNext(),    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  {  a:1  }	  	non-compiled	[CE]  not  a  statement	38	None	add
766	[BUG]  [BUGGY]  n.add(foo);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.add(foo);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.add(foo);	          addExpr(last,    1,    rhsContext);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	13	None	replace
767	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	165	None	add
768	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  return;  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  return;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  return;	  	non-compiled	[CE]  not  a  statement	165	None	add
769	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  true);	  	non-compiled	[CE]  not  a  statement	165	None	add
770	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  {  a:1  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  {  a:1  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first.getNext(),        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  {  a:1  }	  	non-compiled	[CE]  not  a  statement	58	None	add
771	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  ;  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  ;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first.getNext(),        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  ;	  	non-compiled	[CE]  not  a  statement	58	None	add
772	[BUG]  [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[0]?  {  a:1  }  :  addExpr(last,  2,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[0]?  {  a:1  }  :  addExpr(last,  2,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	junit.framework.ComparisonFailure:  expected:  <  var  foo=x[0]?  {  a:1  }  :  addExpr(last,  2,  rhsContext);	  addExpr(last,    2,    rhsContext);    	non-compiled	[CE]  not  a  statement	153	None	replace
773	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp( "?   ",  true);	  	non-compiled	[CE]  not  a  statement	16	None	add
774	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	16	None	add
775	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  return;  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  return;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  return;	  	non-compiled	[CE]  not  a  statement	16	None	add
776	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ": ",  true);  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ": ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp( ": ",  true);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	16	None	add
777	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ": ",  true);  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ": ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   ":   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp( ": ",  true);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	22	None	add
778	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  return;  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  return;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   ":   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  return;	  	non-compiled	[CE]  not  a  statement	22	None	add
779	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  Context  rhsContext  =  Context.OTHER;  Preconditions.checkState(childCount  ==  1);  [CE]  not  a  statement  [FE]    IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  1);  Context  rhsContext  =  Context.OTHER;  Preconditions.checkState(childCount  ==  1);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount    ==    1);    Context  rhsContext  =  Context.OTHER;  Preconditions.checkState(childCount  ==  1);	  	non-compiled	[CE]  not  a  statement	52	None	add
780	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  2);  [CE]  not  a  statement  [FE]      IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  1);  Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount    ==    1);    Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  2);	  	non-compiled	[CE]  not  a  statement	52	None	add
781	[BUG]  [BUGGY]  cc.addOp( "?   ",  true);  cc.addOp(? "?   ",  false);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp( "?   ",  true);  cc.addOp(? "?   ",  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( "?   ",  true);  cc.addOp(? "?   ",  false);	  cc.addOp(       "?       ",    false);    cc.addOp(?   "?       ",    false);    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
782	[BUG]  [BUGGY]  n.addOp( "?   ",  false);  n.addOp(? "?   ",  false);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addOp( "?   ",  false);  n.addOp(? "?   ",  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addOp( "?   ",  false);  n.addOp(? "?   ",  false);	  cc.addOp(       "?       ",    false);    cc.addOp(?   "?       ",    false);    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
783	[BUG]  [BUGGY]  addExpr(last,  2,  rhsContext);  cc.addOp( ": ",  true);  addExpr(last,  2,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  2,  rhsContext);  cc.addOp( ": ",  true);  addExpr(last,  2,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    2,    rhsContext);    cc.addOp( ": ",  true);  addExpr(last,  2,  rhsContext);	  	non-compiled	[CE]  not  a  statement	152	None	add
784	[BUG]  [BUGGY]  addExpr(last,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[?]  {  a:1  }  :  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[?]  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    2,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[?]  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	152	None	add
785	[BUG]  [BUGGY]  addExpr(last,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected;  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    2,    rhsContext);    junit.framework.ComparisonFailure:  expected;	  	non-compiled	[CE]  not  a  statement	152	None	add
786	[BUG]  [BUGGY]  addExpr(last,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    2,    rhsContext);    junit.framework.ComparisonFailure:  expected	  	non-compiled	[CE]  not  a  statement	152	None	add
787	[BUG]  [BUGGY]  p  =  NodeUtil.precedence(type);  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  p  =  NodeUtil.precedence(type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	p  =  NodeUtil.precedence(type);	  int    p    =    NodeUtil.precedence(n);    	non-compiled	[CE]  not  a  statement	85	None	replace
788	[BUG]  [BUGGY]  n.addOp( "?   ",  true);  addExpr(first,  0,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addOp( "?   ",  true);  addExpr(first,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addOp( "?   ",  true);  addExpr(first,  0,  rhsContext);	          cc.addOp(       "?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   ".?       ",    true);    addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	199	None	replace
789	[BUG]  [BUGGY]  cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  0,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  0,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  0,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    0,    rhsContext);    cc.addOp( "?   ",  false);  addExpr(first.getNext(),  0,  rhsContext);	  	non-compiled	[CE]  not  a  statement	44	None	add
790	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  >=  2);  Preconditions.checkState(childCount  ==  2);  [CE]  not  a  statement  [FE]    IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  >=  2);  Preconditions.checkState(childCount  ==  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount    >=    2);    Preconditions.checkState(childCount  ==  2);	  	non-compiled	[CE]  not  a  statement	128	None	add
791	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  return;  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  return;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    true);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  return;	  	non-compiled	[CE]  not  a  statement	150	None	add
792	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  junit.framework.ComparisonFailure:  expected:  {  a:1  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  junit.framework.ComparisonFailure:  expected:  {  a:1  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    true);    junit.framework.ComparisonFailure:  expected:  {  a:1  }	  	non-compiled	[CE]  not  a  statement	150	None	add
793	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   "?       ",    true);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	156	None	add
794	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:[]1  }  :  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:[]1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   "?       ",    true);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?  {  a:[]1  }  :	  	non-compiled	[CE]  not  a  statement	156	None	add
795	[BUG]  [BUGGY]  cc.addOp( ": ");  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp( ": ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( ": ");	          cc.addOp(       "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   ",    true);    addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	78	None	replace
796	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext(context,  n);  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  cc  =  getCurrentContext(context,  n);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContext(context,  n);	  Context    cc    =    getCurrentContext(n);    	non-compiled	[CE]  not  a  statement	31	None	replace
797	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext(parent);  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  cc  =  getCurrentContext(parent);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContext(parent);	  Context    cc    =    getCurrentContext(n);    	non-compiled	[CE]  not  a  statement	31	None	replace
798	[BUG]  [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( ":   ",  true);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( ":   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ":   ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp( ":   ",  true);	  	non-compiled	[CE]  not  a  statement	102	None	add
799	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  2,  rhsContext);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  2,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  2,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    2,    rhsContext);    	non-compiled	[CE]  not  a  statement	202	None	replace
800	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  2,  rhs  [CE]  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  2,  rhs  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  2,  rhs	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    2,    rhsContext);    	non-compiled	[CE]  	202	None	replace
801	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  2,  rhsContext);  }  else  {  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  2,  rhsContext);  }  else  {  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  2,  rhsContext);  }  else  {	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    2,    rhsContext);    	non-compiled	[CE]  not  a  statement	202	None	replace
802	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  3,  rhsContext);  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  3,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  3,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    2,    rhsContext);    	non-compiled	[CE]  not  a  statement	202	None	replace
803	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	67	None	add
804	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  {  a:1  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  {  a:1  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  {  a:1  }	  	non-compiled	[CE]  not  a  statement	67	None	add
805	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  {  a:3  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  {  a:3  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  {  a:3  }	  	non-compiled	[CE]  not  a  statement	67	None	add
806	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  {  a:1  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  {  a:1  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  {  a:1  }	  	non-compiled	[CE]  not  a  statement	76	None	add
807	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected	  	non-compiled	[CE]  not  a  statement	76	None	add
808	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  true);	  	non-compiled	[CE]  not  a  statement	76	None	add
809	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	169	None	add
810	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  return;  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  return;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x[]?  {  a:1  }  :  return;	  	non-compiled	[CE]  not  a  statement	169	None	add
811	[BUG]  [BUGGY]  cc.addOp( ",  true, ",  false);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp( ",  true, ",  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( ",  true, ",  false);	  cc.addOp(   ",       ",    false);    	non-compiled	[CE]  not  a  statement	73	None	replace
812	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected:  {  a:1  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected:  {  a:1  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first,    2,    rhsContext);    junit.framework.ComparisonFailure:  expected:  {  a:1  }	  	non-compiled	[CE]  not  a  statement	203	None	add
813	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  2,  rhsContext);  junit.framework.ComparisonFailure:  expected  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first,    2,    rhsContext);    junit.framework.ComparisonFailure:  expected	  	non-compiled	[CE]  not  a  statement	203	None	add
814	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp('?',  true);  addExpr(last,  0,  rhsContext);  }  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp('?',  true);  addExpr(last,  0,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp('?',  true);  addExpr(last,  0,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp('?',    true);    addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	120	None	replace
815	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp('?',  true);  addExpr(last,  0,  rhsContext  [CE]  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp('?',  true);  addExpr(last,  0,  rhsContext  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp('?',  true);  addExpr(last,  0,  rhsContext	          cc.addOp(       "?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp('?',    true);    addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  	120	None	replace
816	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp('?',  true);  addExpr(last,  0,  rhs  [CE]  [FE]                junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp('?',  true);  addExpr(last,  0,  rhs  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp('?',  true);  addExpr(last,  0,  rhs	          cc.addOp(       "?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp('?',    true);    addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  	120	None	replace
817	[BUG]  [BUGGY]  Integer  p  =  NodeUtil.precedence(type,  rhsContext);  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Integer  p  =  NodeUtil.precedence(type,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Integer  p  =  NodeUtil.precedence(type,  rhsContext);	  int    p    =    NodeUtil.precedence(type,    context);    	non-compiled	[CE]  not  a  statement	82	None	replace
818	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        addExpr(first,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected	  	non-compiled	[CE]  not  a  statement	20	None	add
819	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected;  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        addExpr(first,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected;	  	non-compiled	[CE]  not  a  statement	20	None	add
820	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(first,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(first,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        addExpr(first,    1,    rhsContext);    addExpr(last,  1,  rhsContext);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	20	None	add
821	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(first,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  addExpr(first,  1,  rhsContext);  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(first,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        addExpr(first,    1,    rhsContext);    addExpr(last,  1,  rhsContext);  addExpr(first,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	20	None	add
822	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator(context,  rhsContext);  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator(context,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContextForNoInOperator(context,  rhsContext);	  Context    cc    =    getCurrentContextForNoInOperator(context);    	non-compiled	[CE]  not  a  statement	192	None	replace
823	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator(context,  1);  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator(context,  1);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContextForNoInOperator(context,  1);	  Context    cc    =    getCurrentContextForNoInOperator(context);    	non-compiled	[CE]  not  a  statement	192	None	replace
824	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  cc.addOp(   "?     ",  true);  int  childCount  =  NodeUtil.precedence(type);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  cc.addOp(   "?     ",  true);  int  childCount  =  NodeUtil.precedence(type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        3);        Preconditions.checkState(childCount    ==    3);    cc.addOp(   "?       ",    true);    int  childCount  =  NodeUtil.precedence(type);	  	non-compiled	[CE]  not  a  statement	115	None	add
825	[BUG]  [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }	          addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	15	None	replace
826	[BUG]  [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	15	None	replace
827	[BUG]  [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }	          addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	15	None	replace
828	[BUG]  [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  return;  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  return;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  return;  }	          addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	15	None	replace
829	[BUG]  [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  return;  }  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  return;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  return;  }	          addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	15	None	replace
830	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	64	None	add
831	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  {  a:1  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  {  a:1  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  {  a:1  }	  	non-compiled	[CE]  not  a  statement	64	None	add
832	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected	  	non-compiled	[CE]  not  a  statement	64	None	add
833	[BUG]  [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  return;  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  return;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  return;  }	          addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	166	None	replace
834	[BUG]  [BUGGY]  n.addOp( ": ", ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  unclosed  string  literal  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addOp( ": ", ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addOp( ": ", ",  true);  addExpr(first.getNext(),  1,  rhsContext);	          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  unclosed  string  literal	23	None	replace
835	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(type)&&  NodeUtil.isFunctionDeclaration(last))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isLiteralValue(type)&&  NodeUtil.isFunctionDeclaration(last))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isLiteralValue(type)&&  NodeUtil.isFunctionDeclaration(last))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }	  if(NodeUtil.isLiteralValue(type))    {    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    break;    }    	non-compiled	[CE]  not  a  statement	197	None	replace
836	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  <  var  foo=x?[]  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	70	None	add
837	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  {  a:1  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected:  {  a:1  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected:  {  a:1  }	  	non-compiled	[CE]  not  a  statement	70	None	add
838	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  junit.framework.ComparisonFailure:  expected  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    junit.framework.ComparisonFailure:  expected	  	non-compiled	[CE]  not  a  statement	70	None	add
839	[BUG]  [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }	          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	19	None	replace
840	[BUG]  [BUGGY]  if(p  >  0)  {  addExpr(last,  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  >  0)  {  addExpr(last,  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  >  0)  {  addExpr(last,  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }	          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	19	None	replace
841	[BUG]  [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	19	None	replace
842	[BUG]  [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }	          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	19	None	replace
843	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   ",?       ",    true);    	non-compiled	[CE]  not  a  statement	95	None	replace
844	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  else  {  addExpr(last,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   ",?       ",    true);    	non-compiled	[CE]  not  a  statement	95	None	replace
845	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  else  {  addExpr(last,  1,  rhsContext);  break;  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  else  {  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  else  {  addExpr(last,  1,  rhsContext);  break;  }	          cc.addOp(       "?       ",    true);    cc.addOp(   ",?       ",    true);    	non-compiled	[CE]  not  a  statement	95	None	replace
846	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   ",?       ",    true);    	non-compiled	[CE]  not  a  statement	95	None	replace
847	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }	          cc.addOp(       "?       ",    true);    cc.addOp(   ",?       ",    true);    	non-compiled	[CE]  not  a  statement	95	None	replace
848	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }  [CE]  not  a  statement  [FE]                junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last!=  null)  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }	          cc.addOp(       "?       ",    true);    cc.addOp('?       ",    true);    	non-compiled	[CE]  not  a  statement	97	None	replace
849	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }  [CE]  not  a  statement  [FE]                  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }	          cc.addOp(       "?       ",    true);    cc.addOp('?       ",    true);    	non-compiled	[CE]  not  a  statement	97	None	replace
850	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]                    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }  else  {  addExpr(last,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    cc.addOp('?       ",    true);    	non-compiled	[CE]  not  a  statement	97	None	replace
851	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]                      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last!=  null)  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }  else  {  addExpr(last,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    cc.addOp('?       ",    true);    	non-compiled	[CE]  not  a  statement	97	None	replace
852	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(type)||  NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isLiteralValue(type)||  NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isLiteralValue(type)||  NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }	  if(NodeUtil.isLiteralValue(type))    {    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    break;    }    	non-compiled	[CE]  not  a  statement	197	None	replace
853	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(type)&&  NodeUtil.isLiteralValue(last,  type))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isLiteralValue(type)&&  NodeUtil.isLiteralValue(last,  type))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isLiteralValue(type)&&  NodeUtil.isLiteralValue(last,  type))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }	  if(NodeUtil.isLiteralValue(type))    {    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    break;    }    	non-compiled	[CE]  not  a  statement	197	None	replace
854	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(type)&&  NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isLiteralValue(type)&&  NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isLiteralValue(type)&&  NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }	  if(NodeUtil.isLiteralValue(type))    {    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    break;    }    	non-compiled	[CE]  not  a  statement	197	None	replace
855	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(type)&&  NodeUtil.isLiteralValue(rhsContext))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [CE]  not  a  statement  [FE]                              ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isLiteralValue(type)&&  NodeUtil.isLiteralValue(rhsContext))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isLiteralValue(type)&&  NodeUtil.isLiteralValue(rhsContext))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }	  if(NodeUtil.isLiteralValue(type))    {    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    break;    }    	non-compiled	[CE]  not  a  statement	197	None	replace
856	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);	  	non-compiled	[CE]  not  a  statement	70	None	add
857	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  int  childCount  =  NodeUtil.precedence(type);  [CE]  not  a  statement  [FE]    IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  int  childCount  =  NodeUtil.precedence(type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount    ==    2);    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    int  childCount  =  NodeUtil.precedence(type);	  	non-compiled	[CE]  not  a  statement	180	None	add
858	[BUG]  [BUGGY]  cc.addOp( ".: ",  false);  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp( ".: ",  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( ".: ",  false);	  cc.addOp(       ".?       ",    false);    cc.addOp(.   ".?       ",    false);    	non-compiled	[CE]  not  a  statement	108	None	replace
859	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   ":   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	22	None	add
860	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   ":   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp( "?   ",  true);	  	non-compiled	[CE]  not  a  statement	22	None	add
861	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  Integer  p  =  NodeUtil.precedence(type,  rhsContext);  [CE]  not  a  statement  [FE]              IllegalStateException      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  2);  Integer  p  =  NodeUtil.precedence(type,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount  ==  2);  Integer  p  =  NodeUtil.precedence(type,  rhsContext);	          Preconditions.checkState(childCount    ==    2);    Integer    p    =    NodeUtil.precedence(type);    	non-compiled	[CE]  not  a  statement	184	None	replace
862	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  2,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  2,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first.getNext(),        1,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first.getNext(),  2,  rhsContext);	  	non-compiled	[CE]  not  a  statement	62	None	add
863	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?       ",    false);    addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	80	None	replace
864	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  }  else  {  addExpr  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  }  else  {  addExpr  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  }  else  {  addExpr	          cc.addOp(       "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?       ",    false);    addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	80	None	replace
865	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?       ",    false);    addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	80	None	replace
866	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          cc.addOp(       "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?       ",    false);    addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	80	None	replace
867	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  2,  rhsContext);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  2,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  2,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first,    2,    rhsContext);    	non-compiled	[CE]  not  a  statement	204	None	replace
868	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  2,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  2,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  2,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          cc.addOp(       "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first,    2,    rhsContext);    	non-compiled	[CE]  not  a  statement	204	None	replace
869	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  2,  rhsContext);  }  else  {  addExpr  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  2,  rhsContext);  }  else  {  addExpr  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  2,  rhsContext);  }  else  {  addExpr	          cc.addOp(       "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first,    2,    rhsContext);    	non-compiled	[CE]  not  a  statement	204	None	replace
870	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  2,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  2,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  2,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }	          cc.addOp(       "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first,    2,    rhsContext);    	non-compiled	[CE]  not  a  statement	204	None	replace
871	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ".?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ".?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp( ".?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	40	None	add
872	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first,  0,  rhsContext);  cc.addOp( ".?   ",  false);  addExpr(first,  0,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first,  0,  rhsContext);  cc.addOp( ".?   ",  false);  addExpr(first,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    false);    addExpr(first,    0,    rhsContext);    cc.addOp( ".?   ",  false);  addExpr(first,  0,  rhsContext);	  	non-compiled	[CE]  not  a  statement	171	None	add
873	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first,  0,  rhsContext);  cc.addOp( ",  false);  addExpr(first,  0,  rhsContext);  [CE]  unclosed  string  literal  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first,  0,  rhsContext);  cc.addOp( ",  false);  addExpr(first,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    false);    addExpr(first,    0,    rhsContext);    cc.addOp( ",  false);  addExpr(first,  0,  rhsContext);	  	non-compiled	[CE]  unclosed  string  literal	171	None	add
874	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   ":   ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	18	None	add
875	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   ":   ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  true);	  	non-compiled	[CE]  not  a  statement	18	None	add
876	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type,  Context.STATEMENT);  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  int  p  =  NodeUtil.precedence(type,  Context.STATEMENT);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	int  p  =  NodeUtil.precedence(type,  Context.STATEMENT);	  int    p    =    NodeUtil.precedence(type,    context);    	non-compiled	[CE]  not  a  statement	82	None	replace
877	[BUG]  [BUGGY]  if(p  >  0)  {  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  >  0)  {  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  >  0)  {  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }	          addExpr(last,    1,    rhsContext);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	13	None	replace
878	[BUG]  [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }	          addExpr(last,    1,    rhsContext);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	13	None	replace
879	[BUG]  [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  }	          addExpr(last,    1,    rhsContext);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	13	None	replace
880	[BUG]  [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          addExpr(last,    1,    rhsContext);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	13	None	replace
881	[BUG]  [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }	          addExpr(last,    1,    rhsContext);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	13	None	replace
882	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  2,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  2,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first.getNext(),        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first.getNext(),  2,  rhsContext);	  	non-compiled	[CE]  not  a  statement	58	None	add
883	[BUG]  [BUGGY]  junit.framework.ComparisonFailure:  expected  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  junit.framework.ComparisonFailure:  expected  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	junit.framework.ComparisonFailure:  expected	  addExpr(last,    p    +    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	133	None	replace
884	[BUG]  [BUGGY]  junit.framework.ComparisonFailure:  expected;  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  junit.framework.ComparisonFailure:  expected;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	junit.framework.ComparisonFailure:  expected;	  addExpr(last,    p    +    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	133	None	replace
885	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	14	None	add
886	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);	  	non-compiled	[CE]  not  a  statement	14	None	add
887	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	76	None	add
888	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	71	None	replace
889	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          cc.addOp(       "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	71	None	replace
890	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	71	None	replace
891	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }	          cc.addOp(       "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	71	None	replace
892	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  addExpr  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  addExpr  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  addExpr	          cc.addOp(       "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	71	None	replace
893	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  2);  [CE]  not  a  statement  [FE]    IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  2);	  	non-compiled	[CE]  not  a  statement	52	None	add
894	[BUG]  [BUGGY]  addExpr(last,  3,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  3,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  3,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  3,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    3,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  3,  rhsContext);	  	non-compiled	[CE]  not  a  statement	154	None	add
895	[BUG]  [BUGGY]  addExpr(last,  3,  rhsContext);  cc.addOp( ": ",  true);  addExpr(last,  3,  rhsContext);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  3,  rhsContext);  cc.addOp( ": ",  true);  addExpr(last,  3,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    3,    rhsContext);    cc.addOp( ": ",  true);  addExpr(last,  3,  rhsContext);	  	non-compiled	[CE]  not  a  statement	154	None	add
896	[BUG]  [BUGGY]  addExpr(last,  3,  rhsContext);  cc.addOp( "?   ",  true);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  3,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    3,    rhsContext);    cc.addOp( "?   ",  true);	  	non-compiled	[CE]  not  a  statement	154	None	add
897	[BUG]  [BUGGY]  addExpr(last,  3,  rhsContext);  junit.framework.ComparisonFailure:  expected  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  3,  rhsContext);  junit.framework.ComparisonFailure:  expected  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    3,    rhsContext);    junit.framework.ComparisonFailure:  expected	  	non-compiled	[CE]  not  a  statement	154	None	add
898	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  addExpr(last,  2,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  addExpr(last,  2,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    cc.addOp( "?   ",  true);  addExpr(last,  2,  rhsContext);	  	non-compiled	[CE]  not  a  statement	177	None	add
899	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);	  	non-compiled	[CE]  not  a  statement	177	None	add
900	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  cc.addOp( ",  true);  addExpr(last,  0,  rhsContext);  }  [CE]  unclosed  string  literal  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  cc.addOp( ",  true);  addExpr(last,  0,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  cc.addOp( ",  true);  addExpr(last,  0,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   ",    true);    addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  unclosed  string  literal	119	None	replace
901	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(rhsContext))  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isExpressionNode(rhsContext))  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isExpressionNode(rhsContext))  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   ",    true);    addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	119	None	replace
902	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   ",    true);    addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	119	None	replace
903	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(rhsContext))  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]                junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isExpressionNode(rhsContext))  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isExpressionNode(rhsContext))  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   ",    true);    addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	119	None	replace
904	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(rhsContext))  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  0,  rhsContext);  }  [CE]  not  a  statement  [FE]                  junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isExpressionNode(rhsContext))  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  0,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isExpressionNode(rhsContext))  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  0,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   ",    true);    addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	119	None	replace
905	[BUG]  [BUGGY]  if(p  >  0)  {  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  2,  rhsContext);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  >  0)  {  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  2,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  >  0)  {  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  2,  rhsContext);  }	          addExpr(last,    1,    rhsContext);    addExpr(last,    2,    rhsContext);    	non-compiled	[CE]  not  a  statement	168	None	replace
906	[BUG]  [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  2,  rhsContext);  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  2,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  2,  rhsContext);  }	          addExpr(last,    1,    rhsContext);    addExpr(last,    2,    rhsContext);    	non-compiled	[CE]  not  a  statement	168	None	replace
907	[BUG]  [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  2,  rhsContext);  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  2,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  2,  rhsContext);  }	          addExpr(last,    1,    rhsContext);    addExpr(last,    2,    rhsContext);    	non-compiled	[CE]  not  a  statement	168	None	replace
908	[BUG]  [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  2,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  2,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  2,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          addExpr(last,    1,    rhsContext);    addExpr(last,    2,    rhsContext);    	non-compiled	[CE]  not  a  statement	168	None	replace
909	[BUG]  [BUGGY]  if(p  >  0)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  2,  rhsContext);  }  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  >  0)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  2,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  >  0)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  2,  rhsContext);  }	          addExpr(last,    1,    rhsContext);    addExpr(last,    2,    rhsContext);    	non-compiled	[CE]  not  a  statement	168	None	replace
910	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  false);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  false);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(last,    0,    rhsContext);    cc.addOp( "?   ",  false);	  	non-compiled	[CE]  not  a  statement	123	None	add
911	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(last,    0,    rhsContext);    cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);	  	non-compiled	[CE]  not  a  statement	123	None	add
912	[BUG]  [BUGGY]  cc.addOp(   ":?     ",  false);  cc.addOp(':?   ",  false);  [CE]  unclosed  character  literal  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ":?     ",  false);  cc.addOp(':?   ",  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ":?       ",    false);    cc.addOp(':?   ",  false);	  	non-compiled	[CE]  unclosed  character  literal	160	None	add
913	[BUG]  [BUGGY]  cc.addOp(   ":?     ",  false);  cc.addOp( ":?   ",  true);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ":?     ",  false);  cc.addOp( ":?   ",  true);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ":?       ",    false);    cc.addOp( ":?   ",  true);	  	non-compiled	[CE]  not  a  statement	160	None	add
914	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator(context,  NodeUtil.precedence(type));  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator(context,  NodeUtil.precedence(type));  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContextForNoInOperator(context,  NodeUtil.precedence(type));	  Context    cc    =    getCurrentContextForNoInOperator(context);    	non-compiled	[CE]  not  a  statement	192	None	replace
915	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator(context,  STATEMENT);  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator(context,  STATEMENT);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContextForNoInOperator(context,  STATEMENT);	  Context    cc    =    getCurrentContextForNoInOperator(context);    	non-compiled	[CE]  not  a  statement	192	None	replace
916	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  2,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  3,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  2,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  3,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    2,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  3,  rhsContext);	  	non-compiled	[CE]  not  a  statement	175	None	add
917	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  2,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  4,  rhsContext);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  2,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  4,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    2,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  4,  rhsContext);	  	non-compiled	[CE]  not  a  statement	175	None	add
918	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  0,  rhsContext);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  0,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  0,  rhsContext);  }	  cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	149	None	replace
919	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  0,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  0,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  0,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }	  cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	149	None	replace
920	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  }	  cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	149	None	replace
921	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  0,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  0,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  0,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	149	None	replace
922	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    cc.addOp(   ".?     ",  true);  cc.addOp( ".?   ",  true);  cc.addOp( ".?   ",  true);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    cc.addOp(   ".?     ",  true);  cc.addOp( ".?   ",  true);  cc.addOp( ".?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        cc.addOp(   ".?       ",    true);    cc.addOp( ".?   ",  true);  cc.addOp( ".?   ",  true);	  	non-compiled	[CE]  not  a  statement	92	None	add
923	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  2,  rhsContext);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  2,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  2,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(last,    2,    rhsContext);    	non-compiled	[CE]  not  a  statement	176	None	replace
924	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  2,  rhsContext);  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  2,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  2,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(last,    2,    rhsContext);    	non-compiled	[CE]  not  a  statement	176	None	replace
925	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(last,    2,    rhsContext);    	non-compiled	[CE]  not  a  statement	176	None	replace
926	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  2,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  2,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  2,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          cc.addOp(       "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(last,    2,    rhsContext);    	non-compiled	[CE]  not  a  statement	176	None	replace
927	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  addExpr(last,  2,  rhsContext);  }  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  addExpr(last,  2,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  addExpr(last,  2,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(last,    2,    rhsContext);    	non-compiled	[CE]  not  a  statement	176	None	replace
928	[BUG]  [BUGGY]  if(p  >  0)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  >  0)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  >  0)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }	          addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	166	None	replace
929	[BUG]  [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  2);  return;  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  2);  return;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  2);  return;  }	          addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	166	None	replace
930	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   "?       ",    true);    	non-compiled	[CE]  not  a  statement	91	None	replace
931	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }  else  {  addExpr(last,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   "?       ",    true);    	non-compiled	[CE]  not  a  statement	91	None	replace
932	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }  else  {  addExpr(last,  1,  rhsContext);  break;  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }  else  {  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }  else  {  addExpr(last,  1,  rhsContext);  break;  }	          cc.addOp(       "?       ",    true);    cc.addOp(   "?       ",    true);    	non-compiled	[CE]  not  a  statement	91	None	replace
933	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  false);  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  false);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  false);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   "?       ",    true);    	non-compiled	[CE]  not  a  statement	91	None	replace
934	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   "?       ",    true);    	non-compiled	[CE]  not  a  statement	91	None	replace
935	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	66	None	replace
936	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(rhsContext))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isExpressionNode(rhsContext))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isExpressionNode(rhsContext))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	66	None	replace
937	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	66	None	replace
938	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]                junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isExpressionNode(n))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	66	None	replace
939	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]                  junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isExpressionNode(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isExpressionNode(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	66	None	replace
940	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  0);  Context.checkState(childCount  ==  3);  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  0);  Context.checkState(childCount  ==  3);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount  ==  0);  Context.checkState(childCount  ==  3);	          Preconditions.checkState(childCount    ==    3);    Context.checkState(childCount    ==    3);    	non-compiled	[CE]  not  a  statement	113	None	replace
941	[BUG]  [BUGGY]  addExpr(first,  1,  rhsContext);  cc.addOp( ": ",  true);  addExpr(first,  1,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(first,  1,  rhsContext);  cc.addOp( ": ",  true);  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(first,    1,    rhsContext);    cc.addOp( ": ",  true);  addExpr(first,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	98	None	add
942	[BUG]  [BUGGY]  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(first,    1,    rhsContext);    cc.addOp( "?   ",  true);	  	non-compiled	[CE]  not  a  statement	98	None	add
943	[BUG]  [BUGGY]  addExpr(first,  1,  rhsContext);  cc.addOp( ": ",  true);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(first,  1,  rhsContext);  cc.addOp( ": ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(first,    1,    rhsContext);    cc.addOp( ": ",  true);	  	non-compiled	[CE]  not  a  statement	98	None	add
944	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp('?',  true);  addExpr(last,  0,  rhsContext);  }  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp('?',  true);  addExpr(last,  0,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp('?',  true);  addExpr(last,  0,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp('?',    true);    addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	120	None	replace
945	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  0,  rhsContext);  }  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  0,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  0,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp('?',    true);    addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	120	None	replace
946	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  [CE]  not  a  statement  [FE]                junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp('?',    true);    addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	120	None	replace
947	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  0,  rhsContext);  }  [CE]  not  a  statement  [FE]                  junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isExpressionNode(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  0,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isExpressionNode(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  0,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp('?',    true);    addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	120	None	replace
948	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   ".?       ",    true);    	non-compiled	[CE]  not  a  statement	93	None	replace
949	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  }  else  {  addExpr(last,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   ".?       ",    true);    	non-compiled	[CE]  not  a  statement	93	None	replace
950	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  }  else  {  addExpr(last,  1,  rhsContext);  break;  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  }  else  {  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  }  else  {  addExpr(last,  1,  rhsContext);  break;  }	          cc.addOp(       "?       ",    true);    cc.addOp(   ".?       ",    true);    	non-compiled	[CE]  not  a  statement	93	None	replace
951	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }	          cc.addOp(       "?       ",    true);    cc.addOp(   ".?       ",    true);    	non-compiled	[CE]  not  a  statement	93	None	replace
952	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last  ==  null)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   ".?       ",    true);    	non-compiled	[CE]  not  a  statement	93	None	replace
953	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	77	None	replace
954	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          cc.addOp(       "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	77	None	replace
955	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }	          cc.addOp(       "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	77	None	replace
956	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr  [CE]  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr	          cc.addOp(       "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  	77	None	replace
957	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    true);    	non-compiled	[CE]  not  a  statement	178	None	replace
958	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  }  else  {  junit.framework.ComparisonFailure:  expected  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  }  else  {  junit.framework.ComparisonFailure:  expected  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  }  else  {  junit.framework.ComparisonFailure:  expected	          cc.addOp(       "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    true);    	non-compiled	[CE]  not  a  statement	178	None	replace
959	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          cc.addOp(       "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    true);    	non-compiled	[CE]  not  a  statement	178	None	replace
960	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  }  else  {  throw  new  IllegalStateException( " ");  }	          cc.addOp(       "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    true);    	non-compiled	[CE]  not  a  statement	178	None	replace
961	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  1,  rhsContext);  if(childCount  ==  2)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  1,  rhsContext);  if(childCount  ==  2)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        addExpr(last,    1,    rhsContext);    if(childCount  ==  2)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  }	  	non-compiled	[CE]  not  a  statement	12	None	add
962	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  1,  rhsContext);  if(childCount  ==  2)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  1,  rhsContext);  if(childCount  ==  2)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        addExpr(last,    1,    rhsContext);    if(childCount  ==  2)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }	  	non-compiled	[CE]  not  a  statement	12	None	add
963	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  1,  rhsContext);  if(childCount  ==  2)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  0,  rhsContext);  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  1,  rhsContext);  if(childCount  ==  2)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  0,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        addExpr(last,    1,    rhsContext);    if(childCount  ==  2)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  0,  rhsContext);  }	  	non-compiled	[CE]  not  a  statement	12	None	add
964	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  1,  rhsContext);  if(childCount  ==  2)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  0,  rhsContext);  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  1,  rhsContext);  if(childCount  ==  2)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  0,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        addExpr(last,    1,    rhsContext);    if(childCount  ==  2)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  0,  rhsContext);  }	  	non-compiled	[CE]  not  a  statement	12	None	add
965	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type,  rhsContext  +  1);  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  int  p  =  NodeUtil.precedence(type,  rhsContext  +  1);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	int  p  =  NodeUtil.precedence(type,  rhsContext  +  1);	  int    p    =    NodeUtil.precedence(type    +    1);    	non-compiled	[CE]  not  a  statement	142	None	replace
966	[BUG]  [BUGGY]  if(p  >  0)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  >  0)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  >  0)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }	          addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	15	None	replace
967	[BUG]  [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  2);  break;  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  2);  break;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  2);  break;  }	          addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	15	None	replace
968	[BUG]  [BUGGY]  char  p  =  NodeUtil.precedence(type);  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  char  p  =  NodeUtil.precedence(type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	char  p  =  NodeUtil.precedence(type);	  int    p    =    NodeUtil.precedence(n);    	non-compiled	[CE]  not  a  statement	85	None	replace
969	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  2);  [CE]  not  a  statement  [FE]    IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  2);	  	non-compiled	[CE]  not  a  statement	125	None	add
970	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  2,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  2,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first,    2,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	203	None	add
971	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  2,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  3,  rhsContext);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  2,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  3,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first,    2,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first,  3,  rhsContext);	  	non-compiled	[CE]  not  a  statement	203	None	add
972	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type);  addExpr(last,  p  +  1,  context);  [CE]  not  a  statement  [FE]        IllegalStateException      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  int  p  =  NodeUtil.precedence(type);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	int  p  =  NodeUtil.precedence(type);  addExpr(last,  p  +  1,  context);	          Preconditions.checkState(childCount    ==    2);    Integer    p    =    NodeUtil.precedence(type);    addExpr(last,    p    +    1,    context);    	non-compiled	[CE]  not  a  statement	186	None	replace
973	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3);  Integer  p  =  NodeUtil.precedence(type);  addExpr(last,  p  +  1,  context);  [CE]  not  a  statement  [FE]          IllegalStateException      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  3);  Integer  p  =  NodeUtil.precedence(type);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount  ==  3);  Integer  p  =  NodeUtil.precedence(type);  addExpr(last,  p  +  1,  context);	          Preconditions.checkState(childCount    ==    2);    Integer    p    =    NodeUtil.precedence(type);    addExpr(last,    p    +    1,    context);    	non-compiled	[CE]  not  a  statement	186	None	replace
974	[BUG]  [BUGGY]  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(first.getNext(),    1,    rhsContext);    cc.addOp( "?   ",  true);	  	non-compiled	[CE]  not  a  statement	38	None	add
975	[BUG]  [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }	          addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	17	None	replace
976	[BUG]  [BUGGY]  if(p  >  0)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  >  0)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  >  0)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }	          addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	17	None	replace
977	[BUG]  [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	17	None	replace
978	[BUG]  [BUGGY]  if(p  >  0)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  >  0)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  >  0)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	17	None	replace
979	[BUG]  [BUGGY]  if(p  >  0)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  >  0)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  >  0)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);	          addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	17	None	replace
980	[BUG]  [BUGGY]  if(p  >  0)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  >  0)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  >  0)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  }	          addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    true);    	non-compiled	[CE]  not  a  statement	170	None	replace
981	[BUG]  [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  }	          addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    true);    	non-compiled	[CE]  not  a  statement	170	None	replace
982	[BUG]  [BUGGY]  if(p  >  0)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  >  0)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  >  0)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    true);    	non-compiled	[CE]  not  a  statement	170	None	replace
983	[BUG]  [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    true);    	non-compiled	[CE]  not  a  statement	170	None	replace
984	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  cc.addOp(   "?     ",  true);  Preconditions.checkState(childCount  ==  1);  cc.addOp( "?   ",  true);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  cc.addOp(   "?     ",  true);  Preconditions.checkState(childCount  ==  1);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        3);        Preconditions.checkState(childCount    ==    3);    cc.addOp(   "?       ",    true);    Preconditions.checkState(childCount  ==  1);  cc.addOp( "?   ",  true);	  	non-compiled	[CE]  not  a  statement	115	None	add
985	[BUG]  [BUGGY]  cc.addOp('?',  true);  addExpr(first,  0,  rhsContext);  [CE]  not  a  statement  [FE]                junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp('?',  true);  addExpr(first,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp('?',  true);  addExpr(first,  0,  rhsContext);	          cc.addOp(       "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp('?',    true);    addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	81	None	replace
986	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(p))  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  break;  }  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isExpressionNode(p))  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isExpressionNode(p))  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  break;  }	  cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    break;    	non-compiled	[CE]  not  a  statement	86	None	replace
987	[BUG]  [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  break;  }  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(childCount  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  break;  }	  cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    break;    	non-compiled	[CE]  not  a  statement	86	None	replace
988	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  break;  }  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  break;  }	  cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    break;    	non-compiled	[CE]  not  a  statement	86	None	replace
989	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  }	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?       ",    true);    	non-compiled	[CE]  not  a  statement	174	None	replace
990	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last  ==  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  }	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?       ",    true);    	non-compiled	[CE]  not  a  statement	174	None	replace
991	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  }  else  {  junit.framework.ComparisonFailure  [CE]  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  }  else  {  junit.framework.ComparisonFailure  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  }  else  {  junit.framework.ComparisonFailure	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?       ",    true);    	non-compiled	[CE]  	174	None	replace
992	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  false);  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  false);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last  ==  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  false);  }	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?       ",    true);    	non-compiled	[CE]  not  a  statement	174	None	replace
993	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( ",   ",  true);  cc.addOp( ".,   ",  true);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last  ==  null)  {  cc.addOp( ",   ",  true);  cc.addOp( ".,   ",  true);  }  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last  ==  null)  {  cc.addOp( ",   ",  true);  cc.addOp( ".,   ",  true);  }	  cc.addOp(       ",       ",    true);    cc.addOp(   ".,       ",    true);    	non-compiled	[CE]  not  a  statement	49	None	replace
994	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( ",   ",  true);  cc.addOp( ".,   ",  true);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last  ==  null)  {  cc.addOp( ",   ",  true);  cc.addOp( ".,   ",  true);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last  ==  null)  {  cc.addOp( ",   ",  true);  cc.addOp( ".,   ",  true);  }  else  {  addExpr(last,  1,  rhsContext);  }	  cc.addOp(       ",       ",    true);    cc.addOp(   ".,       ",    true);    	non-compiled	[CE]  not  a  statement	49	None	replace
995	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( ",   ",  true);  cc.addOp( ".,   ",  true);  }  else  {  addExpr(last,  1,  rhsContext);  break;  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last  ==  null)  {  cc.addOp( ",   ",  true);  cc.addOp( ".,   ",  true);  }  else  {  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last  ==  null)  {  cc.addOp( ",   ",  true);  cc.addOp( ".,   ",  true);  }  else  {  addExpr(last,  1,  rhsContext);  break;  }	  cc.addOp(       ",       ",    true);    cc.addOp(   ".,       ",    true);    	non-compiled	[CE]  not  a  statement	49	None	replace
996	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( ",   ",  true);  cc.addOp( ".,   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last  ==  null)  {  cc.addOp( ",   ",  true);  cc.addOp( ".,   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last  ==  null)  {  cc.addOp( ",   ",  true);  cc.addOp( ".,   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }	  cc.addOp(       ",       ",    true);    cc.addOp(   ".,       ",    true);    	non-compiled	[CE]  not  a  statement	49	None	replace
997	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( ",   ",  true);  cc.addOp( ".,   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last  ==  null)  {  cc.addOp( ",   ",  true);  cc.addOp( ".,   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last  ==  null)  {  cc.addOp( ",   ",  true);  cc.addOp( ".,   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }	  cc.addOp(       ",       ",    true);    cc.addOp(   ".,       ",    true);    	non-compiled	[CE]  not  a  statement	49	None	replace
998	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isExpressionNode(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isExpressionNode(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }	  if(NodeUtil.isExpressionNode(rhsContext))    {    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    break;    }    	non-compiled	[CE]  not  a  statement	195	None	replace
999	[BUG]  [BUGGY]  if(p  >  0)  {  addExpr(last,  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  >  0)  {  addExpr(last,  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  >  0)  {  addExpr(last,  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }	          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	23	None	replace
1000	[BUG]  [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }	          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	23	None	replace
1001	[BUG]  [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	23	None	replace
1002	[BUG]  [BUGGY]  if(p  >  0)  {  addExpr(last,  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  >  0)  {  addExpr(last,  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  >  0)  {  addExpr(last,  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          addExpr(last,    1,    rhsContext);    cc.addOp(   ":   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	23	None	replace
1003	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	65	None	replace
1004	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	65	None	replace
1005	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	65	None	replace
1006	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( ".?   ",  false);  cc.addOp( ".?   ",  false);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( ".?   ",  false);  cc.addOp( ".?   ",  false);  }  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( ".?   ",  false);  cc.addOp( ".?   ",  false);  }	  cc.addOp(       ".?       ",    false);    cc.addOp(   ".?       ",    false);    	non-compiled	[CE]  not  a  statement	105	None	replace
1007	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( ".?   ",  false);  cc.addOp( ".?   ",  false);  }  else  {  addExpr(first,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( ".?   ",  false);  cc.addOp( ".?   ",  false);  }  else  {  addExpr(first,  1,  rhsContext);  }  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( ".?   ",  false);  cc.addOp( ".?   ",  false);  }  else  {  addExpr(first,  1,  rhsContext);  }	  cc.addOp(       ".?       ",    false);    cc.addOp(   ".?       ",    false);    	non-compiled	[CE]  not  a  statement	105	None	replace
1008	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( ".?   ",  false);  cc.addOp( ".?   ",  false);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( ".?   ",  false);  cc.addOp( ".?   ",  false);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( ".?   ",  false);  cc.addOp( ".?   ",  false);  }  else  {  addExpr(last,  1,  rhsContext);  }	  cc.addOp(       ".?       ",    false);    cc.addOp(   ".?       ",    false);    	non-compiled	[CE]  not  a  statement	105	None	replace
1009	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( ".?   ",  false);  cc.addOp( ".?   ",  false);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( ".?   ",  false);  cc.addOp( ".?   ",  false);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( ".?   ",  false);  cc.addOp( ".?   ",  false);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }	  cc.addOp(       ".?       ",    false);    cc.addOp(   ".?       ",    false);    	non-compiled	[CE]  not  a  statement	105	None	replace
1010	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( ".?   ",  false);  cc.addOp( ".?   ",  false);  }  else  {  addExpr(last,  1,  rhsContext);  break;  }  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( ".?   ",  false);  cc.addOp( ".?   ",  false);  }  else  {  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( ".?   ",  false);  cc.addOp( ".?   ",  false);  }  else  {  addExpr(last,  1,  rhsContext);  break;  }	  cc.addOp(       ".?       ",    false);    cc.addOp(   ".?       ",    false);    	non-compiled	[CE]  not  a  statement	105	None	replace
1011	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForNode(n.getFirstChild());  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  cc  =  getCurrentContextForNode(n.getFirstChild());  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContextForNode(n.getFirstChild());	  Context    cc    =    getCurrentContextForNode();    	non-compiled	[CE]  not  a  statement	159	None	replace
1012	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(first,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	79	None	add
1013	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(first,    1,    rhsContext);    cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	79	None	add
1014	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  false);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  false);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(first,    1,    rhsContext);    cc.addOp( "?   ",  false);	  	non-compiled	[CE]  not  a  statement	79	None	add
1015	[BUG]  [BUGGY]  n.addChildToFront(cc);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addChildToFront(cc);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addChildToFront(cc);	          cc.addOp(       "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?       ",    true);    	non-compiled	[CE]  not  a  statement	151	None	replace
1016	[BUG]  [BUGGY]  n.getFirstChild().getNext();  n.getFirstChild().getNext();  Preconditions.checkState(childCount  ==  3);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.getFirstChild().getNext();  n.getFirstChild().getNext();  Preconditions.checkState(childCount  ==  3);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.getFirstChild().getNext();    n.getFirstChild().getNext();  Preconditions.checkState(childCount  ==  3);	  	non-compiled	[CE]  not  a  statement	189	None	add
1017	[BUG]  [BUGGY]  n.getFirstChild().getNext();  n.getFirstChild().getNext();  Preconditions.checkState(childCount  ==  2);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.getFirstChild().getNext();  n.getFirstChild().getNext();  Preconditions.checkState(childCount  ==  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.getFirstChild().getNext();    n.getFirstChild().getNext();  Preconditions.checkState(childCount  ==  2);	  	non-compiled	[CE]  not  a  statement	189	None	add
1018	[BUG]  [BUGGY]  n.getFirstChild().getNext();  n.getFirstChild().getNext();  Preconditions.checkState(childCount  ==  1);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.getFirstChild().getNext();  n.getFirstChild().getNext();  Preconditions.checkState(childCount  ==  1);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.getFirstChild().getNext();    n.getFirstChild().getNext();  Preconditions.checkState(childCount  ==  1);	  	non-compiled	[CE]  not  a  statement	189	None	add
1019	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?       ",    false);    addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	124	None	replace
1020	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?       ",    false);    addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	124	None	replace
1021	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?       ",    false);    addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	124	None	replace
1022	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?       ",    false);    addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	124	None	replace
1023	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr  [CE]  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr	          cc.addOp(       "?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?       ",    false);    addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  	124	None	replace
1024	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  0,  rhsContext);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  0,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  0,  rhsContext);  }	  cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	45	None	replace
1025	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }	  cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	45	None	replace
1026	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  0,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  0,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  0,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }	  cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	45	None	replace
1027	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  0,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  0,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  0,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	45	None	replace
1028	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( ".?   ",  false);  cc.addOp( ",.?   ",  false);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( ".?   ",  false);  cc.addOp( ",.?   ",  false);  }  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( ".?   ",  false);  cc.addOp( ",.?   ",  false);  }	  cc.addOp(       ".?       ",    false);    cc.addOp(   ",.?       ",    false);    	non-compiled	[CE]  not  a  statement	107	None	replace
1029	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( ".?   ",  false);  cc.addOp( ",.?   ",  false);  }  else  {  addExpr(first,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( ".?   ",  false);  cc.addOp( ",.?   ",  false);  }  else  {  addExpr(first,  1,  rhsContext);  }  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( ".?   ",  false);  cc.addOp( ",.?   ",  false);  }  else  {  addExpr(first,  1,  rhsContext);  }	  cc.addOp(       ".?       ",    false);    cc.addOp(   ",.?       ",    false);    	non-compiled	[CE]  not  a  statement	107	None	replace
1030	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( ".?   ",  false);  cc.addOp( ",.?   ",  false);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( ".?   ",  false);  cc.addOp( ",.?   ",  false);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( ".?   ",  false);  cc.addOp( ",.?   ",  false);  }  else  {  addExpr(last,  1,  rhsContext);  }	  cc.addOp(       ".?       ",    false);    cc.addOp(   ",.?       ",    false);    	non-compiled	[CE]  not  a  statement	107	None	replace
1031	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( ".?   ",  false);  cc.addOp( ",.?   ",  false);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( ".?   ",  false);  cc.addOp( ",.?   ",  false);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( ".?   ",  false);  cc.addOp( ",.?   ",  false);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }	  cc.addOp(       ".?       ",    false);    cc.addOp(   ",.?       ",    false);    	non-compiled	[CE]  not  a  statement	107	None	replace
1032	[BUG]  [BUGGY]  addExpr(last,  2,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  2,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  2,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  2,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    2,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  2,  rhsContext);	  	non-compiled	[CE]  not  a  statement	152	None	add
1033	[BUG]  [BUGGY]  addExpr(last,  2,  rhsContext);  if(childCount  ==  2)  {  addExpr(last,  2,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  2,  rhsContext);  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  2,  rhsContext);  if(childCount  ==  2)  {  addExpr(last,  2,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  2,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    2,    rhsContext);    if(childCount  ==  2)  {  addExpr(last,  2,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  2,  rhsContext);  }	  	non-compiled	[CE]  not  a  statement	152	None	add
1034	[BUG]  [BUGGY]  addExpr(last,  2,  rhsContext);  if(childCount  ==  2)  {  addExpr(last,  2,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  2,  rhsContext);  if(childCount  ==  2)  {  addExpr(last,  2,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    2,    rhsContext);    if(childCount  ==  2)  {  addExpr(last,  2,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }	  	non-compiled	[CE]  not  a  statement	152	None	add
1035	[BUG]  [BUGGY]  addExpr(last,  2,  rhsContext);  if(childCount  ==  2)  {  addExpr(last,  2,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  2,  rhsContext);  if(childCount  ==  2)  {  addExpr(last,  2,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    2,    rhsContext);    if(childCount  ==  2)  {  addExpr(last,  2,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  1,  rhsContext);  }	  	non-compiled	[CE]  not  a  statement	152	None	add
1036	[BUG]  [BUGGY]  addExpr(last,  2,  rhsContext);  if(childCount  ==  2)  {  addExpr(last,  2,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  2);  addExpr(last,  2,  rhsContext);  }  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  2,  rhsContext);  if(childCount  ==  2)  {  addExpr(last,  2,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  2);  addExpr(last,  2,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    2,    rhsContext);    if(childCount  ==  2)  {  addExpr(last,  2,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  2);  addExpr(last,  2,  rhsContext);  }	  	non-compiled	[CE]  not  a  statement	152	None	add
1037	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  >  0)  {  cc.addOp( ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }	  cc.addOp(   ":   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	43	None	replace
1038	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }	  cc.addOp(   ":   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	43	None	replace
1039	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  else  {  junit.framework.ComparisonFailure:  expected  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  else  {  junit.framework.ComparisonFailure:  expected  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  >  0)  {  cc.addOp( ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  else  {  junit.framework.ComparisonFailure:  expected	  cc.addOp(   ":   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	43	None	replace
1040	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first,  0,  rhsContext);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first,  0,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first,  0,  rhsContext);  }	  cc.addOp(   "?       ",    false);    addExpr(first,    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	172	None	replace
1041	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first,  0,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first,  0,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first,  0,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }	  cc.addOp(   "?       ",    false);    addExpr(first,    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	172	None	replace
1042	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first,  0,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first,  0,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first,  0,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  cc.addOp(   "?       ",    false);    addExpr(first,    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	172	None	replace
1043	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first,  0,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first,  0,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first,  0,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(last,  1,  rhsContext);  }	  cc.addOp(   "?       ",    false);    addExpr(first,    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	172	None	replace
1044	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first,  0,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first,  0,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first,  0,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }	  cc.addOp(   "?       ",    false);    addExpr(first,    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	172	None	replace
1045	[BUG]  [BUGGY]  Node  first  =  last.getFirstChild();  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Node  first  =  last.getFirstChild();  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Node  first  =  last.getFirstChild();	  Node    first    =    context.getFirstChild();    	non-compiled	[CE]  not  a  statement	7	None	replace
1046	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first.getNext(),  0,  rhsContext);  cc.addOp( ".?   ",  false);  addExpr(first.getNext(),  0,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first.getNext(),  0,  rhsContext);  cc.addOp( ".?   ",  false);  addExpr(first.getNext(),  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    0,    rhsContext);    cc.addOp( ".?   ",  false);  addExpr(first.getNext(),  0,  rhsContext);	  	non-compiled	[CE]  not  a  statement	148	None	add
1047	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForPosition();  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  cc  =  getCurrentContextForPosition();  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContextForPosition();	  Context    cc    =    getCurrentContextForNoInOperator();    	non-compiled	[CE]  not  a  statement	193	None	replace
1048	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  >=  2);  Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  >=  2);  [CE]  not  a  statement  [FE]    IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  >=  2);  Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  >=  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount    >=    2);    Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  >=  2);	  	non-compiled	[CE]  not  a  statement	128	None	add
1049	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(p))  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isExpressionNode(p))  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isExpressionNode(p))  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }	  cc.addOp(   ":   ",    true);    addExpr(last,    1,    rhsContext);    break;    	non-compiled	[CE]  not  a  statement	88	None	replace
1050	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isExpressionNode(n))  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }	  cc.addOp(   ":   ",    true);    addExpr(last,    1,    rhsContext);    break;    	non-compiled	[CE]  not  a  statement	88	None	replace
1051	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(type))  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isLiteralValue(type))  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isLiteralValue(type))  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }	  cc.addOp(   ":   ",    true);    addExpr(last,    1,    rhsContext);    break;    	non-compiled	[CE]  not  a  statement	88	None	replace
1052	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	75	None	replace
1053	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          cc.addOp(       "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	75	None	replace
1054	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  addExpr  [CE]  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  addExpr  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  addExpr	          cc.addOp(       "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  	75	None	replace
1055	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }	          cc.addOp(       "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	75	None	replace
1056	[BUG]  [BUGGY]  cc.addOp( ".s.IFJDCS ".charAt(p));  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp( ".s.IFJDCS ".charAt(p));  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( ".s.IFJDCS ".charAt(p));	          cc.addOp(       "?       ",    true);    cc.addOp('?',    true);    	non-compiled	[CE]  not  a  statement	96	None	replace
1057	[BUG]  [BUGGY]  cc.addOp( ".s.IFJDCS ".charAt(p  +  1),  '?',  true);  [CE]  not  a  statement  [FE]                junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp( ".s.IFJDCS ".charAt(p  +  1),  '?',  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( ".s.IFJDCS ".charAt(p  +  1),  '?',  true);	          cc.addOp(       "?       ",    true);    cc.addOp('?',    true);    	non-compiled	[CE]  not  a  statement	96	None	replace
1058	[BUG]  [BUGGY]  cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  0,  rhsContext);  cc.addOp('?',  true);  addExpr(first.getNext(),  0,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  true);  addExpr(first.getNext(),  0,  rhsContext);  cc.addOp('?',  true);  addExpr(first.getNext(),  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    0,    rhsContext);    cc.addOp('?',  true);  addExpr(first.getNext(),  0,  rhsContext);	  	non-compiled	[CE]  not  a  statement	44	None	add
1059	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp('?',  true);  addExpr(first.getNext(),  1,  rhsContext);  }  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:1}[]:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp('?',  true);  addExpr(first.getNext(),  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp('?',  true);  addExpr(first.getNext(),  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp('?',    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	61	None	replace
1060	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp('?',  true);  addExpr(first.getNext(),  1,  rhs  [CE]  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:1}[]:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp('?',  true);  addExpr(first.getNext(),  1,  rhs  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp('?',  true);  addExpr(first.getNext(),  1,  rhs	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp('?',    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  	61	None	replace
1061	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp('?',  true);  addExpr(first.getNext(),  1,  rh  [CE]  [FE]                junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:1}[]:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp('?',  true);  addExpr(first.getNext(),  1,  rh  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp('?',  true);  addExpr(first.getNext(),  1,  rh	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp('?',    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  	61	None	replace
1062	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(type))  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp('?',  true);  addExpr(first.getNext()  [CE]  [FE]                  junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:1}[]:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isExpressionNode(type))  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp('?',  true);  addExpr(first.getNext()  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isExpressionNode(type))  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp('?',  true);  addExpr(first.getNext()	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp('?',    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  	61	None	replace
1063	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(type))  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp('?',  true);  addExpr(first.getNext(),  1,  rh  [CE]  [FE]                    junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:1}[]:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isExpressionNode(type))  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp('?',  true);  addExpr(first.getNext(),  1,  rh  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isExpressionNode(type))  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp('?',  true);  addExpr(first.getNext(),  1,  rh	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp('?',    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  	61	None	replace
1064	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]    IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount    ==    2);    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	182	None	add
1065	[BUG]  [BUGGY]  if(p  ==  0)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rh  [CE]  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  0)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rh  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  0)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rh	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  	59	None	replace
1066	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rh  [CE]  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rh  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rh	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  	59	None	replace
1067	[BUG]  [BUGGY]  if(p  ==  0)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhs  [CE]  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  0)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhs  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  0)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhs	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  	59	None	replace
1068	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  false);  cc.addOp('?',  false);  }  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  false);  cc.addOp('?',  false);  }  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last  ==  null)  {  cc.addOp( "?   ",  false);  cc.addOp('?',  false);  }	  cc.addOp(       "?       ",    false);    cc.addOp('?       ",    false);    	non-compiled	[CE]  not  a  statement	140	None	replace
1069	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  false);  cc.addOp('?',  false);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  false);  cc.addOp('?',  false);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last  ==  null)  {  cc.addOp( "?   ",  false);  cc.addOp('?',  false);  }  else  {  addExpr(last,  1,  rhsContext);  }	  cc.addOp(       "?       ",    false);    cc.addOp('?       ",    false);    	non-compiled	[CE]  not  a  statement	140	None	replace
1070	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  false);  cc.addOp('?',  false);  }  else  {  addExpr(last,  1,  rhsContext);  break;  }  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  false);  cc.addOp('?',  false);  }  else  {  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last  ==  null)  {  cc.addOp( "?   ",  false);  cc.addOp('?',  false);  }  else  {  addExpr(last,  1,  rhsContext);  break;  }	  cc.addOp(       "?       ",    false);    cc.addOp('?       ",    false);    	non-compiled	[CE]  not  a  statement	140	None	replace
1071	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  cc.addOp( ".?   ",  false);  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  cc.addOp( ".?   ",  false);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    cc.addOp( ".?   ",  false);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	24	None	add
1072	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  cc.addOp('?',  false);  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  cc.addOp('?',  false);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    cc.addOp('?',  false);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	24	None	add
1073	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }	  if(NodeUtil.isExpressionNode(n))    {    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    break;    }    	non-compiled	[CE]  not  a  statement	145	None	replace
1074	[BUG]  [BUGGY]  cc.addOp(   ".?     ",  true);  cc.addOp('.?   ",  true);  [CE]  unclosed  character  literal  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ".?     ",  true);  cc.addOp('.?   ",  true);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ".?       ",    true);    cc.addOp('.?   ",  true);	  	non-compiled	[CE]  unclosed  character  literal	162	None	add
1075	[BUG]  [BUGGY]  cc.addOp(   ".?     ",  true);  cc.addOp( ",.?   ",  true);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ".?     ",  true);  cc.addOp( ",.?   ",  true);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ".?       ",    true);    cc.addOp( ",.?   ",  true);	  	non-compiled	[CE]  not  a  statement	162	None	add
1076	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp('?',  true);  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp('?',  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp('?',  true);  addExpr(last,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp('?',    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	69	None	replace
1077	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp('?',  true);  addExpr(last,  1,  rhsContext);  break;  }  [CE]  not  a  statement  [FE]                junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp('?',  true);  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp('?',  true);  addExpr(last,  1,  rhsContext);  break;  }	          cc.addOp(       "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp('?',    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	69	None	replace
1078	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp('?',  true);  addExpr(last,  1,  rhsContext);  }  else  {  [CE]  not  a  statement  [FE]                  junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp('?',  true);  addExpr(last,  1,  rhsContext);  }  else  {  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp('?',  true);  addExpr(last,  1,  rhsContext);  }  else  {	          cc.addOp(       "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp('?',    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	69	None	replace
1079	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp('?',  true);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }  [CE]  not  a  statement  [FE]                    junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp('?',  true);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp('?',  true);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }	          cc.addOp(       "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp('?',    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	69	None	replace
1080	[BUG]  [BUGGY]  cc.addOp( ":   ".equals(p  +  1));  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp( ":   ".equals(p  +  1));  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( ":   ".equals(p  +  1));	  cc.addOp(   ":   ".equals(p));    	non-compiled	[CE]  not  a  statement	10	None	replace
1081	[BUG]  [BUGGY]  cc.addOp( ":   ".equals(p,  p));  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp( ":   ".equals(p,  p));  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( ":   ".equals(p,  p));	  cc.addOp(   ":   ".equals(p));    	non-compiled	[CE]  not  a  statement	10	None	replace
1082	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	74	None	add
1083	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  0,  rhsContext);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(first,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first,  0,  rhsContext);	  	non-compiled	[CE]  not  a  statement	74	None	add
1084	[BUG]  [BUGGY]  n.addChildToFront(c);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.addChildToFront(c);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addChildToFront(c);	  cc.addOp(   ":   ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	27	None	replace
1085	[BUG]  [BUGGY]  int  rhsContext  =  NodeUtil.precedence(type,  rhsContext);  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  int  rhsContext  =  NodeUtil.precedence(type,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	int  rhsContext  =  NodeUtil.precedence(type,  rhsContext);	  int    p    =    NodeUtil.precedence(type,    rhsContext);    	non-compiled	[CE]  not  a  statement	84	None	replace
1086	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type,  rhsContext)-  1;  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  int  p  =  NodeUtil.precedence(type,  rhsContext)-  1;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	int  p  =  NodeUtil.precedence(type,  rhsContext)-  1;	  int    p    =    NodeUtil.precedence(type,    rhsContext);    	non-compiled	[CE]  not  a  statement	84	None	replace
1087	[BUG]  [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(first,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(first,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(first,  1,  rhsContext);  }	          addExpr(last,    1,    rhsContext);    addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	21	None	replace
1088	[BUG]  [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  addExpr(first,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  addExpr(first,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  addExpr(first,  1,  rhsContext);  }	          addExpr(last,    1,    rhsContext);    addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	21	None	replace
1089	[BUG]  [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          addExpr(last,    1,    rhsContext);    addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	21	None	replace
1090	[BUG]  [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }	          addExpr(last,    1,    rhsContext);    addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	21	None	replace
1091	[BUG]  [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  addExpr(first,  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  2);  return;  }  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  addExpr(first,  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  2);  return;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  addExpr(last,  1,  rhsContext);  addExpr(first,  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  2);  return;  }	          addExpr(last,    1,    rhsContext);    addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	21	None	replace
1092	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  3);  [CE]  not  a  statement  [FE]        ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  int  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  3);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	int  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  3);	          Preconditions.checkState(childCount    ==    3);    Integer    p    =    NodeUtil.precedence(type);    Preconditions.checkState(childCount    ==    3);    	non-compiled	[CE]  not  a  statement	200	None	replace
1093	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type),  context  -  1;  [CE]  [FE]            ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  int  p  =  NodeUtil.precedence(type),  context  -  1;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	int  p  =  NodeUtil.precedence(type),  context  -  1;	  int    p    =    NodeUtil.precedence(type)-    1;    	non-compiled	[CE]  	194	None	replace
1094	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type)-  2;  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  int  p  =  NodeUtil.precedence(type)-  2;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	int  p  =  NodeUtil.precedence(type)-  2;	  int    p    =    NodeUtil.precedence(type)-    1;    	non-compiled	[CE]  not  a  statement	194	None	replace
1095	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextInstance(context,  STATEMENT);  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  cc  =  getCurrentContextInstance(context,  STATEMENT);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContextInstance(context,  STATEMENT);	  Context    cc    =    getCurrentContextInstance();    	non-compiled	[CE]  not  a  statement	30	None	replace
1096	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextInstance(n,  context);  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Context  cc  =  getCurrentContextInstance(n,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContextInstance(n,  context);	  Context    cc    =    getCurrentContextInstance();    	non-compiled	[CE]  not  a  statement	30	None	replace
1097	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  false);  cc.addOp( ".?   ",  false);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  false);  cc.addOp( ".?   ",  false);  }  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last  ==  null)  {  cc.addOp( "?   ",  false);  cc.addOp( ".?   ",  false);  }	  cc.addOp(       "?       ",    false);    cc.addOp(   ".?       ",    false);    	non-compiled	[CE]  not  a  statement	137	None	replace
1098	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  false);  cc.addOp( ".?   ",  false);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  false);  cc.addOp( ".?   ",  false);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last  ==  null)  {  cc.addOp( "?   ",  false);  cc.addOp( ".?   ",  false);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }	  cc.addOp(       "?       ",    false);    cc.addOp(   ".?       ",    false);    	non-compiled	[CE]  not  a  statement	137	None	replace
1099	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  false);  cc.addOp( ".?   ",  false);  }  else  {  addExpr(first,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  false);  cc.addOp( ".?   ",  false);  }  else  {  addExpr(first,  1,  rhsContext);  }  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last  ==  null)  {  cc.addOp( "?   ",  false);  cc.addOp( ".?   ",  false);  }  else  {  addExpr(first,  1,  rhsContext);  }	  cc.addOp(       "?       ",    false);    cc.addOp(   ".?       ",    false);    	non-compiled	[CE]  not  a  statement	137	None	replace
1100	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  false);  cc.addOp( ".?   ",  false);  }  else  {  addExpr(last,  1,  rhsContext);  break;  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  false);  cc.addOp( ".?   ",  false);  }  else  {  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last  ==  null)  {  cc.addOp( "?   ",  false);  cc.addOp( ".?   ",  false);  }  else  {  addExpr(last,  1,  rhsContext);  break;  }	  cc.addOp(       "?       ",    false);    cc.addOp(   ".?       ",    false);    	non-compiled	[CE]  not  a  statement	137	None	replace
1101	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	68	None	replace
1102	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	68	None	replace
1103	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr  [CE]  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr	          cc.addOp(       "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  	68	None	replace
1104	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          cc.addOp(       "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	68	None	replace
1105	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }	          cc.addOp(       "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	68	None	replace
1106	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( ",   ",  true);  cc.addOp( ",   ",  true);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last  ==  null)  {  cc.addOp( ",   ",  true);  cc.addOp( ",   ",  true);  }  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last  ==  null)  {  cc.addOp( ",   ",  true);  cc.addOp( ",   ",  true);  }	  cc.addOp(       ",       ",    true);    cc.addOp(   ",       ",    true);    	non-compiled	[CE]  not  a  statement	47	None	replace
1107	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( ",   ",  true);  cc.addOp( ",   ",  true);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last  ==  null)  {  cc.addOp( ",   ",  true);  cc.addOp( ",   ",  true);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last  ==  null)  {  cc.addOp( ",   ",  true);  cc.addOp( ",   ",  true);  }  else  {  addExpr(last,  1,  rhsContext);  }	  cc.addOp(       ",       ",    true);    cc.addOp(   ",       ",    true);    	non-compiled	[CE]  not  a  statement	47	None	replace
1108	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( ",   ",  true);  cc.addOp( ",   ",  true);  }  else  {  addExpr(last,  1,  rhsContext);  break;  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last  ==  null)  {  cc.addOp( ",   ",  true);  cc.addOp( ",   ",  true);  }  else  {  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last  ==  null)  {  cc.addOp( ",   ",  true);  cc.addOp( ",   ",  true);  }  else  {  addExpr(last,  1,  rhsContext);  break;  }	  cc.addOp(       ",       ",    true);    cc.addOp(   ",       ",    true);    	non-compiled	[CE]  not  a  statement	47	None	replace
1109	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( ",   ",  true);  cc.addOp( ",   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last  ==  null)  {  cc.addOp( ",   ",  true);  cc.addOp( ",   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last  ==  null)  {  cc.addOp( ",   ",  true);  cc.addOp( ",   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }	  cc.addOp(       ",       ",    true);    cc.addOp(   ",       ",    true);    	non-compiled	[CE]  not  a  statement	47	None	replace
1110	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  }	  cc.addOp(   "?       ",    false);    addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	101	None	replace
1111	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  cc.addOp(   "?       ",    false);    addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	101	None	replace
1112	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }	  cc.addOp(   "?       ",    false);    addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	101	None	replace
1113	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(last,  1,  rhsContext);  }	  cc.addOp(   "?       ",    false);    addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	101	None	replace
1114	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  }  else  {  addExpr(last,  0,  rhsContext);  }  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  }  else  {  addExpr(last,  0,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  }  else  {  addExpr(last,  0,  rhsContext);  }	  cc.addOp(   "?       ",    false);    addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	101	None	replace
1115	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  addExpr(last,  0,  rhsContext);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  addExpr(last,  0,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  addExpr(last,  0,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   ".?       ",    true);    addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	199	None	replace
1116	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  addExpr(last,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   ".?       ",    true);    addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	199	None	replace
1117	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          cc.addOp(       "?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   ".?       ",    true);    addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	199	None	replace
1118	[BUG]  [BUGGY]  cc.addOp( ":?, ",  true);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp( ":?, ",  true);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( ":?, ",  true);	  cc.addOp(   ":?       ",    false);    	non-compiled	[CE]  not  a  statement	161	None	replace
1119	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	122	None	replace
1120	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          cc.addOp(       "?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	122	None	replace
1121	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }	          cc.addOp(       "?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	122	None	replace
1122	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr  [CE]  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr	          cc.addOp(       "?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  	122	None	replace
1123	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  [CE]  unclosed  string  literal  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:1}[]:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  unclosed  string  literal	60	None	replace
1124	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ":  true);  addExpr(first.getNext(),  1,  rhsContext);  }  [CE]  unclosed  string  literal  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:1}[]:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ":  true);  addExpr(first.getNext(),  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ":  true);  addExpr(first.getNext(),  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  unclosed  string  literal	60	None	replace
1125	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ": ",  true);  addExpr(first.getNext(),  1,  rh  [CE]  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:1}[]:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ": ",  true);  addExpr(first.getNext(),  1,  rh  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ": ",  true);  addExpr(first.getNext(),  1,  rh	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  	60	None	replace
1126	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ": ",  true);  addExpr(first.getNext(),  1,  rhs  [CE]  [FE]                junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:1}[]:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ": ",  true);  addExpr(first.getNext(),  1,  rhs  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ": ",  true);  addExpr(first.getNext(),  1,  rhs	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  	60	None	replace
1127	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  [CE]  not  a  statement  [FE]                  junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:1}[]:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	60	None	replace
1128	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);	  	non-compiled	[CE]  not  a  statement	165	None	add
1129	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  2,  rhsContext);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  2,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  false);  addExpr(last,  2,  rhsContext);	  	non-compiled	[CE]  not  a  statement	165	None	add
1130	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( ".?   ",  true);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( ".?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,  1,  rhsContext);  cc.addOp( ".?   ",  true);	  	non-compiled	[CE]  not  a  statement	169	None	add
1131	[BUG]  [BUGGY]  n.getFirstChild().setNext(n.getLastChild());  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.getFirstChild().setNext(n.getLastChild());  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.getFirstChild().setNext(n.getLastChild());	  n.getFirstChild().getNext();    	non-compiled	[CE]  not  a  statement	190	None	replace
1132	[BUG]  [BUGGY]  n.getFirstChild().getParent();  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.getFirstChild().getParent();  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.getFirstChild().getParent();	  n.getFirstChild().getNext();    	non-compiled	[CE]  not  a  statement	190	None	replace
1133	[BUG]  [BUGGY]  n.getFirstChild().setNext(n);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  n.getFirstChild().setNext(n);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.getFirstChild().setNext(n);	  n.getFirstChild().getNext();    	non-compiled	[CE]  not  a  statement	190	None	replace
1134	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  4);  Preconditions.checkState(childCount  ==  4));  [CE]  [FE]    IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Preconditions.checkState(childCount  ==  4);  Preconditions.checkState(childCount  ==  4));  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount    ==    4);    Preconditions.checkState(childCount  ==  4));	  	non-compiled	[CE]  	56	None	add
1135	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Node  first  =  n.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().getNext();    	non-compiled	[CE]  not  a  statement	146	None	replace
1136	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  0,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        0,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first,  0,  rhsContext);	  	non-compiled	[CE]  not  a  statement	121	None	add
1137	[BUG]  [BUGGY]  junit.framework.ComparisonFailure:  expect  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  junit.framework.ComparisonFailure:  expect  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	junit.framework.ComparisonFailure:  expect	  addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	99	None	replace
1138	[BUG]  [BUGGY]  cc.addOp(     "?     ",    false);    cc.addOp(   "?     ",  false);  cc.addOp('?',  false);  cc.addOp( "?   ",  false);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(     "?     ",    false);    cc.addOp(   "?     ",  false);  cc.addOp('?',  false);  cc.addOp( "?   ",  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(       "?       ",        false);        cc.addOp(   "?       ",    false);    cc.addOp('?',  false);  cc.addOp( "?   ",  false);	  	non-compiled	[CE]  not  a  statement	134	None	add
1139	[BUG]  [BUGGY]  cc.addOp(   ",     ",  false);  cc.addOp(   ",   ",  true);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ",     ",  false);  cc.addOp(   ",   ",  true);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ",       ",    false);    cc.addOp(   ",   ",  true);	  	non-compiled	[CE]  not  a  statement	72	None	add
1140	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  2,  rhsContext);  if(childCount  ==  1)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  2,  rhsContext);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  2,  rhsContext);  if(childCount  ==  1)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  2,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        addExpr(last,    2,    rhsContext);    if(childCount  ==  1)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  2,  rhsContext);  }	  	non-compiled	[CE]  not  a  statement	167	None	add
1141	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  2,  rhsContext);  if(childCount  ==  1)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  2,  rhsContext);  }  else  {  addExpr(last,  0,  rhsContext);  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  2,  rhsContext);  if(childCount  ==  1)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  2,  rhsContext);  }  else  {  addExpr(last,  0,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        addExpr(last,    2,    rhsContext);    if(childCount  ==  1)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  2,  rhsContext);  }  else  {  addExpr(last,  0,  rhsContext);  }	  	non-compiled	[CE]  not  a  statement	167	None	add
1142	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  2,  rhsContext);  if(childCount  ==  1)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  2,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  2,  rhsContext);  if(childCount  ==  1)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  2,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        addExpr(last,    2,    rhsContext);    if(childCount  ==  1)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  2,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }	  	non-compiled	[CE]  not  a  statement	167	None	add
1143	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  2,  rhsContext);  if(childCount  ==  1)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  2,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(last,  2,  rhsContext);  if(childCount  ==  1)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  2,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        addExpr(last,    2,    rhsContext);    if(childCount  ==  1)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  2,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(last,  1,  rhsContext);  }	  	non-compiled	[CE]  not  a  statement	167	None	add
1144	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	67	None	add
1145	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  false);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);	  	non-compiled	[CE]  not  a  statement	67	None	add
1146	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          cc.addOp(     "?     ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                cc.addOp(       "?       ",        true);        addExpr(last,        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);	  	non-compiled	[CE]  not  a  statement	64	None	add
1147	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rh  [CE]  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rh  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rh	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  	63	None	replace
1148	[BUG]  [BUGGY]  if(p  ==  0)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rh  [CE]  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  0)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rh  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  0)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rh	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  	63	None	replace
1149	[BUG]  [BUGGY]  if(p  ==  0)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhs  [CE]  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  0)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhs  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  0)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhs	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  	63	None	replace
1150	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first,  1,  rhsContext);  cc.addOp( ".?   ",  false);  addExpr(first,  1,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first,  1,  rhsContext);  cc.addOp( ".?   ",  false);  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    false);    addExpr(first,    1,    rhsContext);    cc.addOp( ".?   ",  false);  addExpr(first,  1,  rhsContext);	  	non-compiled	[CE]  not  a  statement	100	None	add
1151	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first,  1,  rhsContext);  cc.addOp( ",  false);  addExpr(first,  1,  rhsContext);  [CE]  unclosed  string  literal  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first,  1,  rhsContext);  cc.addOp( ",  false);  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    false);    addExpr(first,    1,    rhsContext);    cc.addOp( ",  false);  addExpr(first,  1,  rhsContext);	  	non-compiled	[CE]  unclosed  string  literal	100	None	add
1152	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( ":  true);  addExpr(first,  1,  rhsContext);  }  [CE]  unclosed  string  literal  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( ":  true);  addExpr(first,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( ":  true);  addExpr(first,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   ",    true);    addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  unclosed  string  literal	78	None	replace
1153	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( ",  true);  addExpr(first,  1,  rhsContext);  }  [CE]  unclosed  string  literal  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( ",  true);  addExpr(first,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( ",  true);  addExpr(first,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   ",    true);    addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  unclosed  string  literal	78	None	replace
1154	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( ", ",  true);  addExpr(first,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]                junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( ", ",  true);  addExpr(first,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( ", ",  true);  addExpr(first,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   ",    true);    addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	78	None	replace
1155	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  cc.addOp( ":  true);  addExpr(first,  1,  rhsContext);  }  [CE]  unclosed  string  literal  [FE]                  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  cc.addOp( ":  true);  addExpr(first,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(last!=  null)  {  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  cc.addOp( ":  true);  addExpr(first,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp(   ",    true);    addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  unclosed  string  literal	78	None	replace
1156	[BUG]  [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( ":  true);  addExpr(last,  0,  rhsContext);  [CE]  unclosed  string  literal  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( ":  true);  addExpr(last,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ":   ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp( ":  true);  addExpr(last,  0,  rhsContext);	  	non-compiled	[CE]  unclosed  string  literal	36	None	add
1157	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type).intValue();  Preconditions.checkState(childCount  ==  2);  [CE]  not  a  statement  [FE]                IllegalStateException      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  int  p  =  NodeUtil.precedence(type).intValue();  Preconditions.checkState(childCount  ==  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	int  p  =  NodeUtil.precedence(type).intValue();  Preconditions.checkState(childCount  ==  2);	          Preconditions.checkState(childCount    ==    2);    Integer    p    =    NodeUtil.precedence(type).intValue();    Preconditions.checkState(childCount    ==    2);    	non-compiled	[CE]  not  a  statement	185	None	replace
1158	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  if(childCount  ==  2)  {  addExpr(last,  p  +  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  rhsContext);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  if(childCount  ==  2)  {  addExpr(last,  p  +  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    p    +    1,    rhsContext);    if(childCount  ==  2)  {  addExpr(last,  p  +  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  rhsContext);  }	  	non-compiled	[CE]  not  a  statement	132	None	add
1159	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  if(childCount  ==  2)  {  addExpr(last,  p  +  1,  rhsContext);  }  else  {  addExpr(last,  p  +  1,  rhsContext);  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  if(childCount  ==  2)  {  addExpr(last,  p  +  1,  rhsContext);  }  else  {  addExpr(last,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    p    +    1,    rhsContext);    if(childCount  ==  2)  {  addExpr(last,  p  +  1,  rhsContext);  }  else  {  addExpr(last,  p  +  1,  rhsContext);  }	  	non-compiled	[CE]  not  a  statement	132	None	add
1160	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount!=  2);  Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount!=  2);  [CE]  not  a  statement  [FE]    IllegalStateException    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount!=  2);  Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount!=  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount!=    2);    Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount!=  2);	  	non-compiled	[CE]  not  a  statement	130	None	add
1161	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	41	None	replace
1162	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }	  cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	41	None	replace
1163	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  }  else  {  junit.framework.ComparisonFailure:  expected  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  }  else  {  junit.framework.ComparisonFailure:  expected  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  }  else  {  junit.framework.ComparisonFailure:  expected	  cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	41	None	replace
1164	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  3);  [CE]  not  a  statement  [FE]    ComparisonFailure    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  3);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                Preconditions.checkState(childCount        ==        3);        Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  3);	  	non-compiled	[CE]  not  a  statement	110	None	add
1165	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	118	None	replace
1166	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          cc.addOp(       "?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	118	None	replace
1167	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	118	None	replace
1168	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }	  cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	25	None	replace
1169	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }	  cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	25	None	replace
1170	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(last,  1,  rhsContext);  }	  cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	25	None	replace
1171	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  false);  }  else  {  addExpr(last,  1,  rhsContext);  }	  cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	25	None	replace
1172	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  2);  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  2);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  2);  addExpr(last,  1,  rhsContext);  }	  cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	25	None	replace
1173	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }	  cc.addOp(   "?       ",    false);    addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	35	None	replace
1174	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  cc.addOp(   "?       ",    false);    addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	35	None	replace
1175	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }	  cc.addOp(   "?       ",    false);    addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	35	None	replace
1176	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }	  cc.addOp(   "?       ",    false);    addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	35	None	replace
1177	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(last,  0,  rhsContext);  cc.addOp( ".?   ",  false);  addExpr(last,  0,  rhsContext);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(last,  0,  rhsContext);  cc.addOp( ".?   ",  false);  addExpr(last,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    false);    addExpr(last,    0,    rhsContext);    cc.addOp( ".?   ",  false);  addExpr(last,  0,  rhsContext);	  	non-compiled	[CE]  not  a  statement	34	None	add
1178	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(last,  0,  rhsContext);  cc.addOp( ",  false);  addExpr(last,  0,  rhsContext);  [CE]  unclosed  string  literal  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(last,  0,  rhsContext);  cc.addOp( ",  false);  addExpr(last,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    false);    addExpr(last,    0,    rhsContext);    cc.addOp( ",  false);  addExpr(last,  0,  rhsContext);	  	non-compiled	[CE]  unclosed  string  literal	34	None	add
1179	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(last,  0,  rhsContext);  cc.addOp('?',  false);  addExpr(last,  0,  rhsContext);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(last,  0,  rhsContext);  cc.addOp('?',  false);  addExpr(last,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?       ",    false);    addExpr(last,    0,    rhsContext);    cc.addOp('?',  false);  addExpr(last,  0,  rhsContext);	  	non-compiled	[CE]  not  a  statement	34	None	add
1180	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  2,  rhs  [CE]  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  2,  rhs  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  2,  rhs	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    2,    rhsContext);    	non-compiled	[CE]  	202	None	replace
1181	[BUG]  [BUGGY]  if(p  ==  0)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  2,  rhs  [CE]  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  ==  0)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  2,  rhs  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  ==  0)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  2,  rhs	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    2,    rhsContext);    	non-compiled	[CE]  	202	None	replace
1182	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  2,  rh  [CE]  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  2,  rh  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  2,  rh	          cc.addOp(       "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    2,    rhsContext);    	non-compiled	[CE]  	202	None	replace
1183	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type,  last);  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  int  p  =  NodeUtil.precedence(type,  last);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	int  p  =  NodeUtil.precedence(type,  last);	  int    p    =    NodeUtil.precedence(type,    first);    	non-compiled	[CE]  not  a  statement	143	None	replace
1184	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  2);  [CE]  not  a  statement  [FE]        IllegalStateException      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  int  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	int  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  2);	          Preconditions.checkState(childCount    ==    2);    Integer    p    =    NodeUtil.precedence(type);    Preconditions.checkState(childCount    ==    2);    	non-compiled	[CE]  not  a  statement	179	None	replace
1185	[BUG]  [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( ",  true);  addExpr(first,  1,  rhsContext);  [CE]  unclosed  string  literal  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( ",  true);  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ":   ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp( ",  true);  addExpr(first,  1,  rhsContext);	  	non-compiled	[CE]  unclosed  string  literal	102	None	add
1186	[BUG]  [BUGGY]  cc.addOp( "?   ",  true);  cc.addExpr(first.getNext(),  2,  rhsContext);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:1}[]:{a:3      [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  cc.addOp( "?   ",  true);  cc.addExpr(first.getNext(),  2,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( "?   ",  true);  cc.addExpr(first.getNext(),  2,  rhsContext);	  cc.addOp(   "?       ",    true);    cc.addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	147	None	replace
1187	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(first,  1,  rhsContext);  if(childCount  ==  2)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(first,  1,  rhsContext);  if(childCount  ==  2)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        addExpr(first,    1,    rhsContext);    if(childCount  ==  2)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }	  	non-compiled	[CE]  not  a  statement	20	None	add
1188	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(first,  1,  rhsContext);  if(childCount  ==  2)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  0,  rhsContext);  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(first,  1,  rhsContext);  if(childCount  ==  2)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  0,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        addExpr(first,    1,    rhsContext);    if(childCount  ==  2)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  0,  rhsContext);  }	  	non-compiled	[CE]  not  a  statement	20	None	add
1189	[BUG]  [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(first,  1,  rhsContext);  if(childCount  ==  2)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]          addExpr(last,    1,    rhsContext);    addExpr(first,  1,  rhsContext);  if(childCount  ==  2)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	                addExpr(last,        1,        rhsContext);        addExpr(first,    1,    rhsContext);    if(childCount  ==  2)  {  addExpr(last,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  }	  	non-compiled	[CE]  not  a  statement	20	None	add
1190	[BUG]  [BUGGY]  addExpr(last,  0,  rhsContext);  if(last!=  null)  {  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  0,  rhsContext);  }  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  0,  rhsContext);  if(last!=  null)  {  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  0,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    0,    rhsContext);    if(last!=  null)  {  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  0,  rhsContext);  }	  	non-compiled	[CE]  not  a  statement	32	None	add
1191	[BUG]  [BUGGY]  addExpr(last,  0,  rhsContext);  if(last!=  null)  {  addExpr(last,  0,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  0,  rhsContext);  }  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]      }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);      [BUGGY]  addExpr(last,  0,  rhsContext);  if(last!=  null)  {  addExpr(last,  0,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  0,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,    0,    rhsContext);    if(last!=  null)  {  addExpr(last,  0,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  0,  rhsContext);  }	  	non-compiled	[CE]  not  a  statement	32	None	add
