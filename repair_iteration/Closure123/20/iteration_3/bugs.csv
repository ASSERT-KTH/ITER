bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  last  =  n.getFirstChild();  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  Node  last  =  n.getFirstChild();  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	Node  last  =  n.getFirstChild();	  Node    last    =    n.getLastChild();    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	3	None	replace
2	[BUG]  [BUGGY]  Node  last  =  first.getLastChild();  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  Node  last  =  first.getLastChild();  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	Node  last  =  first.getLastChild();	  Node    last    =    n.getLastChild();    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	3	None	replace
3	[BUG]  [BUGGY]  Node  last  =  rhsContext.getLastChild();  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  Node  last  =  rhsContext.getLastChild();  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	Node  last  =  rhsContext.getLastChild();	  Node    last    =    n.getLastChild();    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	3	None	replace
4	[BUG]  [BUGGY]  Node  last  =  context.getLastChild();  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  Node  last  =  context.getLastChild();  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	Node  last  =  context.getLastChild();	  Node    last    =    n.getLastChild();    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	3	None	replace
5	[BUG]  [BUGGY]  if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( ",   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( ",   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( ",   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(last!=    null)    {    cc.addOp(   ",       ",    true);    addExpr(last,    1,    rhsContext);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	62	None	replace
6	[BUG]  [BUGGY]  if(first!=  null)  {  if(last!=  null)  {  cc.addOp( ",   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(first!=  null)  {  if(last!=  null)  {  cc.addOp( ",   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(first!=  null)  {  if(last!=  null)  {  cc.addOp( ",   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(last!=    null)    {    cc.addOp(   ",       ",    true);    addExpr(last,    1,    rhsContext);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	62	None	replace
7	[BUG]  [BUGGY]  if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( ",   ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( ",   ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( ",   ",  true);  addExpr(last,  1,  rhsContext);  }	  if(last!=    null)    {    cc.addOp(   ",       ",    true);    addExpr(last,    1,    rhsContext);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	62	None	replace
8	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(NodeUtil.isExpressionNode(n))  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }	  if(NodeUtil.isExpressionNode(last))    {    cc.addOp(   "?       ",    true);    addExpr(last.getNext(),    1,    rhsContext);    }    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	39	None	replace
9	[BUG]  [BUGGY]  cc.addOp( ":   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  cc.addOp( ":   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	cc.addOp( ":   ",  true);  addExpr(last.getNext(),  1,  rhsContext);	  if(NodeUtil.isExpressionNode(last))    {    cc.addOp(   "?       ",    true);    addExpr(last.getNext(),    1,    rhsContext);    }    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	39	None	replace
10	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(NodeUtil.isExpressionNode(n))  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }	  if(NodeUtil.isExpressionNode(rhsContext))    {    cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    }    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	49	None	replace
11	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(NodeUtil.isExpressionNode(n))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }	  if(NodeUtil.isExpressionNode(rhsContext))    {    cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    }    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	49	None	replace
12	[BUG]  [BUGGY]  if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( ": ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( ": ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( ": ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }	  if(last!=    null)    {    cc.addOp(   ":       ",    true);    addExpr(last,    1,    rhsContext);    }    else    {    break;    }    	non-compiled	[CE]  orphaned  case	53	None	replace
13	[BUG]  [BUGGY]  if(childCount  ==  2)  {  if(last!=  null)  {  cc.addOp( ": ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(childCount  ==  2)  {  if(last!=  null)  {  cc.addOp( ": ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(childCount  ==  2)  {  if(last!=  null)  {  cc.addOp( ": ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }	  if(last!=    null)    {    cc.addOp(   ":       ",    true);    addExpr(last,    1,    rhsContext);    }    else    {    break;    }    	non-compiled	[CE]  orphaned  case	53	None	replace
14	[BUG]  [BUGGY]  if(parent!=  null)  {  if(last!=  null)  {  cc.addOp( ": ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(parent!=  null)  {  if(last!=  null)  {  cc.addOp( ": ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(parent!=  null)  {  if(last!=  null)  {  cc.addOp( ": ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }	  if(last!=    null)    {    cc.addOp(   ":       ",    true);    addExpr(last,    1,    rhsContext);    }    else    {    break;    }    	non-compiled	[CE]  orphaned  case	53	None	replace
15	[BUG]  [BUGGY]  cc.addOp( ": ".equals(rhsContext));  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  cc.addOp( ": ".equals(rhsContext));  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	cc.addOp( ": ".equals(rhsContext));	  cc.addOp(   ":   ".equals(context));    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	5	None	replace
16	[BUG]  [BUGGY]  addExpr(last,  0,  p);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  addExpr(last,  0,  p);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	addExpr(last,  0,  p);	  addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	13	None	replace
17	[BUG]  [BUGGY]  addExpr(first,  0,  rhsContext);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  addExpr(first,  0,  rhsContext);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	addExpr(first,  0,  rhsContext);	  addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	13	None	replace
18	[BUG]  [BUGGY]  addExpr(last,  0,  context);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  addExpr(last,  0,  context);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	addExpr(last,  0,  context);	  addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	13	None	replace
19	[BUG]  [BUGGY]  if(childCount  ==  2)  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(childCount  ==  2)  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(childCount  ==  2)  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }	  if(childCount    ==    1)    {    cc.addOp(   ":       ",    true);    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	52	None	replace
20	[BUG]  [BUGGY]  n.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  context);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  n.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  context);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	n.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  context);	  n.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	18	None	replace
21	[BUG]  [BUGGY]  n.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  n.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	n.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);	  n.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	18	None	replace
22	[BUG]  [BUGGY]  addExpr(first.getNext(),  1,  context);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  addExpr(first.getNext(),  1,  context);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	addExpr(first.getNext(),  1,  context);	  addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	17	None	replace
23	[BUG]  [BUGGY]  addExpr(first.getNext(),  2,  rhsContext);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  addExpr(first.getNext(),  2,  rhsContext);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	addExpr(first.getNext(),  2,  rhsContext);	  addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	17	None	replace
24	[BUG]  [BUGGY]  addExpr(first.getNext(),  0,  rhsContext);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  addExpr(first.getNext(),  0,  rhsContext);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	addExpr(first.getNext(),  0,  rhsContext);	  addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	17	None	replace
25	[BUG]  [BUGGY]  addExpr(first.getNext(),  1,  p);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  addExpr(first.getNext(),  1,  p);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	addExpr(first.getNext(),  1,  p);	  addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	17	None	replace
26	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]            ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(NodeUtil.isExpressionNode(n))  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }	  if(NodeUtil.isExpressionNode(last))    {    cc.addOp(   ":       ",    true);    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	35	None	replace
27	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }	  if(childCount    ==    1)    {    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	42	None	replace
28	[BUG]  [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(childCount  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }	  if(childCount    ==    1)    {    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	42	None	replace
29	[BUG]  [BUGGY]  addExpr(first.getNext(),  1,  context);  break;  [CE]  case,  default,  or  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  addExpr(first.getNext(),  1,  context);  break;  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	addExpr(first.getNext(),  1,  context);  break;	  addExpr(first.getNext(),    1,    rhsContext);    break;    	non-compiled	[CE]  case,  default,  or  	11	None	replace
30	[BUG]  [BUGGY]  addExpr(first.getNext(),  0,  rhsContext);  break;  [CE]  case,  default,  or  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  addExpr(first.getNext(),  0,  rhsContext);  break;  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	addExpr(first.getNext(),  0,  rhsContext);  break;	  addExpr(first.getNext(),    1,    rhsContext);    break;    	non-compiled	[CE]  case,  default,  or  	11	None	replace
31	[BUG]  [BUGGY]  addExpr(first.getNext(),  2,  rhsContext);  break;  [CE]  case,  default,  or  [FE]                              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  addExpr(first.getNext(),  2,  rhsContext);  break;  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	addExpr(first.getNext(),  2,  rhsContext);  break;	  addExpr(first.getNext(),    1,    rhsContext);    break;    	non-compiled	[CE]  case,  default,  or  	11	None	replace
32	[BUG]  [BUGGY]  addExpr(first.getNext(),  1,  p);  break;  [CE]  case,  default,  or  [FE]                                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  addExpr(first.getNext(),  1,  p);  break;  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	addExpr(first.getNext(),  1,  p);  break;	  addExpr(first.getNext(),    1,    rhsContext);    break;    	non-compiled	[CE]  case,  default,  or  	11	None	replace
33	[BUG]  [BUGGY]  n.addOp( ",   ",  false);  addExpr(last,  1,  rhsContext);  [CE]  case,  default,  or  [FE]              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  n.addOp( ",   ",  false);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	n.addOp( ",   ",  false);  addExpr(last,  1,  rhsContext);	  cc.addOp(   ",       ",    false);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  case,  default,  or  	24	None	replace
34	[BUG]  [BUGGY]  n.addOp( "?   ",  true);  addExpr(last,  1,  context);  [CE]  case,  default,  or  [FE]                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  n.addOp( "?   ",  true);  addExpr(last,  1,  context);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	n.addOp( "?   ",  true);  addExpr(last,  1,  context);	  n.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  case,  default,  or  	1	None	replace
35	[BUG]  [BUGGY]  n.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [CE]  case,  default,  or  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  n.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	n.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);	  n.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  case,  default,  or  	1	None	replace
36	[BUG]  [BUGGY]  addExpr(first,  1,  context);  [CE]  case,  default,  or  [FE]            ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  addExpr(first,  1,  context);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	addExpr(first,  1,  context);	  addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  case,  default,  or  	19	None	replace
37	[BUG]  [BUGGY]  if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }	  if(last!=    null)    {    cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    }    else    {    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  orphaned  case	50	None	replace
38	[BUG]  [BUGGY]  if(parent!=  null)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(parent!=  null)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(parent!=  null)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }	  if(last!=    null)    {    cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    }    else    {    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  orphaned  case	50	None	replace
39	[BUG]  [BUGGY]  if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }	  if(last!=    null)    {    cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    }    else    {    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  orphaned  case	50	None	replace
40	[BUG]  [BUGGY]  if(parent!=  null)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(parent!=  null)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(parent!=  null)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }	  if(last!=    null)    {    cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    }    else    {    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  orphaned  case	50	None	replace
41	[BUG]  [BUGGY]  cc.addOp( ":   ",  true);  addExpr(last,  0,  rhsContext);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  cc.addOp( ":   ",  true);  addExpr(last,  0,  rhsContext);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	cc.addOp( ":   ",  true);  addExpr(last,  0,  rhsContext);	  if(last!=    null)    {    cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    }    else    {    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	50	None	replace
42	[BUG]  [BUGGY]  cc.addOp( ": "  +  type.equals(type));  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  cc.addOp( ": "  +  type.equals(type));  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	cc.addOp( ": "  +  type.equals(type));	  cc.addOp(   ":   ".equals(type));    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	4	None	replace
43	[BUG]  [BUGGY]  if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( ": ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( ": ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( ": ",  true);  addExpr(last,  1,  rhsContext);  }	  if(last!=    null)    {    cc.addOp(   ":       ",    true);    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  orphaned  case	51	None	replace
44	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  context);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	addExpr(last,  p  +  1,  context);	  addExpr(last,    1,    context);    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	20	None	replace
45	[BUG]  [BUGGY]  n.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  context);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  n.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  context);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	n.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  context);	  n.addOp(   "?       ",    true);    addExpr(last.getNext(),    1,    rhsContext);    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	7	None	replace
46	[BUG]  [BUGGY]  n.addOp( "?   ",  false);  addExpr(last.getNext(),  1,  rhsContext);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  n.addOp( "?   ",  false);  addExpr(last.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	n.addOp( "?   ",  false);  addExpr(last.getNext(),  1,  rhsContext);	  n.addOp(   "?       ",    true);    addExpr(last.getNext(),    1,    rhsContext);    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	7	None	replace
47	[BUG]  [BUGGY]  if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }	  if(last!=    null)    {    cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    }    	non-compiled	[CE]  orphaned  case	48	None	replace
48	[BUG]  [BUGGY]  cc.addOp( ": ".equals(type  +  1));  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  cc.addOp( ": ".equals(type  +  1));  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	cc.addOp( ": ".equals(type  +  1));	  cc.addOp(   ":   ".equals(p    +    1));    	non-compiled	[CE]  not  a  statement	57	None	replace
49	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(NodeUtil.isExpressionNode(n))  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }	  if(NodeUtil.isExpressionNode(last))    {    cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  not  a  statement	28	None	replace
50	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isExpressionNode(n))  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isExpressionNode(n))  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isExpressionNode(n))  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }	  if(NodeUtil.isExpressionNode(last))    {    cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  not  a  statement	28	None	replace
51	[BUG]  [BUGGY]  n.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  break;  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  n.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  break;  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	n.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  break;	  cc.addOp(   "?       ",    true);    addExpr(last.getNext(),    1,    rhsContext);    break;    	non-compiled	[CE]  not  a  statement	30	None	replace
52	[BUG]  [BUGGY]  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  context);  break;  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  context);  break;  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  context);  break;	  cc.addOp(   "?       ",    true);    addExpr(last.getNext(),    1,    rhsContext);    break;    	non-compiled	[CE]  not  a  statement	30	None	replace
53	[BUG]  [BUGGY]  if(p  ==  2)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(p  ==  2)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(p  ==  2)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }	  if(childCount    ==    2)    {    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  not  a  statement	41	None	replace
54	[BUG]  [BUGGY]  n.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  n.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	n.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);	  n.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	12	None	replace
55	[BUG]  [BUGGY]  addExpr(first,  2,  rhsContext);  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  addExpr(first,  2,  rhsContext);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	addExpr(first,  2,  rhsContext);	  addExpr(last,    2,    rhsContext);    	non-compiled	[CE]  not  a  statement	37	None	replace
56	[BUG]  [BUGGY]  if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }	  if(last!=    null)    {    cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    }    else    {    break;    }    	non-compiled	[CE]  orphaned  case	56	None	replace
57	[BUG]  [BUGGY]  if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }	  if(last!=    null)    {    cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    }    else    {    break;    }    	non-compiled	[CE]  orphaned  case	56	None	replace
58	[BUG]  [BUGGY]  cc.addOp( ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  break;  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  cc.addOp( ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  break;  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	cc.addOp( ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  break;	  if(childCount    ==    1)    {    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    break;    }    	non-compiled	[CE]  not  a  statement	59	None	replace
59	[BUG]  [BUGGY]  n.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  break;  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  n.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  break;  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	n.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  break;	  cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    1,    rhsContext);    break;    	non-compiled	[CE]  not  a  statement	31	None	replace
60	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(NodeUtil.isExpressionNode(n))  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }	  if(NodeUtil.isExpressionNode(last))    {    cc.addOp(   ":       ",    true);    addExpr(last,    1,    rhsContext);    }    else    {    break;    }    	non-compiled	[CE]  not  a  statement	36	None	replace
61	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first))  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(NodeUtil.isExpressionNode(first))  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(NodeUtil.isExpressionNode(first))  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }	  if(NodeUtil.isExpressionNode(last))    {    cc.addOp(   ":       ",    true);    addExpr(last,    1,    rhsContext);    }    else    {    break;    }    	non-compiled	[CE]  not  a  statement	36	None	replace
62	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  cc.addOp( ",   ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  cc.addOp( ",   ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(NodeUtil.isExpressionNode(n))  {  cc.addOp( ",   ",  true);  addExpr(last,  1,  rhsContext);  }	  if(NodeUtil.isExpressionNode(last))    {    cc.addOp(   ",       ",    true);    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  not  a  statement	33	None	replace
63	[BUG]  [BUGGY]  if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }	  if(last!=    null)    {    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    }    else    {    break;    }    	non-compiled	[CE]  orphaned  case	43	None	replace
64	[BUG]  [BUGGY]  if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(last!=    null)    {    cc.addOp(   "?       ",    true);    addExpr(last.getNext(),    1,    rhsContext);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	45	None	replace
65	[BUG]  [BUGGY]  if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }	  if(last!=    null)    {    cc.addOp(   "?       ",    true);    addExpr(last.getNext(),    1,    rhsContext);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	45	None	replace
66	[BUG]  [BUGGY]  cc.addOp( ",   ",  true);  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  cc.addOp( ",   ",  true);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	cc.addOp( ",   ",  true);	  cc.addOp(   ",       ",    true);    addExpr(last,    1,    context);    	non-compiled	[CE]  not  a  statement	25	None	replace
67	[BUG]  [BUGGY]  n.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  context);  break;  [CE]  case,  default,  or  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  n.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  context);  break;  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	n.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  context);  break;	  n.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    break;    	non-compiled	[CE]  case,  default,  or  	10	None	replace
68	[BUG]  [BUGGY]  addExpr(last.getNext(),  1,  context);  [CE]  case,  default,  or  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  addExpr(last.getNext(),  1,  context);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	addExpr(last.getNext(),  1,  context);	  addExpr(last.getNext(),    1,    rhsContext);    	non-compiled	[CE]  case,  default,  or  	8	None	replace
69	[BUG]  [BUGGY]  addExpr(last.getNext(),  2,  rhsContext);  [CE]  case,  default,  or  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  addExpr(last.getNext(),  2,  rhsContext);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	addExpr(last.getNext(),  2,  rhsContext);	  addExpr(last.getNext(),    1,    rhsContext);    	non-compiled	[CE]  case,  default,  or  	8	None	replace
70	[BUG]  [BUGGY]  addExpr(n.getNext(),  1,  rhsContext);  [CE]  case,  default,  or  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  addExpr(n.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	addExpr(n.getNext(),  1,  rhsContext);	  addExpr(last.getNext(),    1,    rhsContext);    	non-compiled	[CE]  case,  default,  or  	8	None	replace
71	[BUG]  [BUGGY]  n.addOp( ": ",  false);  addExpr(last,  1,  rhsContext);  [CE]  case,  default,  or  [FE]              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  n.addOp( ": ",  false);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	n.addOp( ": ",  false);  addExpr(last,  1,  rhsContext);	  cc.addOp(   ":   ",    false);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  case,  default,  or  	23	None	replace
72	[BUG]  [BUGGY]  if(childCount  ==  1)  {  if(last  ==  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  break;  }  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(childCount  ==  1)  {  if(last  ==  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(childCount  ==  1)  {  if(last  ==  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  break;  }	  if(last    ==    null)    {    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    break;    }    	non-compiled	[CE]  orphaned  case	58	None	replace
73	[BUG]  [BUGGY]  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  case,  default,  or  [FE]            ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);	  cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    context);    	non-compiled	[CE]  case,  default,  or  	16	None	replace
74	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  [CE]  case,  default,  or  [FE]            ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }	  if(last    ==    null)    {    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    }    	non-compiled	[CE]  case,  default,  or  	46	None	replace
75	[BUG]  [BUGGY]  cc.addOp( ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  case,  default,  or  [FE]              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  cc.addOp( ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	cc.addOp( ":   ",  true);  addExpr(first.getNext(),  1,  rhsContext);	  if(last    ==    null)    {    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    }    	non-compiled	[CE]  case,  default,  or  	46	None	replace
76	[BUG]  [BUGGY]  parent.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  case,  default,  or  [FE]                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  parent.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	parent.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);	  if(last    ==    null)    {    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    }    	non-compiled	[CE]  case,  default,  or  	46	None	replace
77	[BUG]  [BUGGY]  n.addOp( "?   ",  false);  addExpr(last,  1,  context);  [CE]  case,  default,  or  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  n.addOp( "?   ",  false);  addExpr(last,  1,  context);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	n.addOp( "?   ",  false);  addExpr(last,  1,  context);	  n.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  case,  default,  or  	15	None	replace
78	[BUG]  [BUGGY]  n.addOp( ",   ",  true);  addExpr(last,  1,  context);  [CE]  case,  default,  or  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  n.addOp( ",   ",  true);  addExpr(last,  1,  context);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	n.addOp( ",   ",  true);  addExpr(last,  1,  context);	  n.addOp(   ",       ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  case,  default,  or  	26	None	replace
79	[BUG]  [BUGGY]  Context  rhsContext  =  NodeUtil.precedence(type);  [CE]  case,  default,  or  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  Context  rhsContext  =  NodeUtil.precedence(type);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	Context  rhsContext  =  NodeUtil.precedence(type);	  if(NodeUtil.isExpressionNode(rhsContext))    {    cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    }    	non-compiled	[CE]  case,  default,  or  	49	None	replace
80	[BUG]  [BUGGY]  if(childCount  ==  2)  {  if(last!=  null)  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(childCount  ==  2)  {  if(last!=  null)  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(childCount  ==  2)  {  if(last!=  null)  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }	  if(last!=    null)    {    cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    }    else    {    break;    }    	non-compiled	[CE]  orphaned  case	56	None	replace
81	[BUG]  [BUGGY]  if(first!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  case,  default,  or  [FE]                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(first!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(first!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }	  if(last!=    null)    {    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  case,  default,  or  	40	None	replace
82	[BUG]  [BUGGY]  if(first!=  null)  {  cc.addOp( ",   ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(first!=  null)  {  cc.addOp( ",   ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(first!=  null)  {  cc.addOp( ",   ",  true);  addExpr(last,  1,  rhsContext);  }	  if(last!=    null)    {    cc.addOp(   ",       ",    true);    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	60	None	replace
83	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isLiteralValue(type))  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isLiteralValue(type))  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isLiteralValue(type))  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }	  if(NodeUtil.isExpressionNode(last))    {    cc.addOp(   ":       ",    true);    addExpr(last,    1,    rhsContext);    }    else    {    break;    }    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	36	None	replace
84	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(last  ==  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }	  if(last!=    null)    {    cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    }    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	48	None	replace
85	[BUG]  [BUGGY]  if(first!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(first!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(first!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }	  if(last!=    null)    {    cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    }    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	48	None	replace
86	[BUG]  [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  [CE]  case,  default,  or  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(childCount  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }	  if(last!=    null)    {    cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    }    	non-compiled	[CE]  case,  default,  or  	48	None	replace
87	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isExpressionNode(last))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  case,  default,  or  [FE]                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isExpressionNode(last))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isExpressionNode(last))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }	  if(NodeUtil.isExpressionNode(last))    {    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  case,  default,  or  	27	None	replace
88	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isLiteralValue(rhsContext))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  case,  default,  or  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isLiteralValue(rhsContext))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isLiteralValue(rhsContext))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }	  if(NodeUtil.isExpressionNode(last))    {    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  case,  default,  or  	27	None	replace
89	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  }  [CE]  case,  default,  or  [FE]            ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(last!=  null)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  }	  if(last    ==    null)    {    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    }    	non-compiled	[CE]  case,  default,  or  	46	None	replace
90	[BUG]  [BUGGY]  if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( ",   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( ",   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( ",   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  if(last!=    null)    {    cc.addOp(   ",       ",    true);    addExpr(last,    1,    rhsContext);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
91	[BUG]  [BUGGY]  n.addOp( "?   ",  true);  [CE]  case,  default,  or  [FE]                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  n.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	n.addOp( "?   ",  true);	  n.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  case,  default,  or  	1	None	replace
92	[BUG]  [BUGGY]  n.addOp( ",   ",  true);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  n.addOp( ",   ",  true);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	n.addOp( ",   ",  true);	  n.addOp(   ",       ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	26	None	replace
93	[BUG]  [BUGGY]  if(first!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(first!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(first!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }	  if(last!=    null)    {    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    }    else    {    break;    }    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	43	None	replace
94	[BUG]  [BUGGY]  Node  last  =  node.getLastChild();  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  Node  last  =  node.getLastChild();  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	Node  last  =  node.getLastChild();	  Node    last    =    n.getLastChild();    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	3	None	replace
95	[BUG]  [BUGGY]  if(childCount  ==  2)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(childCount  ==  2)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(childCount  ==  2)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(last!=    null)    {    cc.addOp(   "?       ",    true);    addExpr(last.getNext(),    1,    rhsContext);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	45	None	replace
96	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(last))  {  cc.addOp( ":   ",  false);  addExpr(last,  1,  rhsContext);  }  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(NodeUtil.isExpressionNode(last))  {  cc.addOp( ":   ",  false);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(NodeUtil.isExpressionNode(last))  {  cc.addOp( ":   ",  false);  addExpr(last,  1,  rhsContext);  }	  cc.addOp(   ":   ",    false);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	23	None	replace
97	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(last))  {  cc.addOp( ":   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(NodeUtil.isExpressionNode(last))  {  cc.addOp( ":   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(NodeUtil.isExpressionNode(last))  {  cc.addOp( ":   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }	  cc.addOp(   ":   ",    false);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	23	None	replace
98	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  cc.addOp( ":   ",  false);  addExpr(last,  1,  rhsContext);  }  [CE]  case,  default,  or  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  cc.addOp( ":   ",  false);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(NodeUtil.isExpressionNode(n))  {  cc.addOp( ":   ",  false);  addExpr(last,  1,  rhsContext);  }	  cc.addOp(   ":   ",    false);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  case,  default,  or  	23	None	replace
99	[BUG]  [BUGGY]  if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }	  if(last!=    null)    {    cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    }    else    {    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  orphaned  case	50	None	replace
100	[BUG]  [BUGGY]  if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  2,  rhsContext);  }  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  2,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  2,  rhsContext);  }	  if(last!=    null)    {    cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    }    else    {    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  orphaned  case	50	None	replace
101	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  false);  addExpr(last.getNext(),  1,  rhsContext);  }  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  false);  addExpr(last.getNext(),  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(last!=  null)  {  cc.addOp( "?   ",  false);  addExpr(last.getNext(),  1,  rhsContext);  }	  if(last!=    null)    {    cc.addOp(   "?       ",    true);    addExpr(last.getNext(),    1,    rhsContext);    }    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	38	None	replace
102	[BUG]  [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(last.getNext(),  1,  rhsContext);  }  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(last.getNext(),  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(childCount  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(last.getNext(),  1,  rhsContext);  }	  if(childCount    ==    1)    {    cc.addOp(   "?       ",    true);    addExpr(last.getNext(),    1,    rhsContext);    }    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	44	None	replace
103	[BUG]  [BUGGY]  addExpr(last.getNext(),  1,  rhsContext);  break;  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  addExpr(last.getNext(),  1,  rhsContext);  break;  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	addExpr(last.getNext(),  1,  rhsContext);  break;	  addExpr(first.getNext(),    1,    rhsContext);    break;    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	11	None	replace
104	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isExpressionNode(last))  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isExpressionNode(last))  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isExpressionNode(last))  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }	  if(NodeUtil.isExpressionNode(last))    {    cc.addOp(   "?       ",    true);    addExpr(last.getNext(),    1,    rhsContext);    }    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	39	None	replace
105	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isFunctionDeclaration(last))  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isFunctionDeclaration(last))  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isFunctionDeclaration(last))  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }	  if(NodeUtil.isExpressionNode(last))    {    cc.addOp(   "?       ",    true);    addExpr(last.getNext(),    1,    rhsContext);    }    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	39	None	replace
106	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isLiteralValue(rhsContext))  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isLiteralValue(rhsContext))  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isLiteralValue(rhsContext))  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }	  if(NodeUtil.isExpressionNode(last))    {    cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    }    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	32	None	replace
107	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isExpressionNode(last))  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isExpressionNode(last))  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isExpressionNode(last))  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }	  if(NodeUtil.isExpressionNode(last))    {    cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    }    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	32	None	replace
108	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }	  if(NodeUtil.isExpressionNode(last))    {    cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    }    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	32	None	replace
109	[BUG]  [BUGGY]  if(childCount  ==  2)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(childCount  ==  2)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(childCount  ==  2)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }	  if(childCount    ==    1)    {    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    }    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	47	None	replace
110	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isExpressionNode(last))  {  cc.addOp( ": ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]            ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isExpressionNode(last))  {  cc.addOp( ": ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isExpressionNode(last))  {  cc.addOp( ": ",  true);  addExpr(last,  1,  rhsContext);  }	  if(NodeUtil.isExpressionNode(last))    {    cc.addOp(   ":       ",    true);    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	35	None	replace
111	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isLiteralValue(rhsContext))  {  cc.addOp( ": ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isLiteralValue(rhsContext))  {  cc.addOp( ": ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isLiteralValue(rhsContext))  {  cc.addOp( ": ",  true);  addExpr(last,  1,  rhsContext);  }	  if(NodeUtil.isExpressionNode(last))    {    cc.addOp(   ":       ",    true);    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	35	None	replace
112	[BUG]  [BUGGY]  addExpr(last,  3,  rhsContext);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]            ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  addExpr(last,  3,  rhsContext);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	addExpr(last,  3,  rhsContext);	  addExpr(last,    2,    rhsContext);    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	37	None	replace
113	[BUG]  [BUGGY]  addExpr(last,  2,  context);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  addExpr(last,  2,  context);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	addExpr(last,  2,  context);	  addExpr(last,    2,    rhsContext);    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	37	None	replace
114	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isExpressionNode(last))  {  cc.addOp( ",   ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isExpressionNode(last))  {  cc.addOp( ",   ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isExpressionNode(last))  {  cc.addOp( ",   ",  true);  addExpr(last,  1,  rhsContext);  }	  if(NodeUtil.isExpressionNode(last))    {    cc.addOp(   ",       ",    true);    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	33	None	replace
115	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isLiteralValue(rhsContext))  {  cc.addOp( ",   ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isLiteralValue(rhsContext))  {  cc.addOp( ",   ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isLiteralValue(rhsContext))  {  cc.addOp( ",   ",  true);  addExpr(last,  1,  rhsContext);  }	  if(NodeUtil.isExpressionNode(last))    {    cc.addOp(   ",       ",    true);    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	33	None	replace
116	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isExpressionNode(last))  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isExpressionNode(last))  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isExpressionNode(last))  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }	  if(NodeUtil.isExpressionNode(last))    {    cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	28	None	replace
117	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isLiteralValue(rhsContext))  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isLiteralValue(rhsContext))  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isLiteralValue(rhsContext))  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }	  if(NodeUtil.isExpressionNode(last))    {    cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	28	None	replace
118	[BUG]  [BUGGY]  addExpr(last.getNext(),  0,  rhsContext);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  addExpr(last.getNext(),  0,  rhsContext);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	addExpr(last.getNext(),  0,  rhsContext);	  addExpr(last.getNext(),    1,    rhsContext);    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	8	None	replace
119	[BUG]  [BUGGY]  cc.addOp( ":   ",  type.equals(rhsContext));  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  cc.addOp( ":   ",  type.equals(rhsContext));  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	cc.addOp( ":   ",  type.equals(rhsContext));	  cc.addOp(   ":   ".equals(type));    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	4	None	replace
120	[BUG]  [BUGGY]  n.addOp( "?   ",  false);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  n.addOp( "?   ",  false);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	n.addOp( "?   ",  false);	  n.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	15	None	replace
121	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  break;  }  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  break;  }	  if(last    ==    null)    {    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    break;    }    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	58	None	replace
122	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  break;  }  [CE]  case,  default,  or  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(last!=  null)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  break;  }	  if(last    ==    null)    {    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    break;    }    	non-compiled	[CE]  case,  default,  or  	58	None	replace
123	[BUG]  [BUGGY]  cc.addOp( ":   ",  context.equals(context));  [CE]  case,  default,  or  [FE]                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  cc.addOp( ":   ",  context.equals(context));  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	cc.addOp( ":   ",  context.equals(context));	  cc.addOp(   ":   ".equals(context));    	non-compiled	[CE]  case,  default,  or  	5	None	replace
124	[BUG]  [BUGGY]  if(childCount  ==  2)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  break;  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(childCount  ==  2)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(childCount  ==  2)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  break;  }	  if(childCount    ==    1)    {    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    break;    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
125	[BUG]  [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  break;  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(childCount  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  break;  }	  if(childCount    ==    1)    {    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    break;    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
126	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(last))  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  break;  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(NodeUtil.isExpressionNode(last))  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(NodeUtil.isExpressionNode(last))  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  break;  }	  cc.addOp(   "?       ",    true);    addExpr(last.getNext(),    1,    rhsContext);    break;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
127	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(last))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  context);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(NodeUtil.isExpressionNode(last))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  context);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(NodeUtil.isExpressionNode(last))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  context);  }	  cc.addOp(   "?       ",    true);    addExpr(last,    1,    context);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
128	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(p))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(NodeUtil.isExpressionNode(p))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(NodeUtil.isExpressionNode(p))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }	  if(NodeUtil.isExpressionNode(last))    {    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
129	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isExpressionNode(n))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isExpressionNode(n))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isExpressionNode(n))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }	  if(NodeUtil.isExpressionNode(last))    {    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
130	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isExpressionNode(rhsContext))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isExpressionNode(rhsContext))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isExpressionNode(rhsContext))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }	  if(NodeUtil.isExpressionNode(last))    {    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	27	None	replace
131	[BUG]  [BUGGY]  if(childCount  ==  2)  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(childCount  ==  2)  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(childCount  ==  2)  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }	  if(last!=    null)    {    cc.addOp(   "?       ",    true);    addExpr(last.getNext(),    1,    rhsContext);    }    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	38	None	replace
132	[BUG]  [BUGGY]  addExpr(last,  p,  context);  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  addExpr(last,  p,  context);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	addExpr(last,  p,  context);	  addExpr(last,    1,    context);    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	20	None	replace
133	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }	  if(NodeUtil.isExpressionNode(last))    {    cc.addOp(   "?       ",    true);    addExpr(last.getNext(),    1,    rhsContext);    }    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	39	None	replace
134	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(p))  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(NodeUtil.isExpressionNode(p))  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(NodeUtil.isExpressionNode(p))  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }	  if(NodeUtil.isExpressionNode(last))    {    cc.addOp(   "?       ",    true);    addExpr(last.getNext(),    1,    rhsContext);    }    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	39	None	replace
135	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isExpressionNode(n))  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }  [CE]  MatchNotFunction  has  private  access  in  NodeUtil  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isExpressionNode(n))  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isExpressionNode(n))  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }	  if(NodeUtil.isExpressionNode(last))    {    cc.addOp(   "?       ",    true);    addExpr(last.getNext(),    1,    rhsContext);    }    	non-compiled	[CE]  MatchNotFunction  has  private  access  in  NodeUtil	39	None	replace
136	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(p))  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(NodeUtil.isExpressionNode(p))  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(NodeUtil.isExpressionNode(p))  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }	  if(NodeUtil.isExpressionNode(last))    {    cc.addOp(   ":       ",    true);    addExpr(last,    1,    rhsContext);    }    else    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
137	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(p))  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(NodeUtil.isExpressionNode(p))  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(NodeUtil.isExpressionNode(p))  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }	  if(NodeUtil.isExpressionNode(last))    {    cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
138	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( ",   ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(last  ==  null)  {  cc.addOp( ",   ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(last  ==  null)  {  cc.addOp( ",   ",  true);  addExpr(last,  1,  rhsContext);  }	  if(last!=    null)    {    cc.addOp(   ",       ",    true);    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
139	[BUG]  [BUGGY]  cc.addOp( ": ",  type.equals(type));  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  cc.addOp( ": ",  type.equals(type));  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	cc.addOp( ": ",  type.equals(type));	  cc.addOp(   ":   ".equals(type));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
140	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  break;  }  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  break;  }	  if(childCount    ==    1)    {    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    break;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
141	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( ":   ",  false);  addExpr(last,  1,  rhsContext);  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(last!=  null)  {  cc.addOp( ":   ",  false);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(last!=  null)  {  cc.addOp( ":   ",  false);  addExpr(last,  1,  rhsContext);  }	  cc.addOp(   ":   ",    false);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
142	[BUG]  [BUGGY]  if(childCount  ==  2)  {  cc.addOp( ":   ",  false);  addExpr(last,  1,  rhsContext);  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(childCount  ==  2)  {  cc.addOp( ":   ",  false);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(childCount  ==  2)  {  cc.addOp( ":   ",  false);  addExpr(last,  1,  rhsContext);  }	  cc.addOp(   ":   ",    false);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
143	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( ":   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(last!=  null)  {  cc.addOp( ":   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(last!=  null)  {  cc.addOp( ":   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }	  cc.addOp(   ":   ",    false);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
144	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  break;  }  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(last  ==  null)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  break;  }	  cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    1,    rhsContext);    break;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
145	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(p))  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(NodeUtil.isExpressionNode(p))  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(NodeUtil.isExpressionNode(p))  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }	  if(NodeUtil.isExpressionNode(last))    {    cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
146	[BUG]  [BUGGY]  if(last.getType()  ==  Token.STRING)  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(last.getType()  ==  Token.STRING)  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(last.getType()  ==  Token.STRING)  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }	  cc.addOp(   ":   ",    true);    addExpr(last,    1,    context);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
147	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  context);  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(last!=  null)  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  context);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(last!=  null)  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  context);  }	  cc.addOp(   ":   ",    true);    addExpr(last,    1,    context);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
148	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(last  ==  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }	  if(last!=    null)    {    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    }    else    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
149	[BUG]  [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(childCount  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }	  if(last!=    null)    {    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    }    else    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
150	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( ",   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(last  ==  null)  {  cc.addOp( ",   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(last  ==  null)  {  cc.addOp( ",   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(last!=    null)    {    cc.addOp(   ",       ",    true);    addExpr(last,    1,    rhsContext);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
151	[BUG]  [BUGGY]  if(childCount  ==  2)  {  if(last!=  null)  {  cc.addOp( ",   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(childCount  ==  2)  {  if(last!=  null)  {  cc.addOp( ",   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(childCount  ==  2)  {  if(last!=  null)  {  cc.addOp( ",   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(last!=    null)    {    cc.addOp(   ",       ",    true);    addExpr(last,    1,    rhsContext);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	62	None	replace
152	[BUG]  [BUGGY]  if(childCount  ==  2)  {  if(last!=  null)  {  cc.addOp( ",   ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(childCount  ==  2)  {  if(last!=  null)  {  cc.addOp( ",   ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(childCount  ==  2)  {  if(last!=  null)  {  cc.addOp( ",   ",  true);  addExpr(last,  1,  rhsContext);  }	  if(last!=    null)    {    cc.addOp(   ",       ",    true);    addExpr(last,    1,    rhsContext);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	62	None	replace
153	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( ",   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(last!=  null)  {  cc.addOp( ",   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(last!=  null)  {  cc.addOp( ",   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(last!=    null)    {    cc.addOp(   ",       ",    true);    addExpr(last,    1,    rhsContext);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
154	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(type))  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(NodeUtil.isExpressionNode(type))  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(NodeUtil.isExpressionNode(type))  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }	  if(NodeUtil.isExpressionNode(rhsContext))    {    cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
155	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( ",   ",  false);  addExpr(last,  1,  rhsContext);  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(last!=  null)  {  cc.addOp( ",   ",  false);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(last!=  null)  {  cc.addOp( ",   ",  false);  addExpr(last,  1,  rhsContext);  }	  cc.addOp(   ",       ",    false);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
156	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( ",   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(last!=  null)  {  cc.addOp( ",   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(last!=  null)  {  cc.addOp( ",   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }	  cc.addOp(   ",       ",    false);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
157	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }	  if(childCount    ==    1)    {    cc.addOp(   "?       ",    true);    addExpr(last.getNext(),    1,    rhsContext);    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
158	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(last  ==  null)  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(last  ==  null)  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }	  if(last!=    null)    {    cc.addOp(   ":       ",    true);    addExpr(last,    1,    rhsContext);    }    else    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
159	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }	  if(childCount    ==    1)    {    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
160	[BUG]  [BUGGY]  if(parent!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(parent!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(parent!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }	  if(last!=    null)    {    cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    }    else    {    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
161	[BUG]  [BUGGY]  if(childCount  ==  2)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(childCount  ==  2)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(childCount  ==  2)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }	  if(last!=    null)    {    cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    }    else    {    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  orphaned  case	50	None	replace
162	[BUG]  [BUGGY]  if(childCount  ==  2)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(childCount  ==  2)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(childCount  ==  2)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }	  if(last!=    null)    {    cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    }    else    {    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  orphaned  case	50	None	replace
163	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isExpressionNode(n))  {  cc.addOp( ",   ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isExpressionNode(n))  {  cc.addOp( ",   ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isExpressionNode(n))  {  cc.addOp( ",   ",  true);  addExpr(last,  1,  rhsContext);  }	  if(NodeUtil.isExpressionNode(last))    {    cc.addOp(   ",       ",    true);    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
164	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isExpressionNode(rhsContext))  {  cc.addOp( ",   ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isExpressionNode(rhsContext))  {  cc.addOp( ",   ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isExpressionNode(rhsContext))  {  cc.addOp( ",   ",  true);  addExpr(last,  1,  rhsContext);  }	  if(NodeUtil.isExpressionNode(last))    {    cc.addOp(   ",       ",    true);    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
165	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  context);  break;  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  context);  break;  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(last  ==  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  context);  break;  }	  cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    context);    break;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
166	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  context);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  context);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(last  ==  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  context);  }	  cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    context);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
167	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(last!=  null)  {  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }	  if(last!=    null)    {    cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
168	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  break;  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  break;  }	  cc.addOp(   "?       ",    true);    addExpr(last.getNext(),    1,    rhsContext);    break;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
169	[BUG]  [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  break;  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(childCount  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  break;  }	  cc.addOp(   "?       ",    true);    addExpr(last.getNext(),    1,    rhsContext);    break;    	non-compiled	[CE]  ';'  expected	30	None	replace
170	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( ",   ",  true);  addExpr(last,  1,  context);  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(last!=  null)  {  cc.addOp( ",   ",  true);  addExpr(last,  1,  context);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(last!=  null)  {  cc.addOp( ",   ",  true);  addExpr(last,  1,  context);  }	  cc.addOp(   ",       ",    true);    addExpr(last,    1,    context);    	non-compiled	[CE]  ';'  expected	25	None	replace
171	[BUG]  [BUGGY]  cc.addOp( ",  true);  addExpr(last,  1,  rhsContext);  [CE]  unclosed  string  literal  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  cc.addOp( ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	cc.addOp( ",  true);  addExpr(last,  1,  rhsContext);	  cc.addOp(   ",       ",    true);    addExpr(last,    1,    context);    	non-compiled	[CE]  unclosed  string  literal	25	None	replace
172	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isLiteralValue(type))  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isLiteralValue(type))  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isLiteralValue(type))  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }	  if(NodeUtil.isExpressionNode(last))    {    cc.addOp(   ":       ",    true);    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
173	[BUG]  [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(childCount  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(last!=    null)    {    cc.addOp(   "?       ",    true);    addExpr(last.getNext(),    1,    rhsContext);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	45	None	replace
174	[BUG]  [BUGGY]  addExpr(first,  p,  rhsContext);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  addExpr(first,  p,  rhsContext);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	addExpr(first,  p,  rhsContext);	  addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  ';'  expected	19	None	replace
175	[BUG]  [BUGGY]  if(last.getType()  ==  Token.STRING)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(last.getType()  ==  Token.STRING)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(last.getType()  ==  Token.STRING)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }	  cc.addOp(   "?       ",    true);    addExpr(last,    1,    context);    	non-compiled	[CE]  ';'  expected	2	None	replace
176	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  context);  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  context);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  context);  }	  cc.addOp(   "?       ",    true);    addExpr(last,    1,    context);    	non-compiled	[CE]  ';'  expected	2	None	replace
177	[BUG]  [BUGGY]  if(p  ==  0)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  break;  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(p  ==  0)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(p  ==  0)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  break;  }	  if(last    ==    null)    {    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    break;    }    	non-compiled	[CE]  	58	None	replace
178	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  context);  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  context);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  context);  }	  cc.addOp(   "?       ",    true);    addExpr(last.getNext(),    1,    context);    	non-compiled	[CE]  	6	None	replace
179	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(last  ==  null)  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  break;  }	  if(last!=    null)    {    cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    }    else    {    break;    }    	non-compiled	[CE]  	56	None	replace
180	[BUG]  [BUGGY]  Node  last  =  n.removeFirstChild();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  Node  last  =  n.removeFirstChild();  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	Node  last  =  n.removeFirstChild();	  Node    last    =    n.getLastChild();    	non-compiled	[CE]  	3	None	replace
181	[BUG]  [BUGGY]  if(childCount  >  1)  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(childCount  >  1)  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(childCount  >  1)  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }	  if(childCount    ==    1)    {    cc.addOp(   ":       ",    true);    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  	52	None	replace
182	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(last  ==  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }	  if(last!=    null)    {    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  	40	None	replace
183	[BUG]  [BUGGY]  if(p  ==  0)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  [CE]  [FE]            ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(p  ==  0)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(p  ==  0)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }	  if(last    ==    null)    {    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    }    	non-compiled	[CE]  	46	None	replace
184	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(NodeUtil.isExpressionNode(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(NodeUtil.isExpressionNode(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }	  if(NodeUtil.isExpressionNode(rhsContext))    {    cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    }    	non-compiled	[CE]  	49	None	replace
185	[BUG]  [BUGGY]  if(p  ==  2)  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);      [BUGGY]  if(p  ==  2)  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	if(p  ==  2)  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }	  if(childCount    ==    2)    {    cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  	55	None	replace
