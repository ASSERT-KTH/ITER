bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException  [CONTEXT]    [BUGGY]  Location  loc1  =  subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D));  [BUGGY]    Location  loc2  =  subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));  if  (includeEndPoints)  {  return  ((loc1  !=  Location.OUTSIDE)  &&  (loc2  !=  Location.OUTSIDE))  ?  v2D  :  null;  }  else  {  return  ((loc1  ==  Location.INSIDE)  &&  (loc2  ==  Location.INSIDE))  ?  v2D  :  null;  }  [CLASS]  SubLine  [METHOD]  intersection  [RETURN_TYPE]  Vector2D  SubLine  subLine  final  boolean  includeEndPoints  	projects/Math4/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java	0.2672612419124244	120	120	2	add	Location  loc1  =  subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D));	Location  loc1  =  getRemainingRegion().checkPoint(line1.toSubSpace(v2D));  	compilable	  [FE]  NullPointerException  	11	5	replace
2	[BUG]  [BUGGY]  Location  loc1  =  subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D));  [FE]  NullPointerException  [FE]    NullPointerException  [CONTEXT]    [BUGGY]  Location  loc1  =  subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D));  [BUGGY]    Location  loc2  =  subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));  if  (includeEndPoints)  {  return  ((loc1  !=  Location.OUTSIDE)  &&  (loc2  !=  Location.OUTSIDE))  ?  v2D  :  null;  }  else  {  return  ((loc1  ==  Location.INSIDE)  &&  (loc2  ==  Location.INSIDE))  ?  v2D  :  null;  }  [CLASS]  SubLine  [METHOD]  intersection  [RETURN_TYPE]  Vector2D  SubLine  subLine  final  boolean  includeEndPoints  	projects/Math4/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java	0.2672612419124244	120	120	2	replace	Location  loc1  =  subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D));	Location  loc1  =  getRemainingRegion().checkPoint(line1.toSubSpace(v2D));  	compilable	  [FE]  NullPointerException  	11	5	replace
3	[BUG]  [BUGGY]  Location  loc1  =  getRemainingRegion().checkPoint(subLine.toSubSpace(v2D));  [CE]  cannot  find  symbol  [FE]      NullPointerException  [CONTEXT]    [BUGGY]  Location  loc1  =  getRemainingRegion().checkPoint(subLine.toSubSpace(v2D));  [BUGGY]    Location  loc2  =  subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));  if  (includeEndPoints)  {  return  ((loc1  !=  Location.OUTSIDE)  &&  (loc2  !=  Location.OUTSIDE))  ?  v2D  :  null;  }  else  {  return  ((loc1  ==  Location.INSIDE)  &&  (loc2  ==  Location.INSIDE))  ?  v2D  :  null;  }  [CLASS]  SubLine  [METHOD]  intersection  [RETURN_TYPE]  Vector2D  SubLine  subLine  final  boolean  includeEndPoints  	projects/Math4/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java	0.2672612419124244	120	120	2	replace	Location  loc1  =  getRemainingRegion().checkPoint(subLine.toSubSpace(v2D));	Location  loc1  =  getRemainingRegion().checkPoint(line1.toSubSpace(v2D));  	non-compiled	[CE]  cannot  find  symbol	11	None	replace
4	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  loc1  [FE]        NullPointerException  [CONTEXT]    [BUGGY]    [BUGGY]    Location  loc2  =  subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));  if  (includeEndPoints)  {  return  ((loc1  !=  Location.OUTSIDE)  &&  (loc2  !=  Location.OUTSIDE))  ?  v2D  :  null;  }  else  {  return  ((loc1  ==  Location.INSIDE)  &&  (loc2  ==  Location.INSIDE))  ?  v2D  :  null;  }  [CLASS]  SubLine  [METHOD]  intersection  [RETURN_TYPE]  Vector2D  SubLine  subLine  final  boolean  includeEndPoints  	projects/Math4/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java	0.2672612419124244	120	120	2	replace	  	Location  loc1  =  getRemainingRegion().checkPoint(line1.toSubSpace(v2D));  	non-compiled	[CE]  cannot  find  symbol  loc1	11	None	replace
5	[BUG]  [BUGGY]    SubLine  subLine  =  subLine.getRemainingRegion();  [CE]  variable  subLine  is  already  defined  in  method  intersection(SubLine,boolean)  [FE]    NullPointerException  [CONTEXT]    [BUGGY]    SubLine  subLine  =  subLine.getRemainingRegion();  [BUGGY]  Location  loc1  =  getRemainingRegion().checkPoint(line1.toSubSpace(v2D));  Location  loc2  =  subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));  if  (includeEndPoints)  {  return  ((loc1  !=  Location.OUTSIDE)  &&  (loc2  !=  Location.OUTSIDE))  ?  v2D  :  null;  }  else  {  return  ((loc1  ==  Location.INSIDE)  &&  (loc2  ==  Location.INSIDE))  ?  v2D  :  null;  }  [CLASS]  SubLine  [METHOD]  intersection  [RETURN_TYPE]  Vector2D  SubLine  subLine  final  boolean  includeEndPoints  	projects/Math4/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java	0.2672612419124244	120	120	2	replace	    SubLine  subLine  =  subLine.getRemainingRegion();		non-compiled	[CE]  variable  subLine  is  already  defined  in  method  intersection(SubLine,boolean)	12	None	add
6	[BUG]  [BUGGY]    Location  subLine  =  subLine.getRemainingRegion().checkPoint(v2D);  [CE]  variable  subLine  is  already  defined  in  method  intersection(SubLine,boolean)  [FE]      NullPointerException  [CONTEXT]    [BUGGY]    Location  subLine  =  subLine.getRemainingRegion().checkPoint(v2D);  [BUGGY]  Location  loc1  =  getRemainingRegion().checkPoint(line1.toSubSpace(v2D));  Location  loc2  =  subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));  if  (includeEndPoints)  {  return  ((loc1  !=  Location.OUTSIDE)  &&  (loc2  !=  Location.OUTSIDE))  ?  v2D  :  null;  }  else  {  return  ((loc1  ==  Location.INSIDE)  &&  (loc2  ==  Location.INSIDE))  ?  v2D  :  null;  }  [CLASS]  SubLine  [METHOD]  intersection  [RETURN_TYPE]  Vector2D  SubLine  subLine  final  boolean  includeEndPoints  	projects/Math4/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java	0.2672612419124244	120	120	2	replace	    Location  subLine  =  subLine.getRemainingRegion().checkPoint(v2D);		non-compiled	[CE]  variable  subLine  is  already  defined  in  method  intersection(SubLine,boolean)	12	None	add
7	[BUG]  [BUGGY]    Location  subLine  =  subLine.getRemainingRegion();  [CE]  variable  subLine  is  already  defined  in  method  intersection(SubLine,boolean)  [FE]        NullPointerException  [CONTEXT]    [BUGGY]    Location  subLine  =  subLine.getRemainingRegion();  [BUGGY]  Location  loc1  =  getRemainingRegion().checkPoint(line1.toSubSpace(v2D));  Location  loc2  =  subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));  if  (includeEndPoints)  {  return  ((loc1  !=  Location.OUTSIDE)  &&  (loc2  !=  Location.OUTSIDE))  ?  v2D  :  null;  }  else  {  return  ((loc1  ==  Location.INSIDE)  &&  (loc2  ==  Location.INSIDE))  ?  v2D  :  null;  }  [CLASS]  SubLine  [METHOD]  intersection  [RETURN_TYPE]  Vector2D  SubLine  subLine  final  boolean  includeEndPoints  	projects/Math4/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java	0.2672612419124244	120	120	2	replace	    Location  subLine  =  subLine.getRemainingRegion();		non-compiled	[CE]  variable  subLine  is  already  defined  in  method  intersection(SubLine,boolean)	12	None	add
8	[BUG]  [BUGGY]  Location  loc1  =  subLine.getRemainingRegion().checkPoint(v2D.toSubSpace(v2D));  [CE]  cannot  find  symbol  [FE]    NullPointerException  [CONTEXT]    [BUGGY]  Location  loc1  =  subLine.getRemainingRegion().checkPoint(v2D.toSubSpace(v2D));  [BUGGY]    Location  loc2  =  subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));  if  (includeEndPoints)  {  return  ((loc1  !=  Location.OUTSIDE)  &&  (loc2  !=  Location.OUTSIDE))  ?  v2D  :  null;  }  else  {  return  ((loc1  ==  Location.INSIDE)  &&  (loc2  ==  Location.INSIDE))  ?  v2D  :  null;  }  [CLASS]  SubLine  [METHOD]  intersection  [RETURN_TYPE]  Vector2D  SubLine  subLine  final  boolean  includeEndPoints  	projects/Math4/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java	0.2672612419124244	120	120	2	replace	Location  loc1  =  subLine.getRemainingRegion().checkPoint(v2D.toSubSpace(v2D));	Location  loc1  =  getRemainingRegion().checkPoint(line1.toSubSpace(v2D));  	non-compiled	[CE]  cannot  find  symbol	11	None	replace
9	[BUG]  [BUGGY]    Line  subLine  =  subLine.getRemainingRegion();  [CE]  variable  subLine  is  already  defined  in  method  intersection(SubLine,boolean)  [FE]    NullPointerException  [CONTEXT]    [BUGGY]    Line  subLine  =  subLine.getRemainingRegion();  [BUGGY]  Location  loc1  =  getRemainingRegion().checkPoint(line1.toSubSpace(v2D));  Location  loc2  =  subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));  if  (includeEndPoints)  {  return  ((loc1  !=  Location.OUTSIDE)  &&  (loc2  !=  Location.OUTSIDE))  ?  v2D  :  null;  }  else  {  return  ((loc1  ==  Location.INSIDE)  &&  (loc2  ==  Location.INSIDE))  ?  v2D  :  null;  }  [CLASS]  SubLine  [METHOD]  intersection  [RETURN_TYPE]  Vector2D  SubLine  subLine  final  boolean  includeEndPoints  	projects/Math4/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java	0.2672612419124244	120	120	2	replace	    Line  subLine  =  subLine.getRemainingRegion();		non-compiled	[CE]  variable  subLine  is  already  defined  in  method  intersection(SubLine,boolean)	12	None	add
10	[BUG]  [BUGGY]    SubLine  subLine  =  subLine.getRemainingRegion().checkPoint(v2D);  [CE]  variable  subLine  is  already  defined  in  method  intersection(SubLine,boolean)  [FE]      NullPointerException  [CONTEXT]    [BUGGY]    SubLine  subLine  =  subLine.getRemainingRegion().checkPoint(v2D);  [BUGGY]  Location  loc1  =  getRemainingRegion().checkPoint(line1.toSubSpace(v2D));  Location  loc2  =  subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));  if  (includeEndPoints)  {  return  ((loc1  !=  Location.OUTSIDE)  &&  (loc2  !=  Location.OUTSIDE))  ?  v2D  :  null;  }  else  {  return  ((loc1  ==  Location.INSIDE)  &&  (loc2  ==  Location.INSIDE))  ?  v2D  :  null;  }  [CLASS]  SubLine  [METHOD]  intersection  [RETURN_TYPE]  Vector2D  SubLine  subLine  final  boolean  includeEndPoints  	projects/Math4/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java	0.2672612419124244	120	120	2	replace	    SubLine  subLine  =  subLine.getRemainingRegion().checkPoint(v2D);		non-compiled	[CE]  variable  subLine  is  already  defined  in  method  intersection(SubLine,boolean)	12	None	add
11	[BUG]  [BUGGY]    Line  v2D  =  subLine.getRemainingRegion().checkPoint(v2.toSubSpace(v2D));  [CE]  variable  v2D  is  already  defined  in  method  intersection(SubLine,boolean)  [FE]    NullPointerException  [CONTEXT]    [BUGGY]    Line  v2D  =  subLine.getRemainingRegion().checkPoint(v2.toSubSpace(v2D));  [BUGGY]  Location  loc1  =  getRemainingRegion().checkPoint(line1.toSubSpace(v2D));  Location  loc2  =  subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));  if  (includeEndPoints)  {  return  ((loc1  !=  Location.OUTSIDE)  &&  (loc2  !=  Location.OUTSIDE))  ?  v2D  :  null;  }  else  {  return  ((loc1  ==  Location.INSIDE)  &&  (loc2  ==  Location.INSIDE))  ?  v2D  :  null;  }  [CLASS]  SubLine  [METHOD]  intersection  [RETURN_TYPE]  Vector2D  SubLine  subLine  final  boolean  includeEndPoints  	projects/Math4/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java	0.2672612419124244	120	120	2	replace	    Line  v2D  =  subLine.getRemainingRegion().checkPoint(v2.toSubSpace(v2D));		non-compiled	[CE]  variable  v2D  is  already  defined  in  method  intersection(SubLine,boolean)	12	None	add
12	[BUG]  [BUGGY]    SubLine  subLine  =  subLine.getRemainingRegion().checkPoint(v2.toSubSpace(v2D));  [CE]  variable  subLine  is  already  defined  in  method  intersection(SubLine,boolean)  [FE]      NullPointerException  [CONTEXT]    [BUGGY]    SubLine  subLine  =  subLine.getRemainingRegion().checkPoint(v2.toSubSpace(v2D));  [BUGGY]  Location  loc1  =  getRemainingRegion().checkPoint(line1.toSubSpace(v2D));  Location  loc2  =  subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));  if  (includeEndPoints)  {  return  ((loc1  !=  Location.OUTSIDE)  &&  (loc2  !=  Location.OUTSIDE))  ?  v2D  :  null;  }  else  {  return  ((loc1  ==  Location.INSIDE)  &&  (loc2  ==  Location.INSIDE))  ?  v2D  :  null;  }  [CLASS]  SubLine  [METHOD]  intersection  [RETURN_TYPE]  Vector2D  SubLine  subLine  final  boolean  includeEndPoints  	projects/Math4/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java	0.2672612419124244	120	120	2	replace	    SubLine  subLine  =  subLine.getRemainingRegion().checkPoint(v2.toSubSpace(v2D));		non-compiled	[CE]  variable  subLine  is  already  defined  in  method  intersection(SubLine,boolean)	12	None	add
