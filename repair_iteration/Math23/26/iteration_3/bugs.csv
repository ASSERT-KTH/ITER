bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(isMinim  &&  isMax)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;      [BUGGY]  if(isMinim  &&  isMax)  {  return  false;  }  [BUGGY]      final  double  lo  =  getMin();  final  double  mid  =  getStartValue();  final  double  hi  =  getMax();  final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	117	117	1	replace	if(isMinim  &&  isMax)  {  return  false;  }	  if(isMinim    ||    isMax)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
2	[BUG]  [BUGGY]  if(isMinim  ||  isMax)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;      [BUGGY]  if(isMinim  ||  isMax)  {  return  true;  }  [BUGGY]      final  double  lo  =  getMin();  final  double  mid  =  getStartValue();  final  double  hi  =  getMax();  final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	117	117	1	replace	if(isMinim  ||  isMax)  {  return  true;  }	  if(isMinim    ||    isMax)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
3	[BUG]  [BUGGY]  if(isMinim)  {  if(!isMinim)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;      [BUGGY]  if(isMinim)  {  if(!isMinim)  {  return  true;  }  [BUGGY]      final  double  mid  =  getStartValue();  final  double  hi  =  getMax();  final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	117	117	1	replace	if(isMinim)  {  if(!isMinim)  {  return  true;  }	  if(isMinim)    {    if(!isMinim)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
4	[BUG]  [BUGGY]  parent  ==  null  ||  isMinim)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;      [BUGGY]  parent  ==  null  ||  isMinim)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  double  mid  =  getStartValue();  final  double  hi  =  getMax();  final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	117	117	1	replace	parent  ==  null  ||  isMinim)  {  throw  new  IllegalStateException( " ");  }	  if(isMinim)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
5	[BUG]  [BUGGY]  While(isMinim)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;      [BUGGY]  While(isMinim)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  double  mid  =  getStartValue();  final  double  hi  =  getMax();  final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	117	117	1	replace	While(isMinim)  {  throw  new  IllegalStateException( " ");  }	  if(isMinim)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
6	[BUG]  [BUGGY]  final  double  a  =  getMin();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;      [BUGGY]  final  double  a  =  getMin();  [BUGGY]      final  double  lo  =  getMin();  final  double  mid  =  getStartValue();  final  double  hi  =  getMax();  final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	117	117	1	replace	final  double  a  =  getMin();	  final    double    a    =    getStartValue();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
7	[BUG]  [BUGGY]  final  double  a  =  getMax();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;      [BUGGY]  final  double  a  =  getMax();  [BUGGY]      final  double  lo  =  getMin();  final  double  mid  =  getStartValue();  final  double  hi  =  getMax();  final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	117	117	1	replace	final  double  a  =  getMax();	  final    double    a    =    getStartValue();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
8	[BUG]  [BUGGY]  final  double  lo  =  getLongValue()  -  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;      [BUGGY]  final  double  lo  =  getLongValue()  -  1;  [BUGGY]      final  double  mid  =  getStartValue();  final  double  hi  =  getMax();  final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	117	117	1	replace	final  double  lo  =  getLongValue()  -  1;	  final    double    lo    =    getLongValue();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
9	[BUG]  [BUGGY]  final  double  max  =  getMin();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;      [BUGGY]  final  double  max  =  getMin();  [BUGGY]      final  double  lo  =  getMin();  final  double  mid  =  getStartValue();  final  double  hi  =  getMax();  final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	117	117	1	replace	final  double  max  =  getMin();	  final    double    max    =    getMax()    -    1;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
10	[BUG]  [BUGGY]  parent  ==  null  ||  isMinim)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;      [BUGGY]  parent  ==  null  ||  isMinim)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  double  mid  =  getStartValue();  final  double  hi  =  getMax();  final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	117	117	1	replace	parent  ==  null  ||  isMinim)  {  throw  new  IllegalArgumentException( " ");  }	  if(isMinim)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
11	[BUG]  [BUGGY]  While(isMinim)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;      [BUGGY]  While(isMinim)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  double  mid  =  getStartValue();  final  double  hi  =  getMax();  final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	117	117	1	replace	While(isMinim)  {  throw  new  IllegalArgumentException( " ");  }	  if(isMinim)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
12	[BUG]  [BUGGY]  if(!isMinim)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;      [BUGGY]  if(!isMinim)  {  return  true;  }  [BUGGY]      final  double  lo  =  getMin();  final  double  mid  =  getStartValue();  final  double  hi  =  getMax();  final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	117	117	1	replace	if(!isMinim)  {  return  true;  }	  if(isMinim)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
13	[BUG]  [BUGGY]  final  long  lo  =  getLongValue();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;      [BUGGY]  final  long  lo  =  getLongValue();  [BUGGY]      final  double  mid  =  getStartValue();  final  double  hi  =  getMax();  final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	117	117	1	replace	final  long  lo  =  getLongValue();	  final    double    lo    =    getLongValue();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
14	[BUG]  [BUGGY]  if(!isMinim)  {  if(isMinim)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;      [BUGGY]  if(!isMinim)  {  if(isMinim)  {  return  false;  }  [BUGGY]      final  double  mid  =  getStartValue();  final  double  hi  =  getMax();  final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	117	117	1	replace	if(!isMinim)  {  if(isMinim)  {  return  false;  }	  if(isMinim)    {    if(isMinim)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
15	[BUG]  [BUGGY]  final  double  max  =  getmax();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;      [BUGGY]  final  double  max  =  getmax();  [BUGGY]      final  double  lo  =  getMin();  final  double  mid  =  getStartValue();  final  double  hi  =  getMax();  final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	117	117	1	replace	final  double  max  =  getmax();	  final    double    max    =    getMax()    -    1;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
16	[BUG]  [BUGGY]  safeThan  <  =  false)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;      [BUGGY]  safeThan  <  =  false)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  double  mid  =  getStartValue();  final  double  hi  =  getMax();  final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	117	117	1	replace	safeThan  <  =  false)  {  throw  new  IllegalArgumentException( " ");  }	  if(isMinim)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
17	[BUG]  [BUGGY]  safeThan  <  =  false)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;      [BUGGY]  safeThan  <  =  false)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  double  mid  =  getStartValue();  final  double  hi  =  getMax();  final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	117	117	1	replace	safeThan  <  =  false)  {  throw  new  IllegalStateException( " ");  }	  if(isMinim)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
18	[BUG]  [BUGGY]  if(isMinim)  {  if(!isMinim)return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;      [BUGGY]  if(isMinim)  {  if(!isMinim)return  false;  }  [BUGGY]      final  double  mid  =  getStartValue();  final  double  hi  =  getMax();  final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	117	117	1	replace	if(isMinim)  {  if(!isMinim)return  false;  }	  if(isMinim)    {    if(!isMinim)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
