bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  }  else  {  if  (x  <  m)  {    [BUGGY]  d  =  a  -  m;  [BUGGY]    e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.7071067811865475	208	208	1	add	d  =  a  -  m;	      d    =    a    -    x;    	compilable	  [FE]  AssertionError  	2	2	replace
2	[BUG]  [BUGGY]  d  =  a  -  m;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  }  else  {  if  (x  <  m)  {    [BUGGY]  d  =  a  -  m;  [BUGGY]    e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.7071067811865475	208	208	1	replace	d  =  a  -  m;	      d    =    a    -    x;    	compilable	  [FE]  AssertionError  	2	2	replace
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  }  else  {  if  (x  <  m)  {    [BUGGY]  e  =  a  -  m;  [BUGGY]    }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.7071067811865475	208	208	1	add	e  =  a  -  m;	  e    =    b    -    m;    	compilable	  [FE]  AssertionError  	8	2	replace
4	[BUG]  [BUGGY]  e  =  a  -  m;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  }  else  {  if  (x  <  m)  {    [BUGGY]  e  =  a  -  m;  [BUGGY]    }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.7071067811865475	208	208	1	replace	e  =  a  -  m;	  e    =    b    -    m;    	compilable	  [FE]  AssertionError  	8	2	replace
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  }  else  {  if  (x  <  m)  {    [BUGGY]      e  =  b  -  x;  e  =  b  -  x;  [BUGGY]    e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.7071067811865475	208	208	1	add	        e    =    b    -    x;    e  =  b  -  x;	  	compilable	  [FE]  AssertionError  	5	1	add
6	[BUG]  [BUGGY]      e  =  b  -  x;  e  =  b  -  x;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  }  else  {  if  (x  <  m)  {    [BUGGY]      e  =  b  -  x;  e  =  b  -  x;  [BUGGY]    e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.7071067811865475	208	208	1	replace	        e    =    b    -    x;    e  =  b  -  x;	  	compilable	  [FE]  AssertionError  	5	1	add
7	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  }  else  {  if  (x  <  m)  {    [BUGGY]      e  =  b  -  x;  e  =  a  -  x;  [BUGGY]    e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.7071067811865475	208	208	1	add	        e    =    b    -    x;    e  =  a  -  x;	  	compilable	  [FE]  AssertionError  	5	1	add
8	[BUG]  [BUGGY]      e  =  b  -  x;  e  =  a  -  x;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  }  else  {  if  (x  <  m)  {    [BUGGY]      e  =  b  -  x;  e  =  a  -  x;  [BUGGY]    e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.7071067811865475	208	208	1	replace	        e    =    b    -    x;    e  =  a  -  x;	  	compilable	  [FE]  AssertionError  	5	1	add
9	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  }  else  {  if  (x  <  m)  {    [BUGGY]      e  =  a  -  x;  e  =  a  -  x;  [BUGGY]    e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.7071067811865475	208	208	1	add	        e    =    a    -    x;    e  =  a  -  x;	  	compilable	  [FE]  AssertionError  	3	1	add
10	[BUG]  [BUGGY]      e  =  a  -  x;  e  =  a  -  x;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  }  else  {  if  (x  <  m)  {    [BUGGY]      e  =  a  -  x;  e  =  a  -  x;  [BUGGY]    e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.7071067811865475	208	208	1	replace	        e    =    a    -    x;    e  =  a  -  x;	  	compilable	  [FE]  AssertionError  	3	1	add
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  }  else  {  if  (x  <  m)  {    [BUGGY]      e  =  a  -  x;  e  =  b  -  x;  [BUGGY]    e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.7071067811865475	208	208	1	add	        e    =    a    -    x;    e  =  b  -  x;	  	compilable	  [FE]  AssertionError  	3	1	add
12	[BUG]  [BUGGY]      e  =  a  -  x;  e  =  b  -  x;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  }  else  {  if  (x  <  m)  {    [BUGGY]      e  =  a  -  x;  e  =  b  -  x;  [BUGGY]    e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.7071067811865475	208	208	1	replace	        e    =    a    -    x;    e  =  b  -  x;	  	compilable	  [FE]  AssertionError  	3	1	add
13	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  }  else  {  if  (x  <  m)  {    [BUGGY]  e  =  b  -  m;  e  =  b  -  m;  [BUGGY]    }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.7071067811865475	208	208	1	add	e    =    b    -    m;    e  =  b  -  m;	  	compilable	  [FE]  AssertionError  	7	1	add
14	[BUG]  [BUGGY]  e  =  b  -  m;  e  =  b  -  m;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  }  else  {  if  (x  <  m)  {    [BUGGY]  e  =  b  -  m;  e  =  b  -  m;  [BUGGY]    }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.7071067811865475	208	208	1	replace	e    =    b    -    m;    e  =  b  -  m;	  	compilable	  [FE]  AssertionError  	7	1	add
15	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  }  else  {  if  (x  <  m)  {    [BUGGY]  e  =  b  -  m;  e  =  a  -  m;  [BUGGY]    }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.7071067811865475	208	208	1	add	e    =    b    -    m;    e  =  a  -  m;	  	compilable	  [FE]  AssertionError  	7	4	add
16	[BUG]  [BUGGY]  e  =  b  -  m;  e  =  a  -  m;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  }  else  {  if  (x  <  m)  {    [BUGGY]  e  =  b  -  m;  e  =  a  -  m;  [BUGGY]    }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.7071067811865475	208	208	1	replace	e    =    b    -    m;    e  =  a  -  m;	  	compilable	  [FE]  AssertionError  	7	4	add
17	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]    AssertionError    [CONTEXT]    if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  }  else  {  if  (x  <  m)  {    [BUGGY]      d  =  a  -  x;  d  =  a  -  x;  [BUGGY]    e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.7071067811865475	208	208	1	add	        d    =    a    -    x;    d  =  a  -  x;	  	compilable	  [FE]  TooManyEvaluationsException  	1	10	add
18	[BUG]  [BUGGY]      d  =  a  -  x;  d  =  a  -  x;  [FE]  TooManyEvaluationsException  [FE]    AssertionError    [CONTEXT]    if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  }  else  {  if  (x  <  m)  {    [BUGGY]      d  =  a  -  x;  d  =  a  -  x;  [BUGGY]    e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.7071067811865475	208	208	1	replace	        d    =    a    -    x;    d  =  a  -  x;	  	compilable	  [FE]  TooManyEvaluationsException  	1	10	add
19	[BUG]  [BUGGY]      d  =  a  -  x;  int  d  =  a  -  x;  [CE]  variable  d  is  already  defined  in  method  doOptimize()  [FE]      AssertionError    [CONTEXT]    if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  }  else  {  if  (x  <  m)  {    [BUGGY]      d  =  a  -  x;  int  d  =  a  -  x;  [BUGGY]    e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.7071067811865475	208	208	1	replace	        d    =    a    -    x;    int  d  =  a  -  x;	  	non-compiled	[CE]  variable  d  is  already  defined  in  method  doOptimize()	1	None	add
20	[BUG]  [BUGGY]      e  =  b  -  x;  int  e  =  b  -  x;  [CE]  variable  e  is  already  defined  in  method  doOptimize()  [FE]    AssertionError    [CONTEXT]    if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  }  else  {  if  (x  <  m)  {    [BUGGY]      e  =  b  -  x;  int  e  =  b  -  x;  [BUGGY]    e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.7071067811865475	208	208	1	replace	        e    =    b    -    x;    int  e  =  b  -  x;	  	non-compiled	[CE]  variable  e  is  already  defined  in  method  doOptimize()	5	None	add
21	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  }  else  {  if  (x  <  m)  {    [BUGGY]  d  =  m  -  x;  [BUGGY]    e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.7071067811865475	208	208	1	add	d  =  m  -  x;	      d    =    a    -    x;    	compilable	  [FE]  AssertionError  	2	8	replace
22	[BUG]  [BUGGY]  d  =  m  -  x;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  }  else  {  if  (x  <  m)  {    [BUGGY]  d  =  m  -  x;  [BUGGY]    e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.7071067811865475	208	208	1	replace	d  =  m  -  x;	      d    =    a    -    x;    	compilable	  [FE]  AssertionError  	2	8	replace
23	[BUG]  [BUGGY]      d  =  a  -  x;  dev  =  a  -  x;  [CE]  cannot  find  symbol  dev  [FE]    AssertionError    [CONTEXT]    if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  }  else  {  if  (x  <  m)  {    [BUGGY]      d  =  a  -  x;  dev  =  a  -  x;  [BUGGY]    e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.7071067811865475	208	208	1	replace	        d    =    a    -    x;    dev  =  a  -  x;	  	non-compiled	[CE]  cannot  find  symbol  dev	1	None	add
24	[BUG]  [BUGGY]      e  =  a  -  x;  int  e  =  a  -  x;  [CE]  variable  e  is  already  defined  in  method  doOptimize()  [FE]    AssertionError    [CONTEXT]    if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  }  else  {  if  (x  <  m)  {    [BUGGY]      e  =  a  -  x;  int  e  =  a  -  x;  [BUGGY]    e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.7071067811865475	208	208	1	replace	        e    =    a    -    x;    int  e  =  a  -  x;	  	non-compiled	[CE]  variable  e  is  already  defined  in  method  doOptimize()	3	None	add
25	[BUG]  [BUGGY]  d  =  b  -  x;  [CE]  cannot  find  symbol  dev  [FE]    AssertionError    [CONTEXT]    if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  }  else  {  if  (x  <  m)  {    [BUGGY]  d  =  b  -  x;  [BUGGY]    e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.7071067811865475	208	208	1	replace	d  =  b  -  x;	      d    =    a    -    x;    	non-compiled	[CE]  cannot  find  symbol  dev	2	None	replace
26	[BUG]  [BUGGY]      d  =  a  -  x;  d  =  b  -  x;  [CE]  variable  e  is  already  defined  in  method  doOptimize()  [FE]    AssertionError    [CONTEXT]    if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  }  else  {  if  (x  <  m)  {    [BUGGY]      d  =  a  -  x;  d  =  b  -  x;  [BUGGY]    e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.7071067811865475	208	208	1	replace	        d    =    a    -    x;    d  =  b  -  x;	  	non-compiled	[CE]  variable  e  is  already  defined  in  method  doOptimize()	1	None	add
