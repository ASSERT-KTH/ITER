bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    a  =  b.getValue();  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  UnivariatePointValuePair  b,  boolean  isMinim)  {  if  (a  ==  null)  {  return  b;  }  if  (b  ==  null)  {  return  a;  }  if  (isMinim)  {  [BUGGY]    a  =  b.getValue();  [BUGGY]  return  a.getValue()  <=  b.getValue()  ?  a  :  b;  }  else  {  return  a.getValue()  >=  b.getValue()  ?  a  :  b;  }  }  [CLASS]  BrentOptimizer  [METHOD]  best  [RETURN_TYPE]  UnivariatePointValuePair  UnivariatePointValuePair  a  UnivariatePointValuePair  b  boolean  isMinim  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  UnivariatePointValuePair  a  b  boolean  isMinim  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	305	305	1	replace	    a  =  b.getValue();		non-compiled	[CE]  illegal  start  of  type	32	None	add
2	[BUG]  [BUGGY]    b  =  b.getValue();  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  UnivariatePointValuePair  b,  boolean  isMinim)  {  if  (a  ==  null)  {  return  b;  }  if  (b  ==  null)  {  return  a;  }  if  (isMinim)  {  [BUGGY]    b  =  b.getValue();  [BUGGY]  return  a.getValue()  <=  b.getValue()  ?  a  :  b;  }  else  {  return  a.getValue()  >=  b.getValue()  ?  a  :  b;  }  }  [CLASS]  BrentOptimizer  [METHOD]  best  [RETURN_TYPE]  UnivariatePointValuePair  UnivariatePointValuePair  a  UnivariatePointValuePair  b  boolean  isMinim  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  UnivariatePointValuePair  a  b  boolean  isMinim  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	305	305	1	replace	    b  =  b.getValue();		non-compiled	[CE]  illegal  start  of  type	32	None	add
3	[BUG]  [BUGGY]    b  =  a.getValue();  [CE]  illegal  start  of  type  [FE]        AssertionError  [CONTEXT]  UnivariatePointValuePair  b,  boolean  isMinim)  {  if  (a  ==  null)  {  return  b;  }  if  (b  ==  null)  {  return  a;  }  if  (isMinim)  {  [BUGGY]    b  =  a.getValue();  [BUGGY]  return  a.getValue()  <=  b.getValue()  ?  a  :  b;  }  else  {  return  a.getValue()  >=  b.getValue()  ?  a  :  b;  }  }  [CLASS]  BrentOptimizer  [METHOD]  best  [RETURN_TYPE]  UnivariatePointValuePair  UnivariatePointValuePair  a  UnivariatePointValuePair  b  boolean  isMinim  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  UnivariatePointValuePair  a  b  boolean  isMinim  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	305	305	1	replace	    b  =  a.getValue();		non-compiled	[CE]  illegal  start  of  type	32	None	add
4	[BUG]  [BUGGY]  return  a.getValue()  >=  b.getValue()?  a  :  b;  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  UnivariatePointValuePair  b,  boolean  isMinim)  {  if  (a  ==  null)  {  return  b;  }  if  (b  ==  null)  {  return  a;  }  if  (isMinim)  {  [BUGGY]  return  a.getValue()  >=  b.getValue()?  a  :  b;  [BUGGY]  }  else  {  return  a.getValue()  >=  b.getValue()  ?  a  :  b;  }  }  [CLASS]  BrentOptimizer  [METHOD]  best  [RETURN_TYPE]  UnivariatePointValuePair  UnivariatePointValuePair  a  UnivariatePointValuePair  b  boolean  isMinim  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  UnivariatePointValuePair  a  b  boolean  isMinim  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	305	305	1	replace	return  a.getValue()  >=  b.getValue()?  a  :  b;	return  a.getValue()  <=  b.getValue()  ?  a  :  b;  	non-compiled	[CE]  illegal  start  of  type	31	None	replace
5	[BUG]  [BUGGY]  return  a.getValue()  <  b.getValue()?  a  :  b;  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  UnivariatePointValuePair  b,  boolean  isMinim)  {  if  (a  ==  null)  {  return  b;  }  if  (b  ==  null)  {  return  a;  }  if  (isMinim)  {  [BUGGY]  return  a.getValue()  <  b.getValue()?  a  :  b;  [BUGGY]  }  else  {  return  a.getValue()  >=  b.getValue()  ?  a  :  b;  }  }  [CLASS]  BrentOptimizer  [METHOD]  best  [RETURN_TYPE]  UnivariatePointValuePair  UnivariatePointValuePair  a  UnivariatePointValuePair  b  boolean  isMinim  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  UnivariatePointValuePair  a  b  boolean  isMinim  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	305	305	1	replace	return  a.getValue()  <  b.getValue()?  a  :  b;	return  a.getValue()  <=  b.getValue()  ?  a  :  b;  	non-compiled	[CE]  illegal  start  of  type	31	None	replace
6	[BUG]  [BUGGY]    UnivariatePointValuePair  a  =(UnivariatePointValuePair)b.clone();  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  UnivariatePointValuePair  b,  boolean  isMinim)  {  if  (a  ==  null)  {  return  b;  }  if  (b  ==  null)  {  return  a;  }  if  (isMinim)  {  [BUGGY]    UnivariatePointValuePair  a  =(UnivariatePointValuePair)b.clone();  [BUGGY]  return  a.getValue()  <=  b.getValue()  ?  a  :  b;  }  else  {  return  a.getValue()  >=  b.getValue()  ?  a  :  b;  }  }  [CLASS]  BrentOptimizer  [METHOD]  best  [RETURN_TYPE]  UnivariatePointValuePair  UnivariatePointValuePair  a  UnivariatePointValuePair  b  boolean  isMinim  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  UnivariatePointValuePair  a  b  boolean  isMinim  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	305	305	1	replace	    UnivariatePointValuePair  a  =(UnivariatePointValuePair)b.clone();		non-compiled	[CE]  illegal  start  of  type	32	None	add
7	[BUG]  [BUGGY]    UnivariatePointValuePair  a  =(UnivariatePointValuePair)b;  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  UnivariatePointValuePair  b,  boolean  isMinim)  {  if  (a  ==  null)  {  return  b;  }  if  (b  ==  null)  {  return  a;  }  if  (isMinim)  {  [BUGGY]    UnivariatePointValuePair  a  =(UnivariatePointValuePair)b;  [BUGGY]  return  a.getValue()  <=  b.getValue()  ?  a  :  b;  }  else  {  return  a.getValue()  >=  b.getValue()  ?  a  :  b;  }  }  [CLASS]  BrentOptimizer  [METHOD]  best  [RETURN_TYPE]  UnivariatePointValuePair  UnivariatePointValuePair  a  UnivariatePointValuePair  b  boolean  isMinim  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  UnivariatePointValuePair  a  b  boolean  isMinim  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	305	305	1	replace	    UnivariatePointValuePair  a  =(UnivariatePointValuePair)b;		non-compiled	[CE]  illegal  start  of  type	32	None	add
8	[BUG]  [BUGGY]    a  =  b.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  UnivariatePointValuePair  b,  boolean  isMinim)  {  if  (a  ==  null)  {  return  b;  }  if  (b  ==  null)  {  return  a;  }  if  (isMinim)  {  [BUGGY]    a  =  b.getValue()  +  1;  [BUGGY]  return  a.getValue()  <=  b.getValue()  ?  a  :  b;  }  else  {  return  a.getValue()  >=  b.getValue()  ?  a  :  b;  }  }  [CLASS]  BrentOptimizer  [METHOD]  best  [RETURN_TYPE]  UnivariatePointValuePair  UnivariatePointValuePair  a  UnivariatePointValuePair  b  boolean  isMinim  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  UnivariatePointValuePair  a  b  boolean  isMinim  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	305	305	1	replace	    a  =  b.getValue()  +  1;		non-compiled	[CE]  illegal  start  of  type	32	None	add
