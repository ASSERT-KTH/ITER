bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  tol1)  <  tol1  -  0.5  *  (a  -  tol2);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  tol1)  <  tol1  -  0.5  *  (a  -  tol2);  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  boolean  stop  =  FastMath.abs(m  -  tol1)  <  tol1  -  0.5  *  (a  -  tol2);	  final    boolean    stop    =    FastMath.abs(m    -    tol1)    <    =    tol1    -    0.5    *    (a    -    tol2);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
2	[BUG]  [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  tol1)  <  tol1  -  0.5  *  (a  +  tol2);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  tol1)  <  tol1  -  0.5  *  (a  +  tol2);  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  boolean  stop  =  FastMath.abs(m  -  tol1)  <  tol1  -  0.5  *  (a  +  tol2);	  final    boolean    stop    =    FastMath.abs(m    -    tol1)    <    =    tol1    -    0.5    *    (a    -    tol2);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
3	[BUG]  [BUGGY]  final  double  m  =  relativeThreshold  *  FastMath.abs(b)+  tol2;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  double  m  =  relativeThreshold  *  FastMath.abs(b)+  tol2;  [BUGGY]      final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  double  m  =  relativeThreshold  *  FastMath.abs(b)+  tol2;	  final    double    m    =    relativeThreshold    *    FastMath.abs(b)+    absoluteThreshold;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
4	[BUG]  [BUGGY]  final  double  b  =  relativeThreshold  *  FastMath.abs(a)/  tol2;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  double  b  =  relativeThreshold  *  FastMath.abs(a)/  tol2;  [BUGGY]      final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  double  b  =  relativeThreshold  *  FastMath.abs(a)/  tol2;	  final    double    b    =    relativeThreshold    *    FastMath.abs(a)/    absoluteThreshold;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
5	[BUG]  [BUGGY]  final  double  b  =  relativeThreshold  *  FastMath.abs(a)/  tol1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  double  b  =  relativeThreshold  *  FastMath.abs(a)/  tol1;  [BUGGY]      final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  double  b  =  relativeThreshold  *  FastMath.abs(a)/  tol1;	  final    double    b    =    relativeThreshold    *    FastMath.abs(a)/    absoluteThreshold;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
6	[BUG]  [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  tol1)  <  =  GOLDEN_SECTION  -  0.5  *  (a  -  tol2);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  tol1)  <  =  GOLDEN_SECTION  -  0.5  *  (a  -  tol2);  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  boolean  stop  =  FastMath.abs(m  -  tol1)  <  =  GOLDEN_SECTION  -  0.5  *  (a  -  tol2);	  final    boolean    stop    =    FastMath.abs(m    -    tol1)    <    =    GOLDEN_SECTION    -    0.5    *    (b    -    a);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
7	[BUG]  [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  tol1)  <  =  GOLDEN_SECTION  *  (b  -  a);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  tol1)  <  =  GOLDEN_SECTION  *  (b  -  a);  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  boolean  stop  =  FastMath.abs(m  -  tol1)  <  =  GOLDEN_SECTION  *  (b  -  a);	  final    boolean    stop    =    FastMath.abs(m    -    tol1)    <    =    GOLDEN_SECTION    -    0.5    *    (b    -    a);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
8	[BUG]  [BUGGY]  int  w  =  relativeThreshold  *  FastMath.abs(x);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  int  w  =  relativeThreshold  *  FastMath.abs(x);  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	int  w  =  relativeThreshold  *  FastMath.abs(x);	  int    w    =    relativeThreshold    *    FastMath.abs(b);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
9	[BUG]  [BUGGY]  if(isMinim  &&  isMinim)  {  for(int  iter  =  0;  iter  <  tol1;  iter++)  {  tol2  +=  relativeThreshold  *  FastMath.abs(iter);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  if(isMinim  &&  isMinim)  {  for(int  iter  =  0;  iter  <  tol1;  iter++)  {  tol2  +=  relativeThreshold  *  FastMath.abs(iter);  }  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	if(isMinim  &&  isMinim)  {  for(int  iter  =  0;  iter  <  tol1;  iter++)  {  tol2  +=  relativeThreshold  *  FastMath.abs(iter);  }	  if(isMinim    &&    isMinim)    {    for(int    iter    =    0;    iter    <    iter;    iter++)    {    tol2    +=    relativeThreshold    *    FastMath.abs(iter);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
10	[BUG]  [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  tol2)  <  =  tol2  -  0.5  *  (a  -  tol1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  tol2)  <  =  tol2  -  0.5  *  (a  -  tol1);  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  boolean  stop  =  FastMath.abs(m  -  tol2)  <  =  tol2  -  0.5  *  (a  -  tol1);	  final    boolean    stop    =    FastMath.abs(b    -    tol2)    <    =    tol2    -    0.5    *    (m    -    a);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
11	[BUG]  [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  m)  <  =  tol1  -  0.5  *  (a  -  m);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  m)  <  =  tol1  -  0.5  *  (a  -  m);  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  boolean  stop  =  FastMath.abs(m  -  m)  <  =  tol1  -  0.5  *  (a  -  m);	  final    boolean    stop    =    FastMath.abs(m    -    m)    <    =    tol2    -    0.5    *    (a    -    m);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
12	[BUG]  [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  m)  <  tol1  -  0.5  *  (a  -  m);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  m)  <  tol1  -  0.5  *  (a  -  m);  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  boolean  stop  =  FastMath.abs(m  -  m)  <  tol1  -  0.5  *  (a  -  m);	  final    boolean    stop    =    FastMath.abs(m    -    m)    <    =    tol2    -    0.5    *    (a    -    m);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
13	[BUG]  [BUGGY]  final  double  a  =  relativeThreshold  *  FastMath.abs(m)/  tol2;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  double  a  =  relativeThreshold  *  FastMath.abs(m)/  tol2;  [BUGGY]      final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  double  a  =  relativeThreshold  *  FastMath.abs(m)/  tol2;	  final    double    a    =    relativeThreshold    *    FastMath.abs(m)/    absoluteThreshold;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
14	[BUG]  [BUGGY]  final  double  b  =  relativeThreshold  *  FastMath.abs(a)+  tol2;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  double  b  =  relativeThreshold  *  FastMath.abs(a)+  tol2;  [BUGGY]      final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  double  b  =  relativeThreshold  *  FastMath.abs(a)+  tol2;	  final    double    b    =    relativeThreshold    *    FastMath.abs(a)+    absoluteThreshold;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
15	[BUG]  [BUGGY]  final  double  b  =  relativeThreshold  *  FastMath.abs(a)+  tol1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  double  b  =  relativeThreshold  *  FastMath.abs(a)+  tol1;  [BUGGY]      final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  double  b  =  relativeThreshold  *  FastMath.abs(a)+  tol1;	  final    double    b    =    relativeThreshold    *    FastMath.abs(a)+    absoluteThreshold;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
16	[BUG]  [BUGGY]  int  w  =  relativeThreshold  *  FastMath.abs(tol2);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  int  w  =  relativeThreshold  *  FastMath.abs(tol2);  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	int  w  =  relativeThreshold  *  FastMath.abs(tol2);	  int    w    =    relativeThreshold    *    FastMath.abs(m);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
17	[BUG]  [BUGGY]  if(isMinim  &&  isMinim)  {  for(int  iter  =  0;  iter  <  tol1;  iter++)  {  tol2  +=  relativeThreshold  *  FastMath.abs(m);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  if(isMinim  &&  isMinim)  {  for(int  iter  =  0;  iter  <  tol1;  iter++)  {  tol2  +=  relativeThreshold  *  FastMath.abs(m);  }  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	if(isMinim  &&  isMinim)  {  for(int  iter  =  0;  iter  <  tol1;  iter++)  {  tol2  +=  relativeThreshold  *  FastMath.abs(m);  }	  if(isMinim    &&    isMinim)    {    for(int    iter    =    0;    iter    <    iter;    iter++)    {    tol2    +=    relativeThreshold    *    FastMath.abs(m);    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
18	[BUG]  [BUGGY]  final  double  b  =  relativeThreshold  *  FastMath.abs(a)-  tol2;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  double  b  =  relativeThreshold  *  FastMath.abs(a)-  tol2;  [BUGGY]      final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  double  b  =  relativeThreshold  *  FastMath.abs(a)-  tol2;	  final    double    b    =    relativeThreshold    *    FastMath.abs(a)-    absoluteThreshold;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
19	[BUG]  [BUGGY]  final  double  a  =  relativeThreshold  *  FastMath.abs(b)/  tol2;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  double  a  =  relativeThreshold  *  FastMath.abs(b)/  tol2;  [BUGGY]      final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  double  a  =  relativeThreshold  *  FastMath.abs(b)/  tol2;	  final    double    a    =    relativeThreshold    *    FastMath.abs(x)/    tol2;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
20	[BUG]  [BUGGY]  final  double  b  =  relativeThreshold  *  FastMath.abs(m)/  tol1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  double  b  =  relativeThreshold  *  FastMath.abs(m)/  tol1;  [BUGGY]      final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  double  b  =  relativeThreshold  *  FastMath.abs(m)/  tol1;	  final    double    b    =    relativeThreshold    *    FastMath.abs(x)/    tol1;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
21	[BUG]  [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  tol1)  <  =  tol2  -  0.5  *  (tol1  -  a);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  tol1)  <  =  tol2  -  0.5  *  (tol1  -  a);  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  boolean  stop  =  FastMath.abs(m  -  tol1)  <  =  tol2  -  0.5  *  (tol1  -  a);	  final    boolean    stop    =    FastMath.abs(m    -    b)    <    =    tol2    -    0.5    *    (tol1    -    a);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
22	[BUG]  [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  tol2)  <  =  tol1  -  0.5  *  (tol2  -  a);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  tol2)  <  =  tol1  -  0.5  *  (tol2  -  a);  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  boolean  stop  =  FastMath.abs(m  -  tol2)  <  =  tol1  -  0.5  *  (tol2  -  a);	  final    boolean    stop    =    FastMath.abs(m    -    b)    <    =    tol2    -    0.5    *    (tol1    -    a);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
23	[BUG]  [BUGGY]  final  double  b  =  relativeThreshold  *  FastMath.abs(m)+  tol1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  double  b  =  relativeThreshold  *  FastMath.abs(m)+  tol1;  [BUGGY]      final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  double  b  =  relativeThreshold  *  FastMath.abs(m)+  tol1;	  final    double    b    =    relativeThreshold    *    FastMath.abs(x)+    tol1;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
24	[BUG]  [BUGGY]  final  double  a  =  relativeThreshold  *  FastMath.abs(b)+  tol2;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  double  a  =  relativeThreshold  *  FastMath.abs(b)+  tol2;  [BUGGY]      final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  double  a  =  relativeThreshold  *  FastMath.abs(b)+  tol2;	  final    double    a    =    relativeThreshold    *    FastMath.abs(b)+    absoluteThreshold;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
25	[BUG]  [BUGGY]  final  double  a  =  relativeThreshold  *  FastMath.abs(b)+  tol1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  double  a  =  relativeThreshold  *  FastMath.abs(b)+  tol1;  [BUGGY]      final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  double  a  =  relativeThreshold  *  FastMath.abs(b)+  tol1;	  final    double    a    =    relativeThreshold    *    FastMath.abs(b)+    absoluteThreshold;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
26	[BUG]  [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  tol2)  <  =  tol1  -  0.5  *  (a  -  m);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  tol2)  <  =  tol1  -  0.5  *  (a  -  m);  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  boolean  stop  =  FastMath.abs(m  -  tol2)  <  =  tol1  -  0.5  *  (a  -  m);	  final    boolean    stop    =    FastMath.abs(m    -    tol2)    <    =    tol2    -    0.5    *    (a    -    m);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
27	[BUG]  [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  b)  <  =  tol1  -  0.5  *  (a  -  m);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  b)  <  =  tol1  -  0.5  *  (a  -  m);  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  boolean  stop  =  FastMath.abs(m  -  b)  <  =  tol1  -  0.5  *  (a  -  m);	  final    boolean    stop    =    FastMath.abs(b    -    m)    <    =    tol1    -    0.5    *    (a    -    m);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
28	[BUG]  [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  tol1)  <  =  tol1  -  0.5  *  (a  -  m);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  tol1)  <  =  tol1  -  0.5  *  (a  -  m);  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  boolean  stop  =  FastMath.abs(m  -  tol1)  <  =  tol1  -  0.5  *  (a  -  m);	  final    boolean    stop    =    FastMath.abs(b    -    m)    <    =    tol1    -    0.5    *    (a    -    m);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
29	[BUG]  [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  tol1)  <  =  tol1  -  0.5  *  (a  -  b);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  tol1)  <  =  tol1  -  0.5  *  (a  -  b);  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  boolean  stop  =  FastMath.abs(m  -  tol1)  <  =  tol1  -  0.5  *  (a  -  b);	  final    boolean    stop    =    FastMath.abs(m    -    tol1)    <    =    tol2    -    0.5    *    (a    -    m);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
30	[BUG]  [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  tol1)  <  =  tol2  -  0.5  *  (a  -  b);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  tol1)  <  =  tol2  -  0.5  *  (a  -  b);  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  boolean  stop  =  FastMath.abs(m  -  tol1)  <  =  tol2  -  0.5  *  (a  -  b);	  final    boolean    stop    =    FastMath.abs(m    -    tol1)    <    =    tol2    -    0.5    *    (a    -    m);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
31	[BUG]  [BUGGY]  final  double  b  =  tol1  *  FastMath.abs(x)/  relativeThreshold;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  double  b  =  tol1  *  FastMath.abs(x)/  relativeThreshold;  [BUGGY]      final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  double  b  =  tol1  *  FastMath.abs(x)/  relativeThreshold;	  final    double    b    =    absoluteThreshold    *    FastMath.abs(x)/    relativeThreshold;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
32	[BUG]  [BUGGY]  final  boolean  stop  =  FastMath.abs(a  -  m)  <  =  tol1  -  0.5  *  (b  -  a);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  boolean  stop  =  FastMath.abs(a  -  m)  <  =  tol1  -  0.5  *  (b  -  a);  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  boolean  stop  =  FastMath.abs(a  -  m)  <  =  tol1  -  0.5  *  (b  -  a);	  final    boolean    stop    =    FastMath.abs(a    -    m)    <    =    tol2    -    0.5    *    (b    -    a);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
33	[BUG]  [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  a)  <  =  tol2  -  0.5  *  (a  -  m);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  a)  <  =  tol2  -  0.5  *  (a  -  m);  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  boolean  stop  =  FastMath.abs(m  -  a)  <  =  tol2  -  0.5  *  (a  -  m);	  final    boolean    stop    =    FastMath.abs(a    -    m)    <    =    tol2    -    0.5    *    (b    -    a);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
34	[BUG]  [BUGGY]  final  double  a  =  relativeThreshold  *  FastMath.abs(x)+  tol1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  double  a  =  relativeThreshold  *  FastMath.abs(x)+  tol1;  [BUGGY]      final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  double  a  =  relativeThreshold  *  FastMath.abs(x)+  tol1;	  final    double    a    =    relativeThreshold    *    FastMath.abs(m)+    tol1;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
35	[BUG]  [BUGGY]  final  boolean  stop  =  FastMath.abs(b  -  tol1)  <  =  tol1  -  0.5  *  (a  -  tol2);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  boolean  stop  =  FastMath.abs(b  -  tol1)  <  =  tol1  -  0.5  *  (a  -  tol2);  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  boolean  stop  =  FastMath.abs(b  -  tol1)  <  =  tol1  -  0.5  *  (a  -  tol2);	  final    boolean    stop    =    FastMath.abs(b    -    tol1)    <    =    tol2    -    0.5    *    (a    -    tol1);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
36	[BUG]  [BUGGY]  final  double  b  =  relativeThreshold  *  FastMath.abs(m)+  tol2;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  double  b  =  relativeThreshold  *  FastMath.abs(m)+  tol2;  [BUGGY]      final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  double  b  =  relativeThreshold  *  FastMath.abs(m)+  tol2;	  final    double    b    =    relativeThreshold    *    FastMath.abs(x)+    tol2;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
37	[BUG]  [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  tol1)  <  =  tol1  -  0.5  *  (b  -  a);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  tol1)  <  =  tol1  -  0.5  *  (b  -  a);  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  boolean  stop  =  FastMath.abs(m  -  tol1)  <  =  tol1  -  0.5  *  (b  -  a);	  final    boolean    stop    =    FastMath.abs(m    -    tol2)    <    =    tol1    -    0.5    *    (b    -    a);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
38	[BUG]  [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  tol1)  <  =  tol1  -  0.5  *  (b  -  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  tol1)  <  =  tol1  -  0.5  *  (b  -  1);  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  boolean  stop  =  FastMath.abs(m  -  tol1)  <  =  tol1  -  0.5  *  (b  -  1);	  final    boolean    stop    =    FastMath.abs(m    -    tol2)    <    =    tol1    -    0.5    *    (b    -    a);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
39	[BUG]  [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  b)  <  tol1  -  0.5  *  (a  -  m);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  b)  <  tol1  -  0.5  *  (a  -  m);  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  boolean  stop  =  FastMath.abs(m  -  b)  <  tol1  -  0.5  *  (a  -  m);	  final    boolean    stop    =    FastMath.abs(m    -    b)    <    =    tol2    -    0.5    *    (a    -    m);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
40	[BUG]  [BUGGY]  final  double  m  =  relativeThreshold  *  FastMath.abs(x)/  tol2;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  double  m  =  relativeThreshold  *  FastMath.abs(x)/  tol2;  [BUGGY]      final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  double  m  =  relativeThreshold  *  FastMath.abs(x)/  tol2;	  final    double    m    =    relativeThreshold    *    FastMath.abs(x)/    absoluteThreshold;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
41	[BUG]  [BUGGY]  final  double  m  =  relativeThreshold  *  FastMath.abs(x)/  tol1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  double  m  =  relativeThreshold  *  FastMath.abs(x)/  tol1;  [BUGGY]      final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  double  m  =  relativeThreshold  *  FastMath.abs(x)/  tol1;	  final    double    m    =    relativeThreshold    *    FastMath.abs(x)/    absoluteThreshold;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
42	[BUG]  [BUGGY]  int  w  =  relativeThreshold  *  FastMath.abs(tol1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  int  w  =  relativeThreshold  *  FastMath.abs(tol1);  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	int  w  =  relativeThreshold  *  FastMath.abs(tol1);	  int    w    =    relativeThreshold    *    FastMath.abs(m);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
43	[BUG]  [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  tol2)  <  =  tol2  -  0.5  *  (m  -  a);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  tol2)  <  =  tol2  -  0.5  *  (m  -  a);  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  boolean  stop  =  FastMath.abs(m  -  tol2)  <  =  tol2  -  0.5  *  (m  -  a);	  final    boolean    stop    =    FastMath.abs(b    -    tol2)    <    =    tol2    -    0.5    *    (m    -    a);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
44	[BUG]  [BUGGY]  final  boolean  stop  =  FastMath.abs(b  -  tol1)  <  =  tol2  -  0.5  *  (tol1  -  a);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  boolean  stop  =  FastMath.abs(b  -  tol1)  <  =  tol2  -  0.5  *  (tol1  -  a);  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  boolean  stop  =  FastMath.abs(b  -  tol1)  <  =  tol2  -  0.5  *  (tol1  -  a);	  final    boolean    stop    =    FastMath.abs(tol1    -    tol2)    <    =    tol2    -    0.5    *    (b    -    a);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
45	[BUG]  [BUGGY]  (isMinim?  tol1  :  tol2))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  (isMinim?  tol1  :  tol2))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	(isMinim?  tol1  :  tol2))  {  throw  new  IllegalArgumentException( " ");  }	  if(isMinim?    tol1    :    tol2)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
46	[BUG]  [BUGGY]  if(isMinim  &&  isMinim)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  tol1  +=  relativeThreshold  *  FastMath.abs(m);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  if(isMinim  &&  isMinim)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  tol1  +=  relativeThreshold  *  FastMath.abs(m);  }  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	if(isMinim  &&  isMinim)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  tol1  +=  relativeThreshold  *  FastMath.abs(m);  }	  if(isMinim    &&    isMinim)    {    for(int    iter    =    0;    iter    <    iter;    iter++)    {    tol2    +=    relativeThreshold    *    FastMath.abs(m);    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
47	[BUG]  [BUGGY]  final  double  a  =  relativeThreshold  *  FastMath.abs(b)/  tol1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  double  a  =  relativeThreshold  *  FastMath.abs(b)/  tol1;  [BUGGY]      final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  double  a  =  relativeThreshold  *  FastMath.abs(b)/  tol1;	  final    double    a    =    relativeThreshold    *    FastMath.abs(b)/    absoluteThreshold;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
48	[BUG]  [BUGGY]  final  double  b  =  relativeThreshold  *  FastMath.abs(tol2)/  tol1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  double  b  =  relativeThreshold  *  FastMath.abs(tol2)/  tol1;  [BUGGY]      final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  double  b  =  relativeThreshold  *  FastMath.abs(tol2)/  tol1;	  final    double    b    =    relativeThreshold    *    FastMath.abs(x)/    tol1;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
49	[BUG]  [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  tol1)  <  tol2  -  0.5  *  (a  -  tol1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  tol1)  <  tol2  -  0.5  *  (a  -  tol1);  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  boolean  stop  =  FastMath.abs(m  -  tol1)  <  tol2  -  0.5  *  (a  -  tol1);	  final    boolean    stop    =    FastMath.abs(m    -    tol1)    <    =    tol2    -    0.5    *    (a    -    tol1);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
50	[BUG]  [BUGGY]  final  double  m  =  relativeThreshold  *  FastMath.abs(b)+  tol1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  double  m  =  relativeThreshold  *  FastMath.abs(b)+  tol1;  [BUGGY]      final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  double  m  =  relativeThreshold  *  FastMath.abs(b)+  tol1;	  final    double    m    =    relativeThreshold    *    FastMath.abs(b)+    absoluteThreshold;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
51	[BUG]  [BUGGY]  final  double  a  =  relativeThreshold  *  FastMath.abs(b)-  tol1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  double  a  =  relativeThreshold  *  FastMath.abs(b)-  tol1;  [BUGGY]      final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  double  a  =  relativeThreshold  *  FastMath.abs(b)-  tol1;	  final    double    a    =    relativeThreshold    *    FastMath.abs(b)-    absoluteThreshold;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
52	[BUG]  [BUGGY]  if(isMinim  &&  isMinim)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  tol1  +=  relativeThreshold  *  FastMath.abs(iter);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  if(isMinim  &&  isMinim)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  tol1  +=  relativeThreshold  *  FastMath.abs(iter);  }  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	if(isMinim  &&  isMinim)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  tol1  +=  relativeThreshold  *  FastMath.abs(iter);  }	  if(isMinim    &&    isMinim)    {    for(int    iter    =    0;    iter    <    iter;    iter++)    {    tol2    +=    relativeThreshold    *    FastMath.abs(iter);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
53	[BUG]  [BUGGY]  final  double  b  =  relativeThreshold  *  FastMath.abs(tol1)+  tol2;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  double  b  =  relativeThreshold  *  FastMath.abs(tol1)+  tol2;  [BUGGY]      final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  double  b  =  relativeThreshold  *  FastMath.abs(tol1)+  tol2;	  final    double    b    =    relativeThreshold    *    FastMath.abs(x)+    tol2;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
54	[BUG]  [BUGGY]  final  double  m  =  relativeThreshold  *  FastMath.abs(tol1)/  absoluteThreshold;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  double  m  =  relativeThreshold  *  FastMath.abs(tol1)/  absoluteThreshold;  [BUGGY]      final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  double  m  =  relativeThreshold  *  FastMath.abs(tol1)/  absoluteThreshold;	  final    double    m    =    relativeThreshold    *    FastMath.abs(x)/    absoluteThreshold;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
55	[BUG]  [BUGGY]  final  boolean  stop  =  FastMath.abs(b  -  tol1)  <  =  tol1  -  0.5  *  (m  -  a);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  boolean  stop  =  FastMath.abs(b  -  tol1)  <  =  tol1  -  0.5  *  (m  -  a);  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  boolean  stop  =  FastMath.abs(b  -  tol1)  <  =  tol1  -  0.5  *  (m  -  a);	  final    boolean    stop    =    FastMath.abs(m    -    tol2)    <    =    tol1    -    0.5    *    (b    -    a);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
56	[BUG]  [BUGGY]  final  double  a  =  relativeThreshold  *  FastMath.abs(m)/  tol1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  double  a  =  relativeThreshold  *  FastMath.abs(m)/  tol1;  [BUGGY]      final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  double  a  =  relativeThreshold  *  FastMath.abs(m)/  tol1;	  final    double    a    =    relativeThreshold    *    FastMath.abs(m)/    absoluteThreshold;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
57	[BUG]  [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  tol1)  <  =  tol2  -  0.5  *  (m  -  a);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  tol1)  <  =  tol2  -  0.5  *  (m  -  a);  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  boolean  stop  =  FastMath.abs(m  -  tol1)  <  =  tol2  -  0.5  *  (m  -  a);	  final    boolean    stop    =    FastMath.abs(b    -    tol1)    <    =    tol2    -    0.5    *    (m    -    a);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
58	[BUG]  [BUGGY]  final  boolean  stop  =  FastMath.abs(b  -  tol1)  <  =  GOLDEN_SECTION  -  0.5  *  (m  -  a);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  boolean  stop  =  FastMath.abs(b  -  tol1)  <  =  GOLDEN_SECTION  -  0.5  *  (m  -  a);  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  boolean  stop  =  FastMath.abs(b  -  tol1)  <  =  GOLDEN_SECTION  -  0.5  *  (m  -  a);	  final    boolean    stop    =    FastMath.abs(m    -    tol1)    <    =    GOLDEN_SECTION    -    0.5    *    (b    -    a);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
59	[BUG]  [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  tol1)  <  =  tol2  -  0.5  *  (a  +  m);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  tol1)  <  =  tol2  -  0.5  *  (a  +  m);  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  boolean  stop  =  FastMath.abs(m  -  tol1)  <  =  tol2  -  0.5  *  (a  +  m);	  final    boolean    stop    =    FastMath.abs(m    -    tol1)    <    =    tol2    -    0.5    *    (a    -    m);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
60	[BUG]  [BUGGY]  final  double  m  =  relativeThreshold  *  FastMath.abs(tol1)+  tol2;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  double  m  =  relativeThreshold  *  FastMath.abs(tol1)+  tol2;  [BUGGY]      final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  double  m  =  relativeThreshold  *  FastMath.abs(tol1)+  tol2;	  final    double    m    =    relativeThreshold    *    FastMath.abs(x)+    tol2;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
61	[BUG]  [BUGGY]  final  double  b  =  relativeThreshold  *  FastMath.abs(a)-  tol1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  double  b  =  relativeThreshold  *  FastMath.abs(a)-  tol1;  [BUGGY]      final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  double  b  =  relativeThreshold  *  FastMath.abs(a)-  tol1;	  final    double    b    =    relativeThreshold    *    FastMath.abs(a)-    absoluteThreshold;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
62	[BUG]  [BUGGY]  final  double  b  =  absoluteThreshold  *  FastMath.abs(x)/  tol1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  double  b  =  absoluteThreshold  *  FastMath.abs(x)/  tol1;  [BUGGY]      final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  double  b  =  absoluteThreshold  *  FastMath.abs(x)/  tol1;	  final    double    b    =    absoluteThreshold    *    FastMath.abs(x)/    relativeThreshold;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
63	[BUG]  [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  tol2)  <  =  tol2  -  0.5  *  (tol1  -  a);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  tol2)  <  =  tol2  -  0.5  *  (tol1  -  a);  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  boolean  stop  =  FastMath.abs(m  -  tol2)  <  =  tol2  -  0.5  *  (tol1  -  a);	  final    boolean    stop    =    FastMath.abs(m    -    b)    <    =    tol2    -    0.5    *    (tol1    -    a);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
64	[BUG]  [BUGGY]  final  double  m  =  relativeThreshold  *  FastMath.abs(b)/  absoluteThreshold;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  double  m  =  relativeThreshold  *  FastMath.abs(b)/  absoluteThreshold;  [BUGGY]      final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  double  m  =  relativeThreshold  *  FastMath.abs(b)/  absoluteThreshold;	  final    double    m    =    relativeThreshold    *    FastMath.abs(x)/    absoluteThreshold;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
65	[BUG]  [BUGGY]  final  double  b  =  a  *  FastMath.abs(x)/  relativeThreshold;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  double  b  =  a  *  FastMath.abs(x)/  relativeThreshold;  [BUGGY]      final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  double  b  =  a  *  FastMath.abs(x)/  relativeThreshold;	  final    double    b    =    absoluteThreshold    *    FastMath.abs(x)/    relativeThreshold;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
66	[BUG]  [BUGGY]  final  boolean  stop  =  FastMath.abs(tol1  -  tol2)  <  =  a  -  0.5  *  (b  -  tol2);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  boolean  stop  =  FastMath.abs(tol1  -  tol2)  <  =  a  -  0.5  *  (b  -  tol2);  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  boolean  stop  =  FastMath.abs(tol1  -  tol2)  <  =  a  -  0.5  *  (b  -  tol2);	  final    boolean    stop    =    FastMath.abs(tol1    -    tol2)    <    =    tol2    -    0.5    *    (b    -    a);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
67	[BUG]  [BUGGY]  final  boolean  stop  =  FastMath.abs(a  -  tol1)  <  =  tol2  -  0.5  *  (b  -  a);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  boolean  stop  =  FastMath.abs(a  -  tol1)  <  =  tol2  -  0.5  *  (b  -  a);  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  boolean  stop  =  FastMath.abs(a  -  tol1)  <  =  tol2  -  0.5  *  (b  -  a);	  final    boolean    stop    =    FastMath.abs(tol1    -    tol2)    <    =    tol2    -    0.5    *    (b    -    a);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
68	[BUG]  [BUGGY]  null?  tol1  :  tol2)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  null?  tol1  :  tol2)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	null?  tol1  :  tol2)  {  throw  new  IllegalArgumentException( " ");  }	  if(isMinim?    tol1    :    tol2)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
69	[BUG]  [BUGGY]  final  boolean  stop  =  FastMath.abs(a  -  m)  <  =  b  -  0.5  *  (a  -  tol1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  boolean  stop  =  FastMath.abs(a  -  m)  <  =  b  -  0.5  *  (a  -  tol1);  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  boolean  stop  =  FastMath.abs(a  -  m)  <  =  b  -  0.5  *  (a  -  tol1);	  final    boolean    stop    =    FastMath.abs(a    -    m)    <    =    tol2    -    0.5    *    (b    -    a);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
70	[BUG]  [BUGGY]  final  boolean  stop  =  FastMath.abs(tol1  -  b)  <  =  tol2  -  0.5  *  (tol1  -  a);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  boolean  stop  =  FastMath.abs(tol1  -  b)  <  =  tol2  -  0.5  *  (tol1  -  a);  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  boolean  stop  =  FastMath.abs(tol1  -  b)  <  =  tol2  -  0.5  *  (tol1  -  a);	  final    boolean    stop    =    FastMath.abs(m    -    b)    <    =    tol2    -    0.5    *    (tol1    -    a);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
71	[BUG]  [BUGGY]  if(isMinim  &&  isMinim)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  tol1  +=  m  *  FastMath.abs(m);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  if(isMinim  &&  isMinim)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  tol1  +=  m  *  FastMath.abs(m);  }  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	if(isMinim  &&  isMinim)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  tol1  +=  m  *  FastMath.abs(m);  }	  if(isMinim    &&    isMinim)    {    for(int    iter    =    0;    iter    <    iter;    iter++)    {    tol2    +=    relativeThreshold    *    FastMath.abs(m);    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
72	[BUG]  [BUGGY]  final  boolean  stop  =  FastMath.abs(a  -  tol1)  <  =  tol2  -  0.5  *  (a  -  tol1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  boolean  stop  =  FastMath.abs(a  -  tol1)  <  =  tol2  -  0.5  *  (a  -  tol1);  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  boolean  stop  =  FastMath.abs(a  -  tol1)  <  =  tol2  -  0.5  *  (a  -  tol1);	  final    boolean    stop    =    FastMath.abs(b    -    tol1)    <    =    tol2    -    0.5    *    (a    -    tol1);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
73	[BUG]  [BUGGY]  if(isMinim  &&  tol1  >  0)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  tol2  +=  relativeThreshold  *  FastMath.abs(iter);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  if(isMinim  &&  tol1  >  0)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  tol2  +=  relativeThreshold  *  FastMath.abs(iter);  }  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	if(isMinim  &&  tol1  >  0)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  tol2  +=  relativeThreshold  *  FastMath.abs(iter);  }	  if(isMinim    &&    isMinim)    {    for(int    iter    =    0;    iter    <    iter;    iter++)    {    tol2    +=    relativeThreshold    *    FastMath.abs(iter);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
74	[BUG]  [BUGGY]  final  boolean  stop  =  FastMath.abs(b  -  tol1)  <  =  GOLDEN_SECTION  -  0.5  *  (a  -  tol1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  boolean  stop  =  FastMath.abs(b  -  tol1)  <  =  GOLDEN_SECTION  -  0.5  *  (a  -  tol1);  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  boolean  stop  =  FastMath.abs(b  -  tol1)  <  =  GOLDEN_SECTION  -  0.5  *  (a  -  tol1);	  final    boolean    stop    =    FastMath.abs(m    -    tol1)    <    =    GOLDEN_SECTION    -    0.5    *    (b    -    a);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
75	[BUG]  [BUGGY]  final  boolean  stop  =  FastMath.abs(a  -  tol1)  <  =  GOLDEN_SECTION  -  0.5  *  (b  -  m);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  boolean  stop  =  FastMath.abs(a  -  tol1)  <  =  GOLDEN_SECTION  -  0.5  *  (b  -  m);  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  boolean  stop  =  FastMath.abs(a  -  tol1)  <  =  GOLDEN_SECTION  -  0.5  *  (b  -  m);	  final    boolean    stop    =    FastMath.abs(m    -    tol1)    <    =    GOLDEN_SECTION    -    0.5    *    (b    -    a);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
76	[BUG]  [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  tol1)  <  =  tol1  -  0.5  *  (b  -  tol2);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  boolean  stop  =  FastMath.abs(m  -  tol1)  <  =  tol1  -  0.5  *  (b  -  tol2);  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  boolean  stop  =  FastMath.abs(m  -  tol1)  <  =  tol1  -  0.5  *  (b  -  tol2);	  final    boolean    stop    =    FastMath.abs(m    -    tol2)    <    =    tol1    -    0.5    *    (b    -    a);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
77	[BUG]  [BUGGY]  final  boolean  stop  =  FastMath.abs(a  -  b)  <  =  tol1  -  0.5  *  (a  -  m);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  boolean  stop  =  FastMath.abs(a  -  b)  <  =  tol1  -  0.5  *  (a  -  m);  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  boolean  stop  =  FastMath.abs(a  -  b)  <  =  tol1  -  0.5  *  (a  -  m);	  final    boolean    stop    =    FastMath.abs(m    -    b)    <    =    tol2    -    0.5    *    (a    -    m);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
78	[BUG]  [BUGGY]  final  boolean  stop  =  FastMath.abs(b  -  tol2)  <  =  tol2  -  0.5  *  (a  -  m);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  boolean  stop  =  FastMath.abs(b  -  tol2)  <  =  tol2  -  0.5  *  (a  -  m);  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  boolean  stop  =  FastMath.abs(b  -  tol2)  <  =  tol2  -  0.5  *  (a  -  m);	  final    boolean    stop    =    FastMath.abs(m    -    tol2)    <    =    tol2    -    0.5    *    (a    -    m);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
79	[BUG]  [BUGGY]  final  boolean  stop  =  FastMath.abs(a  -  b)  <  =  tol2  -  0.5  *  (a  -  m);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  boolean  stop  =  FastMath.abs(a  -  b)  <  =  tol2  -  0.5  *  (a  -  m);  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  boolean  stop  =  FastMath.abs(a  -  b)  <  =  tol2  -  0.5  *  (a  -  m);	  final    boolean    stop    =    FastMath.abs(b    -    x)    <    =    tol2    -    0.5    *    (a    -    m);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
80	[BUG]  [BUGGY]  final  boolean  stop  =  FastMath.abs(b  -  tol1)  <  =  tol2  -  0.5  *  (a  -  m);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;        [BUGGY]  final  boolean  stop  =  FastMath.abs(b  -  tol1)  <  =  tol2  -  0.5  *  (a  -  m);  [BUGGY]      if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	159	159	1	replace	final  boolean  stop  =  FastMath.abs(b  -  tol1)  <  =  tol2  -  0.5  *  (a  -  m);	  final    boolean    stop    =    FastMath.abs(b    -    x)    <    =    tol2    -    0.5    *    (a    -    m);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
