projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147doublefv=computeObjectiveValue(x);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147if(isMinim){for(intiter=0;iter<iter.next();iter++){if(!isMinim){continue;}
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147if(isMinim){for(intiter=0;iter<relativeThreshold;iter++){if(!isMinim&&isMinim){continue;}
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147UnivariatePointValuePairprevious=null;
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147UnivariatePointValuePairprevious=newUnivariatePointValuePair(x,isMinim?fx:-fx);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147UnivariatePointValuePairprevious=newUnivariatePointValuePair(fv,isMinim?fx:-fx);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147doubleb=computeObjectiveValue(x);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147doubleb=getObjectiveValue(x);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147doubleb=computeObjectiveValue(fv);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147if(isMinim){fv=computeObjectiveValue(x);if(!isMinim){fv=-fv;}
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147if(isMinim){fv=computeObjectiveValue(x);if(!isMinim){fv=-fw;}
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147if(isMinim){fv=computeObjectiveValue(x);if(!isMinim){fv=fv;}
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147UnivariatePointValuePairprevious=newUnivariatePointValuePair(fx,isMinim?fx:-fx);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147doubleb=computeObjectiveValue(fv,fw);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147UnivariatePointValuePairprevious=newUnivariatePointValuePair(x,fv?fx:-fx);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147if(isMinim){for(intiter=0;iter<iter.get();iter++){if(!isMinim){continue;}
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147UnivariatePointValuePairprevious=newUnivariatePointValuePair(fx,isMinim?fv:-fx);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147fv=computeObjectiveValue(x);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147doubleb=computeObjectiveValue(d);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147intrelativeThreshold=computeRelativeThreshold(x);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147intrelativeThreshold=calculateRelativeThreshold(x);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147doubleb=getObjectiveValue(fv);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147doublefv=computeObjectiveValue(w);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147doublefv=computeObjectiveValue(d);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147if(!stop){fv=computeObjectiveValue(x);if(!isMinim){fv=fv;}
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147intrelativeThreshold=computeObjectiveValue(x);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147doubleb=computeObjectiveValue(x,fv);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147doubleb=getObjectiveValue(x,fv);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147if(isMinim){for(intiter=1;iter<iter.next();iter++){if(!isMinim){continue;}
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147doublefv=computeObjectiveValue(x+1);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147if(!isMinim){fv=-fv;}
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147if(!isMinim){fv=-fw;}
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147fv=-fw;
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147fv=-fv;
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147ConvergenceCheckerchecker=getOptimizationChecker();
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147ConvergenceChecker.checkState(isMinim);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147doublefv=computeObjectiveValue(w+1);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147fv=computeObjectiveValue(w);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147fv=computeObjectiveValue(fv);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147doubleb=computeObjectiveValue(fv,x);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147doubleb=computeObjectiveValue(fx,fv);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147doublerelativeThreshold=computeObjectiveValue(x);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147intrelativeThreshold=computeRelativeThreshold(fw);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147UnivariatePointValuePairprevious=newUnivariatePointValuePair(x,isMinim?fv:-fx);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147doublerelativeThreshold=computeRelativeThreshold(x);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147intrelativeThreshold=computeRelativeThreshold(fv);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147doubleb=getObjectiveValue(fx,fv);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147doubleb=computeObjectiveValue(x,fw);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147doubleb=computeObjectiveValue(fv,fw,d);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147if(isMinim){for(intiter=1;iter<iter.get();iter++){if(!isMinim){continue;}
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147doublerelativeThreshold=calculateRelativeThreshold(x);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147intrelativeThreshold=calculateRelativeThreshold(fv);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147fv=computeObjectiveValue(x,fv);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147intrelativeThreshold=computeRelativeValue(x);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147Integerfx=computeObjectiveValue(x);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147Integerf=getRelativeThreshold(x);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147doubleb=computeObjectiveValue(fw,fv);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147intrelativeThreshold=calculateRelativeThreshold(fw);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147UnivariatePointValuePairprevious=newUnivariatePointValuePair(x,fv?fx:-fw);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147intiter=0;iter<iter.get();iter++){if(!isMinim){continue;}
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147intiter=0;iter<iter.get();iter++){if(isMinim){continue;}
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147fv=computeObjectiveValue(x);if(!isMinim){fv=fv;}
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147doubleb=computeObjectiveValue(fv,fw,a);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147doubleb=getObjectiveValue(fv,x);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147doublewv=computeObjectiveValue(x);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147intrelativeThreshold=computeObjectiveValue(x,fv);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147doubleb=computeObjectiveValue(d,fv);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147intrelativeThreshold=calculateRelativeThreshold(x,absoluteThreshold);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147intrelativeThreshold=computeRelativeThreshold(x,absoluteThreshold);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java147doubleb=computeObjectiveValue(x,fv,a);
