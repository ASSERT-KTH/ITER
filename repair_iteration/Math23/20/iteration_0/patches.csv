bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  relativeThreshold  =  absoluteThreshold;  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  [BUGGY]  relativeThreshold  =  absoluteThreshold;  [BUGGY]  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	90	90	1	replace	relativeThreshold  =  absoluteThreshold;	relativeThreshold  =  rel;  	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
2	[BUG]  [BUGGY]  relativeThreshold  =  abs;  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  [BUGGY]  relativeThreshold  =  abs;  [BUGGY]  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	90	90	1	replace	relativeThreshold  =  abs;	relativeThreshold  =  rel;  	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
3	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  [BUGGY]    [BUGGY]  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	90	90	1	replace	  	relativeThreshold  =  rel;  	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
4	[BUG]  [BUGGY]    ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getValue();  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  [BUGGY]    ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getValue();  [BUGGY]  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	90	90	1	replace	    ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getValue();		non-compiled	[CE]  illegal  start  of  expression	40	None	add
5	[BUG]  [BUGGY]    ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getValuePair();  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  [BUGGY]    ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getValuePair();  [BUGGY]  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	90	90	1	replace	    ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getValuePair();		non-compiled	[CE]  illegal  start  of  expression	40	None	add
6	[BUG]  [BUGGY]    ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getRange();  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  [BUGGY]    ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getRange();  [BUGGY]  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	90	90	1	replace	    ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getRange();		non-compiled	[CE]  illegal  start  of  expression	40	None	add
7	[BUG]  [BUGGY]    double  absoluteThreshold  =  abs.doubleValue();  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  [BUGGY]    double  absoluteThreshold  =  abs.doubleValue();  [BUGGY]  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	90	90	1	replace	    double  absoluteThreshold  =  abs.doubleValue();		non-compiled	[CE]  illegal  start  of  expression	40	None	add
8	[BUG]  [BUGGY]    ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getGOLDEN_SECTION();  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  [BUGGY]    ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getGOLDEN_SECTION();  [BUGGY]  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	90	90	1	replace	    ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getGOLDEN_SECTION();		non-compiled	[CE]  illegal  start  of  expression	40	None	add
9	[BUG]  [BUGGY]  relativeThreshold  =  rels;  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  [BUGGY]  relativeThreshold  =  rels;  [BUGGY]  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	90	90	1	replace	relativeThreshold  =  rels;	relativeThreshold  =  rel;  	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
10	[BUG]  [BUGGY]    double  absoluteThreshold  =  checker.doubleValue();  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  [BUGGY]    double  absoluteThreshold  =  checker.doubleValue();  [BUGGY]  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	90	90	1	replace	    double  absoluteThreshold  =  checker.doubleValue();		non-compiled	[CE]  illegal  start  of  expression	40	None	add
