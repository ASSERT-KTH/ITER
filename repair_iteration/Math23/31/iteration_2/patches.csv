bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  While(checker!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  double  mid  =  getStartValue();  final  double  hi  =  getMax();  final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {      [BUGGY]  While(checker!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      b  =  hi;  }  else  {  a  =  hi;  b  =  lo;  }  double  x  =  mid;  double  v  =  x;  double  w  =  x;  double  d  =  0;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	128	128	1	replace	While(checker!=  null)  {  throw  new  IllegalStateException( " ");  }	  if(checker!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
2	[BUG]  [BUGGY]  ConvergenceChecker  <?>  checker  =  getConvergenceChecker(lo);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      final  double  mid  =  getStartValue();  final  double  hi  =  getMax();  final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {      [BUGGY]  ConvergenceChecker  <?>  checker  =  getConvergenceChecker(lo);  [BUGGY]      a  =  lo;  b  =  hi;  }  else  {  a  =  hi;  b  =  lo;  }  double  x  =  mid;  double  v  =  x;  double  w  =  x;  double  d  =  0;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	128	128	1	replace	ConvergenceChecker  <?>  checker  =  getConvergenceChecker(lo);	  ConvergenceChecker    <?>    checker    =    getConvergenceChecker();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
3	[BUG]  [BUGGY]  ConvergenceChecker  <  UnivariatePointValuePair>  checker  =  getConvergenceChecker(lo);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  double  mid  =  getStartValue();  final  double  hi  =  getMax();  final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {      [BUGGY]  ConvergenceChecker  <  UnivariatePointValuePair>  checker  =  getConvergenceChecker(lo);  [BUGGY]      a  =  lo;  b  =  hi;  }  else  {  a  =  hi;  b  =  lo;  }  double  x  =  mid;  double  v  =  x;  double  w  =  x;  double  d  =  0;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	128	128	1	replace	ConvergenceChecker  <  UnivariatePointValuePair>  checker  =  getConvergenceChecker(lo);	  ConvergenceChecker    <    UnivariatePointValuePair>    checker    =    getConvergenceChecker();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
4	[BUG]  [BUGGY]  b  =  checker.setConvergenceChecker(this,  a);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      final  double  mid  =  getStartValue();  final  double  hi  =  getMax();  final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {      [BUGGY]  b  =  checker.setConvergenceChecker(this,  a);  [BUGGY]      a  =  lo;  b  =  hi;  }  else  {  a  =  hi;  b  =  lo;  }  double  x  =  mid;  double  v  =  x;  double  w  =  x;  double  d  =  0;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	128	128	1	replace	b  =  checker.setConvergenceChecker(this,  a);	  b    =    checker.setConvergenceChecker(this);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
5	[BUG]  [BUGGY]  b  =  checker.getConvergenceChecker(a,  b);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      final  double  mid  =  getStartValue();  final  double  hi  =  getMax();  final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {      [BUGGY]  b  =  checker.getConvergenceChecker(a,  b);  [BUGGY]      a  =  lo;  b  =  hi;  }  else  {  a  =  hi;  b  =  lo;  }  double  x  =  mid;  double  v  =  x;  double  w  =  x;  double  d  =  0;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	128	128	1	replace	b  =  checker.getConvergenceChecker(a,  b);	  b    =    checker.getConvergenceChecker(a);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
6	[BUG]  [BUGGY]  ConvergenceChecker  <  Object>  checker  =  getConvergenceChecker(lo);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  double  mid  =  getStartValue();  final  double  hi  =  getMax();  final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {      [BUGGY]  ConvergenceChecker  <  Object>  checker  =  getConvergenceChecker(lo);  [BUGGY]      a  =  lo;  b  =  hi;  }  else  {  a  =  hi;  b  =  lo;  }  double  x  =  mid;  double  v  =  x;  double  w  =  x;  double  d  =  0;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	128	128	1	replace	ConvergenceChecker  <  Object>  checker  =  getConvergenceChecker(lo);	  ConvergenceChecker    <    Object>    checker    =    getConvergenceChecker();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
7	[BUG]  [BUGGY]  if(checker!=  null)  {  throw  new  IllegalArgumentException( "Failed  to  initialize  UnivariatePointValuePair. ");  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      final  double  mid  =  getStartValue();  final  double  hi  =  getMax();  final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {      [BUGGY]  if(checker!=  null)  {  throw  new  IllegalArgumentException( "Failed  to  initialize  UnivariatePointValuePair. ");  }  [BUGGY]      a  =  lo;  b  =  hi;  }  else  {  a  =  hi;  b  =  lo;  }  double  x  =  mid;  double  v  =  x;  double  w  =  x;  double  d  =  0;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	128	128	1	replace	if(checker!=  null)  {  throw  new  IllegalArgumentException( "Failed  to  initialize  UnivariatePointValuePair. ");  }	  [Delete]    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
8	[BUG]  [BUGGY]  While(checker!=  null)  {  throw  new  IllegalStateException( " ".);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  double  mid  =  getStartValue();  final  double  hi  =  getMax();  final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {      [BUGGY]  While(checker!=  null)  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]      b  =  hi;  }  else  {  a  =  hi;  b  =  lo;  }  double  x  =  mid;  double  v  =  x;  double  w  =  x;  double  d  =  0;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	128	128	1	replace	While(checker!=  null)  {  throw  new  IllegalStateException( " ".);  }	  if(checker!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
9	[BUG]  [BUGGY]  ConvergenceChecker  <  UnivariatePointValuePair>  checker  =  getConvergenceChecker(a);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  double  mid  =  getStartValue();  final  double  hi  =  getMax();  final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {      [BUGGY]  ConvergenceChecker  <  UnivariatePointValuePair>  checker  =  getConvergenceChecker(a);  [BUGGY]      a  =  lo;  b  =  hi;  }  else  {  a  =  hi;  b  =  lo;  }  double  x  =  mid;  double  v  =  x;  double  w  =  x;  double  d  =  0;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	128	128	1	replace	ConvergenceChecker  <  UnivariatePointValuePair>  checker  =  getConvergenceChecker(a);	  ConvergenceChecker    <    UnivariatePointValuePair>    checker    =    getConvergenceChecker();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
