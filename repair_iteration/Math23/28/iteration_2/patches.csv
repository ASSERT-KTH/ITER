bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(isMinim)  {  if(mid  <  GOLDEN_SECTION)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;  final  double  lo  =  getMin();  final  double  mid  =  getStartValue();      [BUGGY]  if(isMinim)  {  if(mid  <  GOLDEN_SECTION)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  a  =  lo;  b  =  hi;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	119	119	1	replace	if(isMinim)  {  if(mid  <  GOLDEN_SECTION)  {  throw  new  IllegalArgumentException( " ");  }	  if(isMinim)    {    if(mid    >    GOLDEN_SECTION)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
2	[BUG]  [BUGGY]  ConvergenceChecker  <?>  checker  =  getConvergenceChecker();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;  final  double  lo  =  getMin();  final  double  mid  =  getStartValue();      [BUGGY]  ConvergenceChecker  <?>  checker  =  getConvergenceChecker();  [BUGGY]        final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  a  =  lo;  b  =  hi;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	119	119	1	replace	ConvergenceChecker  <?>  checker  =  getConvergenceChecker();	  if(isMinim)    {    if(mid    >    GOLDEN_SECTION)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
3	[BUG]  [BUGGY]  final  ConvergenceChecker  <  UnivariatePointValuePair>  checker  =  getConvergenceChecker();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;  final  double  lo  =  getMin();  final  double  mid  =  getStartValue();      [BUGGY]  final  ConvergenceChecker  <  UnivariatePointValuePair>  checker  =  getConvergenceChecker();  [BUGGY]      final  double  hi  =  getMax();  final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  a  =  lo;  b  =  hi;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	119	119	1	replace	final  ConvergenceChecker  <  UnivariatePointValuePair>  checker  =  getConvergenceChecker();	  ConvergenceChecker    <    UnivariatePointValuePair>    checker    =    getConvergenceChecker();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
4	[BUG]  [BUGGY]  double  max  =  getMax()  /  mid;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;  final  double  lo  =  getMin();  final  double  mid  =  getStartValue();      [BUGGY]  double  max  =  getMax()  /  mid;  [BUGGY]      final  double  hi  =  getMax();  final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  a  =  lo;  b  =  hi;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	119	119	1	replace	double  max  =  getMax()  /  mid;	  double    max    =    getMax()    -    mid;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
5	[BUG]  [BUGGY]  if(isMinim)  {  if(mid  <  GOLDEN_SECTION)  {  return  isMinim;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;  final  double  lo  =  getMin();  final  double  mid  =  getStartValue();      [BUGGY]  if(isMinim)  {  if(mid  <  GOLDEN_SECTION)  {  return  isMinim;  }  [BUGGY]        final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  a  =  lo;  b  =  hi;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	119	119	1	replace	if(isMinim)  {  if(mid  <  GOLDEN_SECTION)  {  return  isMinim;  }	  if(isMinim)    {    if(mid    >    GOLDEN_SECTION)    {    return    isMinim;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
6	[BUG]  [BUGGY]  final  double  hi  =  getHidden()  -  mid  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;  final  double  lo  =  getMin();  final  double  mid  =  getStartValue();      [BUGGY]  final  double  hi  =  getHidden()  -  mid  +  1;  [BUGGY]        final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  a  =  lo;  b  =  hi;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	119	119	1	replace	final  double  hi  =  getHidden()  -  mid  +  1;	  final    double    hi    =    getHidden()    -    mid;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
7	[BUG]  [BUGGY]  final  double  max  =  getMax()  /  mid;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;  final  double  lo  =  getMin();  final  double  mid  =  getStartValue();      [BUGGY]  final  double  max  =  getMax()  /  mid;  [BUGGY]      final  double  hi  =  getMax();  final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  a  =  lo;  b  =  hi;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	119	119	1	replace	final  double  max  =  getMax()  /  mid;	  final    double    max    =    getMax()    -    mid;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
8	[BUG]  [BUGGY]  final  double  hi  =  getImmediateThreshold();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;  final  double  lo  =  getMin();  final  double  mid  =  getStartValue();      [BUGGY]  final  double  hi  =  getImmediateThreshold();  [BUGGY]        final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  a  =  lo;  b  =  hi;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	119	119	1	replace	final  double  hi  =  getImmediateThreshold();	  final    double    hi    =    getStartValue();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
9	[BUG]  [BUGGY]  ConvergenceChecker  <  UnivariatePointValuePair>  checker  =  getChecker(isMinim);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;  final  double  lo  =  getMin();  final  double  mid  =  getStartValue();      [BUGGY]  ConvergenceChecker  <  UnivariatePointValuePair>  checker  =  getChecker(isMinim);  [BUGGY]      final  double  hi  =  getMax();  final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  a  =  lo;  b  =  hi;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	119	119	1	replace	ConvergenceChecker  <  UnivariatePointValuePair>  checker  =  getChecker(isMinim);	  ConvergenceChecker    <    UnivariatePointValuePair>    checker    =    getChecker(mid);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
10	[BUG]  [BUGGY]  ConvergenceChecker  <  UnivariatePointValuePair>  checker  =  getChecker(mid,  isMinim);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;  final  double  lo  =  getMin();  final  double  mid  =  getStartValue();      [BUGGY]  ConvergenceChecker  <  UnivariatePointValuePair>  checker  =  getChecker(mid,  isMinim);  [BUGGY]      final  double  hi  =  getMax();  final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  a  =  lo;  b  =  hi;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	119	119	1	replace	ConvergenceChecker  <  UnivariatePointValuePair>  checker  =  getChecker(mid,  isMinim);	  ConvergenceChecker    <    UnivariatePointValuePair>    checker    =    getChecker(mid);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
11	[BUG]  [BUGGY]  final  double  hi  =  getHial()  -  mid;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;  final  double  lo  =  getMin();  final  double  mid  =  getStartValue();      [BUGGY]  final  double  hi  =  getHial()  -  mid;  [BUGGY]        final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  a  =  lo;  b  =  hi;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	119	119	1	replace	final  double  hi  =  getHial()  -  mid;	  final    double    hi    =    getHial();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
12	[BUG]  [BUGGY]  final  double  mid  =  getEndValue()  -  lo;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;  final  double  lo  =  getMin();  final  double  mid  =  getStartValue();      [BUGGY]  final  double  mid  =  getEndValue()  -  lo;  [BUGGY]        final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  a  =  lo;  b  =  hi;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	119	119	1	replace	final  double  mid  =  getEndValue()  -  lo;	  final    double    mid    =    getEndValue();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
13	[BUG]  [BUGGY]  final  double  hi  =  getHiddenValue()  -  mid;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;  final  double  lo  =  getMin();  final  double  mid  =  getStartValue();      [BUGGY]  final  double  hi  =  getHiddenValue()  -  mid;  [BUGGY]        final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  a  =  lo;  b  =  hi;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	119	119	1	replace	final  double  hi  =  getHiddenValue()  -  mid;	  final    double    hi    =    getHiddenValue();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
14	[BUG]  [BUGGY]  final  double  hi  =  getHorizontalValue()  /  mid;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;  final  double  lo  =  getMin();  final  double  mid  =  getStartValue();      [BUGGY]  final  double  hi  =  getHorizontalValue()  /  mid;  [BUGGY]        final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  a  =  lo;  b  =  hi;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	119	119	1	replace	final  double  hi  =  getHorizontalValue()  /  mid;	  final    double    hi    =    getHorizontalValue()    -    mid;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
15	[BUG]  [BUGGY]  parent  ==  null  ||  isMinim)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;  final  double  lo  =  getMin();  final  double  mid  =  getStartValue();      [BUGGY]  parent  ==  null  ||  isMinim)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  a  =  lo;  b  =  hi;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	119	119	1	replace	parent  ==  null  ||  isMinim)  {  throw  new  IllegalArgumentException( " ");  }	  if(isMinim)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
16	[BUG]  [BUGGY]  While(isMinim)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;  final  double  lo  =  getMin();  final  double  mid  =  getStartValue();      [BUGGY]  While(isMinim)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  a  =  lo;  b  =  hi;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	119	119	1	replace	While(isMinim)  {  throw  new  IllegalArgumentException( " ");  }	  if(isMinim)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
17	[BUG]  [BUGGY]  final  double  hi  =  getHeightValue();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;  final  double  lo  =  getMin();  final  double  mid  =  getStartValue();      [BUGGY]  final  double  hi  =  getHeightValue();  [BUGGY]        final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  a  =  lo;  b  =  hi;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	119	119	1	replace	final  double  hi  =  getHeightValue();	  final    double    hi    =    getStartValue();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
18	[BUG]  [BUGGY]  double  max  =  getMax()  -  mid  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;  final  double  lo  =  getMin();  final  double  mid  =  getStartValue();      [BUGGY]  double  max  =  getMax()  -  mid  +  1;  [BUGGY]      final  double  hi  =  getMax();  final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  a  =  lo;  b  =  hi;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	119	119	1	replace	double  max  =  getMax()  -  mid  +  1;	  double    max    =    getMax()    -    mid;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
19	[BUG]  [BUGGY]  final  ConvergenceChecker  <  UnivariatePointValuePair>  checker  =  getChecker(mid);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;  final  double  lo  =  getMin();  final  double  mid  =  getStartValue();      [BUGGY]  final  ConvergenceChecker  <  UnivariatePointValuePair>  checker  =  getChecker(mid);  [BUGGY]      final  double  hi  =  getMax();  final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  a  =  lo;  b  =  hi;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	119	119	1	replace	final  ConvergenceChecker  <  UnivariatePointValuePair>  checker  =  getChecker(mid);	  final    ConvergenceChecker    <    UnivariatePointValuePair>    checker    =    getChecker();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
20	[BUG]  [BUGGY]  if(mid  <  GOLDEN_SECTION)  {  return  isMinim;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;  final  double  lo  =  getMin();  final  double  mid  =  getStartValue();      [BUGGY]  if(mid  <  GOLDEN_SECTION)  {  return  isMinim;  }  [BUGGY]        final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  a  =  lo;  b  =  hi;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	119	119	1	replace	if(mid  <  GOLDEN_SECTION)  {  return  isMinim;  }	  if(isMinim)    {    if(mid    >    GOLDEN_SECTION)    {    return    isMinim;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
21	[BUG]  [BUGGY]  final  double  max  =  getMax()  -  mid  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;  final  double  lo  =  getMin();  final  double  mid  =  getStartValue();      [BUGGY]  final  double  max  =  getMax()  -  mid  +  1;  [BUGGY]      final  double  hi  =  getMax();  final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  a  =  lo;  b  =  hi;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	119	119	1	replace	final  double  max  =  getMax()  -  mid  +  1;	  final    double    max    =    getMax()    -    mid;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
22	[BUG]  [BUGGY]  final  double  mid  =  getStartValue();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;  final  double  lo  =  getMin();  final  double  mid  =  getStartValue();      [BUGGY]  final  double  mid  =  getStartValue();  [BUGGY]        final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  a  =  lo;  b  =  hi;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	119	119	1	replace	final  double  mid  =  getStartValue();	  final    double    mid    =    getEndValue();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
23	[BUG]  [BUGGY]  final  double  hi  =  getHiddenValue()  +  mid;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;  final  double  lo  =  getMin();  final  double  mid  =  getStartValue();      [BUGGY]  final  double  hi  =  getHiddenValue()  +  mid;  [BUGGY]        final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  a  =  lo;  b  =  hi;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	119	119	1	replace	final  double  hi  =  getHiddenValue()  +  mid;	  final    double    hi    =    getHiddenValue();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
24	[BUG]  [BUGGY]  final  double  hi  =  getHiddenValue()  -  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;  final  double  lo  =  getMin();  final  double  mid  =  getStartValue();      [BUGGY]  final  double  hi  =  getHiddenValue()  -  1;  [BUGGY]        final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  a  =  lo;  b  =  hi;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	119	119	1	replace	final  double  hi  =  getHiddenValue()  -  1;	  final    double    hi    =    getHiddenValue();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
25	[BUG]  [BUGGY]  if(isMinim)  {  throw  new  IllegalArgumentException( " ".equals(mid));  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;  final  double  lo  =  getMin();  final  double  mid  =  getStartValue();      [BUGGY]  if(isMinim)  {  throw  new  IllegalArgumentException( " ".equals(mid));  }  [BUGGY]        final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  a  =  lo;  b  =  hi;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	119	119	1	replace	if(isMinim)  {  throw  new  IllegalArgumentException( " ".equals(mid));  }	  if(isMinim)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
26	[BUG]  [BUGGY]  ConvergenceChecker  <  UnivariatePointValuePair>  checker  =  getChecker(isMinim?  1  :  mid);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;  final  double  lo  =  getMin();  final  double  mid  =  getStartValue();      [BUGGY]  ConvergenceChecker  <  UnivariatePointValuePair>  checker  =  getChecker(isMinim?  1  :  mid);  [BUGGY]      final  double  hi  =  getMax();  final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  a  =  lo;  b  =  hi;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	119	119	1	replace	ConvergenceChecker  <  UnivariatePointValuePair>  checker  =  getChecker(isMinim?  1  :  mid);	  ConvergenceChecker    <    UnivariatePointValuePair>    checker    =    getChecker(mid);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
27	[BUG]  [BUGGY]  double  max  =  getMax()  +  mid  -  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;  final  double  lo  =  getMin();  final  double  mid  =  getStartValue();      [BUGGY]  double  max  =  getMax()  +  mid  -  1;  [BUGGY]      final  double  hi  =  getMax();  final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  a  =  lo;  b  =  hi;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	119	119	1	replace	double  max  =  getMax()  +  mid  -  1;	  double    max    =    getMax()    +    mid;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
28	[BUG]  [BUGGY]  ConvergenceChecker  <  UnivariatePointValuePair>  checker  =  getConvergenceChecker(mid);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;  final  double  lo  =  getMin();  final  double  mid  =  getStartValue();      [BUGGY]  ConvergenceChecker  <  UnivariatePointValuePair>  checker  =  getConvergenceChecker(mid);  [BUGGY]      final  double  hi  =  getMax();  final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  a  =  lo;  b  =  hi;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	119	119	1	replace	ConvergenceChecker  <  UnivariatePointValuePair>  checker  =  getConvergenceChecker(mid);	  ConvergenceChecker    <    UnivariatePointValuePair>    checker    =    getConvergenceChecker();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
29	[BUG]  [BUGGY]  final  double  hi  =  getHialValue();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;  final  double  lo  =  getMin();  final  double  mid  =  getStartValue();      [BUGGY]  final  double  hi  =  getHialValue();  [BUGGY]        final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  a  =  lo;  b  =  hi;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	119	119	1	replace	final  double  hi  =  getHialValue();	  final    double    hi    =    getHial();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
30	[BUG]  [BUGGY]  final  double  mid  =  getEndValue()  -  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  UnivariatePointValuePair  doOptimize()  {  final  boolean  isMinim  =  getGoalType()  ==  GoalType.MINIMIZE;  final  double  lo  =  getMin();  final  double  mid  =  getStartValue();      [BUGGY]  final  double  mid  =  getEndValue()  -  1;  [BUGGY]        final  ConvergenceChecker<UnivariatePointValuePair>  checker  =  getConvergenceChecker();  double  a;  double  b;  if  (lo  <  hi)  {  a  =  lo;  b  =  hi;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	119	119	1	replace	final  double  mid  =  getEndValue()  -  1;	  final    double    mid    =    getEndValue();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
