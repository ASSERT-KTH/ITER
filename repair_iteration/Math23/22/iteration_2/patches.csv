bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  absoluteThreshold  =  rel;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;      [BUGGY]  absoluteThreshold  =  rel;  [BUGGY]        [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	92	92	1	replace	absoluteThreshold  =  rel;	  absoluteThreshold    =    absoluteThreshold;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
2	[BUG]  [BUGGY]  rel  <  absoluteThreshold)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  relativeThreshold,  true);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;      [BUGGY]  rel  <  absoluteThreshold)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  relativeThreshold,  true);  }  [BUGGY]      }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	92	92	1	replace	rel  <  absoluteThreshold)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  relativeThreshold,  true);  }	  rel    <    =    absoluteThreshold)    {    if(rel    >    GOLDEN_SECTION)    {    throw    new    NumberIsTooSmallException(rel,    relativeThreshold,    true);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
3	[BUG]  [BUGGY]  return  checker.getRelativeThreshold();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;      [BUGGY]  return  checker.getRelativeThreshold();  [BUGGY]        [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	92	92	1	replace	return  checker.getRelativeThreshold();	  return    checker.relativeThreshold();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
4	[BUG]  [BUGGY]  return  checker.evaluate(rel,  relativeThreshold);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;      [BUGGY]  return  checker.evaluate(rel,  relativeThreshold);  [BUGGY]        [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	92	92	1	replace	return  checker.evaluate(rel,  relativeThreshold);	  return    checker.evaluate(rel,    absoluteThreshold);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
5	[BUG]  [BUGGY]  return  checker.evaluate(absoluteThreshold,  rel);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;      [BUGGY]  return  checker.evaluate(absoluteThreshold,  rel);  [BUGGY]        [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	92	92	1	replace	return  checker.evaluate(absoluteThreshold,  rel);	  return    checker.evaluate(relativeThreshold,    rel);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
6	[BUG]  [BUGGY]  return  checker.getOptimizer(),  absoluteThreshold;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;      [BUGGY]  return  checker.getOptimizer(),  absoluteThreshold;  [BUGGY]        [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	92	92	1	replace	return  checker.getOptimizer(),  absoluteThreshold;	  return    checker.getOptimizer(),    relativeThreshold;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
7	[BUG]  [BUGGY]  rel  <  =  GOLDEN_SECTION)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;      [BUGGY]  rel  <  =  GOLDEN_SECTION)  {  [BUGGY]      }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	92	92	1	replace	rel  <  =  GOLDEN_SECTION)  {	  rel    <    =    GOLDEN_SECTION)    {    if(rel    >=    GOLDEN_SECTION)    {    throw    new    NumberIsTooSmallException(rel,    absoluteThreshold);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
8	[BUG]  [BUGGY]  absoluteThreshold  =  Math.abs(rel);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;      [BUGGY]  absoluteThreshold  =  Math.abs(rel);  [BUGGY]        [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	92	92	1	replace	absoluteThreshold  =  Math.abs(rel);	  absoluteThreshold    =    Math.abs(relativeThreshold);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
9	[BUG]  [BUGGY]  absoluteThreshold  =  Math.min(rel,  absoluteThreshold);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;      [BUGGY]  absoluteThreshold  =  Math.min(rel,  absoluteThreshold);  [BUGGY]      }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	92	92	1	replace	absoluteThreshold  =  Math.min(rel,  absoluteThreshold);	  absoluteThreshold    =    Math.min(relativeThreshold,    rel);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
10	[BUG]  [BUGGY]  absoluteThreshold  =  Math.min(rel,  relativeThreshold);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;      [BUGGY]  absoluteThreshold  =  Math.min(rel,  relativeThreshold);  [BUGGY]      }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	92	92	1	replace	absoluteThreshold  =  Math.min(rel,  relativeThreshold);	  absoluteThreshold    =    Math.min(relativeThreshold,    rel);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
11	[BUG]  [BUGGY]  return  checker.evaluate(rel,  relativeThreshold,  abs);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;      [BUGGY]  return  checker.evaluate(rel,  relativeThreshold,  abs);  [BUGGY]        [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	92	92	1	replace	return  checker.evaluate(rel,  relativeThreshold,  abs);	  return    checker.evaluate(rel,    absoluteThreshold,    abs);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
12	[BUG]  [BUGGY]  return  checker.evaluate(rel,  absoluteThreshold,  relativeThreshold);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;      [BUGGY]  return  checker.evaluate(rel,  absoluteThreshold,  relativeThreshold);  [BUGGY]        [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	92	92	1	replace	return  checker.evaluate(rel,  absoluteThreshold,  relativeThreshold);	  return    checker.evaluate(rel,    absoluteThreshold,    abs);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
13	[BUG]  [BUGGY]  return  checker.nextToken()  +  relativeThreshold;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;      [BUGGY]  return  checker.nextToken()  +  relativeThreshold;  [BUGGY]        [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	92	92	1	replace	return  checker.nextToken()  +  relativeThreshold;	  return    checker.nextToken()    +    absoluteThreshold;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
14	[BUG]  [BUGGY]  return  checker.nextToken()  /  absoluteThreshold;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;      [BUGGY]  return  checker.nextToken()  /  absoluteThreshold;  [BUGGY]        [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	92	92	1	replace	return  checker.nextToken()  /  absoluteThreshold;	  return    checker.nextToken()    +    absoluteThreshold;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
15	[BUG]  [BUGGY]  rel  <  =  relativeThreshold)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  absoluteThreshold);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;      [BUGGY]  rel  <  =  relativeThreshold)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  absoluteThreshold);  }  [BUGGY]      }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	92	92	1	replace	rel  <  =  relativeThreshold)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  absoluteThreshold);  }	  rel    <    =    absoluteThreshold)    {    if(rel    >    GOLDEN_SECTION)    {    throw    new    NumberIsTooSmallException(rel,    absoluteThreshold);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
16	[BUG]  [BUGGY]  rel  <  absoluteThreshold)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  absoluteThreshold);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;      [BUGGY]  rel  <  absoluteThreshold)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  absoluteThreshold);  }  [BUGGY]      }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	92	92	1	replace	rel  <  absoluteThreshold)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  absoluteThreshold);  }	  rel    <    =    absoluteThreshold)    {    if(rel    >    GOLDEN_SECTION)    {    throw    new    NumberIsTooSmallException(rel,    absoluteThreshold);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
17	[BUG]  [BUGGY]  rel  <  absoluteThreshold)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  relativeThreshold);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;      [BUGGY]  rel  <  absoluteThreshold)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  relativeThreshold);  }  [BUGGY]      }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	92	92	1	replace	rel  <  absoluteThreshold)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  relativeThreshold);  }	  rel    <    =    absoluteThreshold)    {    if(rel    >    GOLDEN_SECTION)    {    throw    new    NumberIsTooSmallException(rel,    relativeThreshold);    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
18	[BUG]  [BUGGY]  absoluteThreshold  =  Math.max(rel,  absoluteThreshold);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;      [BUGGY]  absoluteThreshold  =  Math.max(rel,  absoluteThreshold);  [BUGGY]      }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	92	92	1	replace	absoluteThreshold  =  Math.max(rel,  absoluteThreshold);	  absoluteThreshold    =    Math.max(relativeThreshold,    rel);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
19	[BUG]  [BUGGY]  absoluteThreshold  =  Math.max(relativeThreshold,  rel  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;      [BUGGY]  absoluteThreshold  =  Math.max(relativeThreshold,  rel  +  1);  [BUGGY]      }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	92	92	1	replace	absoluteThreshold  =  Math.max(relativeThreshold,  rel  +  1);	  absoluteThreshold    =    Math.max(relativeThreshold,    rel);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
20	[BUG]  [BUGGY]  rel  <  absoluteThreshold)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  relativeThreshold,  false);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;      [BUGGY]  rel  <  absoluteThreshold)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  relativeThreshold,  false);  }  [BUGGY]      }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	92	92	1	replace	rel  <  absoluteThreshold)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  relativeThreshold,  false);  }	  rel    <    =    absoluteThreshold)    {    if(rel    >    GOLDEN_SECTION)    {    throw    new    NumberIsTooSmallException(rel,    relativeThreshold,    false);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
21	[BUG]  [BUGGY]  rel  <  =  absoluteThreshold)  {  if(rel  >=  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  relativeThreshold);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;      [BUGGY]  rel  <  =  absoluteThreshold)  {  if(rel  >=  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  relativeThreshold);  }  [BUGGY]      }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	92	92	1	replace	rel  <  =  absoluteThreshold)  {  if(rel  >=  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  relativeThreshold);  }	  rel    <    =    GOLDEN_SECTION)    {    if(rel    >=    GOLDEN_SECTION)    {    throw    new    NumberIsTooSmallException(rel,    relativeThreshold);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
22	[BUG]  [BUGGY]  rel  <  =  GOLDEN_SECTION)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  absoluteThreshold,  true);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;      [BUGGY]  rel  <  =  GOLDEN_SECTION)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  absoluteThreshold,  true);  }  [BUGGY]      }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	92	92	1	replace	rel  <  =  GOLDEN_SECTION)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  absoluteThreshold,  true);  }	  rel    <    =    GOLDEN_SECTION)    {    if(rel    >    GOLDEN_SECTION)    {    throw    new    NumberIsTooSmallException(rel,    relativeThreshold,    true);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
23	[BUG]  [BUGGY]  (rel  <  =  GOLDEN_SECTION)||(rel  >  GOLDEN_SECTION))  {  throw  new  NumberIsTooSmallException(rel,  relativeThreshold,  true);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;      [BUGGY]  (rel  <  =  GOLDEN_SECTION)||(rel  >  GOLDEN_SECTION))  {  throw  new  NumberIsTooSmallException(rel,  relativeThreshold,  true);  }  [BUGGY]      }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	92	92	1	replace	(rel  <  =  GOLDEN_SECTION)||(rel  >  GOLDEN_SECTION))  {  throw  new  NumberIsTooSmallException(rel,  relativeThreshold,  true);  }	  rel    <    =    GOLDEN_SECTION)    {    if(rel    >    GOLDEN_SECTION)    {    throw    new    NumberIsTooSmallException(rel,    relativeThreshold,    true);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
24	[BUG]  [BUGGY]  return  checker.getValue();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;      [BUGGY]  return  checker.getValue();  [BUGGY]        [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	92	92	1	replace	return  checker.getValue();	  return    checker.getValuePair();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
25	[BUG]  [BUGGY]  return  checker.getValuePair()  -  relativeThreshold;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;      [BUGGY]  return  checker.getValuePair()  -  relativeThreshold;  [BUGGY]        [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	92	92	1	replace	return  checker.getValuePair()  -  relativeThreshold;	  return    checker.getValuePair();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
26	[BUG]  [BUGGY]  return  checker.nextToken()  -  absoluteThreshold;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;      [BUGGY]  return  checker.nextToken()  -  absoluteThreshold;  [BUGGY]        [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	92	92	1	replace	return  checker.nextToken()  -  absoluteThreshold;	  return    checker.nextToken()    -    relativeThreshold;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
27	[BUG]  [BUGGY]  return  checker.nextToken()  /  relativeThreshold;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;      [BUGGY]  return  checker.nextToken()  /  relativeThreshold;  [BUGGY]        [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	92	92	1	replace	return  checker.nextToken()  /  relativeThreshold;	  return    checker.nextToken()    -    relativeThreshold;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
28	[BUG]  [BUGGY]  rel  <  relativeThreshold)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  relativeThreshold,  true);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;      [BUGGY]  rel  <  relativeThreshold)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  relativeThreshold,  true);  }  [BUGGY]      }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	92	92	1	replace	rel  <  relativeThreshold)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  relativeThreshold,  true);  }	  rel    <    =    absoluteThreshold)    {    if(rel    >    GOLDEN_SECTION)    {    throw    new    NumberIsTooSmallException(rel,    relativeThreshold,    true);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
29	[BUG]  [BUGGY]  return  checker.getValuePair(),  relativeThreshold;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;      [BUGGY]  return  checker.getValuePair(),  relativeThreshold;  [BUGGY]        [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	92	92	1	replace	return  checker.getValuePair(),  relativeThreshold;	  return    checker.getOptimizer(),    relativeThreshold;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
30	[BUG]  [BUGGY]  absoluteThreshold  =  Math.min(relativeThreshold,  rel  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;      [BUGGY]  absoluteThreshold  =  Math.min(relativeThreshold,  rel  +  1);  [BUGGY]      }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	92	92	1	replace	absoluteThreshold  =  Math.min(relativeThreshold,  rel  +  1);	  absoluteThreshold    =    Math.min(relativeThreshold,    rel);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
31	[BUG]  [BUGGY]  RelativeThreshold  rel  =  Math.max(relativeThreshold,  abs);  absoluteThreshold  =  rel;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;      [BUGGY]  RelativeThreshold  rel  =  Math.max(relativeThreshold,  abs);  absoluteThreshold  =  rel;  [BUGGY]        [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	92	92	1	replace	RelativeThreshold  rel  =  Math.max(relativeThreshold,  abs);  absoluteThreshold  =  rel;	  RelativeThreshold    rel    =    Math.abs(relativeThreshold);    absoluteThreshold    =    rel;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
32	[BUG]  [BUGGY]  rel  <  relativeThreshold)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  relativeThreshold);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;      [BUGGY]  rel  <  relativeThreshold)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  relativeThreshold);  }  [BUGGY]      }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	92	92	1	replace	rel  <  relativeThreshold)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  relativeThreshold);  }	  rel    <    =    absoluteThreshold)    {    if(rel    >    GOLDEN_SECTION)    {    throw    new    NumberIsTooSmallException(rel,    relativeThreshold);    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
33	[BUG]  [BUGGY]  absoluteThreshold  =  Math.abs(relativeThreshold  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;      [BUGGY]  absoluteThreshold  =  Math.abs(relativeThreshold  +  1);  [BUGGY]        [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	92	92	1	replace	absoluteThreshold  =  Math.abs(relativeThreshold  +  1);	  absoluteThreshold    =    Math.abs(relativeThreshold);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
34	[BUG]  [BUGGY]  rel  <  =  absoluteThreshold)  {  if(rel  >=  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  absoluteThreshold);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;      [BUGGY]  rel  <  =  absoluteThreshold)  {  if(rel  >=  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  absoluteThreshold);  }  [BUGGY]      }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	92	92	1	replace	rel  <  =  absoluteThreshold)  {  if(rel  >=  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  absoluteThreshold);  }	  rel    <    =    GOLDEN_SECTION)    {    if(rel    >=    GOLDEN_SECTION)    {    throw    new    NumberIsTooSmallException(rel,    absoluteThreshold);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
35	[BUG]  [BUGGY]  return  checker.getValuePair()  +  absoluteThreshold;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;      [BUGGY]  return  checker.getValuePair()  +  absoluteThreshold;  [BUGGY]        [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	92	92	1	replace	return  checker.getValuePair()  +  absoluteThreshold;	  return    checker.getValuePair();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
36	[BUG]  [BUGGY]  rel  <  GOLDEN_SECTION)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  absoluteThreshold);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;      [BUGGY]  rel  <  GOLDEN_SECTION)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  absoluteThreshold);  }  [BUGGY]      }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	92	92	1	replace	rel  <  GOLDEN_SECTION)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  absoluteThreshold);  }	  rel    <    =    GOLDEN_SECTION)    {    if(rel    >    GOLDEN_SECTION)    {    throw    new    NumberIsTooSmallException(rel,    absoluteThreshold);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
37	[BUG]  [BUGGY]  return  checker.relativeThreshold(rel);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;      [BUGGY]  return  checker.relativeThreshold(rel);  [BUGGY]        [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	92	92	1	replace	return  checker.relativeThreshold(rel);	  return    checker.relativeThreshold();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
38	[BUG]  [BUGGY]  absoluteThreshold  =  absoluteThreshold  +  2;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;      [BUGGY]  absoluteThreshold  =  absoluteThreshold  +  2;  [BUGGY]        [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	92	92	1	replace	absoluteThreshold  =  absoluteThreshold  +  2;	  absoluteThreshold    =    absoluteThreshold    +    1;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
39	[BUG]  [BUGGY]  rel  <  =  GOLDEN_SECTION)  {  if(rel  >  absoluteThreshold)  {  throw  new  NumberIsTooSmallException(rel,  relativeThreshold,  true);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;      [BUGGY]  rel  <  =  GOLDEN_SECTION)  {  if(rel  >  absoluteThreshold)  {  throw  new  NumberIsTooSmallException(rel,  relativeThreshold,  true);  }  [BUGGY]      }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	92	92	1	replace	rel  <  =  GOLDEN_SECTION)  {  if(rel  >  absoluteThreshold)  {  throw  new  NumberIsTooSmallException(rel,  relativeThreshold,  true);  }	  rel    <    =    GOLDEN_SECTION)    {    if(rel    >    GOLDEN_SECTION)    {    throw    new    NumberIsTooSmallException(rel,    relativeThreshold,    true);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
40	[BUG]  [BUGGY]  rel  <  =  relativeThreshold)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  relativeThreshold,  true);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;      [BUGGY]  rel  <  =  relativeThreshold)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  relativeThreshold,  true);  }  [BUGGY]      }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	92	92	1	replace	rel  <  =  relativeThreshold)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  relativeThreshold,  true);  }	  rel    <    =    absoluteThreshold)    {    if(rel    >    GOLDEN_SECTION)    {    throw    new    NumberIsTooSmallException(rel,    relativeThreshold,    true);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
41	[BUG]  [BUGGY]  absoluteThreshold  =  Math.abs(relativeThreshold,  rel);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;      [BUGGY]  absoluteThreshold  =  Math.abs(relativeThreshold,  rel);  [BUGGY]        [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	92	92	1	replace	absoluteThreshold  =  Math.abs(relativeThreshold,  rel);	  absoluteThreshold    =    Math.abs(relativeThreshold);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
42	[BUG]  [BUGGY]  rel  <  =  relativeThreshold)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  relativeThreshold,  false);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;      [BUGGY]  rel  <  =  relativeThreshold)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  relativeThreshold,  false);  }  [BUGGY]      }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	92	92	1	replace	rel  <  =  relativeThreshold)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  relativeThreshold,  false);  }	  rel    <    =    absoluteThreshold)    {    if(rel    >    GOLDEN_SECTION)    {    throw    new    NumberIsTooSmallException(rel,    relativeThreshold,    false);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
