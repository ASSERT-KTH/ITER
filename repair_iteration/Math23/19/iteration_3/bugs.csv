bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  luate(rel,  checker,  absoluteThreshold);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }      [BUGGY]  luate(rel,  checker,  absoluteThreshold);  [BUGGY]      if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	86	86	1	replace	luate(rel,  checker,  absoluteThreshold);	  luate(rel,    checker);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
2	[BUG]  [BUGGY]  luate(rel,  checker,  abs);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }      [BUGGY]  luate(rel,  checker,  abs);  [BUGGY]      if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	86	86	1	replace	luate(rel,  checker,  abs);	  luate(rel,    checker);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
3	[BUG]  [BUGGY]  (rel  <  =  GOLDEN_SECTION)||(rel  >  GOLDEN_SECTION))  {  throw  new  NotStrictlyPositiveException(rel,  rel);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }      [BUGGY]  (rel  <  =  GOLDEN_SECTION)||(rel  >  GOLDEN_SECTION))  {  throw  new  NotStrictlyPositiveException(rel,  rel);  }  [BUGGY]      if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	86	86	1	replace	(rel  <  =  GOLDEN_SECTION)||(rel  >  GOLDEN_SECTION))  {  throw  new  NotStrictlyPositiveException(rel,  rel);  }	  rel    <    =    GOLDEN_SECTION)    {    if(rel    >    GOLDEN_SECTION)    {    throw    new    NotStrictlyPositiveException(rel,    rel);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
4	[BUG]  [BUGGY]  if(rel  <  0  ||  rel  >  absoluteThreshold)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }      [BUGGY]  if(rel  <  0  ||  rel  >  absoluteThreshold)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	86	86	1	replace	if(rel  <  0  ||  rel  >  absoluteThreshold)  {	  if    (rel    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
5	[BUG]  [BUGGY]  ConvergenceChecker  <  Object>  checker  =  checker.getValue();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }      [BUGGY]  ConvergenceChecker  <  Object>  checker  =  checker.getValue();  [BUGGY]      if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	86	86	1	replace	ConvergenceChecker  <  Object>  checker  =  checker.getValue();	  ConvergenceChecker    <    Object>    checker    =    checker.getValuePair();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
6	[BUG]  [BUGGY]  AnnotationInfo  info  =  getAnnotationInfo(rel,  checker);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }      [BUGGY]  AnnotationInfo  info  =  getAnnotationInfo(rel,  checker);  [BUGGY]      if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	86	86	1	replace	AnnotationInfo  info  =  getAnnotationInfo(rel,  checker);	  AnnotationInfo    info    =    getAnnotationInfo(rel);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
7	[BUG]  [BUGGY]  if(rel  <  =  0  ||  absoluteThreshold  >  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }      [BUGGY]  if(rel  <  =  0  ||  absoluteThreshold  >  0)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	86	86	1	replace	if(rel  <  =  0  ||  absoluteThreshold  >  0)  {	  if(rel    <    =    0    ||    absoluteThreshold    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
8	[BUG]  [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  &&  RelUtil.isRelative(rel);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }      [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  &&  RelUtil.isRelative(rel);  [BUGGY]      if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	86	86	1	replace	ConvergenceChecker  <  GOLDEN_SECTION  &&  RelUtil.isRelative(rel);	  ConvergenceChecker    <    GOLDEN_SECTION    ||    RelUtil.isRelative(rel);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
9	[BUG]  [BUGGY]  RelativePointValuePair  absoluteThreshold  =  checker.getRelativePointValuePair(rel,  rel);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }      [BUGGY]  RelativePointValuePair  absoluteThreshold  =  checker.getRelativePointValuePair(rel,  rel);  [BUGGY]      if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	86	86	1	replace	RelativePointValuePair  absoluteThreshold  =  checker.getRelativePointValuePair(rel,  rel);	  RelativePointValuePair    absoluteThreshold    =    checker.getRelativePointValuePair(rel);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
10	[BUG]  [BUGGY]  rel  <  =  GOLDEN_SECTION)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }      [BUGGY]  rel  <  =  GOLDEN_SECTION)  {  [BUGGY]      if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	86	86	1	replace	rel  <  =  GOLDEN_SECTION)  {	  rel    <    =    GOLDEN_SECTION)    {    if(rel    >=    GOLDEN_SECTION)    {    throw    new    NotStrictlyPositiveException(rel,    rel);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
11	[BUG]  [BUGGY]  ConvergenceChecker  <  Object>  checker  =  checker.setOptimizer(this);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }      [BUGGY]  ConvergenceChecker  <  Object>  checker  =  checker.setOptimizer(this);  [BUGGY]      if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	86	86	1	replace	ConvergenceChecker  <  Object>  checker  =  checker.setOptimizer(this);	  ConvergenceChecker    <    Object>    checker    =    checker.setOptimizer(null);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
12	[BUG]  [BUGGY]  ConvergenceChecker  <  Object>  absoluteThreshold  =  checker.getRelativeThreshold(rel,  rel);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }      [BUGGY]  ConvergenceChecker  <  Object>  absoluteThreshold  =  checker.getRelativeThreshold(rel,  rel);  [BUGGY]      if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	86	86	1	replace	ConvergenceChecker  <  Object>  absoluteThreshold  =  checker.getRelativeThreshold(rel,  rel);	  ConvergenceChecker    <    Object>    absoluteThreshold    =    checker.getRelativeThreshold(rel);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
13	[BUG]  [BUGGY]  if(rel  <  absoluteThreshold)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }      [BUGGY]  if(rel  <  absoluteThreshold)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	86	86	1	replace	if(rel  <  absoluteThreshold)  {	  if(rel    <    =    absoluteThreshold)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
14	[BUG]  [BUGGY]  luate(rel,  abs,  checker);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }      [BUGGY]  luate(rel,  abs,  checker);  [BUGGY]      if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	86	86	1	replace	luate(rel,  abs,  checker);	  luate(rel,    abs);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
15	[BUG]  [BUGGY]  luate(rel,  absoluteThreshold,  abs);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }      [BUGGY]  luate(rel,  absoluteThreshold,  abs);  [BUGGY]      if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	86	86	1	replace	luate(rel,  absoluteThreshold,  abs);	  luate(rel,    abs);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
16	[BUG]  [BUGGY]  rel  =  checker;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }      [BUGGY]  rel  =  checker;  [BUGGY]      if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	86	86	1	replace	rel  =  checker;	  rel    =    rel;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
17	[BUG]  [BUGGY]  rel  =  abs;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }      [BUGGY]  rel  =  abs;  [BUGGY]      if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	86	86	1	replace	rel  =  abs;	  rel    =    rel;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
18	[BUG]  [BUGGY]  RelativePointValuePair  absoluteThreshold  =  checker.getRelativePointValuePair(),  rel,  relativeThreshold;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }      [BUGGY]  RelativePointValuePair  absoluteThreshold  =  checker.getRelativePointValuePair(),  rel,  relativeThreshold;  [BUGGY]      if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	86	86	1	replace	RelativePointValuePair  absoluteThreshold  =  checker.getRelativePointValuePair(),  rel,  relativeThreshold;	  RelativePointValuePair    absoluteThreshold    =    checker.getRelativePointValuePair(),    rel;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
19	[BUG]  [BUGGY]  luate(rel,  rel,  checker);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }      [BUGGY]  luate(rel,  rel,  checker);  [BUGGY]      if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	86	86	1	replace	luate(rel,  rel,  checker);	  luate(rel,    rel);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
20	[BUG]  [BUGGY]  Annotations.checkState(rel  <  =  GOLDEN_SECTION,  rel);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }      [BUGGY]  Annotations.checkState(rel  <  =  GOLDEN_SECTION,  rel);  [BUGGY]      if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	86	86	1	replace	Annotations.checkState(rel  <  =  GOLDEN_SECTION,  rel);	  Annotations.checkState(rel    <    =    GOLDEN_SECTION);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
21	[BUG]  [BUGGY]  RelativePointValuePair  absoluteThreshold  =  checker.getRelativePointValuePair(),  rel  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }      [BUGGY]  RelativePointValuePair  absoluteThreshold  =  checker.getRelativePointValuePair(),  rel  +  1;  [BUGGY]      if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	86	86	1	replace	RelativePointValuePair  absoluteThreshold  =  checker.getRelativePointValuePair(),  rel  +  1;	  RelativePointValuePair    absoluteThreshold    =    checker.getRelativePointValuePair(),    rel;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
22	[BUG]  [BUGGY]  rel  <  =  GOLDEN_SECTION)  {  if(rel  >  GOLDEN_RELATIVE_TOLERANCE)  {  throw  new  NotStrictlyPositiveException(rel,  rel);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }      [BUGGY]  rel  <  =  GOLDEN_SECTION)  {  if(rel  >  GOLDEN_RELATIVE_TOLERANCE)  {  throw  new  NotStrictlyPositiveException(rel,  rel);  }  [BUGGY]      if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	86	86	1	replace	rel  <  =  GOLDEN_SECTION)  {  if(rel  >  GOLDEN_RELATIVE_TOLERANCE)  {  throw  new  NotStrictlyPositiveException(rel,  rel);  }	  rel    <    =    GOLDEN_SECTION)    {    if(rel    >    GOLDEN_SECTION)    {    throw    new    NotStrictlyPositiveException(rel,    rel);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
23	[BUG]  [BUGGY]  luate(rel,  Checker.DEFAULT_RELATIVE_TOLERANCE);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }      [BUGGY]  luate(rel,  Checker.DEFAULT_RELATIVE_TOLERANCE);  [BUGGY]      if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	86	86	1	replace	luate(rel,  Checker.DEFAULT_RELATIVE_TOLERANCE);	  luate(rel,    rel);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
24	[BUG]  [BUGGY]  rel  -=  rel;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }      [BUGGY]  rel  -=  rel;  [BUGGY]      if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	86	86	1	replace	rel  -=  rel;	  rel    =    rel;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
25	[BUG]  [BUGGY]  if(rel  <  0  ||  absoluteThreshold  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }      [BUGGY]  if(rel  <  0  ||  absoluteThreshold  <  =  0)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	86	86	1	replace	if(rel  <  0  ||  absoluteThreshold  <  =  0)  {	  if(rel    <    =    0    ||    absoluteThreshold    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
26	[BUG]  [BUGGY]  ConvergenceChecker  <  Object>  checker  =  checker.setOptimizer(null,  rel);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }      [BUGGY]  ConvergenceChecker  <  Object>  checker  =  checker.setOptimizer(null,  rel);  [BUGGY]      if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	86	86	1	replace	ConvergenceChecker  <  Object>  checker  =  checker.setOptimizer(null,  rel);	  ConvergenceChecker    <    Object>    checker    =    checker.setOptimizer(null);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
27	[BUG]  [BUGGY]  rel  <  =  GOLDEN_SECTION)  {  throw  new  NotStrictlyPositiveException(rel,  rel);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }      [BUGGY]  rel  <  =  GOLDEN_SECTION)  {  throw  new  NotStrictlyPositiveException(rel,  rel);  }  [BUGGY]      if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	86	86	1	replace	rel  <  =  GOLDEN_SECTION)  {  throw  new  NotStrictlyPositiveException(rel,  rel);  }	  rel    <    =    GOLDEN_SECTION)    {    if(rel    >    GOLDEN_SECTION)    {    throw    new    NotStrictlyPositiveException(rel,    rel);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
