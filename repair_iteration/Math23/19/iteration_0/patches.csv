bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    ConvergenceChecker  <  Object>  checker  =  checker.getOptimizer();  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  [BUGGY]    ConvergenceChecker  <  Object>  checker  =  checker.getOptimizer();  [BUGGY]  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	86	86	1	replace	    ConvergenceChecker  <  Object>  checker  =  checker.getOptimizer();		non-compiled	[CE]  illegal  start  of  expression	38	None	add
2	[BUG]  [BUGGY]    ConvergenceChecker  <  GOLDEN_SECTION  ||  checker.isOptional();  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  [BUGGY]    ConvergenceChecker  <  GOLDEN_SECTION  ||  checker.isOptional();  [BUGGY]  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	86	86	1	replace	    ConvergenceChecker  <  GOLDEN_SECTION  ||  checker.isOptional();		non-compiled	[CE]  illegal  start  of  expression	38	None	add
3	[BUG]  [BUGGY]    ConvergenceChecker  <  GOLDEN_SECTION  ||  checker.isOptimizer();  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  [BUGGY]    ConvergenceChecker  <  GOLDEN_SECTION  ||  checker.isOptimizer();  [BUGGY]  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	86	86	1	replace	    ConvergenceChecker  <  GOLDEN_SECTION  ||  checker.isOptimizer();		non-compiled	[CE]  illegal  start  of  expression	38	None	add
4	[BUG]  [BUGGY]  if  (rel  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  [BUGGY]  if  (rel  <  =  0)  {  [BUGGY]  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	86	86	1	replace	if  (rel  <  =  0)  {	if  (abs  <=  0)  {  	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
5	[BUG]  [BUGGY]    ConvergenceChecker  <  GOLDEN_SECTION  ||  checker  ==  GOLDEN_SECTION);  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  [BUGGY]    ConvergenceChecker  <  GOLDEN_SECTION  ||  checker  ==  GOLDEN_SECTION);  [BUGGY]  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	86	86	1	replace	    ConvergenceChecker  <  GOLDEN_SECTION  ||  checker  ==  GOLDEN_SECTION);		non-compiled	[CE]  illegal  start  of  expression	38	None	add
6	[BUG]  [BUGGY]    ConvergenceChecker  <  Object>  absoluteThreshold  =  checker.getRelativeThreshold();  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  [BUGGY]    ConvergenceChecker  <  Object>  absoluteThreshold  =  checker.getRelativeThreshold();  [BUGGY]  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	86	86	1	replace	    ConvergenceChecker  <  Object>  absoluteThreshold  =  checker.getRelativeThreshold();		non-compiled	[CE]  illegal  start  of  expression	38	None	add
7	[BUG]  [BUGGY]    ConvergenceChecker  <  GOLDEN_SECTION  ||  checker  ==  GOLDEN_SECTION;  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  [BUGGY]    ConvergenceChecker  <  GOLDEN_SECTION  ||  checker  ==  GOLDEN_SECTION;  [BUGGY]  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	86	86	1	replace	    ConvergenceChecker  <  GOLDEN_SECTION  ||  checker  ==  GOLDEN_SECTION;		non-compiled	[CE]  illegal  start  of  expression	38	None	add
8	[BUG]  [BUGGY]    if(rel  <  =  GOLDEN_SECTION)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NotStrictlyPositiveException(rel);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  [BUGGY]    if(rel  <  =  GOLDEN_SECTION)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NotStrictlyPositiveException(rel);  }  [BUGGY]  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	86	86	1	replace	    if(rel  <  =  GOLDEN_SECTION)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NotStrictlyPositiveException(rel);  }		non-compiled	[CE]  illegal  start  of  expression	38	None	add
9	[BUG]  [BUGGY]    RelativePointValuePair  absoluteThreshold  =  checker.getRelativePointValuePair();  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  [BUGGY]    RelativePointValuePair  absoluteThreshold  =  checker.getRelativePointValuePair();  [BUGGY]  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	86	86	1	replace	    RelativePointValuePair  absoluteThreshold  =  checker.getRelativePointValuePair();		non-compiled	[CE]  illegal  start  of  expression	38	None	add
10	[BUG]  [BUGGY]    if(rel  <  =  GOLDEN_SECTION)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NotStrictlyPositiveException(rel,  rel);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  [BUGGY]    if(rel  <  =  GOLDEN_SECTION)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NotStrictlyPositiveException(rel,  rel);  }  [BUGGY]  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	86	86	1	replace	    if(rel  <  =  GOLDEN_SECTION)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NotStrictlyPositiveException(rel,  rel);  }		non-compiled	[CE]  illegal  start  of  expression	38	None	add
