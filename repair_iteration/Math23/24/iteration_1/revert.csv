projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java52privatestaticfinaldoubleMIN_RELATIVE_TOLERANCE=2*FastMath.ulp(1d);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java52privatestaticfinaldoubleMIN_RELATIVE_TOLERANCE=1d*FastMath.ulp(2d);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java52privatestaticfinaldoubleMIN_RELATIVE_TOLERANCE=2*FastMath.max(1d,1d);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java52
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java52if(isOptimizer()){for(inti=1;i<=10;i++){returnMIN_RELATIVE_TOLERANCE*FastMath.ulp(i);}
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java52if(isOptimizer()){for(inti=1;i<=10;i++){returnMIN_RELATIVE_TOLERANCE*FastMath.sqrt(i);}
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java52if(isOptimizer()){for(inti=1;i<=10;i++){returnMIN_RELATIVE_TOLERANCE;}
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java52Validate.notNull(getOptimizer());
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java52Validate.notEmpty(getOptimizer());
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java52Validate.notNull(this);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java52privatestaticfinaldoubleMIN_RELATIVE_TOLERANCE=1d*FastMath.ulp(1d);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java52privatestaticfinaldoubleMIN_RELATIVE_TOLERANCE=2*FastMath.log(1d);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java52Validate.notNull(getValue());
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java52safeMultiply(FieldUtils.safeMultiply(getValue()));
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java52privatestaticfinaldoubleMIN_RELATIVE_TOLERANCE=2*FastMath.max(1,1d);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java52Validate.notEmpty(getValue());
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java52privatestaticfinaldoubleMIN_RELATIVE_TOLERANCE=1d/FastMath.ulp(1d);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java52privatestaticfinaldoubleMIN_RELATIVE_TOLERANCE=2d*FastMath.ulp(1d);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java52AssertionError.warning("JavaOptimizer.startoftype");
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java52AssertionError.warning("JavaOptimizer.startoftype:"+getName());
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java52privatestaticfinaldoubleMIN_RELATIVE_TOLERANCE=1*FastMath.log(1d);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java52privatestaticfinaldoubleMIN_RELATIVE_TOLERANCE=1d*FastMath.log(1d);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java52Validate.notEmpty(this);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java52safeMultiply(Factory.ulp(1d));
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java52privatestaticfinaldoubleMIN_RELATIVE_TOLERANCE=2d*FastMath.ulp(2d);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java52privatestaticfinaldoubleMIN_RELATIVE_TOLERANCE=1d/FastMath.ulp(2d);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java52safeMultiply(getOptimizer()){for(inti=1;i<10;i++){returnMIN_RELATIVE_TOLERANCE*FastMath.ulp(i);}
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java52privatestaticfinaldoubleMIN_RELATIVE_TOLERANCE=1d*FastMath.min(1d,2);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java52AssertionError.warning("msg.end-of.type",Arrays.asList(values));
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java52AssertionError.warning("NonOptimizer.startoftype",Arrays.asList(values));
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java52safeMultiply(FieldUtils.safeMultiply(getOptimizer())){for(inti=1;i<10;i++){returnMIN_RELATIVE_TOLERANCE*FastMath.sqrt
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java52privatestaticfinaldoubleMIN_RELATIVE_TOLERANCE=FastMath.log(1d);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java52AssertionError.checkState(isOptimizer());
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java52if(type==AssertionError.NON_SYNTHETIC){returnnull;}
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java52if(type==AssertionError.NON_SYNTHETIC){returnnull;}else{thrownewIllegalArgumentException("Optimizerisnotanobjecttype.");}
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java52privatestaticfinaldoubleMIN_RELATIVE_TOLERANCE=1d*FastMath.max(1d,1d);
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java52AssertionError<1||isOptimizer()){for(inti=1;i<10;i++){returnMIN_RELATIVE_TOLERANCE*FastMath.ulp(i);}
projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java52AssertionError.warning("msg.illegal.character");
