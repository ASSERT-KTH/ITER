bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  rel  =  checker.doubleValue()  /  abs;  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);      [BUGGY]  rel  =  checker.doubleValue()  /  abs;  [BUGGY]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	83	83	1	replace	rel  =  checker.doubleValue()  /  abs;	  rel    =    checker.doubleValue()    +    abs;    	non-compiled	[CE]  >  expected	8	None	replace
2	[BUG]  [BUGGY]  rel  =  checker.doubleValue()  *  abs;  [CE]  >  expected  [FE]                AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);      [BUGGY]  rel  =  checker.doubleValue()  *  abs;  [BUGGY]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	83	83	1	replace	rel  =  checker.doubleValue()  *  abs;	  rel    =    checker.doubleValue()    +    abs;    	non-compiled	[CE]  >  expected	8	None	replace
3	[BUG]  [BUGGY]  RelativeThreshold  rel  =  checker.getRelativeThreshold(rel,  abs);  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);      [BUGGY]  RelativeThreshold  rel  =  checker.getRelativeThreshold(rel,  abs);  [BUGGY]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	83	83	1	replace	RelativeThreshold  rel  =  checker.getRelativeThreshold(rel,  abs);	  RelativeThreshold    rel    =    checker.getRelativeThreshold(rel);    	non-compiled	[CE]  >  expected	7	None	replace
4	[BUG]  [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION,  false,  rel);  [CE]  >  expected  [FE]                AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);      [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION,  false,  rel);  [BUGGY]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	83	83	1	replace	ConvergenceChecker  <  GOLDEN_SECTION,  false,  rel);	  ConvergenceChecker    <    GOLDEN_SECTION,    false);    	non-compiled	[CE]  >  expected	2	None	replace
5	[BUG]  [BUGGY]  rel  -=  rel.doubleValue();  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);      [BUGGY]  rel  -=  rel.doubleValue();  [BUGGY]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	83	83	1	replace	rel  -=  rel.doubleValue();	  rel    -=    checker.doubleValue();    	non-compiled	[CE]  >  expected	13	None	replace
6	[BUG]  [BUGGY]  double  absoluteThreshold  =  checker.doubleValue()  +  1;  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);      [BUGGY]  double  absoluteThreshold  =  checker.doubleValue()  +  1;  [BUGGY]      throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	83	83	1	replace	double  absoluteThreshold  =  checker.doubleValue()  +  1;	  double    absoluteThreshold    =    checker.doubleValue();    	non-compiled	[CE]  >  expected	11	None	replace
7	[BUG]  [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getGOLDEN_SECTION();  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);      [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getGOLDEN_SECTION();  [BUGGY]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	83	83	1	replace	ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getGOLDEN_SECTION();	  ConvergenceChecker    <    GOLDEN_SECTION    =    checker.getPartialValue();    	non-compiled	[CE]  >  expected	9	None	replace
8	[BUG]  [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.next();  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);      [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.next();  [BUGGY]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	83	83	1	replace	ConvergenceChecker  <  GOLDEN_SECTION  =  checker.next();	  ConvergenceChecker    <    GOLDEN_SECTION    =    checker.clone();    	non-compiled	[CE]  >  expected	12	None	replace
9	[BUG]  [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION,  true,  rel,  abs);  [CE]  >  expected  [FE]                  AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);      [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION,  true,  rel,  abs);  [BUGGY]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	83	83	1	replace	ConvergenceChecker  <  GOLDEN_SECTION,  true,  rel,  abs);	  ConvergenceChecker    <    GOLDEN_SECTION,    true,    rel);    	non-compiled	[CE]  >  expected	3	None	replace
10	[BUG]  [BUGGY]  if(rel  <  MIN_RELATIVE_TOLERANCE  ||  rel  >  MIN_RELATIVE_TOLERANCE)  {  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);      [BUGGY]  if(rel  <  MIN_RELATIVE_TOLERANCE  ||  rel  >  MIN_RELATIVE_TOLERANCE)  {  [BUGGY]      throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	83	83	1	replace	if(rel  <  MIN_RELATIVE_TOLERANCE  ||  rel  >  MIN_RELATIVE_TOLERANCE)  {	  if(rel    <    =    MIN_RELATIVE_TOLERANCE    ||    rel    >    MIN_RELATIVE_TOLERANCE)    {    	non-compiled	[CE]  >  expected	10	None	replace
11	[BUG]  [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  :  checker.setValue(rel);  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);      [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  :  checker.setValue(rel);  [BUGGY]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	83	83	1	replace	ConvergenceChecker  <  GOLDEN_SECTION  :  checker.setValue(rel);	  ConvergenceChecker    <    GOLDEN_SECTION    :    checker.getValue();    	non-compiled	[CE]  >  expected	6	None	replace
12	[BUG]  [BUGGY]  if(rel  <  =  GOLDEN_SECTION)  {  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);      [BUGGY]  if(rel  <  =  GOLDEN_SECTION)  {  [BUGGY]      throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	83	83	1	replace	if(rel  <  =  GOLDEN_SECTION)  {	  if(rel    <    =    absoluteThreshold)    {    	non-compiled	[CE]  >  expected	1	None	replace
13	[BUG]  [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION,  null,  rel);  [CE]  >  expected  [FE]                  AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);      [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION,  null,  rel);  [BUGGY]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	83	83	1	replace	ConvergenceChecker  <  GOLDEN_SECTION,  null,  rel);	  ConvergenceChecker    <    GOLDEN_SECTION,    true,    rel);    	non-compiled	[CE]  >  expected	3	None	replace
14	[BUG]  [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.doubleValue();  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);      [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.doubleValue();  [BUGGY]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	83	83	1	replace	ConvergenceChecker  <  GOLDEN_SECTION  =  checker.doubleValue();	  ConvergenceChecker    <    GOLDEN_SECTION    =    checker.clone();    	non-compiled	[CE]  >  expected	12	None	replace
15	[BUG]  [BUGGY]  rel  -=  abs.doubleValue();  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);      [BUGGY]  rel  -=  abs.doubleValue();  [BUGGY]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	83	83	1	replace	rel  -=  abs.doubleValue();	  rel    -=    checker.doubleValue();    	non-compiled	[CE]  >  expected	13	None	replace
16	[BUG]  [BUGGY]  if(rel  <  absoluteThreshold)  {  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);      [BUGGY]  if(rel  <  absoluteThreshold)  {  [BUGGY]      throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	83	83	1	replace	if(rel  <  absoluteThreshold)  {	  if(rel    <    =    absoluteThreshold)    {    	non-compiled	[CE]  >  expected	1	None	replace
17	[BUG]  [BUGGY]  double  absoluteThreshold  =  checker.doubleValue()  +  abs;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);      [BUGGY]  double  absoluteThreshold  =  checker.doubleValue()  +  abs;  [BUGGY]      throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	83	83	1	replace	double  absoluteThreshold  =  checker.doubleValue()  +  abs;	  double    absoluteThreshold    =    checker.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
18	[BUG]  [BUGGY]  if(rel  <  =  MIN_RELATIVE_TOLERANCE  ||  rel  >  MAX_RELATIVE_TOLERANCE)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);      [BUGGY]  if(rel  <  =  MIN_RELATIVE_TOLERANCE  ||  rel  >  MAX_RELATIVE_TOLERANCE)  {  [BUGGY]      throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	83	83	1	replace	if(rel  <  =  MIN_RELATIVE_TOLERANCE  ||  rel  >  MAX_RELATIVE_TOLERANCE)  {	  if(rel    <    =    MIN_RELATIVE_TOLERANCE    ||    rel    >    MIN_RELATIVE_TOLERANCE)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
19	[BUG]  [BUGGY]  RelativeThreshold  rel  =  checker.getRelativeThreshold(rel,  absoluteThreshold);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);      [BUGGY]  RelativeThreshold  rel  =  checker.getRelativeThreshold(rel,  absoluteThreshold);  [BUGGY]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	83	83	1	replace	RelativeThreshold  rel  =  checker.getRelativeThreshold(rel,  absoluteThreshold);	  RelativeThreshold    rel    =    checker.getRelativeThreshold(rel);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
20	[BUG]  [BUGGY]  rel  -=  checker.doubleValue()  +  abs;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);      [BUGGY]  rel  -=  checker.doubleValue()  +  abs;  [BUGGY]      if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	83	83	1	replace	rel  -=  checker.doubleValue()  +  abs;	  rel    -=    checker.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
