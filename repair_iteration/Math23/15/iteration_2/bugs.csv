bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ((  UnivariatePointValuePair)current).isMinimum();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).    [BUGGY]  ((  UnivariatePointValuePair)current).isMinimum();  [BUGGY]    return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	((  UnivariatePointValuePair)current).isMinimum();	      ((    UnivariatePointValuePair)current).relativeThreshold    =    true;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
2	[BUG]  [BUGGY]  ((  UnivariatePointValuePair)current).intermediateThreshold();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).    [BUGGY]  ((  UnivariatePointValuePair)current).intermediateThreshold();  [BUGGY]    return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	((  UnivariatePointValuePair)current).intermediateThreshold();	      ((    UnivariatePointValuePair)current).relativeThreshold();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
3	[BUG]  [BUGGY]  ((  UnivariatePointValuePair)current).relativeThreshold  -=  false;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).    [BUGGY]  ((  UnivariatePointValuePair)current).relativeThreshold  -=  false;  [BUGGY]    return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	((  UnivariatePointValuePair)current).relativeThreshold  -=  false;	      ((    UnivariatePointValuePair)current).relativeThreshold    =    false;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
4	[BUG]  [BUGGY]  ConvergenceChecker  checker  =  getConvergenceChecker();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).    [BUGGY]  ConvergenceChecker  checker  =  getConvergenceChecker();  [BUGGY]    return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	ConvergenceChecker  checker  =  getConvergenceChecker();	      if(isMinim)    {    for(int    i    =    0,    isMinim    =    0;    i    <    isMinim;    i++)    {    v    =    fx;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
5	[BUG]  [BUGGY]  ConvergenceChecker.checkState(isMinim);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).    [BUGGY]  ConvergenceChecker.checkState(isMinim);  [BUGGY]    return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	ConvergenceChecker.checkState(isMinim);	      if(isMinim)    {    for(int    i    =    0,    isMinim    =    0;    i    <    isMinim;    i++)    {    v    =    fx;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
6	[BUG]  [BUGGY]  luate(iterator.next());  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).    [BUGGY]  luate(iterator.next());  [BUGGY]    return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	luate(iterator.next());	      if(isMinim)    {    for(int    i    =    0,    isIterator    =    0;    i    <    isIterator.next();    i++)    {    current    =    new    UnivariatePointValuePair(x,    iterator.next());    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
7	[BUG]  [BUGGY]  luate(iterator,  isIterator);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).    [BUGGY]  luate(iterator,  isIterator);  [BUGGY]    return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	luate(iterator,  isIterator);	      if(isMinim)    {    for(int    i    =    0,    isIterator    =    0;    i    <    isIterator.next();    i++)    {    current    =    new    UnivariatePointValuePair(x,    iterator.next());    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
8	[BUG]  [BUGGY]  bucket(!stop)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).    [BUGGY]  bucket(!stop)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	bucket(!stop)  {  throw  new  IllegalArgumentException( " ");  }	      if(isMinim)    {    if(!stop)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
9	[BUG]  [BUGGY]  vice.checkState(isMinim);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).    [BUGGY]  vice.checkState(isMinim);  [BUGGY]    return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	vice.checkState(isMinim);	      if(isMinim)    {    if(!stop)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
10	[BUG]  [BUGGY]  return  best(current,  w,  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).    [BUGGY]  return  best(current,  w,  [BUGGY]    best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	return  best(current,  w,	  return    best(current,    v,    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
11	[BUG]  [BUGGY]  return  best(current,  fw,  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).    [BUGGY]  return  best(current,  fw,  [BUGGY]    best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	return  best(current,  fw,	  return    best(current,    v,    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
12	[BUG]  [BUGGY]  return  best(current,  isMinim,  v,  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).    [BUGGY]  return  best(current,  isMinim,  v,  [BUGGY]    best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	return  best(current,  isMinim,  v,	  return    best(current,    isMinim,    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
13	[BUG]  [BUGGY]  luate(iterator.next(),  current);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).    [BUGGY]  luate(iterator.next(),  current);  [BUGGY]    return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	luate(iterator.next(),  current);	      if(isMinim)    {    for(int    i    =    0,    isIterator    =    0;    i    <    isIterator.next();    i++)    {    current    =    new    UnivariatePointValuePair(i,    iterator.next());    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
14	[BUG]  [BUGGY]  safeThan  <  =  false)  {  if(!stop)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).    [BUGGY]  safeThan  <  =  false)  {  if(!stop)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	safeThan  <  =  false)  {  if(!stop)  {  throw  new  IllegalArgumentException( " ");  }	      if(isMinim)    {    if(!stop)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
15	[BUG]  [BUGGY]  luate(current,  w)  {  if(!stop)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).    [BUGGY]  luate(current,  w)  {  if(!stop)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	luate(current,  w)  {  if(!stop)  {  throw  new  IllegalArgumentException( " ");  }	      if(isMinim)    {    if(!stop)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
16	[BUG]  [BUGGY]  Integer  current  =  getIterator(iterator);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).    [BUGGY]  Integer  current  =  getIterator(iterator);  [BUGGY]    return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	Integer  current  =  getIterator(iterator);	      if(isMinim)    {    for(int    i    =    0,    isIterator    =    0;    i    <    iterator;    i++)    {    v    =    fx;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
17	[BUG]  [BUGGY]  Integer  current  =  getIterator();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).    [BUGGY]  Integer  current  =  getIterator();  [BUGGY]    return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	Integer  current  =  getIterator();	      if(isMinim)    {    for(int    i    =    0,    isIterator    =    0;    i    <    iterator;    i++)    {    v    =    fx;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
18	[BUG]  [BUGGY]  luate(iterator,  w);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).    [BUGGY]  luate(iterator,  w);  [BUGGY]    return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	luate(iterator,  w);	      if(isMinim)    {    for(int    i    =    0,    isIterator    =    0;    i    <    isIterator.next();    i++)    {    current    =    new    UnivariatePointValuePair(i,    iterator.next());    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
19	[BUG]  [BUGGY]  luate(iterator,  w,  current);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).    [BUGGY]  luate(iterator,  w,  current);  [BUGGY]    return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	luate(iterator,  w,  current);	      if(isMinim)    {    for(int    i    =    0,    isIterator    =    0;    i    <    isIterator.next();    i++)    {    current    =    new    UnivariatePointValuePair(i,    iterator.next());    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
20	[BUG]  [BUGGY]  luate(x,  iterator.next());  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).    [BUGGY]  luate(x,  iterator.next());  [BUGGY]    return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	luate(x,  iterator.next());	      if(isMinim)    {    for(int    i    =    0,    isIterator    =    0;    i    <    isIterator.next();    i++)    {    current    =    new    UnivariatePointValuePair(x,    iterator.next());    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
21	[BUG]  [BUGGY]  ((  UnivariatePointValuePair)current).checker.relativeThreshold();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).    [BUGGY]  ((  UnivariatePointValuePair)current).checker.relativeThreshold();  [BUGGY]    return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	((  UnivariatePointValuePair)current).checker.relativeThreshold();	      ((    UnivariatePointValuePair)current).relativeThreshold();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
22	[BUG]  [BUGGY]  luate(current,  x,  isIterator);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).    [BUGGY]  luate(current,  x,  isIterator);  [BUGGY]    return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	luate(current,  x,  isIterator);	      if(isMinim)    {    for(int    i    =    0,    isIterator    =    0;    i    <    isIterator.next();    i++)    {    current    =    new    UnivariatePointValuePair(i);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
23	[BUG]  [BUGGY]  luate(current,  x,  w);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).    [BUGGY]  luate(current,  x,  w);  [BUGGY]    return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	luate(current,  x,  w);	      if(isMinim)    {    for(int    i    =    0,    isIterator    =    0;    i    <    isIterator.next();    i++)    {    current    =    new    UnivariatePointValuePair(i);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
24	[BUG]  [BUGGY]  luate(current,  w))  {  for(int  i  =  0,  isMinim  =  0;  i  <  isMinim;  i++)  {  v  =  fx;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).    [BUGGY]  luate(current,  w))  {  for(int  i  =  0,  isMinim  =  0;  i  <  isMinim;  i++)  {  v  =  fx;  }  [BUGGY]    return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	luate(current,  w))  {  for(int  i  =  0,  isMinim  =  0;  i  <  isMinim;  i++)  {  v  =  fx;  }	      if(isMinim)    {    for(int    i    =    0,    isMinim    =    0;    i    <    isMinim;    i++)    {    v    =    fx;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
25	[BUG]  [BUGGY]  luate(current,  w)  {  for(int  i  =  0,  isMinim  =  0;  i  <  isMinim;  i++)  {  v  =  fx;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).    [BUGGY]  luate(current,  w)  {  for(int  i  =  0,  isMinim  =  0;  i  <  isMinim;  i++)  {  v  =  fx;  }  [BUGGY]    return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	luate(current,  w)  {  for(int  i  =  0,  isMinim  =  0;  i  <  isMinim;  i++)  {  v  =  fx;  }	      if(isMinim)    {    for(int    i    =    0,    isMinim    =    0;    i    <    isMinim;    i++)    {    v    =    fx;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
26	[BUG]  [BUGGY]  return  best(current,  stop,  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).    [BUGGY]  return  best(current,  stop,  [BUGGY]    best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	return  best(current,  stop,	  return    best(current,    isMinim,    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
27	[BUG]  [BUGGY]  ((  UnivariatePointValuePair)current).expireThreshold  =  false;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).    [BUGGY]  ((  UnivariatePointValuePair)current).expireThreshold  =  false;  [BUGGY]    return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	((  UnivariatePointValuePair)current).expireThreshold  =  false;	      ((    UnivariatePointValuePair)current).relativeThreshold    =    false;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
28	[BUG]  [BUGGY]  RectangleEdge  current  =  new  RectangleEdge(iterator.next());  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).    [BUGGY]  RectangleEdge  current  =  new  RectangleEdge(iterator.next());  [BUGGY]    return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	RectangleEdge  current  =  new  RectangleEdge(iterator.next());	      if(isMinim)    {    for(int    i    =    0,    isIterator    =    0;    i    <    isIterator.next();    i++)    {    current    =    new    UnivariatePointValuePair(i,    iterator.next());    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
29	[BUG]  [BUGGY]  RectangleEdge  current  =  getIterator(iterator.next());  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).    [BUGGY]  RectangleEdge  current  =  getIterator(iterator.next());  [BUGGY]    return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	RectangleEdge  current  =  getIterator(iterator.next());	      if(isMinim)    {    for(int    i    =    0,    isIterator    =    0;    i    <    isIterator.next();    i++)    {    current    =    new    UnivariatePointValuePair(i,    iterator.next());    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
30	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).    [BUGGY]  [Delete]  [BUGGY]    return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	[Delete]	      if(isMinim)    {    if(!stop)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
31	[BUG]  [BUGGY]  RectangleEdge  current  =  new  RectangleEdge();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).    [BUGGY]  RectangleEdge  current  =  new  RectangleEdge();  [BUGGY]    return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	RectangleEdge  current  =  new  RectangleEdge();	      if(isMinim)    {    for(int    i    =    0,    isIterator    =    0;    i    <    isIterator.next();    i++)    {    current    =    new    UnivariatePointValuePair(i);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
32	[BUG]  [BUGGY]  RectangleEdge  current  =  new  RectangleEdge(1.0,  1.0,  1.0);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).    [BUGGY]  RectangleEdge  current  =  new  RectangleEdge(1.0,  1.0,  1.0);  [BUGGY]    return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	RectangleEdge  current  =  new  RectangleEdge(1.0,  1.0,  1.0);	      if(isMinim)    {    for(int    i    =    0,    isIterator    =    0;    i    <    isIterator.next();    i++)    {    current    =    new    UnivariatePointValuePair(i);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
33	[BUG]  [BUGGY]  Integer  current  =  fx.getIntValue();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).    [BUGGY]  Integer  current  =  fx.getIntValue();  [BUGGY]    return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	Integer  current  =  fx.getIntValue();	      if(isMinim)    {    for(int    i    =    0,    isMinim    =    0;    i    <    isMinim;    i++)    {    v    =    fx;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
34	[BUG]  [BUGGY]  Integer  current  =  checker.getValuePair(w);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).    [BUGGY]  Integer  current  =  checker.getValuePair(w);  [BUGGY]    return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	Integer  current  =  checker.getValuePair(w);	      if(isMinim)    {    for(int    i    =    0,    isMinim    =    0;    i    <    isMinim;    i++)    {    v    =    fx;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
35	[BUG]  [BUGGY]  RectangleEdge  current  =  new  RectangleEdge(x,  iterator.next());  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).    [BUGGY]  RectangleEdge  current  =  new  RectangleEdge(x,  iterator.next());  [BUGGY]    return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	RectangleEdge  current  =  new  RectangleEdge(x,  iterator.next());	      if(isMinim)    {    for(int    i    =    0,    isIterator    =    0;    i    <    isIterator.next();    i++)    {    current    =    new    UnivariatePointValuePair(x,    iterator.next());    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
