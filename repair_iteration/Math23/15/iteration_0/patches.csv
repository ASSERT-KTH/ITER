bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    ((  UnivariatePointValuePair)current).relativeThreshold();  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).  [BUGGY]    ((  UnivariatePointValuePair)current).relativeThreshold();  [BUGGY]  return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	    ((  UnivariatePointValuePair)current).relativeThreshold();		non-compiled	[CE]  illegal  start  of  type	30	None	add
2	[BUG]  [BUGGY]    ((  UnivariatePointValuePair)current).relativeThreshold  =  false;  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).  [BUGGY]    ((  UnivariatePointValuePair)current).relativeThreshold  =  false;  [BUGGY]  return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	    ((  UnivariatePointValuePair)current).relativeThreshold  =  false;		non-compiled	[CE]  illegal  start  of  type	30	None	add
3	[BUG]  [BUGGY]    ((  UnivariatePointValuePair)current).relativeThreshold  =  true;  [CE]  illegal  start  of  type  [FE]        AssertionError  [CONTEXT]  w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).  [BUGGY]    ((  UnivariatePointValuePair)current).relativeThreshold  =  true;  [BUGGY]  return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	    ((  UnivariatePointValuePair)current).relativeThreshold  =  true;		non-compiled	[CE]  illegal  start  of  type	30	None	add
4	[BUG]  [BUGGY]  return  best(current,  isMinim,  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).  [BUGGY]  return  best(current,  isMinim,  [BUGGY]  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	return  best(current,  isMinim,	return    best(current,          previous,  	non-compiled	[CE]  illegal  start  of  type	29	None	replace
5	[BUG]  [BUGGY]  return  best(current,  x,  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).  [BUGGY]  return  best(current,  x,  [BUGGY]  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	return  best(current,  x,	return    best(current,          previous,  	non-compiled	[CE]  illegal  start  of  type	29	None	replace
6	[BUG]  [BUGGY]    if(isMinim)  {  if(!stop)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).  [BUGGY]    if(isMinim)  {  if(!stop)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	    if(isMinim)  {  if(!stop)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  type	30	None	add
7	[BUG]  [BUGGY]    if(isMinim)  {  for(int  i  =  0,  isMinim  =  0;  i  <  isMinim;  i++)  {  v  =  fx;  }  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).  [BUGGY]    if(isMinim)  {  for(int  i  =  0,  isMinim  =  0;  i  <  isMinim;  i++)  {  v  =  fx;  }  [BUGGY]  return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	    if(isMinim)  {  for(int  i  =  0,  isMinim  =  0;  i  <  isMinim;  i++)  {  v  =  fx;  }		non-compiled	[CE]  illegal  start  of  type	30	None	add
8	[BUG]  [BUGGY]    if(isMinim)  {  for(int  i  =  0,  isIterator  =  0;  i  <  iterator;  i++)  {  v  =  fx;  }  [CE]  illegal  start  of  type  [FE]        AssertionError  [CONTEXT]  w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).  [BUGGY]    if(isMinim)  {  for(int  i  =  0,  isIterator  =  0;  i  <  iterator;  i++)  {  v  =  fx;  }  [BUGGY]  return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	    if(isMinim)  {  for(int  i  =  0,  isIterator  =  0;  i  <  iterator;  i++)  {  v  =  fx;  }		non-compiled	[CE]  illegal  start  of  type	30	None	add
9	[BUG]  [BUGGY]    if(isMinim)  {  for(int  i  =  0,  isIterator  =  0;  i  <  isIterator.next();  i++)  {  current  =  new  UnivariatePointValuePair(x,  iterator.next());  }  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).  [BUGGY]    if(isMinim)  {  for(int  i  =  0,  isIterator  =  0;  i  <  isIterator.next();  i++)  {  current  =  new  UnivariatePointValuePair(x,  iterator.next());  }  [BUGGY]  return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	    if(isMinim)  {  for(int  i  =  0,  isIterator  =  0;  i  <  isIterator.next();  i++)  {  current  =  new  UnivariatePointValuePair(x,  iterator.next());  }		non-compiled	[CE]  illegal  start  of  type	30	None	add
10	[BUG]  [BUGGY]    if(isMinim)  {  for(int  i  =  0,  isIterator  =  0;  i  <  isIterator.next();  i++)  {  current  =  new  UnivariatePointValuePair(i,  iterator.next());  }  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).  [BUGGY]    if(isMinim)  {  for(int  i  =  0,  isIterator  =  0;  i  <  isIterator.next();  i++)  {  current  =  new  UnivariatePointValuePair(i,  iterator.next());  }  [BUGGY]  return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	    if(isMinim)  {  for(int  i  =  0,  isIterator  =  0;  i  <  isIterator.next();  i++)  {  current  =  new  UnivariatePointValuePair(i,  iterator.next());  }		non-compiled	[CE]  illegal  start  of  type	30	None	add
11	[BUG]  [BUGGY]    if(isMinim)  {  for(int  i  =  0,  isIterator  =  0;  i  <  isIterator.next();  i++)  {  current  =  new  UnivariatePointValuePair(i);  }  [CE]  illegal  start  of  type  [FE]        AssertionError  [CONTEXT]  w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).  [BUGGY]    if(isMinim)  {  for(int  i  =  0,  isIterator  =  0;  i  <  isIterator.next();  i++)  {  current  =  new  UnivariatePointValuePair(i);  }  [BUGGY]  return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	    if(isMinim)  {  for(int  i  =  0,  isIterator  =  0;  i  <  isIterator.next();  i++)  {  current  =  new  UnivariatePointValuePair(i);  }		non-compiled	[CE]  illegal  start  of  type	30	None	add
12	[BUG]  [BUGGY]  return  best(current,  v,  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).  [BUGGY]  return  best(current,  v,  [BUGGY]  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	return  best(current,  v,	return    best(current,          previous,  	non-compiled	[CE]  illegal  start  of  type	29	None	replace
