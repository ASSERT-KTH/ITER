bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ConvergenceChecker  checker  =  getConvergenceChecker(fu);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  ConvergenceChecker  checker  =  getConvergenceChecker(fu);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	ConvergenceChecker  checker  =  getConvergenceChecker(fu);	  ConvergenceChecker    checker    =    getConvergenceChecker();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
2	[BUG]  [BUGGY]  Integer  current  =  fw.getIntValue();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  Integer  current  =  fw.getIntValue();  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	Integer  current  =  fw.getIntValue();	  Integer    current    =    fx.getIntValue();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
3	[BUG]  [BUGGY]  Integer  current  =  w.getIntValue();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  Integer  current  =  w.getIntValue();  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	Integer  current  =  w.getIntValue();	  Integer    current    =    fx.getIntValue();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
4	[BUG]  [BUGGY]  Integer  current  =  getIterator().nextElement();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  Integer  current  =  getIterator().nextElement();  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	Integer  current  =  getIterator().nextElement();	  Integer    current    =    getIterator();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
5	[BUG]  [BUGGY]  ConvergenceChecker.checkState(isMinim,  stop);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  ConvergenceChecker.checkState(isMinim,  stop);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	ConvergenceChecker.checkState(isMinim,  stop);	  ConvergenceChecker.checkState(isMinim);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
6	[BUG]  [BUGGY]  ConvergenceChecker.checkState(isMinim,  isMinim);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  ConvergenceChecker.checkState(isMinim,  isMinim);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	ConvergenceChecker.checkState(isMinim,  isMinim);	  ConvergenceChecker.checkState(isMinim);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
7	[BUG]  [BUGGY]  RectangleEdge  current  =  getIterator(iterator.next(),  x);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  RectangleEdge  current  =  getIterator(iterator.next(),  x);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	RectangleEdge  current  =  getIterator(iterator.next(),  x);	  RectangleEdge    current    =    getIterator(iterator.next());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
8	[BUG]  [BUGGY]  RectangleEdge  current  =  getIterator(iterator.next(),  w);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  RectangleEdge  current  =  getIterator(iterator.next(),  w);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	RectangleEdge  current  =  getIterator(iterator.next(),  w);	  RectangleEdge    current    =    getIterator(iterator.next());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
9	[BUG]  [BUGGY]  ((  UnivariatePointValuePair)current).checker.relativeThreshold(isMinim);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  ((  UnivariatePointValuePair)current).checker.relativeThreshold(isMinim);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	((  UnivariatePointValuePair)current).checker.relativeThreshold(isMinim);	  ((    UnivariatePointValuePair)current).checker.relativeThreshold();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
10	[BUG]  [BUGGY]  luate(x,  iterator.next(),  current);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  luate(x,  iterator.next(),  current);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	luate(x,  iterator.next(),  current);	  luate(x,    iterator.next());    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
11	[BUG]  [BUGGY]  luate(x,  iterator.next(),  v);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  luate(x,  iterator.next(),  v);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	luate(x,  iterator.next(),  v);	  luate(x,    iterator.next());    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
12	[BUG]  [BUGGY]  luate(current.next(),  iterator);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  luate(current.next(),  iterator);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	luate(current.next(),  iterator);	  luate(iterator.next(),    current);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
13	[BUG]  [BUGGY]  luate(iterator.next(),  isMinim);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  luate(iterator.next(),  isMinim);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	luate(iterator.next(),  isMinim);	  luate(iterator.next(),    current);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
14	[BUG]  [BUGGY]  return  best(current,  isMinim,  w,  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  return  best(current,  isMinim,  w,  [BUGGY]      best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	return  best(current,  isMinim,  w,	  return    best(current,    isMinim,    v,    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
15	[BUG]  [BUGGY]  return  best(current,  isMinim,  fw,  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  return  best(current,  isMinim,  fw,  [BUGGY]      best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	return  best(current,  isMinim,  fw,	  return    best(current,    isMinim,    v,    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
16	[BUG]  [BUGGY]  if(isMinim)  {  for(int  iter  =  0;  iter  <  iter.next();  iter.hasNext();)  {  current  =  new  UnivariatePointValuePair(iter.next());  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  if(isMinim)  {  for(int  iter  =  0;  iter  <  iter.next();  iter.hasNext();)  {  current  =  new  UnivariatePointValuePair(iter.next());  }  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	if(isMinim)  {  for(int  iter  =  0;  iter  <  iter.next();  iter.hasNext();)  {  current  =  new  UnivariatePointValuePair(iter.next());  }	  [Delete]    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
17	[BUG]  [BUGGY]  if(isMinim)  {  for(int  iter  =  0;  iter  <  iter.next();  iter.hasNext();)  {  current  =  iter.next();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  if(isMinim)  {  for(int  iter  =  0;  iter  <  iter.next();  iter.hasNext();)  {  current  =  iter.next();  }  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	if(isMinim)  {  for(int  iter  =  0;  iter  <  iter.next();  iter.hasNext();)  {  current  =  iter.next();  }	  [Delete]    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
18	[BUG]  [BUGGY]  luate(current,  x)  {  for(int  i  =  0,  isMinim  =  0;  i  <  isMinim;  i++)  {  v  =  fx;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  luate(current,  x)  {  for(int  i  =  0,  isMinim  =  0;  i  <  isMinim;  i++)  {  v  =  fx;  }  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	luate(current,  x)  {  for(int  i  =  0,  isMinim  =  0;  i  <  isMinim;  i++)  {  v  =  fx;  }	  luate(current,    w)    {    for(int    i    =    0,    isMinim    =    0;    i    <    isMinim;    i++)    {    v    =    fx;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
19	[BUG]  [BUGGY]  luate(current,  w)  {  for(int  i  =  0,  isIterator  =  0;  i  <  isIterator;  i++)  {  v  =  fx;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  luate(current,  w)  {  for(int  i  =  0,  isIterator  =  0;  i  <  isIterator;  i++)  {  v  =  fx;  }  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	luate(current,  w)  {  for(int  i  =  0,  isIterator  =  0;  i  <  isIterator;  i++)  {  v  =  fx;  }	  luate(current,    w)    {    for(int    i    =    0,    isMinim    =    0;    i    <    isMinim;    i++)    {    v    =    fx;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
20	[BUG]  [BUGGY]  ((  UnivariatePointValuePair)current).expireThreshold  =  true;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  ((  UnivariatePointValuePair)current).expireThreshold  =  true;  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	((  UnivariatePointValuePair)current).expireThreshold  =  true;	  ((    UnivariatePointValuePair)current).expireThreshold    =    false;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
21	[BUG]  [BUGGY]  ((  UnivariatePointValuePair)current).expireThreshold  -=  false;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  ((  UnivariatePointValuePair)current).expireThreshold  -=  false;  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	((  UnivariatePointValuePair)current).expireThreshold  -=  false;	  ((    UnivariatePointValuePair)current).expireThreshold    =    false;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
22	[BUG]  [BUGGY]  RectangleEdge  current  =  new  RectangleEdge(iterator.next(),  x);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  RectangleEdge  current  =  new  RectangleEdge(iterator.next(),  x);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	RectangleEdge  current  =  new  RectangleEdge(iterator.next(),  x);	  RectangleEdge    current    =    new    RectangleEdge(x,    iterator.next());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
23	[BUG]  [BUGGY]  RectangleEdge  current  =  new  RectangleEdge(w,  iterator.next());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  RectangleEdge  current  =  new  RectangleEdge(w,  iterator.next());  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	RectangleEdge  current  =  new  RectangleEdge(w,  iterator.next());	  RectangleEdge    current    =    new    RectangleEdge(x,    iterator.next());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
24	[BUG]  [BUGGY]  luate(current,  iterator,  w);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  luate(current,  iterator,  w);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	luate(current,  iterator,  w);	  luate(iterator,    w);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
25	[BUG]  [BUGGY]  luate(iterator,  w,  isMinim);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  luate(iterator,  w,  isMinim);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	luate(iterator,  w,  isMinim);	  luate(iterator,    w);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
26	[BUG]  [BUGGY]  return  best(current,  fx,  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  return  best(current,  fx,  [BUGGY]      best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	return  best(current,  fx,	  return    best(current,    fw,    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
27	[BUG]  [BUGGY]  Integer  current  =  getIterator(iterator,  x);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  Integer  current  =  getIterator(iterator,  x);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	Integer  current  =  getIterator(iterator,  x);	  Integer    current    =    getIterator(iterator);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
28	[BUG]  [BUGGY]  Integer  current  =  getIterator(iterator,  w);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  Integer  current  =  getIterator(iterator,  w);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	Integer  current  =  getIterator(iterator,  w);	  Integer    current    =    getIterator(iterator);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
29	[BUG]  [BUGGY]  ((  UnivariatePointValuePair)current).relativeThreshold  -=  true;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  ((  UnivariatePointValuePair)current).relativeThreshold  -=  true;  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	((  UnivariatePointValuePair)current).relativeThreshold  -=  true;	  ((    UnivariatePointValuePair)current).relativeThreshold    -=    false;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
30	[BUG]  [BUGGY]  ((  UnivariatePointValuePair)current).relativeThreshold  -=  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  ((  UnivariatePointValuePair)current).relativeThreshold  -=  1;  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	((  UnivariatePointValuePair)current).relativeThreshold  -=  1;	  ((    UnivariatePointValuePair)current).relativeThreshold    -=    false;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
31	[BUG]  [BUGGY]  luate(current,  w,  iterator);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  luate(current,  w,  iterator);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	luate(current,  w,  iterator);	  luate(iterator,    w,    current);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
32	[BUG]  [BUGGY]  luate(iterator,  w,  current,  isMinim);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  luate(iterator,  w,  current,  isMinim);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	luate(iterator,  w,  current,  isMinim);	  luate(iterator,    w,    current);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
33	[BUG]  [BUGGY]  luate(iterator.next(),  x);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  luate(iterator.next(),  x);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	luate(iterator.next(),  x);	  luate(iterator.next());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
34	[BUG]  [BUGGY]  RectangleEdge  current  =  new  RectangleEdge(1.0,  1.0,  1.0,  isMinim);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  RectangleEdge  current  =  new  RectangleEdge(1.0,  1.0,  1.0,  isMinim);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	RectangleEdge  current  =  new  RectangleEdge(1.0,  1.0,  1.0,  isMinim);	  RectangleEdge    current    =    new    RectangleEdge(1.0,    1.0,    1.0);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
35	[BUG]  [BUGGY]  Integer  current  =  checker.getValuePair(x);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  Integer  current  =  checker.getValuePair(x);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	Integer  current  =  checker.getValuePair(x);	  Integer    current    =    checker.getValuePair(w);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
36	[BUG]  [BUGGY]  Integer  current  =  checker.getValuePair(x,  w);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  Integer  current  =  checker.getValuePair(x,  w);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	Integer  current  =  checker.getValuePair(x,  w);	  Integer    current    =    checker.getValuePair(w);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
37	[BUG]  [BUGGY]  luate(current,  w,  x);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  luate(current,  w,  x);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	luate(current,  w,  x);	  luate(current,    x,    w);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
38	[BUG]  [BUGGY]  luate(current,  x,  isMinim);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  luate(current,  x,  isMinim);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	luate(current,  x,  isMinim);	  luate(current,    x,    w);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
39	[BUG]  [BUGGY]  RectangleEdge  current  =  new  RectangleEdge(iterator.next(),  w);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  RectangleEdge  current  =  new  RectangleEdge(iterator.next(),  w);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	RectangleEdge  current  =  new  RectangleEdge(iterator.next(),  w);	  RectangleEdge    current    =    new    RectangleEdge(iterator.next());    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
40	[BUG]  [BUGGY]  RectangleEdge  current  =  new  RectangleEdge(x,  y);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  RectangleEdge  current  =  new  RectangleEdge(x,  y);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	RectangleEdge  current  =  new  RectangleEdge(x,  y);	  RectangleEdge    current    =    new    RectangleEdge();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
41	[BUG]  [BUGGY]  RectangleEdge  current  =  new  RectangleEdge(width,  height);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  RectangleEdge  current  =  new  RectangleEdge(width,  height);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	RectangleEdge  current  =  new  RectangleEdge(width,  height);	  RectangleEdge    current    =    new    RectangleEdge();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
42	[BUG]  [BUGGY]  luate(current,  w,  isIterator);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  luate(current,  w,  isIterator);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	luate(current,  w,  isIterator);	  luate(current,    x,    isIterator);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
43	[BUG]  [BUGGY]  luate(current,  x,  isIterator,  stop);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  luate(current,  x,  isIterator,  stop);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	luate(current,  x,  isIterator,  stop);	  luate(current,    x,    isIterator);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
44	[BUG]  [BUGGY]  bucket(true)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  bucket(true)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	bucket(true)  {  throw  new  IllegalArgumentException( " ");  }	  bucket(!stop)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
45	[BUG]  [BUGGY]  vice.checkState(isMinim  &&  isMinim);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  vice.checkState(isMinim  &&  isMinim);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	vice.checkState(isMinim  &&  isMinim);	  vice.checkState(isMinim);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
46	[BUG]  [BUGGY]  luate(current,  x))  {  for(int  i  =  0,  isMinim  =  0;  i  <  isMinim;  i++)  {  v  =  fx;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  luate(current,  x))  {  for(int  i  =  0,  isMinim  =  0;  i  <  isMinim;  i++)  {  v  =  fx;  }  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	luate(current,  x))  {  for(int  i  =  0,  isMinim  =  0;  i  <  isMinim;  i++)  {  v  =  fx;  }	  luate(current,    w))    {    for(int    i    =    0,    isMinim    =    0;    i    <    isMinim;    i++)    {    v    =    fx;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
47	[BUG]  [BUGGY]  luate(current,  w))  {  for(int  i  =  0,  isIterator  =  0;  i  <  isIterator;  i++)  {  v  =  fx;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  luate(current,  w))  {  for(int  i  =  0,  isIterator  =  0;  i  <  isIterator;  i++)  {  v  =  fx;  }  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	luate(current,  w))  {  for(int  i  =  0,  isIterator  =  0;  i  <  isIterator;  i++)  {  v  =  fx;  }	  luate(current,    w))    {    for(int    i    =    0,    isMinim    =    0;    i    <    isMinim;    i++)    {    v    =    fx;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
48	[BUG]  [BUGGY]  safeThan  =  false)  {  if(!stop)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  safeThan  =  false)  {  if(!stop)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	safeThan  =  false)  {  if(!stop)  {  throw  new  IllegalArgumentException( " ");  }	  safeThan    <    =    false)    {    if(!stop)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
49	[BUG]  [BUGGY]  safeThan  =  false)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  safeThan  =  false)  {  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	safeThan  =  false)  {	  safeThan    <    =    false)    {    if(!stop)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
50	[BUG]  [BUGGY]  luate(current,  iterator,  isIterator);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  luate(current,  iterator,  isIterator);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	luate(current,  iterator,  isIterator);	  luate(iterator,    isIterator);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
51	[BUG]  [BUGGY]  luate(iterator,  isIterator,  x);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  luate(iterator,  isIterator,  x);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	luate(iterator,  isIterator,  x);	  luate(iterator,    isIterator);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
52	[BUG]  [BUGGY]  luate(current,  isMinim)  {  if(!stop)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  luate(current,  isMinim)  {  if(!stop)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	luate(current,  isMinim)  {  if(!stop)  {  throw  new  IllegalArgumentException( " ");  }	  luate(current,    w)    {    if(!stop)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
53	[BUG]  [BUGGY]  luate(current,  isMinim)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  luate(current,  isMinim)  {  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	luate(current,  isMinim)  {	  luate(current,    w)    {    if(!stop)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
54	[BUG]  [BUGGY]  ((  UnivariatePointValuePair)current).isMaximum();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  ((  UnivariatePointValuePair)current).isMaximum();  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	((  UnivariatePointValuePair)current).isMaximum();	  ((    UnivariatePointValuePair)current).isMinimum();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
55	[BUG]  [BUGGY]  ConvergenceChecker  checker  =  getConvergenceChecker(x);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  ConvergenceChecker  checker  =  getConvergenceChecker(x);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	ConvergenceChecker  checker  =  getConvergenceChecker(x);	  ConvergenceChecker    checker    =    getConvergenceChecker();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
56	[BUG]  [BUGGY]  luate(iterator,  x);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  luate(iterator,  x);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	luate(iterator,  x);	  luate(iterator,    w);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
57	[BUG]  [BUGGY]  ConvergenceChecker.checkState(!isMinim);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  ConvergenceChecker.checkState(!isMinim);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	ConvergenceChecker.checkState(!isMinim);	  ConvergenceChecker.checkState(isMinim);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
58	[BUG]  [BUGGY]  luate(iterator,  x,  current);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  luate(iterator,  x,  current);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	luate(iterator,  x,  current);	  luate(iterator,    w,    current);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
59	[BUG]  [BUGGY]  RectangleEdge  current  =  new  RectangleEdge(iterator,  x.next());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  RectangleEdge  current  =  new  RectangleEdge(iterator,  x.next());  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	RectangleEdge  current  =  new  RectangleEdge(iterator,  x.next());	  RectangleEdge    current    =    new    RectangleEdge(x,    iterator.next());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
60	[BUG]  [BUGGY]  Integer  current  =  checker.getValuePair(v);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  Integer  current  =  checker.getValuePair(v);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	Integer  current  =  checker.getValuePair(v);	  Integer    current    =    checker.getValuePair(w);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
61	[BUG]  [BUGGY]  Integer  current  =  getIterator()  -  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  Integer  current  =  getIterator()  -  1;  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	Integer  current  =  getIterator()  -  1;	  Integer    current    =    getIterator();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
62	[BUG]  [BUGGY]  ((  UnivariatePointValuePair)current).intermediateTree();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  ((  UnivariatePointValuePair)current).intermediateTree();  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	((  UnivariatePointValuePair)current).intermediateTree();	  ((    UnivariatePointValuePair)current).intermediateThreshold();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
63	[BUG]  [BUGGY]  return  best(current,  checker,  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  return  best(current,  checker,  [BUGGY]      best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	return  best(current,  checker,	  return    best(current,    stop,    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
64	[BUG]  [BUGGY]  return  best(current,  checker,  stop,  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  return  best(current,  checker,  stop,  [BUGGY]      best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	return  best(current,  checker,  stop,	  return    best(current,    stop,    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
65	[BUG]  [BUGGY]  RectangleEdge  current  =  getIterator(iterator.next(),  v);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  RectangleEdge  current  =  getIterator(iterator.next(),  v);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	RectangleEdge  current  =  getIterator(iterator.next(),  v);	  RectangleEdge    current    =    getIterator(iterator.next());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
66	[BUG]  [BUGGY]  luate(iterator.next(),  w);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  luate(iterator.next(),  w);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	luate(iterator.next(),  w);	  luate(iterator.next(),    current);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
67	[BUG]  [BUGGY]  RectangleEdge  current  =  new  RectangleEdge(1.0,  1.0,  1.0,  1.0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  RectangleEdge  current  =  new  RectangleEdge(1.0,  1.0,  1.0,  1.0);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	RectangleEdge  current  =  new  RectangleEdge(1.0,  1.0,  1.0,  1.0);	  RectangleEdge    current    =    new    RectangleEdge(1.0,    1.0,    1.0);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
68	[BUG]  [BUGGY]  vice.checkState(fu);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  vice.checkState(fu);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	vice.checkState(fu);	  vice.checkState(isMinim);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
69	[BUG]  [BUGGY]  luate(iterator.next(),  v);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  luate(iterator.next(),  v);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	luate(iterator.next(),  v);	  luate(iterator.next());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
70	[BUG]  [BUGGY]  luate(current,  isIterator);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  luate(current,  isIterator);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	luate(current,  isIterator);	  luate(iterator,    isIterator);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
71	[BUG]  [BUGGY]  luate(iterator,  x,  isIterator);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  luate(iterator,  x,  isIterator);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	luate(iterator,  x,  isIterator);	  luate(iterator,    isIterator);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
72	[BUG]  [BUGGY]  if(!isMinim)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  if(!isMinim)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	if(!isMinim)  {  throw  new  IllegalArgumentException( " ");  }	  [Delete]    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
73	[BUG]  [BUGGY]  if(isMinim)  {  for(int  i  =  0,  isIterator  =  1;  i  <  isIterator.next();  i++)  {  current  =  new  UnivariatePointValuePair(i);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  if(isMinim)  {  for(int  i  =  0,  isIterator  =  1;  i  <  isIterator.next();  i++)  {  current  =  new  UnivariatePointValuePair(i);  }  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	if(isMinim)  {  for(int  i  =  0,  isIterator  =  1;  i  <  isIterator.next();  i++)  {  current  =  new  UnivariatePointValuePair(i);  }	  [Delete]    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
74	[BUG]  [BUGGY]  RectangleEdge  current  =  new  RectangleEdge(iterator.next(),  v);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  RectangleEdge  current  =  new  RectangleEdge(iterator.next(),  v);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	RectangleEdge  current  =  new  RectangleEdge(iterator.next(),  v);	  RectangleEdge    current    =    new    RectangleEdge(iterator.next());    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
75	[BUG]  [BUGGY]  ((  UnivariatePointValuePair)current).checker.intermediateThreshold();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  ((  UnivariatePointValuePair)current).checker.intermediateThreshold();  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	((  UnivariatePointValuePair)current).checker.intermediateThreshold();	  ((    UnivariatePointValuePair)current).checker.relativeThreshold();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
76	[BUG]  [BUGGY]  Integer  current  =  getIterator(x);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  Integer  current  =  getIterator(x);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	Integer  current  =  getIterator(x);	  Integer    current    =    getIterator(iterator);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
77	[BUG]  [BUGGY]  Integer  current  =  getIterator(fu);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  Integer  current  =  getIterator(fu);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	Integer  current  =  getIterator(fu);	  Integer    current    =    getIterator(iterator);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
78	[BUG]  [BUGGY]  luate(current,  x)  {  if(!stop)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  luate(current,  x)  {  if(!stop)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	luate(current,  x)  {  if(!stop)  {  throw  new  IllegalArgumentException( " ");  }	  luate(current,    w)    {    if(!stop)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
79	[BUG]  [BUGGY]  luate(x,  w.next());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  luate(x,  w.next());  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	luate(x,  w.next());	  luate(x,    iterator.next());    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
80	[BUG]  [BUGGY]  Integer  current  =  getIterator(w);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  Integer  current  =  getIterator(w);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	Integer  current  =  getIterator(w);	  Integer    current    =    getIterator(iterator);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
81	[BUG]  [BUGGY]  ConvergenceChecker  checker  =  getConvergenceChecker(v);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  ConvergenceChecker  checker  =  getConvergenceChecker(v);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	ConvergenceChecker  checker  =  getConvergenceChecker(v);	  ConvergenceChecker    checker    =    getConvergenceChecker();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
82	[BUG]  [BUGGY]  RectangleEdge  current  =  new  RectangleEdge(x,  iterator.next(),  v);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  RectangleEdge  current  =  new  RectangleEdge(x,  iterator.next(),  v);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	RectangleEdge  current  =  new  RectangleEdge(x,  iterator.next(),  v);	  RectangleEdge    current    =    new    RectangleEdge(x,    iterator.next());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
83	[BUG]  [BUGGY]  return  best(current,  w,  v,  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  return  best(current,  w,  v,  [BUGGY]      best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	return  best(current,  w,  v,	  return    best(current,    isMinim,    v,    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
84	[BUG]  [BUGGY]  return  best(current,  x,  v,  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  return  best(current,  x,  v,  [BUGGY]      best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	return  best(current,  x,  v,	  return    best(current,    isMinim,    v,    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
85	[BUG]  [BUGGY]  ((  UnivariatePointValuePair)current).checker.stop();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  ((  UnivariatePointValuePair)current).checker.stop();  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	((  UnivariatePointValuePair)current).checker.stop();	  ((    UnivariatePointValuePair)current).checker.relativeThreshold();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
86	[BUG]  [BUGGY]  safeThan  <  =  true)  {  if(!stop)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  safeThan  <  =  true)  {  if(!stop)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	safeThan  <  =  true)  {  if(!stop)  {  throw  new  IllegalArgumentException( " ");  }	  safeThan    <    =    false)    {    if(!stop)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
87	[BUG]  [BUGGY]  safeThan  <  =  true)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  safeThan  <  =  true)  {  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	safeThan  <  =  true)  {	  safeThan    <    =    false)    {    if(!stop)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
88	[BUG]  [BUGGY]  RectangleEdge  current  =  new  RectangleEdge(x);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  RectangleEdge  current  =  new  RectangleEdge(x);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	RectangleEdge  current  =  new  RectangleEdge(x);	  RectangleEdge    current    =    new    RectangleEdge();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
89	[BUG]  [BUGGY]  Integer  current  =  getIterator().next();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  Integer  current  =  getIterator().next();  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	Integer  current  =  getIterator().next();	  Integer    current    =    getIterator();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
90	[BUG]  [BUGGY]  luate(current,  v,  isIterator);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  luate(current,  v,  isIterator);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	luate(current,  v,  isIterator);	  luate(current,    x,    isIterator);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
91	[BUG]  [BUGGY]  Integer  current  =  checker.getValuePair(v,  w);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  Integer  current  =  checker.getValuePair(v,  w);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	Integer  current  =  checker.getValuePair(v,  w);	  Integer    current    =    checker.getValuePair(w);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
92	[BUG]  [BUGGY]  if(!isMinim)  {  for(int  iter  =  0;  iter  <  w;  iter++)  {  if(!iter.hasNext())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  if(!isMinim)  {  for(int  iter  =  0;  iter  <  w;  iter++)  {  if(!iter.hasNext())  {  return  true;  }  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	if(!isMinim)  {  for(int  iter  =  0;  iter  <  w;  iter++)  {  if(!iter.hasNext())  {  return  true;  }	  [Delete]    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
93	[BUG]  [BUGGY]  if(!isMinim)  {  for(int  iter  =  0;  iter  <  w;  iter++)  {  if(!iter.hasNext())  {  continue;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  if(!isMinim)  {  for(int  iter  =  0;  iter  <  w;  iter++)  {  if(!iter.hasNext())  {  continue;  }  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	if(!isMinim)  {  for(int  iter  =  0;  iter  <  w;  iter++)  {  if(!iter.hasNext())  {  continue;  }	  [Delete]    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
94	[BUG]  [BUGGY]  luate(iterator,  w,  isIterator);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  luate(iterator,  w,  isIterator);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	luate(iterator,  w,  isIterator);	  luate(iterator,    isIterator);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
95	[BUG]  [BUGGY]  RectangleEdge  current  =  new  RectangleEdge(2.0,  2.0,  2.0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  RectangleEdge  current  =  new  RectangleEdge(2.0,  2.0,  2.0);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	RectangleEdge  current  =  new  RectangleEdge(2.0,  2.0,  2.0);	  RectangleEdge    current    =    new    RectangleEdge(1.0,    1.0,    1.0);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
96	[BUG]  [BUGGY]  luate(current,  x,  w,  isMinim);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      w  =  u;  fw  =  fu;  }  else  if  (fu  <=  fv  ||  Precision.equals(v,  x)  ||  Precision.equals(v,  w))  {  v  =  u;  fv  =  fu;  }  }  }  else  {  //  Default  termination  (Brent's  criterion).      [BUGGY]  luate(current,  x,  w,  isMinim);  [BUGGY]      return        best(current,                  previous,  best(current,  previous,  isMinim);  }  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	274	276	1	replace	luate(current,  x,  w,  isMinim);	  luate(current,    x,    w);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
