bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  w  =  absoluteThreshold  *  FastMath.abs(m);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  if  (!stop)  {      [BUGGY]  double  w  =  absoluteThreshold  *  FastMath.abs(m);  [BUGGY]      double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	161	161	1	replace	double  w  =  absoluteThreshold  *  FastMath.abs(m);	  double    w    =    relativeThreshold    *    FastMath.abs(m);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
2	[BUG]  [BUGGY]  int  w  =  absoluteThreshold  *  FastMath.abs(x)-  relativeThreshold;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  if  (!stop)  {      [BUGGY]  int  w  =  absoluteThreshold  *  FastMath.abs(x)-  relativeThreshold;  [BUGGY]      double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	161	161	1	replace	int  w  =  absoluteThreshold  *  FastMath.abs(x)-  relativeThreshold;	  int    w    =    relativeThreshold    *    FastMath.abs(x)-    absoluteThreshold;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
3	[BUG]  [BUGGY]  int  w  =  relativeThreshold  *  FastMath.abs(x)+  tol1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  if  (!stop)  {      [BUGGY]  int  w  =  relativeThreshold  *  FastMath.abs(x)+  tol1;  [BUGGY]      double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	161	161	1	replace	int  w  =  relativeThreshold  *  FastMath.abs(x)+  tol1;	  int    w    =    relativeThreshold    *    FastMath.abs(x)+    absoluteThreshold;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
4	[BUG]  [BUGGY]  int  w  =  relativeThreshold  *  FastMath.abs(x)+  tol2;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  if  (!stop)  {      [BUGGY]  int  w  =  relativeThreshold  *  FastMath.abs(x)+  tol2;  [BUGGY]      double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	161	161	1	replace	int  w  =  relativeThreshold  *  FastMath.abs(x)+  tol2;	  int    w    =    relativeThreshold    *    FastMath.abs(m)+    tol2;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
5	[BUG]  [BUGGY]  double  w  =  absoluteThreshold  *  FastMath.abs(m)-  relativeThreshold;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  if  (!stop)  {      [BUGGY]  double  w  =  absoluteThreshold  *  FastMath.abs(m)-  relativeThreshold;  [BUGGY]      double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	161	161	1	replace	double  w  =  absoluteThreshold  *  FastMath.abs(m)-  relativeThreshold;	  int    w    =    absoluteThreshold    *    FastMath.abs(m)-    relativeThreshold;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
6	[BUG]  [BUGGY]  int  w  =  relativeThreshold  *  FastMath.abs(x)/  absoluteThreshold;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  if  (!stop)  {      [BUGGY]  int  w  =  relativeThreshold  *  FastMath.abs(x)/  absoluteThreshold;  [BUGGY]      double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	161	161	1	replace	int  w  =  relativeThreshold  *  FastMath.abs(x)/  absoluteThreshold;	  int    w    =    relativeThreshold    *    FastMath.abs(m)/    absoluteThreshold;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
7	[BUG]  [BUGGY]  int  w  =  relativeThreshold  *  FastMath.abs(m)/  tol1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  if  (!stop)  {      [BUGGY]  int  w  =  relativeThreshold  *  FastMath.abs(m)/  tol1;  [BUGGY]      double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	161	161	1	replace	int  w  =  relativeThreshold  *  FastMath.abs(m)/  tol1;	  int    w    =    relativeThreshold    *    FastMath.abs(m)/    absoluteThreshold;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
8	[BUG]  [BUGGY]  double  w  =  absoluteThreshold  *  FastMath.abs(x);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  if  (!stop)  {      [BUGGY]  double  w  =  absoluteThreshold  *  FastMath.abs(x);  [BUGGY]      double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	161	161	1	replace	double  w  =  absoluteThreshold  *  FastMath.abs(x);	  double    w    =    relativeThreshold    *    FastMath.abs(x);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
9	[BUG]  [BUGGY]  int  w  =  relativeThreshold  *  FastMath.abs(m)/  tol2;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  if  (!stop)  {      [BUGGY]  int  w  =  relativeThreshold  *  FastMath.abs(m)/  tol2;  [BUGGY]      double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	161	161	1	replace	int  w  =  relativeThreshold  *  FastMath.abs(m)/  tol2;	  int    w    =    relativeThreshold    *    FastMath.abs(m)+    tol2;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
10	[BUG]  [BUGGY]  int  w  =  absoluteThreshold  *  FastMath.abs(m)/  relativeThreshold;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  if  (!stop)  {      [BUGGY]  int  w  =  absoluteThreshold  *  FastMath.abs(m)/  relativeThreshold;  [BUGGY]      double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	161	161	1	replace	int  w  =  absoluteThreshold  *  FastMath.abs(m)/  relativeThreshold;	  int    w    =    relativeThreshold    *    FastMath.abs(m)/    absoluteThreshold;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
11	[BUG]  [BUGGY]  double  w  =  relativeThreshold  *  FastMath.abs(b);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  if  (!stop)  {      [BUGGY]  double  w  =  relativeThreshold  *  FastMath.abs(b);  [BUGGY]      double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	161	161	1	replace	double  w  =  relativeThreshold  *  FastMath.abs(b);	  double    w    =    relativeThreshold    *    FastMath.abs(x);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
12	[BUG]  [BUGGY]  int  w  =  relativeThreshold  *  FastMath.abs(b)-  absoluteThreshold;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  if  (!stop)  {      [BUGGY]  int  w  =  relativeThreshold  *  FastMath.abs(b)-  absoluteThreshold;  [BUGGY]      double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	161	161	1	replace	int  w  =  relativeThreshold  *  FastMath.abs(b)-  absoluteThreshold;	  int    w    =    relativeThreshold    *    FastMath.abs(x)-    absoluteThreshold;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
13	[BUG]  [BUGGY]  int  w  =  relativeThreshold  *  FastMath.abs(m)/  2;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  if  (!stop)  {      [BUGGY]  int  w  =  relativeThreshold  *  FastMath.abs(m)/  2;  [BUGGY]      double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.31622776601683794	161	161	1	replace	int  w  =  relativeThreshold  *  FastMath.abs(m)/  2;	  int    w    =    relativeThreshold    *    FastMath.abs(m)/    absoluteThreshold;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
