bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number
2	[BUG]  [BUGGY]  IllegalArgument  iter  =(Option)iter.next();  [CE]  cannot  find  symbol  [CONTEXT]    while  (iter.hasNext())  {      [BUGGY]  IllegalArgument  iter  =(Option)iter.next();  [BUGGY]    token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	108	108	1	replace	IllegalArgument  iter  =(Option)iter.next();	      Iterator    iter    =(Option)iter.next();    	non-compiled	[CE]  cannot  find  symbol	364	None
4	[BUG]  [BUGGY]  Iterator  option  =(Option)iter.next();  [CE]  incompatible  types  [CONTEXT]    while  (iter.hasNext())  {      [BUGGY]  Iterator  option  =(Option)iter.next();  [BUGGY]    token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	108	108	1	replace	Iterator  option  =(Option)iter.next();	      Iterator    iter    =(Option)iter.next();    	non-compiled	[CE]  incompatible  types	364	None
11	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  test  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  options.getOption( "eatTheRest ");  }  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	52	52	1	add	if(eatTheRest)  {  tokens.clear();  currentOption  =  options.getOption( "eatTheRest ");  }	      tokens.clear();    currentOption    =    options.getOption(   "eatTheRest   ");    	compilable	  [FE]  UnrecognizedOptionException  test	185	1
12	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  options.getOption( "eatTheRest ");  }  [FE]  UnrecognizedOptionException  test  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  options.getOption( "eatTheRest ");  }  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	52	52	1	replace	if(eatTheRest)  {  tokens.clear();  currentOption  =  options.getOption( "eatTheRest ");  }	      tokens.clear();    currentOption    =    options.getOption(   "eatTheRest   ");    	compilable	  [FE]  UnrecognizedOptionException  test	185	1
12	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  test  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  if(currentOption!=  null)  {  tokens.clear();  currentOption  =  options.getOption( "eatTheRest ");  }  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	52	52	1	add	if(currentOption!=  null)  {  tokens.clear();  currentOption  =  options.getOption( "eatTheRest ");  }	      tokens.clear();    currentOption    =    options.getOption(   "eatTheRest   ");    	compilable	  [FE]  UnrecognizedOptionException  test	185	1
13	[BUG]  [BUGGY]  if(currentOption!=  null)  {  tokens.clear();  currentOption  =  options.getOption( "eatTheRest ");  }  [FE]  UnrecognizedOptionException  test  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  if(currentOption!=  null)  {  tokens.clear();  currentOption  =  options.getOption( "eatTheRest ");  }  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	52	52	1	replace	if(currentOption!=  null)  {  tokens.clear();  currentOption  =  options.getOption( "eatTheRest ");  }	      tokens.clear();    currentOption    =    options.getOption(   "eatTheRest   ");    	compilable	  [FE]  UnrecognizedOptionException  test	185	1
13	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  test  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  if( "-- "!=  tokens.get(0))  {  tokens.clear();  currentOption  =  options.getOption( "eatTheRest ");  }  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	52	52	1	add	if( "-- "!=  tokens.get(0))  {  tokens.clear();  currentOption  =  options.getOption( "eatTheRest ");  }	      tokens.clear();    currentOption    =    options.getOption(   "eatTheRest   ");    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  test	185	1
14	[BUG]  [BUGGY]  if( "-- "!=  tokens.get(0))  {  tokens.clear();  currentOption  =  options.getOption( "eatTheRest ");  }  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  test  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  if( "-- "!=  tokens.get(0))  {  tokens.clear();  currentOption  =  options.getOption( "eatTheRest ");  }  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	52	52	1	replace	if( "-- "!=  tokens.get(0))  {  tokens.clear();  currentOption  =  options.getOption( "eatTheRest ");  }	      tokens.clear();    currentOption    =    options.getOption(   "eatTheRest   ");    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  0  test	185	1
14	[BUG]  [BUGGY]  if( "-- "!=  tokens.size()  -  1);  currentOption  =  options.getOption( "eatTheRest ");  }  else  {  tokens.clear();  currentOption  =  options.getOption( "-- ");  }  [CE]  illegal  start  of  type  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  if( "-- "!=  tokens.size()  -  1);  currentOption  =  options.getOption( "eatTheRest ");  }  else  {  tokens.clear();  currentOption  =  options.getOption( "-- ");  }  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	52	52	1	replace	if( "-- "!=  tokens.size()  -  1);  currentOption  =  options.getOption( "eatTheRest ");  }  else  {  tokens.clear();  currentOption  =  options.getOption( "-- ");  }	      tokens.clear();    currentOption    =    options.getOption(   "eatTheRest   ");    	non-compiled	[CE]  illegal  start  of  type	185	None
21	[BUG]  [BUGGY]  [FE]  NullPointerException  test  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.add(currentOption.getKey());  tokens.add(currentOption.getValue());  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	52	52	1	add	tokens.add(currentOption.getKey());    tokens.add(currentOption.getValue());	  	compilable	  [FE]  NullPointerException  test	183	1
22	[BUG]  [BUGGY]  tokens.add(currentOption.getKey());  tokens.add(currentOption.getValue());  [FE]  NullPointerException  test  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.add(currentOption.getKey());  tokens.add(currentOption.getValue());  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	52	52	1	replace	tokens.add(currentOption.getKey());    tokens.add(currentOption.getValue());	  	compilable	  [FE]  NullPointerException  test	183	1
22	[BUG]  [BUGGY]  [FE]  NullPointerException  test  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.add(currentOption.getKey());  tokens.add( "-- ");  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	52	52	1	add	tokens.add(currentOption.getKey());    tokens.add( "-- ");	  	compilable	  [FE]  NullPointerException  test	183	1
23	[BUG]  [BUGGY]  tokens.add(currentOption.getKey());  tokens.add( "-- ");  [FE]  NullPointerException  test  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.add(currentOption.getKey());  tokens.add( "-- ");  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	52	52	1	replace	tokens.add(currentOption.getKey());    tokens.add( "-- ");	  	compilable	  [FE]  NullPointerException  test	183	1
23	[BUG]  [BUGGY]  [FE]  NullPointerException  test  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.add(currentOption.getKey());  tokens.add( "-- ");  currentOption  =  options.getOption( "- ");  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	52	52	1	add	tokens.add(currentOption.getKey());    tokens.add( "-- ");  currentOption  =  options.getOption( "- ");	  	compilable	  [FE]  NullPointerException  test	183	1
24	[BUG]  [BUGGY]  tokens.add(currentOption.getKey());  tokens.add( "-- ");  currentOption  =  options.getOption( "- ");  [FE]  NullPointerException  test  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.add(currentOption.getKey());  tokens.add( "-- ");  currentOption  =  options.getOption( "- ");  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	52	52	1	replace	tokens.add(currentOption.getKey());    tokens.add( "-- ");  currentOption  =  options.getOption( "- ");	  	compilable	  [FE]  NullPointerException  test	183	1
24	[BUG]  [BUGGY]  [FE]  NullPointerException  test  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.add(currentOption.getKey());  tokens.remove(currentOption.getValue());  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	52	52	1	add	tokens.add(currentOption.getKey());    tokens.remove(currentOption.getValue());	  	compilable	  [FE]  NullPointerException  test	183	1
25	[BUG]  [BUGGY]  tokens.add(currentOption.getKey());  tokens.remove(currentOption.getValue());  [FE]  NullPointerException  test  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.add(currentOption.getKey());  tokens.remove(currentOption.getValue());  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	52	52	1	replace	tokens.add(currentOption.getKey());    tokens.remove(currentOption.getValue());	  	compilable	  [FE]  NullPointerException  test	183	1
25	[BUG]  [BUGGY]  tokens.add(currentOption.getKey());  tokens.add(new  Option(currentOption.getValue()));  [CE]  no  suitable  constructor  found  for  Option(String)  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.add(currentOption.getKey());  tokens.add(new  Option(currentOption.getValue()));  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	52	52	1	replace	tokens.add(currentOption.getKey());    tokens.add(new  Option(currentOption.getValue()));	  	non-compiled	[CE]  no  suitable  constructor  found  for  Option(String)	183	None
31	[BUG]  [BUGGY]  tokens.clear();  tokens.add(currentOption.getLocale());  [CE]  cannot  find  symbol  [CONTEXT]    private  void  init()  {    [BUGGY]  tokens.clear();  tokens.add(currentOption.getLocale());  [BUGGY]    eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	51	51	1	replace	tokens.clear();  tokens.add(currentOption.getLocale());	      tokens.clear();    tokens.add(option.getLocale());    	non-compiled	[CE]  cannot  find  symbol	225	None
33	[BUG]  [BUGGY]  tokens.clear();  tokens.add(this.option.getLocale());  [CE]  cannot  find  symbol  option  [CONTEXT]    private  void  init()  {    [BUGGY]  tokens.clear();  tokens.add(this.option.getLocale());  [BUGGY]    eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	51	51	1	replace	tokens.clear();  tokens.add(this.option.getLocale());	      tokens.clear();    tokens.add(option.getLocale());    	non-compiled	[CE]  cannot  find  symbol  option	225	None
34	[BUG]  [BUGGY]  tokens.clear();  tokens.add(item.getLocale());  [CE]  cannot  find  symbol  item  [CONTEXT]    private  void  init()  {    [BUGGY]  tokens.clear();  tokens.add(item.getLocale());  [BUGGY]    eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	51	51	1	replace	tokens.clear();  tokens.add(item.getLocale());	      tokens.clear();    tokens.add(option.getLocale());    	non-compiled	[CE]  cannot  find  symbol  item	225	None
41	[BUG]  [BUGGY]      ArrayList  tokens  =(ArrayList)iter.next();  Iterator  iter  =  arguments[iter.next()];  [CE]  variable  iter  is  already  defined  in  method  flatten(Options,String[],boolean)  [CONTEXT]    while  (iter.hasNext())  {      [BUGGY]      ArrayList  tokens  =(ArrayList)iter.next();  Iterator  iter  =  arguments[iter.next()];  [BUGGY]    token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	108	108	1	replace	        ArrayList    tokens    =(ArrayList)iter.next();    Iterator  iter  =  arguments[iter.next()];	  	non-compiled	[CE]  variable  iter  is  already  defined  in  method  flatten(Options,String[],boolean)	361	None
43	[BUG]  [BUGGY]      ArrayList  tokens  =(ArrayList)iter.next();  String  token  =(String)iter.next();  [CE]  variable  token  is  already  defined  in  method  flatten(Options,String[],boolean)  [CONTEXT]    while  (iter.hasNext())  {      [BUGGY]      ArrayList  tokens  =(ArrayList)iter.next();  String  token  =(String)iter.next();  [BUGGY]    token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	108	108	1	replace	        ArrayList    tokens    =(ArrayList)iter.next();    String  token  =(String)iter.next();	  	non-compiled	[CE]  variable  token  is  already  defined  in  method  flatten(Options,String[],boolean)	361	None
44	[BUG]  [BUGGY]      ArrayList  tokens  =(ArrayList)iter.next();  Iterator  iter  =  arguments[iter.next()  +  1];  [CE]  variable  iter  is  already  defined  in  method  flatten(Options,String[],boolean)  [CONTEXT]    while  (iter.hasNext())  {      [BUGGY]      ArrayList  tokens  =(ArrayList)iter.next();  Iterator  iter  =  arguments[iter.next()  +  1];  [BUGGY]    token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	108	108	1	replace	        ArrayList    tokens    =(ArrayList)iter.next();    Iterator  iter  =  arguments[iter.next()  +  1];	  	non-compiled	[CE]  variable  iter  is  already  defined  in  method  flatten(Options,String[],boolean)	361	None
45	[BUG]  [BUGGY]      ArrayList  tokens  =(ArrayList)iter.next();  Iterator  iter  =  arguments[iter.next()].iterator();  [CE]  variable  iter  is  already  defined  in  method  flatten(Options,String[],boolean)  [CONTEXT]    while  (iter.hasNext())  {      [BUGGY]      ArrayList  tokens  =(ArrayList)iter.next();  Iterator  iter  =  arguments[iter.next()].iterator();  [BUGGY]    token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	108	108	1	replace	        ArrayList    tokens    =(ArrayList)iter.next();    Iterator  iter  =  arguments[iter.next()].iterator();	  	non-compiled	[CE]  variable  iter  is  already  defined  in  method  flatten(Options,String[],boolean)	361	None
52	[BUG]  [BUGGY]  tokens.add(PositionParser.UNWrappedValue());  [CE]  <identifier>  expected  [CONTEXT]      [BUGGY]  tokens.add(PositionParser.UNWrappedValue());  [BUGGY]    private  ArrayList  tokens  =  new  ArrayList();  [CLASS]  PosixParser  [VARIABLES]  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	33	33	1	replace	tokens.add(PositionParser.UNWrappedValue());	      tokens.add(PositionParser.unwrappedValue());    	non-compiled	[CE]  <identifier>  expected	574	None
53	[BUG]  [BUGGY]  tokens.add(PositionParser.unwrappedValue()  +  1);  [CE]  <identifier>  expected  [CONTEXT]      [BUGGY]  tokens.add(PositionParser.unwrappedValue()  +  1);  [BUGGY]    private  ArrayList  tokens  =  new  ArrayList();  [CLASS]  PosixParser  [VARIABLES]  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	33	33	1	replace	tokens.add(PositionParser.unwrappedValue()  +  1);	      tokens.add(PositionParser.unwrappedValue());    	non-compiled	[CE]  <identifier>  expected	574	None
54	[BUG]  [BUGGY]  tokens.add(PositionParser.unewrappedValue());  [CE]  <identifier>  expected  [CONTEXT]      [BUGGY]  tokens.add(PositionParser.unewrappedValue());  [BUGGY]    private  ArrayList  tokens  =  new  ArrayList();  [CLASS]  PosixParser  [VARIABLES]  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	33	33	1	replace	tokens.add(PositionParser.unewrappedValue());	      tokens.add(PositionParser.unwrappedValue());    	non-compiled	[CE]  <identifier>  expected	574	None
62	[BUG]  [BUGGY]  tokens.add(options.size());  currentOption  =  null;  [CE]  cannot  find  symbol  [CONTEXT]    private  void  init()  {    [BUGGY]  tokens.add(options.size());  currentOption  =  null;  [BUGGY]    eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	51	51	1	replace	tokens.add(options.size());  currentOption  =  null;	      tokens.add(options.size()    -    1);    currentOption    =    null;    	non-compiled	[CE]  cannot  find  symbol	223	None
