bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	patch
2	[BUG] [BUGGY] private ArrayList tokens = new ArrayList(); [FE] UnrecognizedOptionException [CONTEXT] [BUGGY] private ArrayList tokens = new ArrayList(); [BUGGY]  [CLASS] PosixParser  [VARIABLES] 	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	33	33	1	
3	[BUG] [BUGGY] eatTheRest = false; [FE] UnrecognizedOptionException [CONTEXT] private void init() { [BUGGY] eatTheRest = false; [BUGGY] tokens.clear(); currentOption = null; } [CLASS] PosixParser [METHOD] init [RETURN_TYPE] void  [VARIABLES] ArrayList tokens Options options Option currentOption boolean eatTheRest  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	51	51	1	
4	[BUG] [BUGGY] tokens.clear(); [FE] UnrecognizedOptionException [CONTEXT] private void init() { eatTheRest = false; [BUGGY] tokens.clear(); [BUGGY] currentOption = null; } [CLASS] PosixParser [METHOD] init [RETURN_TYPE] void  [VARIABLES] ArrayList tokens Options options Option currentOption boolean eatTheRest  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	52	52	1	
5	[BUG] [BUGGY] currentOption = null; [FE] UnrecognizedOptionException [CONTEXT] private void init() { eatTheRest = false; tokens.clear(); [BUGGY] currentOption = null; [BUGGY] } [CLASS] PosixParser [METHOD] init [RETURN_TYPE] void  [VARIABLES] ArrayList tokens Options options Option currentOption boolean eatTheRest  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	53	53	1	
6	[BUG] [BUGGY] } [FE] UnrecognizedOptionException [CONTEXT] private void init() { eatTheRest = false; tokens.clear(); currentOption = null; [BUGGY] } [BUGGY]  [CLASS] PosixParser [METHOD] init [RETURN_TYPE] void  [VARIABLES] ArrayList tokens Options options Option currentOption boolean eatTheRest  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	54	54	1	
7	[BUG] [BUGGY] init(); [FE] UnrecognizedOptionException [CONTEXT] { [BUGGY] init(); [BUGGY] this.options = options;  Iterator iter = Arrays.asList(arguments).iterator(); String token;  while (iter.hasNext()) {  [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption ArrayList tokens Iterator iter Option currentOption String[] arguments String token int tokenLength  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	97	97	1	
8	[BUG] [BUGGY] this.options = options; [FE] UnrecognizedOptionException [CONTEXT] { init(); [BUGGY] this.options = options; [BUGGY]   Iterator iter = Arrays.asList(arguments).iterator(); String token;  while (iter.hasNext()) {  token = (String) iter.next(); [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption ArrayList tokens Iterator iter Option currentOption String[] arguments String token int tokenLength  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	98	98	1	
9	[BUG] [BUGGY] Iterator iter = Arrays.asList(arguments).iterator(); [FE] UnrecognizedOptionException [CONTEXT] { init(); this.options = options;  [BUGGY] Iterator iter = Arrays.asList(arguments).iterator(); [BUGGY] String token;  while (iter.hasNext()) {  token = (String) iter.next();  if (token.startsWith("--")) [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption ArrayList tokens Iterator iter Option currentOption String[] arguments String token int tokenLength  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	101	101	1	
10	[BUG] [BUGGY] while (iter.hasNext()) {  // get the next command line token [FE] UnrecognizedOptionException [CONTEXT] { init(); this.options = options;  Iterator iter = Arrays.asList(arguments).iterator(); String token;  [BUGGY] while (iter.hasNext())    {      // get the next command line token [BUGGY] {  token = (String) iter.next();  if (token.startsWith("--")) { if (token.indexOf('=') != -1) { tokens.add(token.substring(0, token.indexOf('='))); [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption ArrayList tokens Iterator iter Option currentOption String[] arguments String token int tokenLength  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	105	107	1	
11	[BUG] [BUGGY] token = (String) iter.next(); [FE] UnrecognizedOptionException [CONTEXT] while (iter.hasNext()) {  [BUGGY] token = (String) iter.next(); [BUGGY]   if (token.startsWith("--")) { if (token.indexOf('=') != -1) { tokens.add(token.substring(0, token.indexOf('='))); tokens.add(token.substring(token.indexOf('=') + 1, token.length())); } [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption ArrayList tokens Iterator iter Option currentOption String[] arguments String token int tokenLength  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	108	108	1	
12	[BUG] [BUGGY] if (token.startsWith("--"))  {  if (token.indexOf('=') != -1) [FE] UnrecognizedOptionException [CONTEXT] while (iter.hasNext()) {  token = (String) iter.next();  [BUGGY] if (token.startsWith("--"))      {        if (token.indexOf('=') != -1) [BUGGY] { if (token.indexOf('=') != -1) { tokens.add(token.substring(0, token.indexOf('='))); tokens.add(token.substring(token.indexOf('=') + 1, token.length())); } else { tokens.add(token); [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption ArrayList tokens Iterator iter Option currentOption String[] arguments String token int tokenLength  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	111	113	1	
13	[BUG] [BUGGY] else if ("-".equals(token))  {  processSingleHyphen(token); [FE] UnrecognizedOptionException [CONTEXT] tokens.add(token.substring(token.indexOf('=') + 1, token.length())); } else { tokens.add(token); } }  [BUGGY] else if ("-".equals(token))      {        processSingleHyphen(token); [BUGGY] { processSingleHyphen(token); } else if (token.startsWith("-")) { int tokenLength = token.length(); if (tokenLength == 2) { processOptionToken(token, stopAtNonOption); [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption ArrayList tokens Iterator iter Option currentOption String[] arguments String token int tokenLength  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	126	128	1	
14	[BUG] [BUGGY] else if (token.startsWith("-"))  {  int tokenLength = token.length(); [FE] UnrecognizedOptionException [CONTEXT] { tokens.add(token); } }  else if ("-".equals(token)) { processSingleHyphen(token); } [BUGGY] else if (token.startsWith("-"))      {        int tokenLength = token.length(); [BUGGY] { int tokenLength = token.length(); if (tokenLength == 2) { processOptionToken(token, stopAtNonOption); } else if (options.hasOption(token)) { tokens.add(token); } [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption ArrayList tokens Iterator iter Option currentOption String[] arguments String token int tokenLength  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	130	132	1	
15	[BUG] [BUGGY] int tokenLength = token.length(); [FE] UnrecognizedOptionException [CONTEXT] } }  else if ("-".equals(token)) { processSingleHyphen(token); } else if (token.startsWith("-")) { [BUGGY] int tokenLength = token.length(); [BUGGY]  if (tokenLength == 2) { processOptionToken(token, stopAtNonOption); } else if (options.hasOption(token)) { tokens.add(token); }  else [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption ArrayList tokens Iterator iter Option currentOption String[] arguments String token int tokenLength  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	132	132	1	
16	[BUG] [BUGGY] if (tokenLength == 2)  {   processOptionToken(token, stopAtNonOption); [FE] UnrecognizedOptionException [CONTEXT] else if (token.startsWith("-")) { int tokenLength = token.length(); [BUGGY] if (tokenLength == 2)        {          processOptionToken(token, stopAtNonOption); [BUGGY] { processOptionToken(token, stopAtNonOption); } else if (options.hasOption(token)) { tokens.add(token); }  else { burstToken(token, stopAtNonOption); [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption ArrayList tokens Iterator iter Option currentOption String[] arguments String token int tokenLength  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	134	136	1	
17	[BUG] [BUGGY] processOptionToken(token, stopAtNonOption); [FE] UnrecognizedOptionException [CONTEXT] else if (token.startsWith("-")) { int tokenLength = token.length(); if (tokenLength == 2) { [BUGGY] processOptionToken(token, stopAtNonOption); [BUGGY] } else if (options.hasOption(token)) { tokens.add(token); }  else { burstToken(token, stopAtNonOption); } } [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption ArrayList tokens Iterator iter Option currentOption String[] arguments String token int tokenLength  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	136	136	1	
18	[BUG] [BUGGY] else if (options.hasOption(token)) { [FE] UnrecognizedOptionException [CONTEXT] else if (token.startsWith("-")) { int tokenLength = token.length(); if (tokenLength == 2) { processOptionToken(token, stopAtNonOption); } [BUGGY] else if (options.hasOption(token)) { [BUGGY] tokens.add(token); }  else { burstToken(token, stopAtNonOption); } } else { [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption ArrayList tokens Iterator iter Option currentOption String[] arguments String token int tokenLength  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	138	138	1	
19	[BUG] [BUGGY] burstToken(token, stopAtNonOption); [FE] UnrecognizedOptionException [CONTEXT] else if (options.hasOption(token)) { tokens.add(token); }  else { [BUGGY] burstToken(token, stopAtNonOption); [BUGGY] } [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption ArrayList tokens Iterator iter Option currentOption String[] arguments String token int tokenLength  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	144	144	1	
20	[BUG] [BUGGY] [FE] UnrecognizedOptionException [CONTEXT] else if (options.hasOption(token)) { tokens.add(token); }  else { burstToken(token, stopAtNonOption); } [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption ArrayList tokens Iterator iter Option currentOption String[] arguments String token int tokenLength  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	146	146	1	
21	[BUG] [BUGGY] gobble(iter); [FE] UnrecognizedOptionException [CONTEXT] if (stopAtNonOption) { process(token); } else { tokens.add(token); } } [BUGGY] gobble(iter); [BUGGY] } [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption ArrayList tokens Iterator iter Option currentOption String[] arguments String token int tokenLength  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	159	159	1	
22	[BUG] [BUGGY] return (String[]) tokens.toArray(new String[] {}); [FE] UnrecognizedOptionException [CONTEXT] } else { tokens.add(token); } } gobble(iter); } [BUGGY] return (String[]) tokens.toArray(new String[] {}); [BUGGY] } [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption ArrayList tokens Iterator iter Option currentOption String[] arguments String token int tokenLength  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	162	162	1	
23	[BUG] [BUGGY] if (eatTheRest) {  while (iter.hasNext()) [FE] UnrecognizedOptionException [CONTEXT] private void gobble(Iterator iter) { [BUGGY] if (eatTheRest)    {      while (iter.hasNext()) [BUGGY] { while (iter.hasNext()) { tokens.add(iter.next()); } } } [CLASS] PosixParser [METHOD] gobble [RETURN_TYPE] void  Iterator iter [VARIABLES] ArrayList tokens Iterator iter Options options Option currentOption boolean eatTheRest stopAtNonOption  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	172	174	1	
25	[BUG] [BUGGY] if (this.options.hasOption(token)) {  currentOption = this.options.getOption(token); [FE] UnrecognizedOptionException [CONTEXT] private void processOptionToken(String token, boolean stopAtNonOption) { [BUGGY] if (this.options.hasOption(token))    {      currentOption = this.options.getOption(token); [BUGGY] { currentOption = this.options.getOption(token); tokens.add(token); } else if (stopAtNonOption) { eatTheRest = true; } } [CLASS] PosixParser [METHOD] processOptionToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] ArrayList tokens Options options Option currentOption boolean eatTheRest stopAtNonOption String token  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	241	243	1	
26	[BUG] [BUGGY] currentOption = this.options.getOption(token); [FE] UnrecognizedOptionException [CONTEXT] private void processOptionToken(String token, boolean stopAtNonOption) { if (this.options.hasOption(token)) { [BUGGY] currentOption = this.options.getOption(token); [BUGGY] tokens.add(token); } else if (stopAtNonOption) { eatTheRest = true; } } [CLASS] PosixParser [METHOD] processOptionToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] ArrayList tokens Options options Option currentOption boolean eatTheRest stopAtNonOption String token  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	243	243	1	
27	[BUG] [BUGGY] tokens.add(token); [FE] UnrecognizedOptionException [CONTEXT] private void processOptionToken(String token, boolean stopAtNonOption) { if (this.options.hasOption(token)) { currentOption = this.options.getOption(token); [BUGGY] tokens.add(token); [BUGGY] } else if (stopAtNonOption) { eatTheRest = true; } } [CLASS] PosixParser [METHOD] processOptionToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] ArrayList tokens Options options Option currentOption boolean eatTheRest stopAtNonOption String token  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	244	244	1	
28	[BUG] [BUGGY] } [FE] UnrecognizedOptionException [CONTEXT] { if (this.options.hasOption(token)) { currentOption = this.options.getOption(token); tokens.add(token); } else if (stopAtNonOption) { eatTheRest = true; } [BUGGY] } [BUGGY]  [CLASS] PosixParser [METHOD] processOptionToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] ArrayList tokens Options options Option currentOption boolean eatTheRest stopAtNonOption String token  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	250	250	1	
29	[BUG] [BUGGY] int tokenLength = token.length(); [FE] UnrecognizedOptionException [CONTEXT] { [BUGGY] int tokenLength = token.length(); [BUGGY]  for (int i = 1; i < tokenLength; i++) { String ch = String.valueOf(token.charAt(i)); boolean hasOption = options.hasOption(ch); if (hasOption) { tokens.add("-" + ch); currentOption = options.getOption(ch); [CLASS] PosixParser [METHOD] burstToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] ArrayList tokens Options options Option currentOption boolean eatTheRest hasOption stopAtNonOption String ch token int i tokenLength  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	280	280	1	
30	[BUG] [BUGGY] for (int i = 1; i < tokenLength; i++) {  String ch = String.valueOf(token.charAt(i)); [FE] UnrecognizedOptionException [CONTEXT] { int tokenLength = token.length(); [BUGGY] for (int i = 1; i < tokenLength; i++)    {      String ch = String.valueOf(token.charAt(i)); [BUGGY] { String ch = String.valueOf(token.charAt(i)); boolean hasOption = options.hasOption(ch); if (hasOption) { tokens.add("-" + ch); currentOption = options.getOption(ch); if (currentOption.hasArg() && (token.length() != (i + 1))) [CLASS] PosixParser [METHOD] burstToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] ArrayList tokens Options options Option currentOption boolean eatTheRest hasOption stopAtNonOption String ch token int i tokenLength  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	282	284	1	
31	[BUG] [BUGGY] String ch = String.valueOf(token.charAt(i)); [FE] UnrecognizedOptionException [CONTEXT] { int tokenLength = token.length(); for (int i = 1; i < tokenLength; i++) { [BUGGY] String ch = String.valueOf(token.charAt(i)); [BUGGY] boolean hasOption = options.hasOption(ch); if (hasOption) { tokens.add("-" + ch); currentOption = options.getOption(ch); if (currentOption.hasArg() && (token.length() != (i + 1))) { tokens.add(token.substring(i + 1)); [CLASS] PosixParser [METHOD] burstToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] ArrayList tokens Options options Option currentOption boolean eatTheRest hasOption stopAtNonOption String ch token int i tokenLength  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	284	284	1	
32	[BUG] [BUGGY] boolean hasOption = options.hasOption(ch); [FE] UnrecognizedOptionException [CONTEXT] { int tokenLength = token.length(); for (int i = 1; i < tokenLength; i++) { String ch = String.valueOf(token.charAt(i)); [BUGGY] boolean hasOption = options.hasOption(ch); [BUGGY]  if (hasOption) { tokens.add("-" + ch); currentOption = options.getOption(ch); if (currentOption.hasArg() && (token.length() != (i + 1))) { tokens.add(token.substring(i + 1));  [CLASS] PosixParser [METHOD] burstToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] ArrayList tokens Options options Option currentOption boolean eatTheRest hasOption stopAtNonOption String ch token int i tokenLength  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	285	285	1	
33	[BUG] [BUGGY] if (hasOption)  {  tokens.add("-" + ch); [FE] UnrecognizedOptionException [CONTEXT] { int tokenLength = token.length(); for (int i = 1; i < tokenLength; i++) { String ch = String.valueOf(token.charAt(i)); boolean hasOption = options.hasOption(ch); [BUGGY] if (hasOption)      {        tokens.add("-" + ch); [BUGGY] { tokens.add("-" + ch); currentOption = options.getOption(ch); if (currentOption.hasArg() && (token.length() != (i + 1))) { tokens.add(token.substring(i + 1)); break; } [CLASS] PosixParser [METHOD] burstToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] ArrayList tokens Options options Option currentOption boolean eatTheRest hasOption stopAtNonOption String ch token int i tokenLength  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	287	289	1	
34	[BUG] [BUGGY] tokens.add("-" + ch); [FE] UnrecognizedOptionException [CONTEXT] { int tokenLength = token.length(); for (int i = 1; i < tokenLength; i++) { String ch = String.valueOf(token.charAt(i)); boolean hasOption = options.hasOption(ch); if (hasOption) { [BUGGY] tokens.add("-" + ch); [BUGGY] currentOption = options.getOption(ch); if (currentOption.hasArg() && (token.length() != (i + 1))) { tokens.add(token.substring(i + 1)); break; } } else if (stopAtNonOption) [CLASS] PosixParser [METHOD] burstToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] ArrayList tokens Options options Option currentOption boolean eatTheRest hasOption stopAtNonOption String ch token int i tokenLength  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	289	289	1	
35	[BUG] [BUGGY] currentOption = options.getOption(ch); [FE] UnrecognizedOptionException [CONTEXT] if (hasOption) { tokens.add("-" + ch); [BUGGY] currentOption = options.getOption(ch); [BUGGY]  if (currentOption.hasArg() && (token.length() != (i + 1))) { tokens.add(token.substring(i + 1)); break; } } else if (stopAtNonOption) { [CLASS] PosixParser [METHOD] burstToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] ArrayList tokens Options options Option currentOption boolean eatTheRest hasOption stopAtNonOption String ch token int i tokenLength  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	290	290	1	
36	[BUG] [BUGGY] if (currentOption.hasArg() && (token.length() != (i + 1)))  {   tokens.add(token.substring(i + 1)); [FE] UnrecognizedOptionException [CONTEXT] if (hasOption) { tokens.add("-" + ch); currentOption = options.getOption(ch); [BUGGY] if (currentOption.hasArg() && (token.length() != (i + 1)))        {          tokens.add(token.substring(i + 1)); [BUGGY] { tokens.add(token.substring(i + 1)); break; } } else if (stopAtNonOption) { process(token.substring(i)); } [CLASS] PosixParser [METHOD] burstToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] ArrayList tokens Options options Option currentOption boolean eatTheRest hasOption stopAtNonOption String ch token int i tokenLength  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	292	294	1	
37	[BUG] [BUGGY] tokens.add(token.substring(i + 1)); [FE] UnrecognizedOptionException [CONTEXT] if (hasOption) { tokens.add("-" + ch); currentOption = options.getOption(ch); if (currentOption.hasArg() && (token.length() != (i + 1))) { [BUGGY] tokens.add(token.substring(i + 1)); [BUGGY]  break; } } else if (stopAtNonOption) { process(token.substring(i)); } else { [CLASS] PosixParser [METHOD] burstToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] ArrayList tokens Options options Option currentOption boolean eatTheRest hasOption stopAtNonOption String ch token int i tokenLength  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	294	294	1	
38	[BUG] [BUGGY] break; [FE] UnrecognizedOptionException [CONTEXT] if (hasOption) { tokens.add("-" + ch); currentOption = options.getOption(ch); if (currentOption.hasArg() && (token.length() != (i + 1))) { tokens.add(token.substring(i + 1)); [BUGGY] break; [BUGGY] } } else if (stopAtNonOption) { process(token.substring(i)); } else { tokens.add("-" + ch); } [CLASS] PosixParser [METHOD] burstToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] ArrayList tokens Options options Option currentOption boolean eatTheRest hasOption stopAtNonOption String ch token int i tokenLength  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	296	296	1	
39	[BUG] [BUGGY] else if (stopAtNonOption)  {  process(token.substring(i)); [FE] UnrecognizedOptionException [CONTEXT] tokens.add("-" + ch); currentOption = options.getOption(ch); if (currentOption.hasArg() && (token.length() != (i + 1))) { tokens.add(token.substring(i + 1)); break; } } [BUGGY] else if (stopAtNonOption)      {        process(token.substring(i)); [BUGGY] { process(token.substring(i)); } else { tokens.add("-" + ch); } } } [CLASS] PosixParser [METHOD] burstToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] ArrayList tokens Options options Option currentOption boolean eatTheRest hasOption stopAtNonOption String ch token int i tokenLength  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	299	301	1	
40	[BUG] [BUGGY] tokens.add("-" + ch); [FE] UnrecognizedOptionException [CONTEXT] else if (stopAtNonOption) { process(token.substring(i)); } else { [BUGGY] tokens.add("-" + ch); [BUGGY] } [CLASS] PosixParser [METHOD] burstToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] ArrayList tokens Options options Option currentOption boolean eatTheRest hasOption stopAtNonOption String ch token int i tokenLength  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	305	305	1	
