bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	original_buggy	action	patch	execution_result	diagnosis	previous_bug_id	original_failing_test_number
421	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    while  (iter.hasNext())  {    token  =  (String)  iter.next();      [BUGGY]  if(token.startsWith( "-- ")||  token.endsWith( "-- "))  {  [BUGGY]    {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	111	112	1	add	if(token.startsWith( "-- ")||  token.endsWith( "-- "))  {	if  (token.startsWith( "-- "))  {  	compilable	  [FE]  UnrecognizedOptionException	22	1
422	[BUG]  [BUGGY]  if(token.startsWith( "-- ")||  token.endsWith( "-- "))  {    [FE]  UnrecognizedOptionException  [CONTEXT]    while  (iter.hasNext())  {    token  =  (String)  iter.next();      [BUGGY]  if(token.startsWith( "-- ")||  token.endsWith( "-- "))  {  [BUGGY]    {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	111	112	1	replace	if(token.startsWith( "-- ")||  token.endsWith( "-- "))  {	if  (token.startsWith( "-- "))  {  	compilable	  [FE]  UnrecognizedOptionException	22	1
422	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    while  (iter.hasNext())  {    token  =  (String)  iter.next();      [BUGGY]  if(token.startsWith( "-- ")||  token.startsWith( "-- "))  {  [BUGGY]    {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	111	112	1	add	if(token.startsWith( "-- ")||  token.startsWith( "-- "))  {	if  (token.startsWith( "-- "))  {  	compilable	  [FE]  UnrecognizedOptionException	22	1
423	[BUG]  [BUGGY]  if(token.startsWith( "-- ")||  token.startsWith( "-- "))  {    [FE]  UnrecognizedOptionException  [CONTEXT]    while  (iter.hasNext())  {    token  =  (String)  iter.next();      [BUGGY]  if(token.startsWith( "-- ")||  token.startsWith( "-- "))  {  [BUGGY]    {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	111	112	1	replace	if(token.startsWith( "-- ")||  token.startsWith( "-- "))  {	if  (token.startsWith( "-- "))  {  	compilable	  [FE]  UnrecognizedOptionException	22	1
424	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    while  (iter.hasNext())  {    token  =  (String)  iter.next();      [BUGGY]  if(!stopAtNonOption  &&  token.startsWith( "-- "))  {  [BUGGY]    {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	111	112	1	add	if(!stopAtNonOption  &&  token.startsWith( "-- "))  {	if  (token.startsWith( "-- "))  {  	compilable	  [FE]  UnrecognizedOptionException	22	1
425	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  token.startsWith( "-- "))  {    [FE]  UnrecognizedOptionException  [CONTEXT]    while  (iter.hasNext())  {    token  =  (String)  iter.next();      [BUGGY]  if(!stopAtNonOption  &&  token.startsWith( "-- "))  {  [BUGGY]    {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	111	112	1	replace	if(!stopAtNonOption  &&  token.startsWith( "-- "))  {	if  (token.startsWith( "-- "))  {  	compilable	  [FE]  UnrecognizedOptionException	22	1
425	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    while  (iter.hasNext())  {    token  =  (String)  iter.next();      [BUGGY]  if(token.startsWith( "-- ")||  token.endsWith( ".-- "))  {  [BUGGY]    {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	111	112	1	add	if(token.startsWith( "-- ")||  token.endsWith( ".-- "))  {	if  (token.startsWith( "-- "))  {  	compilable	  [FE]  UnrecognizedOptionException	22	1
426	[BUG]  [BUGGY]  if(token.startsWith( "-- ")||  token.endsWith( ".-- "))  {    [FE]  UnrecognizedOptionException  [CONTEXT]    while  (iter.hasNext())  {    token  =  (String)  iter.next();      [BUGGY]  if(token.startsWith( "-- ")||  token.endsWith( ".-- "))  {  [BUGGY]    {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	111	112	1	replace	if(token.startsWith( "-- ")||  token.endsWith( ".-- "))  {	if  (token.startsWith( "-- "))  {  	compilable	  [FE]  UnrecognizedOptionException	22	1
426	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    while  (iter.hasNext())  {    token  =  (String)  iter.next();      [BUGGY]  if(!token.startsWith( "-- "))  {  [BUGGY]    {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	111	112	1	add	if(!token.startsWith( "-- "))  {	if  (token.startsWith( "-- "))  {  	compilable	  [FE]  UnrecognizedOptionException	22	1
427	[BUG]  [BUGGY]  if(!token.startsWith( "-- "))  {    [FE]  UnrecognizedOptionException  [CONTEXT]    while  (iter.hasNext())  {    token  =  (String)  iter.next();      [BUGGY]  if(!token.startsWith( "-- "))  {  [BUGGY]    {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	111	112	1	replace	if(!token.startsWith( "-- "))  {	if  (token.startsWith( "-- "))  {  	compilable	  [FE]  UnrecognizedOptionException	22	1
427	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    while  (iter.hasNext())  {    token  =  (String)  iter.next();      [BUGGY]  if(token.startsWith( "-- ")||  token.startsWith( ".-- "))  {  [BUGGY]    {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	111	112	1	add	if(token.startsWith( "-- ")||  token.startsWith( ".-- "))  {	if  (token.startsWith( "-- "))  {  	compilable	  [FE]  UnrecognizedOptionException	22	1
428	[BUG]  [BUGGY]  if(token.startsWith( "-- ")||  token.startsWith( ".-- "))  {    [FE]  UnrecognizedOptionException  [CONTEXT]    while  (iter.hasNext())  {    token  =  (String)  iter.next();      [BUGGY]  if(token.startsWith( "-- ")||  token.startsWith( ".-- "))  {  [BUGGY]    {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	111	112	1	replace	if(token.startsWith( "-- ")||  token.startsWith( ".-- "))  {	if  (token.startsWith( "-- "))  {  	compilable	  [FE]  UnrecognizedOptionException	22	1
428	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    while  (iter.hasNext())  {    token  =  (String)  iter.next();      [BUGGY]  if(token.endsWith( "-- "))  {  [BUGGY]    {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	111	112	1	add	if(token.endsWith( "-- "))  {	if  (token.startsWith( "-- "))  {  	compilable	  [FE]  UnrecognizedOptionException	22	1
429	[BUG]  [BUGGY]  if(token.endsWith( "-- "))  {    [FE]  UnrecognizedOptionException  [CONTEXT]    while  (iter.hasNext())  {    token  =  (String)  iter.next();      [BUGGY]  if(token.endsWith( "-- "))  {  [BUGGY]    {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	111	112	1	replace	if(token.endsWith( "-- "))  {	if  (token.startsWith( "-- "))  {  	compilable	  [FE]  UnrecognizedOptionException	22	1
429	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    while  (iter.hasNext())  {    token  =  (String)  iter.next();      [BUGGY]  if(token.startsWith( "-- ")||  token.endsWith( ".- "))  {  [BUGGY]    {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	111	112	1	add	if(token.startsWith( "-- ")||  token.endsWith( ".- "))  {	if  (token.startsWith( "-- "))  {  	compilable	  [FE]  UnrecognizedOptionException	22	1
430	[BUG]  [BUGGY]  if(token.startsWith( "-- ")||  token.endsWith( ".- "))  {    [FE]  UnrecognizedOptionException  [CONTEXT]    while  (iter.hasNext())  {    token  =  (String)  iter.next();      [BUGGY]  if(token.startsWith( "-- ")||  token.endsWith( ".- "))  {  [BUGGY]    {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	111	112	1	replace	if(token.startsWith( "-- ")||  token.endsWith( ".- "))  {	if  (token.startsWith( "-- "))  {  	compilable	  [FE]  UnrecognizedOptionException	22	1
430	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    while  (iter.hasNext())  {    token  =  (String)  iter.next();      [BUGGY]  if(token.startsWith( "-- ")||  token.endsWith( ",-- "))  {  [BUGGY]    {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	111	112	1	add	if(token.startsWith( "-- ")||  token.endsWith( ",-- "))  {	if  (token.startsWith( "-- "))  {  	compilable	  [FE]  UnrecognizedOptionException	22	1
431	[BUG]  [BUGGY]  if(token.startsWith( "-- ")||  token.endsWith( ",-- "))  {    [FE]  UnrecognizedOptionException  [CONTEXT]    while  (iter.hasNext())  {    token  =  (String)  iter.next();      [BUGGY]  if(token.startsWith( "-- ")||  token.endsWith( ",-- "))  {  [BUGGY]    {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	111	112	1	replace	if(token.startsWith( "-- ")||  token.endsWith( ",-- "))  {	if  (token.startsWith( "-- "))  {  	compilable	  [FE]  UnrecognizedOptionException	22	1
404	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    while  (iter.hasNext())  {      [BUGGY]  token  =(String)iter.next();  [BUGGY]    token  =  (String)  iter.next();    if  (token.startsWith( "-- "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	108	108	1	add	token  =(String)iter.next();		compilable	  [FE]  UnrecognizedOptionException	21	1
405	[BUG]  [BUGGY]  token  =(String)iter.next();    [FE]  UnrecognizedOptionException  [CONTEXT]    while  (iter.hasNext())  {      [BUGGY]  token  =(String)iter.next();  [BUGGY]    token  =  (String)  iter.next();    if  (token.startsWith( "-- "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	108	108	1	replace	token  =(String)iter.next();		compilable	  [FE]  UnrecognizedOptionException	21	1
407	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    while  (iter.hasNext())  {      [BUGGY]  tokens.add(iter.next());  [BUGGY]    token  =  (String)  iter.next();    if  (token.startsWith( "-- "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	108	108	1	add	tokens.add(iter.next());		compilable	  [FE]  UnrecognizedOptionException	21	1
408	[BUG]  [BUGGY]  tokens.add(iter.next());    [FE]  UnrecognizedOptionException  [CONTEXT]    while  (iter.hasNext())  {      [BUGGY]  tokens.add(iter.next());  [BUGGY]    token  =  (String)  iter.next();    if  (token.startsWith( "-- "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	108	108	1	replace	tokens.add(iter.next());		compilable	  [FE]  UnrecognizedOptionException	21	1
641	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {    [BUGGY]  tokens.add(token);  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	136	136	1	add	tokens.add(token);		compilable	  [FE]  UnrecognizedOptionException	33	1
642	[BUG]  [BUGGY]  tokens.add(token);    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {    [BUGGY]  tokens.add(token);  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	136	136	1	replace	tokens.add(token);		compilable	  [FE]  UnrecognizedOptionException	33	1
642	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {    [BUGGY]  burstToken(token,  stopAtNonOption);  tokens.add(token);  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	136	136	1	add	burstToken(token,  stopAtNonOption);  tokens.add(token);		compilable	  [FE]  UnrecognizedOptionException	33	1
643	[BUG]  [BUGGY]  burstToken(token,  stopAtNonOption);  tokens.add(token);    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {    [BUGGY]  burstToken(token,  stopAtNonOption);  tokens.add(token);  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	136	136	1	replace	burstToken(token,  stopAtNonOption);  tokens.add(token);		compilable	  [FE]  UnrecognizedOptionException	33	1
644	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {    [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  tokens.add(token);  burstToken(token,  stopAtNonOption);  }  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	136	136	1	add	if(stopAtNonOption)  {  tokens.add(token);  }  else  {  tokens.add(token);  burstToken(token,  stopAtNonOption);  }		compilable	  [FE]  UnrecognizedOptionException	33	1
645	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  tokens.add(token);  burstToken(token,  stopAtNonOption);  }    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {    [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  tokens.add(token);  burstToken(token,  stopAtNonOption);  }  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	136	136	1	replace	if(stopAtNonOption)  {  tokens.add(token);  }  else  {  tokens.add(token);  burstToken(token,  stopAtNonOption);  }		compilable	  [FE]  UnrecognizedOptionException	33	1
647	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {    [BUGGY]  tokens.add(token);  tokens.add(arguments[0]);  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	136	136	1	add	tokens.add(token);  tokens.add(arguments[0]);		compilable	  [FE]  UnrecognizedOptionException	33	1
648	[BUG]  [BUGGY]  tokens.add(token);  tokens.add(arguments[0]);    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {    [BUGGY]  tokens.add(token);  tokens.add(arguments[0]);  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	136	136	1	replace	tokens.add(token);  tokens.add(arguments[0]);		compilable	  [FE]  UnrecognizedOptionException	33	1
650	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {    [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(token);  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	136	136	1	add	tokens.add(token);  currentOption  =  options.getOption(token);		compilable	  [FE]  UnrecognizedOptionException	33	1
651	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(token);    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {    [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(token);  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	136	136	1	replace	tokens.add(token);  currentOption  =  options.getOption(token);		compilable	  [FE]  UnrecognizedOptionException	33	1
981	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (this.options.hasOption(token))  {    [BUGGY]  tokens.add(token);  [BUGGY]    currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	243	243	1	add	tokens.add(token);		compilable	  [FE]  UnrecognizedOptionException	50	1
982	[BUG]  [BUGGY]  tokens.add(token);    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (this.options.hasOption(token))  {    [BUGGY]  tokens.add(token);  [BUGGY]    currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	243	243	1	replace	tokens.add(token);		compilable	  [FE]  UnrecognizedOptionException	50	1
982	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (this.options.hasOption(token))  {    [BUGGY]  tokens.add(token);  currentOption  =  this.options.getOption(token);  [BUGGY]    currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	243	243	1	add	tokens.add(token);  currentOption  =  this.options.getOption(token);		compilable	  [FE]  UnrecognizedOptionException	50	1
983	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  this.options.getOption(token);    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (this.options.hasOption(token))  {    [BUGGY]  tokens.add(token);  currentOption  =  this.options.getOption(token);  [BUGGY]    currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	243	243	1	replace	tokens.add(token);  currentOption  =  this.options.getOption(token);		compilable	  [FE]  UnrecognizedOptionException	50	1
983	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (this.options.hasOption(token))  {    [BUGGY]  tokens.add( "- ");  currentOption  =  this.options.getOption(token);  [BUGGY]    currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	243	243	1	add	tokens.add( "- ");  currentOption  =  this.options.getOption(token);		compilable	  [FE]  UnrecognizedOptionException	50	1
984	[BUG]  [BUGGY]  tokens.add( "- ");  currentOption  =  this.options.getOption(token);    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (this.options.hasOption(token))  {    [BUGGY]  tokens.add( "- ");  currentOption  =  this.options.getOption(token);  [BUGGY]    currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	243	243	1	replace	tokens.add( "- ");  currentOption  =  this.options.getOption(token);		compilable	  [FE]  UnrecognizedOptionException	50	1
984	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (this.options.hasOption(token))  {    [BUGGY]  tokens.add( "- ");  tokens.add(token);  [BUGGY]    currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	243	243	1	add	tokens.add( "- ");  tokens.add(token);		compilable	  [FE]  UnrecognizedOptionException	50	1
985	[BUG]  [BUGGY]  tokens.add( "- ");  tokens.add(token);    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (this.options.hasOption(token))  {    [BUGGY]  tokens.add( "- ");  tokens.add(token);  [BUGGY]    currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	243	243	1	replace	tokens.add( "- ");  tokens.add(token);		compilable	  [FE]  UnrecognizedOptionException	50	1
985	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (this.options.hasOption(token))  {    [BUGGY]  tokens.remove(token);  [BUGGY]    currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	243	243	1	add	tokens.remove(token);		compilable	  [FE]  UnrecognizedOptionException	50	1
986	[BUG]  [BUGGY]  tokens.remove(token);    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (this.options.hasOption(token))  {    [BUGGY]  tokens.remove(token);  [BUGGY]    currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	243	243	1	replace	tokens.remove(token);		compilable	  [FE]  UnrecognizedOptionException	50	1
986	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (this.options.hasOption(token))  {    [BUGGY]  tokens.remove(token);  tokens.add(token);  [BUGGY]    currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	243	243	1	add	tokens.remove(token);  tokens.add(token);		compilable	  [FE]  UnrecognizedOptionException	50	1
987	[BUG]  [BUGGY]  tokens.remove(token);  tokens.add(token);    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (this.options.hasOption(token))  {    [BUGGY]  tokens.remove(token);  tokens.add(token);  [BUGGY]    currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	243	243	1	replace	tokens.remove(token);  tokens.add(token);		compilable	  [FE]  UnrecognizedOptionException	50	1
987	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (this.options.hasOption(token))  {    [BUGGY]  tokens.add( "- ");  [BUGGY]    currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	243	243	1	add	tokens.add( "- ");		compilable	  [FE]  UnrecognizedOptionException	50	1
988	[BUG]  [BUGGY]  tokens.add( "- ");    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (this.options.hasOption(token))  {    [BUGGY]  tokens.add( "- ");  [BUGGY]    currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	243	243	1	replace	tokens.add( "- ");		compilable	  [FE]  UnrecognizedOptionException	50	1
988	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (this.options.hasOption(token))  {    [BUGGY]  tokens.add(token);  tokens.add(token);  [BUGGY]    currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	243	243	1	add	tokens.add(token);  tokens.add(token);		compilable	  [FE]  UnrecognizedOptionException	50	1
989	[BUG]  [BUGGY]  tokens.add(token);  tokens.add(token);    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (this.options.hasOption(token))  {    [BUGGY]  tokens.add(token);  tokens.add(token);  [BUGGY]    currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	243	243	1	replace	tokens.add(token);  tokens.add(token);		compilable	  [FE]  UnrecognizedOptionException	50	1
989	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (this.options.hasOption(token))  {    [BUGGY]  tokens.add(token);  eatTheRest  =  true;  [BUGGY]    currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	243	243	1	add	tokens.add(token);  eatTheRest  =  true;		compilable	  [FE]  UnrecognizedOptionException	50	1
990	[BUG]  [BUGGY]  tokens.add(token);  eatTheRest  =  true;    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (this.options.hasOption(token))  {    [BUGGY]  tokens.add(token);  eatTheRest  =  true;  [BUGGY]    currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	243	243	1	replace	tokens.add(token);  eatTheRest  =  true;		compilable	  [FE]  UnrecognizedOptionException	50	1
1221	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  tokens.add( "- "  +  ch);  [BUGGY]    boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));    [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	285	285	1	add	tokens.add( "- "  +  ch);		compilable	  [FE]  UnrecognizedOptionException	62	1
1222	[BUG]  [BUGGY]  tokens.add( "- "  +  ch);    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  tokens.add( "- "  +  ch);  [BUGGY]    boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));    [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	285	285	1	replace	tokens.add( "- "  +  ch);		compilable	  [FE]  UnrecognizedOptionException	62	1
1222	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]    boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));    [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	285	285	1	add	tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);		compilable	  [FE]  UnrecognizedOptionException	62	1
1223	[BUG]  [BUGGY]  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]    boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));    [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	285	285	1	replace	tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);		compilable	  [FE]  UnrecognizedOptionException	62	1
1224	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [BUGGY]    boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));    [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	285	285	1	add	if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }		compilable	  [FE]  UnrecognizedOptionException	62	1
1225	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [BUGGY]    boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));    [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	285	285	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }		compilable	  [FE]  UnrecognizedOptionException	62	1
1226	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  tokens.add(token.substring(i  +  1));  }  [BUGGY]    boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));    [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	285	285	1	add	if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  tokens.add(token.substring(i  +  1));  }		compilable	  [FE]  UnrecognizedOptionException	62	1
1227	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  tokens.add(token.substring(i  +  1));  }    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  tokens.add(token.substring(i  +  1));  }  [BUGGY]    boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));    [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	285	285	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  tokens.add(token.substring(i  +  1));  }		compilable	  [FE]  UnrecognizedOptionException	62	1
1229	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  else  {  tokens.add( "- "  +  ch);  }  [BUGGY]    boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));    [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	285	285	1	add	if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  else  {  tokens.add( "- "  +  ch);  }		compilable	  [FE]  UnrecognizedOptionException	62	1
1230	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  else  {  tokens.add( "- "  +  ch);  }    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  else  {  tokens.add( "- "  +  ch);  }  [BUGGY]    boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));    [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	285	285	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  else  {  tokens.add( "- "  +  ch);  }		compilable	  [FE]  UnrecognizedOptionException	62	1
541	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    }  }    else  if  ( "- ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {    [BUGGY]  int  tokenLength  =  token.length()  -  1;  [BUGGY]      if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	132	132	1	add	int  tokenLength  =  token.length()  -  1;	int  tokenLength  =  token.length();  	compilable	  [FE]  UnrecognizedOptionException	28	1
542	[BUG]  [BUGGY]  int  tokenLength  =  token.length()  -  1;    [FE]  UnrecognizedOptionException  [CONTEXT]    }  }    else  if  ( "- ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {    [BUGGY]  int  tokenLength  =  token.length()  -  1;  [BUGGY]      if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	132	132	1	replace	int  tokenLength  =  token.length()  -  1;	int  tokenLength  =  token.length();  	compilable	  [FE]  UnrecognizedOptionException	28	1
542	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    }  }    else  if  ( "- ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {    [BUGGY]  int  tokenLength  =  token.length()  -  2;  [BUGGY]      if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	132	132	1	add	int  tokenLength  =  token.length()  -  2;	int  tokenLength  =  token.length();  	compilable	  [FE]  UnrecognizedOptionException	28	1
543	[BUG]  [BUGGY]  int  tokenLength  =  token.length()  -  2;    [FE]  UnrecognizedOptionException  [CONTEXT]    }  }    else  if  ( "- ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {    [BUGGY]  int  tokenLength  =  token.length()  -  2;  [BUGGY]      if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	132	132	1	replace	int  tokenLength  =  token.length()  -  2;	int  tokenLength  =  token.length();  	compilable	  [FE]  UnrecognizedOptionException	28	1
544	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    }  }    else  if  ( "- ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {    [BUGGY]  int  tokenLength  =  token.length()  +  1;  [BUGGY]      if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	132	132	1	add	int  tokenLength  =  token.length()  +  1;	int  tokenLength  =  token.length();  	compilable	  [FE]  UnrecognizedOptionException	28	1
545	[BUG]  [BUGGY]  int  tokenLength  =  token.length()  +  1;    [FE]  UnrecognizedOptionException  [CONTEXT]    }  }    else  if  ( "- ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {    [BUGGY]  int  tokenLength  =  token.length()  +  1;  [BUGGY]      if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	132	132	1	replace	int  tokenLength  =  token.length()  +  1;	int  tokenLength  =  token.length();  	compilable	  [FE]  UnrecognizedOptionException	28	1
545	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    }  }    else  if  ( "- ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {    [BUGGY]  int  tokenLength  =  token.lastIndexOf( "- ");  [BUGGY]      if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	132	132	1	add	int  tokenLength  =  token.lastIndexOf( "- ");	int  tokenLength  =  token.length();  	compilable	  [FE]  UnrecognizedOptionException	28	1
546	[BUG]  [BUGGY]  int  tokenLength  =  token.lastIndexOf( "- ");    [FE]  UnrecognizedOptionException  [CONTEXT]    }  }    else  if  ( "- ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {    [BUGGY]  int  tokenLength  =  token.lastIndexOf( "- ");  [BUGGY]      if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	132	132	1	replace	int  tokenLength  =  token.lastIndexOf( "- ");	int  tokenLength  =  token.length();  	compilable	  [FE]  UnrecognizedOptionException	28	1
546	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    }  }    else  if  ( "- ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {    [BUGGY]  int  tokenLength  =  token.length()  -  4;  [BUGGY]      if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	132	132	1	add	int  tokenLength  =  token.length()  -  4;	int  tokenLength  =  token.length();  	compilable	  [FE]  UnrecognizedOptionException	28	1
547	[BUG]  [BUGGY]  int  tokenLength  =  token.length()  -  4;    [FE]  UnrecognizedOptionException  [CONTEXT]    }  }    else  if  ( "- ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {    [BUGGY]  int  tokenLength  =  token.length()  -  4;  [BUGGY]      if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	132	132	1	replace	int  tokenLength  =  token.length()  -  4;	int  tokenLength  =  token.length();  	compilable	  [FE]  UnrecognizedOptionException	28	1
547	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    }  }    else  if  ( "- ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {    [BUGGY]  int  tokenLength  =  token.length()  -  3;  [BUGGY]      if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	132	132	1	add	int  tokenLength  =  token.length()  -  3;	int  tokenLength  =  token.length();  	compilable	  [FE]  UnrecognizedOptionException	28	1
548	[BUG]  [BUGGY]  int  tokenLength  =  token.length()  -  3;    [FE]  UnrecognizedOptionException  [CONTEXT]    }  }    else  if  ( "- ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {    [BUGGY]  int  tokenLength  =  token.length()  -  3;  [BUGGY]      if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	132	132	1	replace	int  tokenLength  =  token.length()  -  3;	int  tokenLength  =  token.length();  	compilable	  [FE]  UnrecognizedOptionException	28	1
548	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    }  }    else  if  ( "- ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {    [BUGGY]  int  tokenLength  =  token.length()  *  2;  [BUGGY]      if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	132	132	1	add	int  tokenLength  =  token.length()  *  2;	int  tokenLength  =  token.length();  	compilable	  [FE]  UnrecognizedOptionException	28	1
549	[BUG]  [BUGGY]  int  tokenLength  =  token.length()  *  2;    [FE]  UnrecognizedOptionException  [CONTEXT]    }  }    else  if  ( "- ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {    [BUGGY]  int  tokenLength  =  token.length()  *  2;  [BUGGY]      if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	132	132	1	replace	int  tokenLength  =  token.length()  *  2;	int  tokenLength  =  token.length();  	compilable	  [FE]  UnrecognizedOptionException	28	1
549	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    }  }    else  if  ( "- ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {    [BUGGY]  int  tokenLength  =  token.length()  /  2;  [BUGGY]      if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	132	132	1	add	int  tokenLength  =  token.length()  /  2;	int  tokenLength  =  token.length();  	compilable	  [FE]  UnrecognizedOptionException	28	1
550	[BUG]  [BUGGY]  int  tokenLength  =  token.length()  /  2;    [FE]  UnrecognizedOptionException  [CONTEXT]    }  }    else  if  ( "- ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {    [BUGGY]  int  tokenLength  =  token.length()  /  2;  [BUGGY]      if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	132	132	1	replace	int  tokenLength  =  token.length()  /  2;	int  tokenLength  =  token.length();  	compilable	  [FE]  UnrecognizedOptionException	28	1
550	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    }  }    else  if  ( "- ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {    [BUGGY]  int  tokenLength  =  token.lastIndexOf('-');  [BUGGY]      if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	132	132	1	add	int  tokenLength  =  token.lastIndexOf('-');	int  tokenLength  =  token.length();  	compilable	  [FE]  UnrecognizedOptionException	28	1
551	[BUG]  [BUGGY]  int  tokenLength  =  token.lastIndexOf('-');    [FE]  UnrecognizedOptionException  [CONTEXT]    }  }    else  if  ( "- ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {    [BUGGY]  int  tokenLength  =  token.lastIndexOf('-');  [BUGGY]      if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	132	132	1	replace	int  tokenLength  =  token.lastIndexOf('-');	int  tokenLength  =  token.length();  	compilable	  [FE]  UnrecognizedOptionException	28	1
1241	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);    [BUGGY]  if(stopAtNonOption)  {  [BUGGY]    {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	287	288	1	add	if(stopAtNonOption)  {	if  (hasOption)  {  	compilable	  [FE]  UnrecognizedOptionException	63	1
1242	[BUG]  [BUGGY]  if(stopAtNonOption)  {    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);    [BUGGY]  if(stopAtNonOption)  {  [BUGGY]    {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	287	288	1	replace	if(stopAtNonOption)  {	if  (hasOption)  {  	compilable	  [FE]  UnrecognizedOptionException	63	1
1244	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);    [BUGGY]  if(stopAtNonOption  ||  hasOption)  {  [BUGGY]    {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	287	288	1	add	if(stopAtNonOption  ||  hasOption)  {	if  (hasOption)  {  	compilable	  [FE]  UnrecognizedOptionException	63	1
1245	[BUG]  [BUGGY]  if(stopAtNonOption  ||  hasOption)  {    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);    [BUGGY]  if(stopAtNonOption  ||  hasOption)  {  [BUGGY]    {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	287	288	1	replace	if(stopAtNonOption  ||  hasOption)  {	if  (hasOption)  {  	compilable	  [FE]  UnrecognizedOptionException	63	1
1245	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);    [BUGGY]  if(!hasOption)  {  [BUGGY]    {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	287	288	1	add	if(!hasOption)  {	if  (hasOption)  {  	compilable	  [FE]  UnrecognizedOptionException	63	1
1246	[BUG]  [BUGGY]  if(!hasOption)  {    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);    [BUGGY]  if(!hasOption)  {  [BUGGY]    {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	287	288	1	replace	if(!hasOption)  {	if  (hasOption)  {  	compilable	  [FE]  UnrecognizedOptionException	63	1
61	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {    [BUGGY]  eatTheRest  =  true;  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	51	51	1	add	eatTheRest  =  true;	eatTheRest  =  false;  	compilable	  [FE]  UnrecognizedOptionException	4	1
62	[BUG]  [BUGGY]  eatTheRest  =  true;    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {    [BUGGY]  eatTheRest  =  true;  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	51	51	1	replace	eatTheRest  =  true;	eatTheRest  =  false;  	compilable	  [FE]  UnrecognizedOptionException	4	1
62	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {    [BUGGY]  if(!currentOption.isRequired())  {  eatTheRest  =  false;  }  else  {  tokens.clear();  eatTheRest  =  true;  }  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	51	51	1	add	if(!currentOption.isRequired())  {  eatTheRest  =  false;  }  else  {  tokens.clear();  eatTheRest  =  true;  }	eatTheRest  =  false;  	compilable	  [FE]  UnrecognizedOptionException	4	1
63	[BUG]  [BUGGY]  if(!currentOption.isRequired())  {  eatTheRest  =  false;  }  else  {  tokens.clear();  eatTheRest  =  true;  }    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {    [BUGGY]  if(!currentOption.isRequired())  {  eatTheRest  =  false;  }  else  {  tokens.clear();  eatTheRest  =  true;  }  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	51	51	1	replace	if(!currentOption.isRequired())  {  eatTheRest  =  false;  }  else  {  tokens.clear();  eatTheRest  =  true;  }	eatTheRest  =  false;  	compilable	  [FE]  UnrecognizedOptionException	4	1
63	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {    [BUGGY]  if(!currentOption.isRequired())  {  eatTheRest  =  false;  }  else  {  tokens.add(currentOption);  eatTheRest  =  true;  }  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	51	51	1	add	if(!currentOption.isRequired())  {  eatTheRest  =  false;  }  else  {  tokens.add(currentOption);  eatTheRest  =  true;  }	eatTheRest  =  false;  	compilable	  [FE]  UnrecognizedOptionException	4	1
64	[BUG]  [BUGGY]  if(!currentOption.isRequired())  {  eatTheRest  =  false;  }  else  {  tokens.add(currentOption);  eatTheRest  =  true;  }    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {    [BUGGY]  if(!currentOption.isRequired())  {  eatTheRest  =  false;  }  else  {  tokens.add(currentOption);  eatTheRest  =  true;  }  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	51	51	1	replace	if(!currentOption.isRequired())  {  eatTheRest  =  false;  }  else  {  tokens.add(currentOption);  eatTheRest  =  true;  }	eatTheRest  =  false;  	compilable	  [FE]  UnrecognizedOptionException	4	1
65	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {    [BUGGY]  if(!currentOption.isRequired())  {  eatTheRest  =  false;  }  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	51	51	1	add	if(!currentOption.isRequired())  {  eatTheRest  =  false;  }	eatTheRest  =  false;  	compilable	  [FE]  UnrecognizedOptionException	4	1
66	[BUG]  [BUGGY]  if(!currentOption.isRequired())  {  eatTheRest  =  false;  }    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {    [BUGGY]  if(!currentOption.isRequired())  {  eatTheRest  =  false;  }  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	51	51	1	replace	if(!currentOption.isRequired())  {  eatTheRest  =  false;  }	eatTheRest  =  false;  	compilable	  [FE]  UnrecognizedOptionException	4	1
67	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {    [BUGGY]  if(!currentOption.isRequired())  {  eatTheRest  =  false;  }  else  {  tokens.clear();  eatTheRest  =  false;  }  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	51	51	1	add	if(!currentOption.isRequired())  {  eatTheRest  =  false;  }  else  {  tokens.clear();  eatTheRest  =  false;  }	eatTheRest  =  false;  	compilable	  [FE]  UnrecognizedOptionException	4	1
68	[BUG]  [BUGGY]  if(!currentOption.isRequired())  {  eatTheRest  =  false;  }  else  {  tokens.clear();  eatTheRest  =  false;  }    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {    [BUGGY]  if(!currentOption.isRequired())  {  eatTheRest  =  false;  }  else  {  tokens.clear();  eatTheRest  =  false;  }  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	51	51	1	replace	if(!currentOption.isRequired())  {  eatTheRest  =  false;  }  else  {  tokens.clear();  eatTheRest  =  false;  }	eatTheRest  =  false;  	compilable	  [FE]  UnrecognizedOptionException	4	1
68	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {    [BUGGY]  if(eatTheRest)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  eatTheRest  =  true;  }  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	51	51	1	add	if(eatTheRest)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  eatTheRest  =  true;  }	eatTheRest  =  false;  	compilable	  [FE]  UnrecognizedOptionException	4	1
69	[BUG]  [BUGGY]  if(eatTheRest)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  eatTheRest  =  true;  }    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {    [BUGGY]  if(eatTheRest)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  eatTheRest  =  true;  }  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	51	51	1	replace	if(eatTheRest)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  eatTheRest  =  true;  }	eatTheRest  =  false;  	compilable	  [FE]  UnrecognizedOptionException	4	1
69	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {    [BUGGY]  if(!currentOption.hasArg())  {  eatTheRest  =  false;  }  else  {  tokens.clear();  eatTheRest  =  true;  }  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	51	51	1	add	if(!currentOption.hasArg())  {  eatTheRest  =  false;  }  else  {  tokens.clear();  eatTheRest  =  true;  }	eatTheRest  =  false;  	compilable	  [FE]  UnrecognizedOptionException	4	1
70	[BUG]  [BUGGY]  if(!currentOption.hasArg())  {  eatTheRest  =  false;  }  else  {  tokens.clear();  eatTheRest  =  true;  }    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {    [BUGGY]  if(!currentOption.hasArg())  {  eatTheRest  =  false;  }  else  {  tokens.clear();  eatTheRest  =  true;  }  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	51	51	1	replace	if(!currentOption.hasArg())  {  eatTheRest  =  false;  }  else  {  tokens.clear();  eatTheRest  =  true;  }	eatTheRest  =  false;  	compilable	  [FE]  UnrecognizedOptionException	4	1
941	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  tokens.add(token);  [BUGGY]    if  (this.options.hasOption(token))    {  {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	241	242	1	add	tokens.add(token);		compilable	  [FE]  UnrecognizedOptionException	48	1
942	[BUG]  [BUGGY]  tokens.add(token);    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  tokens.add(token);  [BUGGY]    if  (this.options.hasOption(token))    {  {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	241	242	1	replace	tokens.add(token);		compilable	  [FE]  UnrecognizedOptionException	48	1
942	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  tokens.add(token);  currentOption  =  this.options.getOption(token);  [BUGGY]    if  (this.options.hasOption(token))    {  {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	241	242	1	add	tokens.add(token);  currentOption  =  this.options.getOption(token);		compilable	  [FE]  UnrecognizedOptionException	48	1
943	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  this.options.getOption(token);    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  tokens.add(token);  currentOption  =  this.options.getOption(token);  [BUGGY]    if  (this.options.hasOption(token))    {  {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	241	242	1	replace	tokens.add(token);  currentOption  =  this.options.getOption(token);		compilable	  [FE]  UnrecognizedOptionException	48	1
943	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  tokens.clear();  tokens.add(token);  [BUGGY]    if  (this.options.hasOption(token))    {  {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	241	242	1	add	tokens.clear();  tokens.add(token);		compilable	  [FE]  UnrecognizedOptionException	48	1
944	[BUG]  [BUGGY]  tokens.clear();  tokens.add(token);    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  tokens.clear();  tokens.add(token);  [BUGGY]    if  (this.options.hasOption(token))    {  {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	241	242	1	replace	tokens.clear();  tokens.add(token);		compilable	  [FE]  UnrecognizedOptionException	48	1
945	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  tokens.clear();  [BUGGY]    if  (this.options.hasOption(token))    {  {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	241	242	1	add	tokens.clear();		compilable	  [FE]  UnrecognizedOptionException	48	1
946	[BUG]  [BUGGY]  tokens.clear();    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  tokens.clear();  [BUGGY]    if  (this.options.hasOption(token))    {  {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	241	242	1	replace	tokens.clear();		compilable	  [FE]  UnrecognizedOptionException	48	1
947	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(token);  [BUGGY]    if  (this.options.hasOption(token))    {  {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	241	242	1	add	tokens.add(token);  currentOption  =  options.getOption(token);		compilable	  [FE]  UnrecognizedOptionException	48	1
948	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(token);    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(token);  [BUGGY]    if  (this.options.hasOption(token))    {  {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	241	242	1	replace	tokens.add(token);  currentOption  =  options.getOption(token);		compilable	  [FE]  UnrecognizedOptionException	48	1
948	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  tokens.remove(token);  tokens.add(token);  [BUGGY]    if  (this.options.hasOption(token))    {  {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	241	242	1	add	tokens.remove(token);  tokens.add(token);		compilable	  [FE]  UnrecognizedOptionException	48	1
949	[BUG]  [BUGGY]  tokens.remove(token);  tokens.add(token);    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  tokens.remove(token);  tokens.add(token);  [BUGGY]    if  (this.options.hasOption(token))    {  {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	241	242	1	replace	tokens.remove(token);  tokens.add(token);		compilable	  [FE]  UnrecognizedOptionException	48	1
949	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  tokens.add(token);  tokens.add(token);  [BUGGY]    if  (this.options.hasOption(token))    {  {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	241	242	1	add	tokens.add(token);  tokens.add(token);		compilable	  [FE]  UnrecognizedOptionException	48	1
950	[BUG]  [BUGGY]  tokens.add(token);  tokens.add(token);    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  tokens.add(token);  tokens.add(token);  [BUGGY]    if  (this.options.hasOption(token))    {  {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	241	242	1	replace	tokens.add(token);  tokens.add(token);		compilable	  [FE]  UnrecognizedOptionException	48	1
950	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  tokens.remove(token);  [BUGGY]    if  (this.options.hasOption(token))    {  {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	241	242	1	add	tokens.remove(token);		compilable	  [FE]  UnrecognizedOptionException	48	1
951	[BUG]  [BUGGY]  tokens.remove(token);    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  tokens.remove(token);  [BUGGY]    if  (this.options.hasOption(token))    {  {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	241	242	1	replace	tokens.remove(token);		compilable	  [FE]  UnrecognizedOptionException	48	1
1284	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {    [BUGGY]  tokens.add( "- "  +  eatTheRest);  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	289	289	1	add	tokens.add( "- "  +  eatTheRest);	tokens.add( "- "  +  ch);  	compilable	  [FE]  UnrecognizedOptionException	65	1
1285	[BUG]  [BUGGY]  tokens.add( "- "  +  eatTheRest);    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {    [BUGGY]  tokens.add( "- "  +  eatTheRest);  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	289	289	1	replace	tokens.add( "- "  +  eatTheRest);	tokens.add( "- "  +  ch);  	compilable	  [FE]  UnrecognizedOptionException	65	1
1286	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {    [BUGGY]  tokens.add( "- "  +  stopAtNonOption);  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	289	289	1	add	tokens.add( "- "  +  stopAtNonOption);	tokens.add( "- "  +  ch);  	compilable	  [FE]  UnrecognizedOptionException	65	1
1287	[BUG]  [BUGGY]  tokens.add( "- "  +  stopAtNonOption);    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {    [BUGGY]  tokens.add( "- "  +  stopAtNonOption);  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	289	289	1	replace	tokens.add( "- "  +  stopAtNonOption);	tokens.add( "- "  +  ch);  	compilable	  [FE]  UnrecognizedOptionException	65	1
1287	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {    [BUGGY]  tokens.add( ",- "  +  ch);  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	289	289	1	add	tokens.add( ",- "  +  ch);	tokens.add( "- "  +  ch);  	compilable	  [FE]  UnrecognizedOptionException	65	1
1288	[BUG]  [BUGGY]  tokens.add( ",- "  +  ch);    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {    [BUGGY]  tokens.add( ",- "  +  ch);  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	289	289	1	replace	tokens.add( ",- "  +  ch);	tokens.add( "- "  +  ch);  	compilable	  [FE]  UnrecognizedOptionException	65	1
1289	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {    [BUGGY]  tokens.add( "- "  +  1);  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	289	289	1	add	tokens.add( "- "  +  1);	tokens.add( "- "  +  ch);  	compilable	  [FE]  UnrecognizedOptionException	65	1
1290	[BUG]  [BUGGY]  tokens.add( "- "  +  1);    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {    [BUGGY]  tokens.add( "- "  +  1);  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	289	289	1	replace	tokens.add( "- "  +  1);	tokens.add( "- "  +  ch);  	compilable	  [FE]  UnrecognizedOptionException	65	1
1290	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {    [BUGGY]  tokens.add( "- "  +  currentOption);  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	289	289	1	add	tokens.add( "- "  +  currentOption);	tokens.add( "- "  +  ch);  	compilable	  [FE]  UnrecognizedOptionException	65	1
1291	[BUG]  [BUGGY]  tokens.add( "- "  +  currentOption);    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {    [BUGGY]  tokens.add( "- "  +  currentOption);  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	289	289	1	replace	tokens.add( "- "  +  currentOption);	tokens.add( "- "  +  ch);  	compilable	  [FE]  UnrecognizedOptionException	65	1
389	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    while  (iter.hasNext())  {      [BUGGY]  token  =(String)iter.next()  +  1;  [BUGGY]        if  (token.startsWith( "-- "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	108	108	1	add	token  =(String)iter.next()  +  1;	token  =  (String)  iter.next();  	compilable	  [FE]  UnrecognizedOptionException	20	1
390	[BUG]  [BUGGY]  token  =(String)iter.next()  +  1;    [FE]  UnrecognizedOptionException  [CONTEXT]    while  (iter.hasNext())  {      [BUGGY]  token  =(String)iter.next()  +  1;  [BUGGY]        if  (token.startsWith( "-- "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	108	108	1	replace	token  =(String)iter.next()  +  1;	token  =  (String)  iter.next();  	compilable	  [FE]  UnrecognizedOptionException	20	1
561	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    }  }    else  if  ( "- ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {    [BUGGY]  tokens.add(token);  [BUGGY]    int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	132	132	1	add	tokens.add(token);		compilable	  [FE]  UnrecognizedOptionException	29	1
562	[BUG]  [BUGGY]  tokens.add(token);    [FE]  UnrecognizedOptionException  [CONTEXT]    }  }    else  if  ( "- ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {    [BUGGY]  tokens.add(token);  [BUGGY]    int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	132	132	1	replace	tokens.add(token);		compilable	  [FE]  UnrecognizedOptionException	29	1
563	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    }  }    else  if  ( "- ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {    [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(token);  [BUGGY]    int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	132	132	1	add	tokens.add(token);  currentOption  =  options.getOption(token);		compilable	  [FE]  UnrecognizedOptionException	29	1
564	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(token);    [FE]  UnrecognizedOptionException  [CONTEXT]    }  }    else  if  ( "- ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {    [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(token);  [BUGGY]    int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	132	132	1	replace	tokens.add(token);  currentOption  =  options.getOption(token);		compilable	  [FE]  UnrecognizedOptionException	29	1
565	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    }  }    else  if  ( "- ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {    [BUGGY]  tokens.add( "- ");  [BUGGY]    int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	132	132	1	add	tokens.add( "- ");		compilable	  [FE]  UnrecognizedOptionException	29	1
566	[BUG]  [BUGGY]  tokens.add( "- ");    [FE]  UnrecognizedOptionException  [CONTEXT]    }  }    else  if  ( "- ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {    [BUGGY]  tokens.add( "- ");  [BUGGY]    int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	132	132	1	replace	tokens.add( "- ");		compilable	  [FE]  UnrecognizedOptionException	29	1
568	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    }  }    else  if  ( "- ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {    [BUGGY]  tokens.clear();  [BUGGY]    int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	132	132	1	add	tokens.clear();		compilable	  [FE]  UnrecognizedOptionException	29	1
569	[BUG]  [BUGGY]  tokens.clear();    [FE]  UnrecognizedOptionException  [CONTEXT]    }  }    else  if  ( "- ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {    [BUGGY]  tokens.clear();  [BUGGY]    int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	132	132	1	replace	tokens.clear();		compilable	  [FE]  UnrecognizedOptionException	29	1
22	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]      [BUGGY]  private  final  ArrayList  tokens  =  new  ArrayList();  [BUGGY]      [CLASS]  PosixParser    [VARIABLES]  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	33	33	1	add	private  final  ArrayList  tokens  =  new  ArrayList();	private  ArrayList  tokens  =  new  ArrayList();  	compilable	  [FE]  UnrecognizedOptionException	2	1
23	[BUG]  [BUGGY]  private  final  ArrayList  tokens  =  new  ArrayList();    [FE]  UnrecognizedOptionException  [CONTEXT]      [BUGGY]  private  final  ArrayList  tokens  =  new  ArrayList();  [BUGGY]      [CLASS]  PosixParser    [VARIABLES]  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	33	33	1	replace	private  final  ArrayList  tokens  =  new  ArrayList();	private  ArrayList  tokens  =  new  ArrayList();  	compilable	  [FE]  UnrecognizedOptionException	2	1
25	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]      [BUGGY]  protected  ArrayList  tokens  =  new  ArrayList();  [BUGGY]      [CLASS]  PosixParser    [VARIABLES]  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	33	33	1	add	protected  ArrayList  tokens  =  new  ArrayList();	private  ArrayList  tokens  =  new  ArrayList();  	compilable	  [FE]  UnrecognizedOptionException	2	1
26	[BUG]  [BUGGY]  protected  ArrayList  tokens  =  new  ArrayList();    [FE]  UnrecognizedOptionException  [CONTEXT]      [BUGGY]  protected  ArrayList  tokens  =  new  ArrayList();  [BUGGY]      [CLASS]  PosixParser    [VARIABLES]  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	33	33	1	replace	protected  ArrayList  tokens  =  new  ArrayList();	private  ArrayList  tokens  =  new  ArrayList();  	compilable	  [FE]  UnrecognizedOptionException	2	1
26	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]      [BUGGY]  public  ArrayList  tokens  =  new  ArrayList();  [BUGGY]      [CLASS]  PosixParser    [VARIABLES]  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	33	33	1	add	public  ArrayList  tokens  =  new  ArrayList();	private  ArrayList  tokens  =  new  ArrayList();  	compilable	  [FE]  UnrecognizedOptionException	2	1
27	[BUG]  [BUGGY]  public  ArrayList  tokens  =  new  ArrayList();    [FE]  UnrecognizedOptionException  [CONTEXT]      [BUGGY]  public  ArrayList  tokens  =  new  ArrayList();  [BUGGY]      [CLASS]  PosixParser    [VARIABLES]  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	33	33	1	replace	public  ArrayList  tokens  =  new  ArrayList();	private  ArrayList  tokens  =  new  ArrayList();  	compilable	  [FE]  UnrecognizedOptionException	2	1
29	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]      [BUGGY]  private  ArrayList  tokens  =  new  ArrayList(32);  [BUGGY]      [CLASS]  PosixParser    [VARIABLES]  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	33	33	1	add	private  ArrayList  tokens  =  new  ArrayList(32);	private  ArrayList  tokens  =  new  ArrayList();  	compilable	  [FE]  UnrecognizedOptionException	2	1
30	[BUG]  [BUGGY]  private  ArrayList  tokens  =  new  ArrayList(32);    [FE]  UnrecognizedOptionException  [CONTEXT]      [BUGGY]  private  ArrayList  tokens  =  new  ArrayList(32);  [BUGGY]      [CLASS]  PosixParser    [VARIABLES]  	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	33	33	1	replace	private  ArrayList  tokens  =  new  ArrayList(32);	private  ArrayList  tokens  =  new  ArrayList();  	compilable	  [FE]  UnrecognizedOptionException	2	1
1461	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));    [BUGGY]  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]    break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  else  {  tokens.add( "- "  +  ch);  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	296	296	1	add	tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);		compilable	  [FE]  UnrecognizedOptionException	74	1
1462	[BUG]  [BUGGY]  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));    [BUGGY]  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]    break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  else  {  tokens.add( "- "  +  ch);  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	296	296	1	replace	tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);		compilable	  [FE]  UnrecognizedOptionException	74	1
1462	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));    [BUGGY]  tokens.add(token.substring(i  +  1));  [BUGGY]    break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  else  {  tokens.add( "- "  +  ch);  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	296	296	1	add	tokens.add(token.substring(i  +  1));		compilable	  [FE]  UnrecognizedOptionException	74	1
1463	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1));    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));    [BUGGY]  tokens.add(token.substring(i  +  1));  [BUGGY]    break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  else  {  tokens.add( "- "  +  ch);  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	296	296	1	replace	tokens.add(token.substring(i  +  1));		compilable	  [FE]  UnrecognizedOptionException	74	1
1463	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));    [BUGGY]  tokens.add(token.substring(i  +  1));  currentOption  =  options.getOption(ch);  [BUGGY]    break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  else  {  tokens.add( "- "  +  ch);  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	296	296	1	add	tokens.add(token.substring(i  +  1));  currentOption  =  options.getOption(ch);		compilable	  [FE]  UnrecognizedOptionException	74	1
1464	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1));  currentOption  =  options.getOption(ch);    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));    [BUGGY]  tokens.add(token.substring(i  +  1));  currentOption  =  options.getOption(ch);  [BUGGY]    break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  else  {  tokens.add( "- "  +  ch);  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	296	296	1	replace	tokens.add(token.substring(i  +  1));  currentOption  =  options.getOption(ch);		compilable	  [FE]  UnrecognizedOptionException	74	1
1464	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));    [BUGGY]  tokens.add( "- "  +  ch);  [BUGGY]    break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  else  {  tokens.add( "- "  +  ch);  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	296	296	1	add	tokens.add( "- "  +  ch);		compilable	  [FE]  UnrecognizedOptionException	74	1
1465	[BUG]  [BUGGY]  tokens.add( "- "  +  ch);    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));    [BUGGY]  tokens.add( "- "  +  ch);  [BUGGY]    break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  else  {  tokens.add( "- "  +  ch);  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	296	296	1	replace	tokens.add( "- "  +  ch);		compilable	  [FE]  UnrecognizedOptionException	74	1
1466	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));    [BUGGY]  currentOption  =  options.getOption(ch);  tokens.add(token.substring(i  +  1));  [BUGGY]    break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  else  {  tokens.add( "- "  +  ch);  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	296	296	1	add	currentOption  =  options.getOption(ch);  tokens.add(token.substring(i  +  1));		compilable	  [FE]  UnrecognizedOptionException	74	1
1467	[BUG]  [BUGGY]  currentOption  =  options.getOption(ch);  tokens.add(token.substring(i  +  1));    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));    [BUGGY]  currentOption  =  options.getOption(ch);  tokens.add(token.substring(i  +  1));  [BUGGY]    break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  else  {  tokens.add( "- "  +  ch);  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	296	296	1	replace	currentOption  =  options.getOption(ch);  tokens.add(token.substring(i  +  1));		compilable	  [FE]  UnrecognizedOptionException	74	1
1470	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));    [BUGGY]  if(currentOption.hasArg())  {  tokens.add(token.substring(i  +  1));  }  else  {  process(token.substring(i  +  1));  }  [BUGGY]    break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  else  {  tokens.add( "- "  +  ch);  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	296	296	1	add	if(currentOption.hasArg())  {  tokens.add(token.substring(i  +  1));  }  else  {  process(token.substring(i  +  1));  }		compilable	  [FE]  UnrecognizedOptionException	74	1
1471	[BUG]  [BUGGY]  if(currentOption.hasArg())  {  tokens.add(token.substring(i  +  1));  }  else  {  process(token.substring(i  +  1));  }    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));    [BUGGY]  if(currentOption.hasArg())  {  tokens.add(token.substring(i  +  1));  }  else  {  process(token.substring(i  +  1));  }  [BUGGY]    break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  else  {  tokens.add( "- "  +  ch);  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	296	296	1	replace	if(currentOption.hasArg())  {  tokens.add(token.substring(i  +  1));  }  else  {  process(token.substring(i  +  1));  }		compilable	  [FE]  UnrecognizedOptionException	74	1
303	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  init();  this.options  =  options;      [BUGGY]  Iterator  iter  =  Arrays.asList(options).iterator();  [BUGGY]    String  token;    while  (iter.hasNext())  {    token  =  (String)  iter.next();    if  (token.startsWith( "-- "))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	101	101	1	add	Iterator  iter  =  Arrays.asList(options).iterator();	Iterator  iter  =  Arrays.asList(arguments).iterator();  	compilable	  [FE]  UnrecognizedOptionException	16	1
304	[BUG]  [BUGGY]  Iterator  iter  =  Arrays.asList(options).iterator();    [FE]  UnrecognizedOptionException  [CONTEXT]    {  init();  this.options  =  options;      [BUGGY]  Iterator  iter  =  Arrays.asList(options).iterator();  [BUGGY]    String  token;    while  (iter.hasNext())  {    token  =  (String)  iter.next();    if  (token.startsWith( "-- "))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	101	101	1	replace	Iterator  iter  =  Arrays.asList(options).iterator();	Iterator  iter  =  Arrays.asList(arguments).iterator();  	compilable	  [FE]  UnrecognizedOptionException	16	1
308	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  init();  this.options  =  options;      [BUGGY]  Iterator  iter  =  Arrays.asList(currentOption).iterator();  [BUGGY]    String  token;    while  (iter.hasNext())  {    token  =  (String)  iter.next();    if  (token.startsWith( "-- "))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	101	101	1	add	Iterator  iter  =  Arrays.asList(currentOption).iterator();	Iterator  iter  =  Arrays.asList(arguments).iterator();  	compilable	  [FE]  UnrecognizedOptionException	16	1
309	[BUG]  [BUGGY]  Iterator  iter  =  Arrays.asList(currentOption).iterator();    [FE]  UnrecognizedOptionException  [CONTEXT]    {  init();  this.options  =  options;      [BUGGY]  Iterator  iter  =  Arrays.asList(currentOption).iterator();  [BUGGY]    String  token;    while  (iter.hasNext())  {    token  =  (String)  iter.next();    if  (token.startsWith( "-- "))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	101	101	1	replace	Iterator  iter  =  Arrays.asList(currentOption).iterator();	Iterator  iter  =  Arrays.asList(arguments).iterator();  	compilable	  [FE]  UnrecognizedOptionException	16	1
310	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  init();  this.options  =  options;      [BUGGY]  Iterator  iter  =  Arrays.asList(tokens).iterator();  [BUGGY]    String  token;    while  (iter.hasNext())  {    token  =  (String)  iter.next();    if  (token.startsWith( "-- "))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	101	101	1	add	Iterator  iter  =  Arrays.asList(tokens).iterator();	Iterator  iter  =  Arrays.asList(arguments).iterator();  	compilable	  [FE]  UnrecognizedOptionException	16	1
311	[BUG]  [BUGGY]  Iterator  iter  =  Arrays.asList(tokens).iterator();    [FE]  UnrecognizedOptionException  [CONTEXT]    {  init();  this.options  =  options;      [BUGGY]  Iterator  iter  =  Arrays.asList(tokens).iterator();  [BUGGY]    String  token;    while  (iter.hasNext())  {    token  =  (String)  iter.next();    if  (token.startsWith( "-- "))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	101	101	1	replace	Iterator  iter  =  Arrays.asList(tokens).iterator();	Iterator  iter  =  Arrays.asList(arguments).iterator();  	compilable	  [FE]  UnrecognizedOptionException	16	1
462	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if( "- ".equals(token)||  token.startsWith( "- "))  {  [BUGGY]    {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	126	127	1	add	else  if( "- ".equals(token)||  token.startsWith( "- "))  {	else  if  ( "- ".equals(token))  {  	compilable	  [FE]  UnrecognizedOptionException	24	1
463	[BUG]  [BUGGY]  else  if( "- ".equals(token)||  token.startsWith( "- "))  {    [FE]  UnrecognizedOptionException  [CONTEXT]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if( "- ".equals(token)||  token.startsWith( "- "))  {  [BUGGY]    {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	126	127	1	replace	else  if( "- ".equals(token)||  token.startsWith( "- "))  {	else  if  ( "- ".equals(token))  {  	compilable	  [FE]  UnrecognizedOptionException	24	1
463	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if(! "- ".equals(token))  {  [BUGGY]    {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	126	127	1	add	else  if(! "- ".equals(token))  {	else  if  ( "- ".equals(token))  {  	compilable	  [FE]  UnrecognizedOptionException	24	1
464	[BUG]  [BUGGY]  else  if(! "- ".equals(token))  {    [FE]  UnrecognizedOptionException  [CONTEXT]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if(! "- ".equals(token))  {  [BUGGY]    {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	126	127	1	replace	else  if(! "- ".equals(token))  {	else  if  ( "- ".equals(token))  {  	compilable	  [FE]  UnrecognizedOptionException	24	1
464	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if( ".- ".equals(token))  {  [BUGGY]    {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	126	127	1	add	else  if( ".- ".equals(token))  {	else  if  ( "- ".equals(token))  {  	compilable	  [FE]  UnrecognizedOptionException	24	1
465	[BUG]  [BUGGY]  else  if( ".- ".equals(token))  {    [FE]  UnrecognizedOptionException  [CONTEXT]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if( ".- ".equals(token))  {  [BUGGY]    {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	126	127	1	replace	else  if( ".- ".equals(token))  {	else  if  ( "- ".equals(token))  {  	compilable	  [FE]  UnrecognizedOptionException	24	1
465	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if( "- ".equals(token)||  stopAtNonOption)  {  [BUGGY]    {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	126	127	1	add	else  if( "- ".equals(token)||  stopAtNonOption)  {	else  if  ( "- ".equals(token))  {  	compilable	  [FE]  UnrecognizedOptionException	24	1
466	[BUG]  [BUGGY]  else  if( "- ".equals(token)||  stopAtNonOption)  {    [FE]  UnrecognizedOptionException  [CONTEXT]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if( "- ".equals(token)||  stopAtNonOption)  {  [BUGGY]    {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	126	127	1	replace	else  if( "- ".equals(token)||  stopAtNonOption)  {	else  if  ( "- ".equals(token))  {  	compilable	  [FE]  UnrecognizedOptionException	24	1
466	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if(token.equals( "- "))  {  [BUGGY]    {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	126	127	1	add	else  if(token.equals( "- "))  {	else  if  ( "- ".equals(token))  {  	compilable	  [FE]  UnrecognizedOptionException	24	1
467	[BUG]  [BUGGY]  else  if(token.equals( "- "))  {    [FE]  UnrecognizedOptionException  [CONTEXT]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if(token.equals( "- "))  {  [BUGGY]    {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	126	127	1	replace	else  if(token.equals( "- "))  {	else  if  ( "- ".equals(token))  {  	compilable	  [FE]  UnrecognizedOptionException	24	1
467	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if( "- ".equals(token)||  token.startsWith( "- "))  {  [BUGGY]    {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	126	127	1	add	else  if( "- ".equals(token)||  token.startsWith( "- "))  {	else  if  ( "- ".equals(token))  {  	compilable	  [FE]  UnrecognizedOptionException	24	1
468	[BUG]  [BUGGY]  else  if( "- ".equals(token)||  token.startsWith( "- "))  {    [FE]  UnrecognizedOptionException  [CONTEXT]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if( "- ".equals(token)||  token.startsWith( "- "))  {  [BUGGY]    {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	126	127	1	replace	else  if( "- ".equals(token)||  token.startsWith( "- "))  {	else  if  ( "- ".equals(token))  {  	compilable	  [FE]  UnrecognizedOptionException	24	1
468	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if( ",- ".equals(token))  {  [BUGGY]    {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	126	127	1	add	else  if( ",- ".equals(token))  {	else  if  ( "- ".equals(token))  {  	compilable	  [FE]  UnrecognizedOptionException	24	1
469	[BUG]  [BUGGY]  else  if( ",- ".equals(token))  {    [FE]  UnrecognizedOptionException  [CONTEXT]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if( ",- ".equals(token))  {  [BUGGY]    {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	126	127	1	replace	else  if( ",- ".equals(token))  {	else  if  ( "- ".equals(token))  {  	compilable	  [FE]  UnrecognizedOptionException	24	1
470	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if(! "-- ".equals(token))  {  [BUGGY]    {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	126	127	1	add	else  if(! "-- ".equals(token))  {	else  if  ( "- ".equals(token))  {  	compilable	  [FE]  UnrecognizedOptionException	24	1
471	[BUG]  [BUGGY]  else  if(! "-- ".equals(token))  {    [FE]  UnrecognizedOptionException  [CONTEXT]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if(! "-- ".equals(token))  {  [BUGGY]    {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	126	127	1	replace	else  if(! "-- ".equals(token))  {	else  if  ( "- ".equals(token))  {  	compilable	  [FE]  UnrecognizedOptionException	24	1
201	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  tokens.add(currentOption);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	54	54	1	add	tokens.add(currentOption);		compilable	  [FE]  UnrecognizedOptionException	11	1
202	[BUG]  [BUGGY]  tokens.add(currentOption);    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  tokens.add(currentOption);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	54	54	1	replace	tokens.add(currentOption);		compilable	  [FE]  UnrecognizedOptionException	11	1
202	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  tokens.clear();  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	54	54	1	add	tokens.clear();		compilable	  [FE]  UnrecognizedOptionException	11	1
203	[BUG]  [BUGGY]  tokens.clear();    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  tokens.clear();  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	54	54	1	replace	tokens.clear();		compilable	  [FE]  UnrecognizedOptionException	11	1
203	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  tokens.clear();  currentOption  =  null;  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	54	54	1	add	tokens.clear();  currentOption  =  null;		compilable	  [FE]  UnrecognizedOptionException	11	1
204	[BUG]  [BUGGY]  tokens.clear();  currentOption  =  null;    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  tokens.clear();  currentOption  =  null;  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	54	54	1	replace	tokens.clear();  currentOption  =  null;		compilable	  [FE]  UnrecognizedOptionException	11	1
204	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  tokens.clear();  eatTheRest  =  true;  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	54	54	1	add	tokens.clear();  eatTheRest  =  true;		compilable	  [FE]  UnrecognizedOptionException	11	1
205	[BUG]  [BUGGY]  tokens.clear();  eatTheRest  =  true;    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  tokens.clear();  eatTheRest  =  true;  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	54	54	1	replace	tokens.clear();  eatTheRest  =  true;		compilable	  [FE]  UnrecognizedOptionException	11	1
207	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  tokens.clear();  tokens.add(currentOption);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	54	54	1	add	tokens.clear();  tokens.add(currentOption);		compilable	  [FE]  UnrecognizedOptionException	11	1
208	[BUG]  [BUGGY]  tokens.clear();  tokens.add(currentOption);    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  tokens.clear();  tokens.add(currentOption);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	54	54	1	replace	tokens.clear();  tokens.add(currentOption);		compilable	  [FE]  UnrecognizedOptionException	11	1
208	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  tokens.add( "-- ");  currentOption  =  null;  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	54	54	1	add	tokens.add( "-- ");  currentOption  =  null;		compilable	  [FE]  UnrecognizedOptionException	11	1
209	[BUG]  [BUGGY]  tokens.add( "-- ");  currentOption  =  null;    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  tokens.add( "-- ");  currentOption  =  null;  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	54	54	1	replace	tokens.add( "-- ");  currentOption  =  null;		compilable	  [FE]  UnrecognizedOptionException	11	1
661	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(options.hasOption(token)||  tokenLength  ==  2)  {  [BUGGY]    tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  }  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	138	138	1	add	else  if(options.hasOption(token)||  tokenLength  ==  2)  {	else  if  (options.hasOption(token))  {  	compilable	  [FE]  UnrecognizedOptionException	34	1
662	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  tokenLength  ==  2)  {    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(options.hasOption(token)||  tokenLength  ==  2)  {  [BUGGY]    tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  }  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	138	138	1	replace	else  if(options.hasOption(token)||  tokenLength  ==  2)  {	else  if  (options.hasOption(token))  {  	compilable	  [FE]  UnrecognizedOptionException	34	1
662	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(!options.hasOption(token))  {  [BUGGY]    tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  }  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	138	138	1	add	else  if(!options.hasOption(token))  {	else  if  (options.hasOption(token))  {  	compilable	  [FE]  UnrecognizedOptionException	34	1
663	[BUG]  [BUGGY]  else  if(!options.hasOption(token))  {    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(!options.hasOption(token))  {  [BUGGY]    tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  }  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	138	138	1	replace	else  if(!options.hasOption(token))  {	else  if  (options.hasOption(token))  {  	compilable	  [FE]  UnrecognizedOptionException	34	1
663	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(options.hasOption(token)&&  tokenLength  ==  2)  {  [BUGGY]    tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  }  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	138	138	1	add	else  if(options.hasOption(token)&&  tokenLength  ==  2)  {	else  if  (options.hasOption(token))  {  	compilable	  [FE]  UnrecognizedOptionException	34	1
664	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  tokenLength  ==  2)  {    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(options.hasOption(token)&&  tokenLength  ==  2)  {  [BUGGY]    tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  }  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	138	138	1	replace	else  if(options.hasOption(token)&&  tokenLength  ==  2)  {	else  if  (options.hasOption(token))  {  	compilable	  [FE]  UnrecognizedOptionException	34	1
664	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token))  {  [BUGGY]    tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  }  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	138	138	1	add	else  if(stopAtNonOption  &&  options.hasOption(token))  {	else  if  (options.hasOption(token))  {  	compilable	  [FE]  UnrecognizedOptionException	34	1
665	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token))  {    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token))  {  [BUGGY]    tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  }  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	138	138	1	replace	else  if(stopAtNonOption  &&  options.hasOption(token))  {	else  if  (options.hasOption(token))  {  	compilable	  [FE]  UnrecognizedOptionException	34	1
665	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(options.hasOption(token)||  tokenLength  ==  1)  {  [BUGGY]    tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  }  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	138	138	1	add	else  if(options.hasOption(token)||  tokenLength  ==  1)  {	else  if  (options.hasOption(token))  {  	compilable	  [FE]  UnrecognizedOptionException	34	1
666	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  tokenLength  ==  1)  {    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(options.hasOption(token)||  tokenLength  ==  1)  {  [BUGGY]    tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  }  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	138	138	1	replace	else  if(options.hasOption(token)||  tokenLength  ==  1)  {	else  if  (options.hasOption(token))  {  	compilable	  [FE]  UnrecognizedOptionException	34	1
666	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(options.hasOption(token)||  stopAtNonOption)  {  [BUGGY]    tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  }  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	138	138	1	add	else  if(options.hasOption(token)||  stopAtNonOption)  {	else  if  (options.hasOption(token))  {  	compilable	  [FE]  UnrecognizedOptionException	34	1
667	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  stopAtNonOption)  {    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(options.hasOption(token)||  stopAtNonOption)  {  [BUGGY]    tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  }  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	138	138	1	replace	else  if(options.hasOption(token)||  stopAtNonOption)  {	else  if  (options.hasOption(token))  {  	compilable	  [FE]  UnrecognizedOptionException	34	1
667	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(options.hasOption(token)||  tokenLength  ==  2)  {  [BUGGY]    tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  }  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	138	138	1	add	else  if(options.hasOption(token)||  tokenLength  ==  2)  {	else  if  (options.hasOption(token))  {  	compilable	  [FE]  UnrecognizedOptionException	34	1
668	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  tokenLength  ==  2)  {    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(options.hasOption(token)||  tokenLength  ==  2)  {  [BUGGY]    tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  }  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	138	138	1	replace	else  if(options.hasOption(token)||  tokenLength  ==  2)  {	else  if  (options.hasOption(token))  {  	compilable	  [FE]  UnrecognizedOptionException	34	1
668	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(options.hasOption(token)||  tokenLength  >=  2)  {  [BUGGY]    tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  }  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	138	138	1	add	else  if(options.hasOption(token)||  tokenLength  >=  2)  {	else  if  (options.hasOption(token))  {  	compilable	  [FE]  UnrecognizedOptionException	34	1
669	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  tokenLength  >=  2)  {    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(options.hasOption(token)||  tokenLength  >=  2)  {  [BUGGY]    tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  }  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	138	138	1	replace	else  if(options.hasOption(token)||  tokenLength  >=  2)  {	else  if  (options.hasOption(token))  {  	compilable	  [FE]  UnrecognizedOptionException	34	1
669	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(options.hasOption(token)||  tokenLength  <  2)  {  [BUGGY]    tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  }  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	138	138	1	add	else  if(options.hasOption(token)||  tokenLength  <  2)  {	else  if  (options.hasOption(token))  {  	compilable	  [FE]  UnrecognizedOptionException	34	1
670	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  tokenLength  <  2)  {    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(options.hasOption(token)||  tokenLength  <  2)  {  [BUGGY]    tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  }  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	138	138	1	replace	else  if(options.hasOption(token)||  tokenLength  <  2)  {	else  if  (options.hasOption(token))  {  	compilable	  [FE]  UnrecognizedOptionException	34	1
670	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token))  {  [BUGGY]    tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  }  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	138	138	1	add	else  if(stopAtNonOption  ||  options.hasOption(token))  {	else  if  (options.hasOption(token))  {  	compilable	  [FE]  UnrecognizedOptionException	34	1
671	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token))  {    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token))  {  [BUGGY]    tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  }  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	138	138	1	replace	else  if(stopAtNonOption  ||  options.hasOption(token))  {	else  if  (options.hasOption(token))  {  	compilable	  [FE]  UnrecognizedOptionException	34	1
102	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.remove(tokens.size()  -  1);  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	52	52	1	add	tokens.remove(tokens.size()  -  1);	tokens.clear();  	compilable	  [FE]  UnrecognizedOptionException	6	1
103	[BUG]  [BUGGY]  tokens.remove(tokens.size()  -  1);    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.remove(tokens.size()  -  1);  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	52	52	1	replace	tokens.remove(tokens.size()  -  1);	tokens.clear();  	compilable	  [FE]  UnrecognizedOptionException	6	1
103	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.add( "-- ");  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	52	52	1	add	tokens.add( "-- ");	tokens.clear();  	compilable	  [FE]  UnrecognizedOptionException	6	1
104	[BUG]  [BUGGY]  tokens.add( "-- ");    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.add( "-- ");  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	52	52	1	replace	tokens.add( "-- ");	tokens.clear();  	compilable	  [FE]  UnrecognizedOptionException	6	1
104	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.add(new  ArrayList  <  Option>());  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	52	52	1	add	tokens.add(new  ArrayList  <  Option>());	tokens.clear();  	compilable	  [FE]  UnrecognizedOptionException	6	1
105	[BUG]  [BUGGY]  tokens.add(new  ArrayList  <  Option>());    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.add(new  ArrayList  <  Option>());  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	52	52	1	replace	tokens.add(new  ArrayList  <  Option>());	tokens.clear();  	compilable	  [FE]  UnrecognizedOptionException	6	1
105	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.remove(currentOption.getKey());  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	52	52	1	add	tokens.remove(currentOption.getKey());	tokens.clear();  	compilable	  [FE]  UnrecognizedOptionException	6	1
106	[BUG]  [BUGGY]  tokens.remove(currentOption.getKey());    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.remove(currentOption.getKey());  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	52	52	1	replace	tokens.remove(currentOption.getKey());	tokens.clear();  	compilable	  [FE]  UnrecognizedOptionException	6	1
109	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.remove(tokens.size()  -1);  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	52	52	1	add	tokens.remove(tokens.size()  -1);	tokens.clear();  	compilable	  [FE]  UnrecognizedOptionException	6	1
110	[BUG]  [BUGGY]  tokens.remove(tokens.size()  -1);    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.remove(tokens.size()  -1);  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	52	52	1	replace	tokens.remove(tokens.size()  -1);	tokens.clear();  	compilable	  [FE]  UnrecognizedOptionException	6	1
110	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.add( "-eatTheRest ");  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	52	52	1	add	tokens.add( "-eatTheRest ");	tokens.clear();  	compilable	  [FE]  UnrecognizedOptionException	6	1
111	[BUG]  [BUGGY]  tokens.add( "-eatTheRest ");    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.add( "-eatTheRest ");  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	52	52	1	replace	tokens.add( "-eatTheRest ");	tokens.clear();  	compilable	  [FE]  UnrecognizedOptionException	6	1
1183	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {    [BUGGY]  tokens.add(token.substring(i));  [BUGGY]    String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	284	284	1	add	tokens.add(token.substring(i));		compilable	  [FE]  UnrecognizedOptionException	60	1
1184	[BUG]  [BUGGY]  tokens.add(token.substring(i));    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {    [BUGGY]  tokens.add(token.substring(i));  [BUGGY]    String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	284	284	1	replace	tokens.add(token.substring(i));		compilable	  [FE]  UnrecognizedOptionException	60	1
1189	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {    [BUGGY]  ArrayList  tokens  =  new  ArrayList  <  String>();  tokens.add(token.substring(i  +  1));  [BUGGY]    String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	284	284	1	add	ArrayList  tokens  =  new  ArrayList  <  String>();  tokens.add(token.substring(i  +  1));		compilable	  [FE]  UnrecognizedOptionException	60	1
1190	[BUG]  [BUGGY]  ArrayList  tokens  =  new  ArrayList  <  String>();  tokens.add(token.substring(i  +  1));    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {    [BUGGY]  ArrayList  tokens  =  new  ArrayList  <  String>();  tokens.add(token.substring(i  +  1));  [BUGGY]    String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	284	284	1	replace	ArrayList  tokens  =  new  ArrayList  <  String>();  tokens.add(token.substring(i  +  1));		compilable	  [FE]  UnrecognizedOptionException	60	1
1190	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {    [BUGGY]  tokens.add(token.substring(i  +  1));  [BUGGY]    String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	284	284	1	add	tokens.add(token.substring(i  +  1));		compilable	  [FE]  UnrecognizedOptionException	60	1
1191	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1));    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {    [BUGGY]  tokens.add(token.substring(i  +  1));  [BUGGY]    String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	284	284	1	replace	tokens.add(token.substring(i  +  1));		compilable	  [FE]  UnrecognizedOptionException	60	1
1061	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  if  (this.options.hasOption(token))  {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  tokens.add(token);  currentOption  =  this.options.getOption(token);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	250	250	1	add	tokens.add(token);  currentOption  =  this.options.getOption(token);		compilable	  [FE]  UnrecognizedOptionException	54	1
1062	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  this.options.getOption(token);    [FE]  UnrecognizedOptionException  [CONTEXT]    {  if  (this.options.hasOption(token))  {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  tokens.add(token);  currentOption  =  this.options.getOption(token);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	250	250	1	replace	tokens.add(token);  currentOption  =  this.options.getOption(token);		compilable	  [FE]  UnrecognizedOptionException	54	1
1062	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  if  (this.options.hasOption(token))  {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  tokens.add(token);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	250	250	1	add	tokens.add(token);		compilable	  [FE]  UnrecognizedOptionException	54	1
1063	[BUG]  [BUGGY]  tokens.add(token);    [FE]  UnrecognizedOptionException  [CONTEXT]    {  if  (this.options.hasOption(token))  {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  tokens.add(token);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	250	250	1	replace	tokens.add(token);		compilable	  [FE]  UnrecognizedOptionException	54	1
1063	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  if  (this.options.hasOption(token))  {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  tokens.add(token);  tokens.add(token);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	250	250	1	add	tokens.add(token);  tokens.add(token);		compilable	  [FE]  UnrecognizedOptionException	54	1
1064	[BUG]  [BUGGY]  tokens.add(token);  tokens.add(token);    [FE]  UnrecognizedOptionException  [CONTEXT]    {  if  (this.options.hasOption(token))  {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  tokens.add(token);  tokens.add(token);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	250	250	1	replace	tokens.add(token);  tokens.add(token);		compilable	  [FE]  UnrecognizedOptionException	54	1
1064	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  if  (this.options.hasOption(token))  {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(token);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	250	250	1	add	tokens.add(token);  currentOption  =  options.getOption(token);		compilable	  [FE]  UnrecognizedOptionException	54	1
1065	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(token);    [FE]  UnrecognizedOptionException  [CONTEXT]    {  if  (this.options.hasOption(token))  {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(token);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	250	250	1	replace	tokens.add(token);  currentOption  =  options.getOption(token);		compilable	  [FE]  UnrecognizedOptionException	54	1
1065	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  if  (this.options.hasOption(token))  {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  tokens.add( "-- ");  currentOption  =  this.options.getOption(token);  tokens.add(token);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	250	250	1	add	tokens.add( "-- ");  currentOption  =  this.options.getOption(token);  tokens.add(token);		compilable	  [FE]  UnrecognizedOptionException	54	1
1066	[BUG]  [BUGGY]  tokens.add( "-- ");  currentOption  =  this.options.getOption(token);  tokens.add(token);    [FE]  UnrecognizedOptionException  [CONTEXT]    {  if  (this.options.hasOption(token))  {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  tokens.add( "-- ");  currentOption  =  this.options.getOption(token);  tokens.add(token);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	250	250	1	replace	tokens.add( "-- ");  currentOption  =  this.options.getOption(token);  tokens.add(token);		compilable	  [FE]  UnrecognizedOptionException	54	1
1066	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  if  (this.options.hasOption(token))  {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  tokens.add( "-- ");  currentOption  =  this.options.getOption(token);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	250	250	1	add	tokens.add( "-- ");  currentOption  =  this.options.getOption(token);		compilable	  [FE]  UnrecognizedOptionException	54	1
1067	[BUG]  [BUGGY]  tokens.add( "-- ");  currentOption  =  this.options.getOption(token);    [FE]  UnrecognizedOptionException  [CONTEXT]    {  if  (this.options.hasOption(token))  {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  tokens.add( "-- ");  currentOption  =  this.options.getOption(token);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	250	250	1	replace	tokens.add( "-- ");  currentOption  =  this.options.getOption(token);		compilable	  [FE]  UnrecognizedOptionException	54	1
1067	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  if  (this.options.hasOption(token))  {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  tokens.add(token);  eatTheRest  =  true;  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	250	250	1	add	tokens.add(token);  eatTheRest  =  true;		compilable	  [FE]  UnrecognizedOptionException	54	1
1068	[BUG]  [BUGGY]  tokens.add(token);  eatTheRest  =  true;    [FE]  UnrecognizedOptionException  [CONTEXT]    {  if  (this.options.hasOption(token))  {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  tokens.add(token);  eatTheRest  =  true;  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	250	250	1	replace	tokens.add(token);  eatTheRest  =  true;		compilable	  [FE]  UnrecognizedOptionException	54	1
1068	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  if  (this.options.hasOption(token))  {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  tokens.add(token);  currentOption  =  this.options.getOption(token);  eatTheRest  =  true;  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	250	250	1	add	tokens.add(token);  currentOption  =  this.options.getOption(token);  eatTheRest  =  true;		compilable	  [FE]  UnrecognizedOptionException	54	1
1069	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  this.options.getOption(token);  eatTheRest  =  true;    [FE]  UnrecognizedOptionException  [CONTEXT]    {  if  (this.options.hasOption(token))  {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  tokens.add(token);  currentOption  =  this.options.getOption(token);  eatTheRest  =  true;  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	250	250	1	replace	tokens.add(token);  currentOption  =  this.options.getOption(token);  eatTheRest  =  true;		compilable	  [FE]  UnrecognizedOptionException	54	1
1069	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  if  (this.options.hasOption(token))  {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  tokens.add(token);  currentOption  =  this.options.getOption(token);  tokens.add(token);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	250	250	1	add	tokens.add(token);  currentOption  =  this.options.getOption(token);  tokens.add(token);		compilable	  [FE]  UnrecognizedOptionException	54	1
1070	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  this.options.getOption(token);  tokens.add(token);    [FE]  UnrecognizedOptionException  [CONTEXT]    {  if  (this.options.hasOption(token))  {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  tokens.add(token);  currentOption  =  this.options.getOption(token);  tokens.add(token);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	250	250	1	replace	tokens.add(token);  currentOption  =  this.options.getOption(token);  tokens.add(token);		compilable	  [FE]  UnrecognizedOptionException	54	1
1070	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  if  (this.options.hasOption(token))  {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  tokens.add(token);  stopAtNonOption  =  true;  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	250	250	1	add	tokens.add(token);  stopAtNonOption  =  true;		compilable	  [FE]  UnrecognizedOptionException	54	1
1071	[BUG]  [BUGGY]  tokens.add(token);  stopAtNonOption  =  true;    [FE]  UnrecognizedOptionException  [CONTEXT]    {  if  (this.options.hasOption(token))  {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  tokens.add(token);  stopAtNonOption  =  true;  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	250	250	1	replace	tokens.add(token);  stopAtNonOption  =  true;		compilable	  [FE]  UnrecognizedOptionException	54	1
442	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    while  (iter.hasNext())  {    token  =  (String)  iter.next();      [BUGGY]  token  =(String)iter.next();  [BUGGY]    if  (token.startsWith( "-- "))      {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	111	112	1	add	token  =(String)iter.next();		compilable	  [FE]  UnrecognizedOptionException	23	1
443	[BUG]  [BUGGY]  token  =(String)iter.next();    [FE]  UnrecognizedOptionException  [CONTEXT]    while  (iter.hasNext())  {    token  =  (String)  iter.next();      [BUGGY]  token  =(String)iter.next();  [BUGGY]    if  (token.startsWith( "-- "))      {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	111	112	1	replace	token  =(String)iter.next();		compilable	  [FE]  UnrecognizedOptionException	23	1
449	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    while  (iter.hasNext())  {    token  =  (String)  iter.next();      [BUGGY]  tokens.add(token);  [BUGGY]    if  (token.startsWith( "-- "))      {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	111	112	1	add	tokens.add(token);		compilable	  [FE]  UnrecognizedOptionException	23	1
450	[BUG]  [BUGGY]  tokens.add(token);    [FE]  UnrecognizedOptionException  [CONTEXT]    while  (iter.hasNext())  {    token  =  (String)  iter.next();      [BUGGY]  tokens.add(token);  [BUGGY]    if  (token.startsWith( "-- "))      {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	111	112	1	replace	tokens.add(token);		compilable	  [FE]  UnrecognizedOptionException	23	1
450	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    while  (iter.hasNext())  {    token  =  (String)  iter.next();      [BUGGY]  token  =(String)iter.next();  currentOption  =  options.getOption(token);  [BUGGY]    if  (token.startsWith( "-- "))      {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	111	112	1	add	token  =(String)iter.next();  currentOption  =  options.getOption(token);		compilable	  [FE]  UnrecognizedOptionException	23	1
451	[BUG]  [BUGGY]  token  =(String)iter.next();  currentOption  =  options.getOption(token);    [FE]  UnrecognizedOptionException  [CONTEXT]    while  (iter.hasNext())  {    token  =  (String)  iter.next();      [BUGGY]  token  =(String)iter.next();  currentOption  =  options.getOption(token);  [BUGGY]    if  (token.startsWith( "-- "))      {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	111	112	1	replace	token  =(String)iter.next();  currentOption  =  options.getOption(token);		compilable	  [FE]  UnrecognizedOptionException	23	1
721	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  {    [BUGGY]  tokens.add(token);  [BUGGY]    burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	144	144	1	add	tokens.add(token);		compilable	  [FE]  UnrecognizedOptionException	37	1
722	[BUG]  [BUGGY]  tokens.add(token);    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  {    [BUGGY]  tokens.add(token);  [BUGGY]    burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	144	144	1	replace	tokens.add(token);		compilable	  [FE]  UnrecognizedOptionException	37	1
722	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  {    [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(token);  [BUGGY]    burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	144	144	1	add	tokens.add(token);  currentOption  =  options.getOption(token);		compilable	  [FE]  UnrecognizedOptionException	37	1
723	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(token);    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  {    [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(token);  [BUGGY]    burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	144	144	1	replace	tokens.add(token);  currentOption  =  options.getOption(token);		compilable	  [FE]  UnrecognizedOptionException	37	1
723	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  {    [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  tokens.add(token);  }  [BUGGY]    burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	144	144	1	add	if(stopAtNonOption)  {  tokens.add(token);  }  else  {  tokens.add(token);  }		compilable	  [FE]  UnrecognizedOptionException	37	1
724	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  tokens.add(token);  }    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  {    [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  tokens.add(token);  }  [BUGGY]    burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	144	144	1	replace	if(stopAtNonOption)  {  tokens.add(token);  }  else  {  tokens.add(token);  }		compilable	  [FE]  UnrecognizedOptionException	37	1
726	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  {    [BUGGY]  tokens.add( "- ");  currentOption  =  options.getOption(token);  [BUGGY]    burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	144	144	1	add	tokens.add( "- ");  currentOption  =  options.getOption(token);		compilable	  [FE]  UnrecognizedOptionException	37	1
727	[BUG]  [BUGGY]  tokens.add( "- ");  currentOption  =  options.getOption(token);    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  {    [BUGGY]  tokens.add( "- ");  currentOption  =  options.getOption(token);  [BUGGY]    burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	144	144	1	replace	tokens.add( "- ");  currentOption  =  options.getOption(token);		compilable	  [FE]  UnrecognizedOptionException	37	1
728	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  {    [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(arguments[0]);  [BUGGY]    burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	144	144	1	add	tokens.add(token);  currentOption  =  options.getOption(arguments[0]);		compilable	  [FE]  UnrecognizedOptionException	37	1
729	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(arguments[0]);    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  {    [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(arguments[0]);  [BUGGY]    burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	144	144	1	replace	tokens.add(token);  currentOption  =  options.getOption(arguments[0]);		compilable	  [FE]  UnrecognizedOptionException	37	1
730	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  {    [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]    burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	144	144	1	add	if(stopAtNonOption)  {  tokens.add(token);  }		compilable	  [FE]  UnrecognizedOptionException	37	1
731	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  {    [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]    burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	144	144	1	replace	if(stopAtNonOption)  {  tokens.add(token);  }		compilable	  [FE]  UnrecognizedOptionException	37	1
622	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {    [BUGGY]  burstToken(token,  stopAtNonOption);  [BUGGY]    }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	136	136	1	add	burstToken(token,  stopAtNonOption);	processOptionToken(token,  stopAtNonOption);  	compilable	  [FE]  UnrecognizedOptionException	32	1
623	[BUG]  [BUGGY]  burstToken(token,  stopAtNonOption);    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {    [BUGGY]  burstToken(token,  stopAtNonOption);  [BUGGY]    }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	136	136	1	replace	burstToken(token,  stopAtNonOption);	processOptionToken(token,  stopAtNonOption);  	compilable	  [FE]  UnrecognizedOptionException	32	1
1481	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  else  if(currentOption.hasArg())  {  [BUGGY]    {  process(token.substring(i));  }  else  {  tokens.add( "- "  +  ch);  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	299	300	1	add	else  if(currentOption.hasArg())  {	else  if  (stopAtNonOption)  {  	compilable	  [FE]  UnrecognizedOptionException	75	1
1482	[BUG]  [BUGGY]  else  if(currentOption.hasArg())  {    [FE]  UnrecognizedOptionException  [CONTEXT]    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  else  if(currentOption.hasArg())  {  [BUGGY]    {  process(token.substring(i));  }  else  {  tokens.add( "- "  +  ch);  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	299	300	1	replace	else  if(currentOption.hasArg())  {	else  if  (stopAtNonOption)  {  	compilable	  [FE]  UnrecognizedOptionException	75	1
1483	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  else  if(currentOption.hasArg()  &&(token.length()!=  (i  +  1)))  {  [BUGGY]    {  process(token.substring(i));  }  else  {  tokens.add( "- "  +  ch);  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	299	300	1	add	else  if(currentOption.hasArg()  &&(token.length()!=  (i  +  1)))  {	else  if  (stopAtNonOption)  {  	compilable	  [FE]  UnrecognizedOptionException	75	1
1484	[BUG]  [BUGGY]  else  if(currentOption.hasArg()  &&(token.length()!=  (i  +  1)))  {    [FE]  UnrecognizedOptionException  [CONTEXT]    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  else  if(currentOption.hasArg()  &&(token.length()!=  (i  +  1)))  {  [BUGGY]    {  process(token.substring(i));  }  else  {  tokens.add( "- "  +  ch);  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	299	300	1	replace	else  if(currentOption.hasArg()  &&(token.length()!=  (i  +  1)))  {	else  if  (stopAtNonOption)  {  	compilable	  [FE]  UnrecognizedOptionException	75	1
1484	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  else  if(currentOption.hasArgs())  {  [BUGGY]    {  process(token.substring(i));  }  else  {  tokens.add( "- "  +  ch);  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	299	300	1	add	else  if(currentOption.hasArgs())  {	else  if  (stopAtNonOption)  {  	compilable	  [FE]  UnrecognizedOptionException	75	1
1485	[BUG]  [BUGGY]  else  if(currentOption.hasArgs())  {    [FE]  UnrecognizedOptionException  [CONTEXT]    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  else  if(currentOption.hasArgs())  {  [BUGGY]    {  process(token.substring(i));  }  else  {  tokens.add( "- "  +  ch);  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	299	300	1	replace	else  if(currentOption.hasArgs())  {	else  if  (stopAtNonOption)  {  	compilable	  [FE]  UnrecognizedOptionException	75	1
1485	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasArg())  {  [BUGGY]    {  process(token.substring(i));  }  else  {  tokens.add( "- "  +  ch);  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	299	300	1	add	else  if(stopAtNonOption  ||  currentOption.hasArg())  {	else  if  (stopAtNonOption)  {  	compilable	  [FE]  UnrecognizedOptionException	75	1
1486	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasArg())  {    [FE]  UnrecognizedOptionException  [CONTEXT]    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasArg())  {  [BUGGY]    {  process(token.substring(i));  }  else  {  tokens.add( "- "  +  ch);  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	299	300	1	replace	else  if(stopAtNonOption  ||  currentOption.hasArg())  {	else  if  (stopAtNonOption)  {  	compilable	  [FE]  UnrecognizedOptionException	75	1
1486	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasArg()  &&(token.length()!=  (i  +  1)))  {  [BUGGY]    {  process(token.substring(i));  }  else  {  tokens.add( "- "  +  ch);  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	299	300	1	add	else  if(stopAtNonOption  ||  currentOption.hasArg()  &&(token.length()!=  (i  +  1)))  {	else  if  (stopAtNonOption)  {  	compilable	  [FE]  UnrecognizedOptionException	75	1
1487	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasArg()  &&(token.length()!=  (i  +  1)))  {    [FE]  UnrecognizedOptionException  [CONTEXT]    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasArg()  &&(token.length()!=  (i  +  1)))  {  [BUGGY]    {  process(token.substring(i));  }  else  {  tokens.add( "- "  +  ch);  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	299	300	1	replace	else  if(stopAtNonOption  ||  currentOption.hasArg()  &&(token.length()!=  (i  +  1)))  {	else  if  (stopAtNonOption)  {  	compilable	  [FE]  UnrecognizedOptionException	75	1
1487	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg())  {  [BUGGY]    {  process(token.substring(i));  }  else  {  tokens.add( "- "  +  ch);  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	299	300	1	add	else  if(stopAtNonOption  &&  currentOption.hasArg())  {	else  if  (stopAtNonOption)  {  	compilable	  [FE]  UnrecognizedOptionException	75	1
1488	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg())  {    [FE]  UnrecognizedOptionException  [CONTEXT]    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg())  {  [BUGGY]    {  process(token.substring(i));  }  else  {  tokens.add( "- "  +  ch);  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	299	300	1	replace	else  if(stopAtNonOption  &&  currentOption.hasArg())  {	else  if  (stopAtNonOption)  {  	compilable	  [FE]  UnrecognizedOptionException	75	1
1488	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  else  if(currentOption.hasArg()  &&(token.length()  ==  (i  +  1)))  {  [BUGGY]    {  process(token.substring(i));  }  else  {  tokens.add( "- "  +  ch);  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	299	300	1	add	else  if(currentOption.hasArg()  &&(token.length()  ==  (i  +  1)))  {	else  if  (stopAtNonOption)  {  	compilable	  [FE]  UnrecognizedOptionException	75	1
1489	[BUG]  [BUGGY]  else  if(currentOption.hasArg()  &&(token.length()  ==  (i  +  1)))  {    [FE]  UnrecognizedOptionException  [CONTEXT]    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  else  if(currentOption.hasArg()  &&(token.length()  ==  (i  +  1)))  {  [BUGGY]    {  process(token.substring(i));  }  else  {  tokens.add( "- "  +  ch);  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	299	300	1	replace	else  if(currentOption.hasArg()  &&(token.length()  ==  (i  +  1)))  {	else  if  (stopAtNonOption)  {  	compilable	  [FE]  UnrecognizedOptionException	75	1
1489	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  &&(token.length()!=  (i  +  1)))  {  [BUGGY]    {  process(token.substring(i));  }  else  {  tokens.add( "- "  +  ch);  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	299	300	1	add	else  if(stopAtNonOption  &&  currentOption.hasArg()  &&(token.length()!=  (i  +  1)))  {	else  if  (stopAtNonOption)  {  	compilable	  [FE]  UnrecognizedOptionException	75	1
1490	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  &&(token.length()!=  (i  +  1)))  {    [FE]  UnrecognizedOptionException  [CONTEXT]    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  &&(token.length()!=  (i  +  1)))  {  [BUGGY]    {  process(token.substring(i));  }  else  {  tokens.add( "- "  +  ch);  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	299	300	1	replace	else  if(stopAtNonOption  &&  currentOption.hasArg()  &&(token.length()!=  (i  +  1)))  {	else  if  (stopAtNonOption)  {  	compilable	  [FE]  UnrecognizedOptionException	75	1
1490	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasArg()  &&(token.length()  ==  (i  +  1)))  {  [BUGGY]    {  process(token.substring(i));  }  else  {  tokens.add( "- "  +  ch);  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	299	300	1	add	else  if(stopAtNonOption  ||  currentOption.hasArg()  &&(token.length()  ==  (i  +  1)))  {	else  if  (stopAtNonOption)  {  	compilable	  [FE]  UnrecognizedOptionException	75	1
1491	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasArg()  &&(token.length()  ==  (i  +  1)))  {    [FE]  UnrecognizedOptionException  [CONTEXT]    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasArg()  &&(token.length()  ==  (i  +  1)))  {  [BUGGY]    {  process(token.substring(i));  }  else  {  tokens.add( "- "  +  ch);  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	299	300	1	replace	else  if(stopAtNonOption  ||  currentOption.hasArg()  &&(token.length()  ==  (i  +  1)))  {	else  if  (stopAtNonOption)  {  	compilable	  [FE]  UnrecognizedOptionException	75	1
1330	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);    [BUGGY]  currentOption  =  options.getOption(ch  +  1);  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	290	290	1	add	currentOption  =  options.getOption(ch  +  1);	currentOption  =  options.getOption(ch);  	compilable	  [FE]  UnrecognizedOptionException	67	1
1331	[BUG]  [BUGGY]  currentOption  =  options.getOption(ch  +  1);    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);    [BUGGY]  currentOption  =  options.getOption(ch  +  1);  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	290	290	1	replace	currentOption  =  options.getOption(ch  +  1);	currentOption  =  options.getOption(ch);  	compilable	  [FE]  UnrecognizedOptionException	67	1
361	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  init();  this.options  =  options;    Iterator  iter  =  Arrays.asList(arguments).iterator();  String  token;      [BUGGY]  token  =(String)iter.next();  [BUGGY]    while  (iter.hasNext())    {  {    token  =  (String)  iter.next();    if  (token.startsWith( "-- "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	105	106	1	add	token  =(String)iter.next();		compilable	  [FE]  UnrecognizedOptionException	19	1
362	[BUG]  [BUGGY]  token  =(String)iter.next();    [FE]  UnrecognizedOptionException  [CONTEXT]    {  init();  this.options  =  options;    Iterator  iter  =  Arrays.asList(arguments).iterator();  String  token;      [BUGGY]  token  =(String)iter.next();  [BUGGY]    while  (iter.hasNext())    {  {    token  =  (String)  iter.next();    if  (token.startsWith( "-- "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	105	106	1	replace	token  =(String)iter.next();		compilable	  [FE]  UnrecognizedOptionException	19	1
362	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  init();  this.options  =  options;    Iterator  iter  =  Arrays.asList(arguments).iterator();  String  token;      [BUGGY]  token  =(String)iter.next();  tokens.add(token.substring(0,  token.indexOf('-')));  [BUGGY]    while  (iter.hasNext())    {  {    token  =  (String)  iter.next();    if  (token.startsWith( "-- "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	105	106	1	add	token  =(String)iter.next();  tokens.add(token.substring(0,  token.indexOf('-')));		compilable	  [FE]  UnrecognizedOptionException	19	1
363	[BUG]  [BUGGY]  token  =(String)iter.next();  tokens.add(token.substring(0,  token.indexOf('-')));    [FE]  UnrecognizedOptionException  [CONTEXT]    {  init();  this.options  =  options;    Iterator  iter  =  Arrays.asList(arguments).iterator();  String  token;      [BUGGY]  token  =(String)iter.next();  tokens.add(token.substring(0,  token.indexOf('-')));  [BUGGY]    while  (iter.hasNext())    {  {    token  =  (String)  iter.next();    if  (token.startsWith( "-- "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	105	106	1	replace	token  =(String)iter.next();  tokens.add(token.substring(0,  token.indexOf('-')));		compilable	  [FE]  UnrecognizedOptionException	19	1
370	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  init();  this.options  =  options;    Iterator  iter  =  Arrays.asList(arguments).iterator();  String  token;      [BUGGY]  token  =(String)iter.next();  tokens.add(token.substring(0,  token.indexOf('=')));  [BUGGY]    while  (iter.hasNext())    {  {    token  =  (String)  iter.next();    if  (token.startsWith( "-- "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	105	106	1	add	token  =(String)iter.next();  tokens.add(token.substring(0,  token.indexOf('=')));		compilable	  [FE]  UnrecognizedOptionException	19	1
371	[BUG]  [BUGGY]  token  =(String)iter.next();  tokens.add(token.substring(0,  token.indexOf('=')));    [FE]  UnrecognizedOptionException  [CONTEXT]    {  init();  this.options  =  options;    Iterator  iter  =  Arrays.asList(arguments).iterator();  String  token;      [BUGGY]  token  =(String)iter.next();  tokens.add(token.substring(0,  token.indexOf('=')));  [BUGGY]    while  (iter.hasNext())    {  {    token  =  (String)  iter.next();    if  (token.startsWith( "-- "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	105	106	1	replace	token  =(String)iter.next();  tokens.add(token.substring(0,  token.indexOf('=')));		compilable	  [FE]  UnrecognizedOptionException	19	1
702	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  {    [BUGGY]  processOptionToken(token,  stopAtNonOption);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	144	144	1	add	processOptionToken(token,  stopAtNonOption);	burstToken(token,  stopAtNonOption);  	compilable	  [FE]  UnrecognizedOptionException	36	1
703	[BUG]  [BUGGY]  processOptionToken(token,  stopAtNonOption);    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  {    [BUGGY]  processOptionToken(token,  stopAtNonOption);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	144	144	1	replace	processOptionToken(token,  stopAtNonOption);	burstToken(token,  stopAtNonOption);  	compilable	  [FE]  UnrecognizedOptionException	36	1
1421	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {    [BUGGY]  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]    tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  else  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	294	294	1	add	tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);		compilable	  [FE]  UnrecognizedOptionException	72	1
1422	[BUG]  [BUGGY]  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {    [BUGGY]  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]    tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  else  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	294	294	1	replace	tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);		compilable	  [FE]  UnrecognizedOptionException	72	1
1422	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {    [BUGGY]  tokens.add(token.substring(i  +  1));  currentOption  =  options.getOption(ch);  [BUGGY]    tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  else  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	294	294	1	add	tokens.add(token.substring(i  +  1));  currentOption  =  options.getOption(ch);		compilable	  [FE]  UnrecognizedOptionException	72	1
1423	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1));  currentOption  =  options.getOption(ch);    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {    [BUGGY]  tokens.add(token.substring(i  +  1));  currentOption  =  options.getOption(ch);  [BUGGY]    tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  else  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	294	294	1	replace	tokens.add(token.substring(i  +  1));  currentOption  =  options.getOption(ch);		compilable	  [FE]  UnrecognizedOptionException	72	1
1423	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {    [BUGGY]  tokens.add(token.substring(i  +  1));  [BUGGY]    tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  else  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	294	294	1	add	tokens.add(token.substring(i  +  1));		compilable	  [FE]  UnrecognizedOptionException	72	1
1424	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1));    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {    [BUGGY]  tokens.add(token.substring(i  +  1));  [BUGGY]    tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  else  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	294	294	1	replace	tokens.add(token.substring(i  +  1));		compilable	  [FE]  UnrecognizedOptionException	72	1
1424	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {    [BUGGY]  tokens.add( "- "  +  ch);  [BUGGY]    tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  else  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	294	294	1	add	tokens.add( "- "  +  ch);		compilable	  [FE]  UnrecognizedOptionException	72	1
1425	[BUG]  [BUGGY]  tokens.add( "- "  +  ch);    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {    [BUGGY]  tokens.add( "- "  +  ch);  [BUGGY]    tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  else  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	294	294	1	replace	tokens.add( "- "  +  ch);		compilable	  [FE]  UnrecognizedOptionException	72	1
1426	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {    [BUGGY]  tokens.add(new  String(token.substring(i  +  1)));  currentOption  =  options.getOption(ch);  [BUGGY]    tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  else  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	294	294	1	add	tokens.add(new  String(token.substring(i  +  1)));  currentOption  =  options.getOption(ch);		compilable	  [FE]  UnrecognizedOptionException	72	1
1427	[BUG]  [BUGGY]  tokens.add(new  String(token.substring(i  +  1)));  currentOption  =  options.getOption(ch);    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {    [BUGGY]  tokens.add(new  String(token.substring(i  +  1)));  currentOption  =  options.getOption(ch);  [BUGGY]    tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  else  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	294	294	1	replace	tokens.add(new  String(token.substring(i  +  1)));  currentOption  =  options.getOption(ch);		compilable	  [FE]  UnrecognizedOptionException	72	1
1427	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {    [BUGGY]  tokens.add(token.substring(i));  currentOption  =  options.getOption(ch);  [BUGGY]    tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  else  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	294	294	1	add	tokens.add(token.substring(i));  currentOption  =  options.getOption(ch);		compilable	  [FE]  UnrecognizedOptionException	72	1
1428	[BUG]  [BUGGY]  tokens.add(token.substring(i));  currentOption  =  options.getOption(ch);    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {    [BUGGY]  tokens.add(token.substring(i));  currentOption  =  options.getOption(ch);  [BUGGY]    tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  else  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	294	294	1	replace	tokens.add(token.substring(i));  currentOption  =  options.getOption(ch);		compilable	  [FE]  UnrecognizedOptionException	72	1
1428	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {    [BUGGY]  tokens.add(new  String(token.substring(i  +  1)));  [BUGGY]    tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  else  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	294	294	1	add	tokens.add(new  String(token.substring(i  +  1)));		compilable	  [FE]  UnrecognizedOptionException	72	1
1429	[BUG]  [BUGGY]  tokens.add(new  String(token.substring(i  +  1)));    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {    [BUGGY]  tokens.add(new  String(token.substring(i  +  1)));  [BUGGY]    tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  else  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	294	294	1	replace	tokens.add(new  String(token.substring(i  +  1)));		compilable	  [FE]  UnrecognizedOptionException	72	1
921	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  if(this.options.hasOption(token)||  this.options.hasOption(token))  {  [BUGGY]    {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	241	242	1	add	if(this.options.hasOption(token)||  this.options.hasOption(token))  {	if  (this.options.hasOption(token))  {  	compilable	  [FE]  UnrecognizedOptionException	47	1
922	[BUG]  [BUGGY]  if(this.options.hasOption(token)||  this.options.hasOption(token))  {    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  if(this.options.hasOption(token)||  this.options.hasOption(token))  {  [BUGGY]    {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	241	242	1	replace	if(this.options.hasOption(token)||  this.options.hasOption(token))  {	if  (this.options.hasOption(token))  {  	compilable	  [FE]  UnrecognizedOptionException	47	1
922	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  if(this.options.hasOption(token)||  stopAtNonOption)  {  [BUGGY]    {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	241	242	1	add	if(this.options.hasOption(token)||  stopAtNonOption)  {	if  (this.options.hasOption(token))  {  	compilable	  [FE]  UnrecognizedOptionException	47	1
923	[BUG]  [BUGGY]  if(this.options.hasOption(token)||  stopAtNonOption)  {    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  if(this.options.hasOption(token)||  stopAtNonOption)  {  [BUGGY]    {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	241	242	1	replace	if(this.options.hasOption(token)||  stopAtNonOption)  {	if  (this.options.hasOption(token))  {  	compilable	  [FE]  UnrecognizedOptionException	47	1
923	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  if(!this.options.hasOption(token))  {  [BUGGY]    {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	241	242	1	add	if(!this.options.hasOption(token))  {	if  (this.options.hasOption(token))  {  	compilable	  [FE]  UnrecognizedOptionException	47	1
924	[BUG]  [BUGGY]  if(!this.options.hasOption(token))  {    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  if(!this.options.hasOption(token))  {  [BUGGY]    {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	241	242	1	replace	if(!this.options.hasOption(token))  {	if  (this.options.hasOption(token))  {  	compilable	  [FE]  UnrecognizedOptionException	47	1
924	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  if(stopAtNonOption  &&  this.options.hasOption(token))  {  [BUGGY]    {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	241	242	1	add	if(stopAtNonOption  &&  this.options.hasOption(token))  {	if  (this.options.hasOption(token))  {  	compilable	  [FE]  UnrecognizedOptionException	47	1
925	[BUG]  [BUGGY]  if(stopAtNonOption  &&  this.options.hasOption(token))  {    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  if(stopAtNonOption  &&  this.options.hasOption(token))  {  [BUGGY]    {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	241	242	1	replace	if(stopAtNonOption  &&  this.options.hasOption(token))  {	if  (this.options.hasOption(token))  {  	compilable	  [FE]  UnrecognizedOptionException	47	1
929	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  if(this.options.hasOption(token)&&  stopAtNonOption)  {  [BUGGY]    {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	241	242	1	add	if(this.options.hasOption(token)&&  stopAtNonOption)  {	if  (this.options.hasOption(token))  {  	compilable	  [FE]  UnrecognizedOptionException	47	1
930	[BUG]  [BUGGY]  if(this.options.hasOption(token)&&  stopAtNonOption)  {    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  if(this.options.hasOption(token)&&  stopAtNonOption)  {  [BUGGY]    {  currentOption  =  this.options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	241	242	1	replace	if(this.options.hasOption(token)&&  stopAtNonOption)  {	if  (this.options.hasOption(token))  {  	compilable	  [FE]  UnrecognizedOptionException	47	1
1163	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {    [BUGGY]  String  ch  =  String.valueOf(token.charAt(i  +  1));  [BUGGY]    boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	284	284	1	add	String  ch  =  String.valueOf(token.charAt(i  +  1));	String  ch  =  String.valueOf(token.charAt(i));  	compilable	  [FE]  UnrecognizedOptionException	59	1
1164	[BUG]  [BUGGY]  String  ch  =  String.valueOf(token.charAt(i  +  1));    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {    [BUGGY]  String  ch  =  String.valueOf(token.charAt(i  +  1));  [BUGGY]    boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	284	284	1	replace	String  ch  =  String.valueOf(token.charAt(i  +  1));	String  ch  =  String.valueOf(token.charAt(i));  	compilable	  [FE]  UnrecognizedOptionException	59	1
1166	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {    [BUGGY]  String  ch  =  String.valueOf(token.charAt(i)+  1);  [BUGGY]    boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	284	284	1	add	String  ch  =  String.valueOf(token.charAt(i)+  1);	String  ch  =  String.valueOf(token.charAt(i));  	compilable	  [FE]  UnrecognizedOptionException	59	1
1167	[BUG]  [BUGGY]  String  ch  =  String.valueOf(token.charAt(i)+  1);    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {    [BUGGY]  String  ch  =  String.valueOf(token.charAt(i)+  1);  [BUGGY]    boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	284	284	1	replace	String  ch  =  String.valueOf(token.charAt(i)+  1);	String  ch  =  String.valueOf(token.charAt(i));  	compilable	  [FE]  UnrecognizedOptionException	59	1
1167	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {    [BUGGY]  String  ch  =  String.valueOf(token.charAt(i)-  1);  [BUGGY]    boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	284	284	1	add	String  ch  =  String.valueOf(token.charAt(i)-  1);	String  ch  =  String.valueOf(token.charAt(i));  	compilable	  [FE]  UnrecognizedOptionException	59	1
1168	[BUG]  [BUGGY]  String  ch  =  String.valueOf(token.charAt(i)-  1);    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {    [BUGGY]  String  ch  =  String.valueOf(token.charAt(i)-  1);  [BUGGY]    boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	284	284	1	replace	String  ch  =  String.valueOf(token.charAt(i)-  1);	String  ch  =  String.valueOf(token.charAt(i));  	compilable	  [FE]  UnrecognizedOptionException	59	1
1381	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))        {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	292	293	1	add	tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);		compilable	  [FE]  UnrecognizedOptionException	70	1
1382	[BUG]  [BUGGY]  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))        {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	292	293	1	replace	tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);		compilable	  [FE]  UnrecognizedOptionException	70	1
1382	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  tokens.add(token.substring(i  +  1));  currentOption  =  options.getOption(ch);  [BUGGY]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))        {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	292	293	1	add	tokens.add(token.substring(i  +  1));  currentOption  =  options.getOption(ch);		compilable	  [FE]  UnrecognizedOptionException	70	1
1383	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1));  currentOption  =  options.getOption(ch);    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  tokens.add(token.substring(i  +  1));  currentOption  =  options.getOption(ch);  [BUGGY]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))        {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	292	293	1	replace	tokens.add(token.substring(i  +  1));  currentOption  =  options.getOption(ch);		compilable	  [FE]  UnrecognizedOptionException	70	1
1383	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  tokens.add(token.substring(i  +  1));  [BUGGY]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))        {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	292	293	1	add	tokens.add(token.substring(i  +  1));		compilable	  [FE]  UnrecognizedOptionException	70	1
1384	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1));    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  tokens.add(token.substring(i  +  1));  [BUGGY]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))        {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	292	293	1	replace	tokens.add(token.substring(i  +  1));		compilable	  [FE]  UnrecognizedOptionException	70	1
1384	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  tokens.add( "- "  +  ch);  [BUGGY]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))        {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	292	293	1	add	tokens.add( "- "  +  ch);		compilable	  [FE]  UnrecognizedOptionException	70	1
1385	[BUG]  [BUGGY]  tokens.add( "- "  +  ch);    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  tokens.add( "- "  +  ch);  [BUGGY]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))        {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	292	293	1	replace	tokens.add( "- "  +  ch);		compilable	  [FE]  UnrecognizedOptionException	70	1
1385	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  tokens.add( "- "+  ch);  currentOption  =  options.getOption(ch);  [BUGGY]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))        {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	292	293	1	add	tokens.add( "- "+  ch);  currentOption  =  options.getOption(ch);		compilable	  [FE]  UnrecognizedOptionException	70	1
1386	[BUG]  [BUGGY]  tokens.add( "- "+  ch);  currentOption  =  options.getOption(ch);    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  tokens.add( "- "+  ch);  currentOption  =  options.getOption(ch);  [BUGGY]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))        {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	292	293	1	replace	tokens.add( "- "+  ch);  currentOption  =  options.getOption(ch);		compilable	  [FE]  UnrecognizedOptionException	70	1
1386	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  tokens.add(new  String(token.substring(i  +  1)));  currentOption  =  options.getOption(ch);  [BUGGY]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))        {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	292	293	1	add	tokens.add(new  String(token.substring(i  +  1)));  currentOption  =  options.getOption(ch);		compilable	  [FE]  UnrecognizedOptionException	70	1
1387	[BUG]  [BUGGY]  tokens.add(new  String(token.substring(i  +  1)));  currentOption  =  options.getOption(ch);    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  tokens.add(new  String(token.substring(i  +  1)));  currentOption  =  options.getOption(ch);  [BUGGY]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))        {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	292	293	1	replace	tokens.add(new  String(token.substring(i  +  1)));  currentOption  =  options.getOption(ch);		compilable	  [FE]  UnrecognizedOptionException	70	1
1387	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  tokens.add(token.substring(i));  currentOption  =  options.getOption(ch);  [BUGGY]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))        {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	292	293	1	add	tokens.add(token.substring(i));  currentOption  =  options.getOption(ch);		compilable	  [FE]  UnrecognizedOptionException	70	1
1388	[BUG]  [BUGGY]  tokens.add(token.substring(i));  currentOption  =  options.getOption(ch);    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  tokens.add(token.substring(i));  currentOption  =  options.getOption(ch);  [BUGGY]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))        {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	292	293	1	replace	tokens.add(token.substring(i));  currentOption  =  options.getOption(ch);		compilable	  [FE]  UnrecognizedOptionException	70	1
1388	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  currentOption  =  options.getOption(ch);  tokens.add(token.substring(i  +  1));  [BUGGY]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))        {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	292	293	1	add	currentOption  =  options.getOption(ch);  tokens.add(token.substring(i  +  1));		compilable	  [FE]  UnrecognizedOptionException	70	1
1389	[BUG]  [BUGGY]  currentOption  =  options.getOption(ch);  tokens.add(token.substring(i  +  1));    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  currentOption  =  options.getOption(ch);  tokens.add(token.substring(i  +  1));  [BUGGY]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))        {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	292	293	1	replace	currentOption  =  options.getOption(ch);  tokens.add(token.substring(i  +  1));		compilable	  [FE]  UnrecognizedOptionException	70	1
1389	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  tokens.add( "- ");  currentOption  =  options.getOption(ch);  [BUGGY]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))        {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	292	293	1	add	tokens.add( "- ");  currentOption  =  options.getOption(ch);		compilable	  [FE]  UnrecognizedOptionException	70	1
1390	[BUG]  [BUGGY]  tokens.add( "- ");  currentOption  =  options.getOption(ch);    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  tokens.add( "- ");  currentOption  =  options.getOption(ch);  [BUGGY]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))        {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	292	293	1	replace	tokens.add( "- ");  currentOption  =  options.getOption(ch);		compilable	  [FE]  UnrecognizedOptionException	70	1
1390	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  tokens.add( ",- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))        {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	292	293	1	add	tokens.add( ",- "  +  ch);  currentOption  =  options.getOption(ch);		compilable	  [FE]  UnrecognizedOptionException	70	1
1391	[BUG]  [BUGGY]  tokens.add( ",- "  +  ch);  currentOption  =  options.getOption(ch);    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  tokens.add( ",- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))        {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	292	293	1	replace	tokens.add( ",- "  +  ch);  currentOption  =  options.getOption(ch);		compilable	  [FE]  UnrecognizedOptionException	70	1
349	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  init();  this.options  =  options;    Iterator  iter  =  Arrays.asList(arguments).iterator();  String  token;      [BUGGY]  while(iter.hasNext()  ||  iter.hasNext())  {  [BUGGY]    {    token  =  (String)  iter.next();    if  (token.startsWith( "-- "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	105	106	1	add	while(iter.hasNext()  ||  iter.hasNext())  {	while  (iter.hasNext())  {  	compilable	  [FE]  UnrecognizedOptionException	18	1
350	[BUG]  [BUGGY]  while(iter.hasNext()  ||  iter.hasNext())  {    [FE]  UnrecognizedOptionException  [CONTEXT]    {  init();  this.options  =  options;    Iterator  iter  =  Arrays.asList(arguments).iterator();  String  token;      [BUGGY]  while(iter.hasNext()  ||  iter.hasNext())  {  [BUGGY]    {    token  =  (String)  iter.next();    if  (token.startsWith( "-- "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	105	106	1	replace	while(iter.hasNext()  ||  iter.hasNext())  {	while  (iter.hasNext())  {  	compilable	  [FE]  UnrecognizedOptionException	18	1
161	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  tokens.clear();  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	53	53	1	add	tokens.clear();		compilable	  [FE]  UnrecognizedOptionException	9	1
162	[BUG]  [BUGGY]  tokens.clear();    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  tokens.clear();  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	53	53	1	replace	tokens.clear();		compilable	  [FE]  UnrecognizedOptionException	9	1
165	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  tokens.remove(tokens.size()  -  1);  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	53	53	1	add	tokens.remove(tokens.size()  -  1);		compilable	  [FE]  UnrecognizedOptionException	9	1
166	[BUG]  [BUGGY]  tokens.remove(tokens.size()  -  1);    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  tokens.remove(tokens.size()  -  1);  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	53	53	1	replace	tokens.remove(tokens.size()  -  1);		compilable	  [FE]  UnrecognizedOptionException	9	1
168	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  tokens.add( "-- ");  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	53	53	1	add	tokens.add( "-- ");		compilable	  [FE]  UnrecognizedOptionException	9	1
169	[BUG]  [BUGGY]  tokens.add( "-- ");    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  tokens.add( "-- ");  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	53	53	1	replace	tokens.add( "-- ");		compilable	  [FE]  UnrecognizedOptionException	9	1
1301	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {    [BUGGY]  tokens.add( "- "  +  ch);  [BUGGY]    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	289	289	1	add	tokens.add( "- "  +  ch);		compilable	  [FE]  UnrecognizedOptionException	66	1
1302	[BUG]  [BUGGY]  tokens.add( "- "  +  ch);    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {    [BUGGY]  tokens.add( "- "  +  ch);  [BUGGY]    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	289	289	1	replace	tokens.add( "- "  +  ch);		compilable	  [FE]  UnrecognizedOptionException	66	1
1302	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {    [BUGGY]  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	289	289	1	add	tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);		compilable	  [FE]  UnrecognizedOptionException	66	1
1303	[BUG]  [BUGGY]  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {    [BUGGY]  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	289	289	1	replace	tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);		compilable	  [FE]  UnrecognizedOptionException	66	1
1306	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {    [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  tokens.add(token.substring(i  +  1));  break;  }  [BUGGY]    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	289	289	1	add	if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  tokens.add(token.substring(i  +  1));  break;  }		compilable	  [FE]  UnrecognizedOptionException	66	1
1307	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  tokens.add(token.substring(i  +  1));  break;  }    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {    [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  tokens.add(token.substring(i  +  1));  break;  }  [BUGGY]    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	289	289	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  tokens.add(token.substring(i  +  1));  break;  }		compilable	  [FE]  UnrecognizedOptionException	66	1
1308	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {    [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  else  {  tokens.add(token.substring(i  +  1));  break;  }  [BUGGY]    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	289	289	1	add	if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  else  {  tokens.add(token.substring(i  +  1));  break;  }		compilable	  [FE]  UnrecognizedOptionException	66	1
1309	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  else  {  tokens.add(token.substring(i  +  1));  break;  }    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {    [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  else  {  tokens.add(token.substring(i  +  1));  break;  }  [BUGGY]    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	289	289	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  else  {  tokens.add(token.substring(i  +  1));  break;  }		compilable	  [FE]  UnrecognizedOptionException	66	1
1310	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {    [BUGGY]  tokens.add(token.substring(i  +  1));  [BUGGY]    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	289	289	1	add	tokens.add(token.substring(i  +  1));		compilable	  [FE]  UnrecognizedOptionException	66	1
1311	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1));    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();  for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {    [BUGGY]  tokens.add(token.substring(i  +  1));  [BUGGY]    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	289	289	1	replace	tokens.add(token.substring(i  +  1));		compilable	  [FE]  UnrecognizedOptionException	66	1
1541	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (stopAtNonOption)  {  process(token.substring(i));  }  else  {    [BUGGY]  tokens.add( "- "  +  ch);  [BUGGY]    tokens.add( "- "  +  ch);  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	305	305	1	add	tokens.add( "- "  +  ch);		compilable	  [FE]  UnrecognizedOptionException	78	1
1542	[BUG]  [BUGGY]  tokens.add( "- "  +  ch);    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (stopAtNonOption)  {  process(token.substring(i));  }  else  {    [BUGGY]  tokens.add( "- "  +  ch);  [BUGGY]    tokens.add( "- "  +  ch);  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	305	305	1	replace	tokens.add( "- "  +  ch);		compilable	  [FE]  UnrecognizedOptionException	78	1
1544	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (stopAtNonOption)  {  process(token.substring(i));  }  else  {    [BUGGY]  tokens.add(token.substring(i));  [BUGGY]    tokens.add( "- "  +  ch);  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	305	305	1	add	tokens.add(token.substring(i));		compilable	  [FE]  UnrecognizedOptionException	78	1
1545	[BUG]  [BUGGY]  tokens.add(token.substring(i));    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (stopAtNonOption)  {  process(token.substring(i));  }  else  {    [BUGGY]  tokens.add(token.substring(i));  [BUGGY]    tokens.add( "- "  +  ch);  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	305	305	1	replace	tokens.add(token.substring(i));		compilable	  [FE]  UnrecognizedOptionException	78	1
1546	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (stopAtNonOption)  {  process(token.substring(i));  }  else  {    [BUGGY]  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]    tokens.add( "- "  +  ch);  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	305	305	1	add	tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);		compilable	  [FE]  UnrecognizedOptionException	78	1
1547	[BUG]  [BUGGY]  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (stopAtNonOption)  {  process(token.substring(i));  }  else  {    [BUGGY]  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]    tokens.add( "- "  +  ch);  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	305	305	1	replace	tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);		compilable	  [FE]  UnrecognizedOptionException	78	1
1341	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);    [BUGGY]  tokens.add( "- "  +  ch);  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	290	290	1	add	tokens.add( "- "  +  ch);		compilable	  [FE]  UnrecognizedOptionException	68	1
1342	[BUG]  [BUGGY]  tokens.add( "- "  +  ch);    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);    [BUGGY]  tokens.add( "- "  +  ch);  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	290	290	1	replace	tokens.add( "- "  +  ch);		compilable	  [FE]  UnrecognizedOptionException	68	1
1122	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();    [BUGGY]  for(int  i  =  2;  i  <  tokenLength;  i++)  {  [BUGGY]    {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	282	283	1	add	for(int  i  =  2;  i  <  tokenLength;  i++)  {	for  (int  i  =  1;  i  <  tokenLength;  i++)  {  	compilable	  [FE]  UnrecognizedOptionException	57	1
1123	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  tokenLength;  i++)  {    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();    [BUGGY]  for(int  i  =  2;  i  <  tokenLength;  i++)  {  [BUGGY]    {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	282	283	1	replace	for(int  i  =  2;  i  <  tokenLength;  i++)  {	for  (int  i  =  1;  i  <  tokenLength;  i++)  {  	compilable	  [FE]  UnrecognizedOptionException	57	1
1124	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();    [BUGGY]  for(int  i  =  1;  i  <=  tokenLength;  i++)  {  [BUGGY]    {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	282	283	1	add	for(int  i  =  1;  i  <=  tokenLength;  i++)  {	for  (int  i  =  1;  i  <  tokenLength;  i++)  {  	compilable	  [FE]  UnrecognizedOptionException	57	1
1125	[BUG]  [BUGGY]  for(int  i  =  1;  i  <=  tokenLength;  i++)  {    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();    [BUGGY]  for(int  i  =  1;  i  <=  tokenLength;  i++)  {  [BUGGY]    {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	282	283	1	replace	for(int  i  =  1;  i  <=  tokenLength;  i++)  {	for  (int  i  =  1;  i  <  tokenLength;  i++)  {  	compilable	  [FE]  UnrecognizedOptionException	57	1
1125	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();    [BUGGY]  for(int  i  =  1;  i!=  tokenLength;  i++)  {  [BUGGY]    {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	282	283	1	add	for(int  i  =  1;  i!=  tokenLength;  i++)  {	for  (int  i  =  1;  i  <  tokenLength;  i++)  {  	compilable	  [FE]  UnrecognizedOptionException	57	1
1126	[BUG]  [BUGGY]  for(int  i  =  1;  i!=  tokenLength;  i++)  {    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();    [BUGGY]  for(int  i  =  1;  i!=  tokenLength;  i++)  {  [BUGGY]    {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	282	283	1	replace	for(int  i  =  1;  i!=  tokenLength;  i++)  {	for  (int  i  =  1;  i  <  tokenLength;  i++)  {  	compilable	  [FE]  UnrecognizedOptionException	57	1
1126	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();    [BUGGY]  for(int  i  =  3;  i  <  tokenLength;  i++)  {  [BUGGY]    {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	282	283	1	add	for(int  i  =  3;  i  <  tokenLength;  i++)  {	for  (int  i  =  1;  i  <  tokenLength;  i++)  {  	compilable	  [FE]  UnrecognizedOptionException	57	1
1127	[BUG]  [BUGGY]  for(int  i  =  3;  i  <  tokenLength;  i++)  {    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();    [BUGGY]  for(int  i  =  3;  i  <  tokenLength;  i++)  {  [BUGGY]    {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	282	283	1	replace	for(int  i  =  3;  i  <  tokenLength;  i++)  {	for  (int  i  =  1;  i  <  tokenLength;  i++)  {  	compilable	  [FE]  UnrecognizedOptionException	57	1
1128	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();    [BUGGY]  for(int  i  =  4;  i  <  tokenLength;  i++)  {  [BUGGY]    {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	282	283	1	add	for(int  i  =  4;  i  <  tokenLength;  i++)  {	for  (int  i  =  1;  i  <  tokenLength;  i++)  {  	compilable	  [FE]  UnrecognizedOptionException	57	1
1129	[BUG]  [BUGGY]  for(int  i  =  4;  i  <  tokenLength;  i++)  {    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();    [BUGGY]  for(int  i  =  4;  i  <  tokenLength;  i++)  {  [BUGGY]    {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	282	283	1	replace	for(int  i  =  4;  i  <  tokenLength;  i++)  {	for  (int  i  =  1;  i  <  tokenLength;  i++)  {  	compilable	  [FE]  UnrecognizedOptionException	57	1
1129	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();    [BUGGY]  for(int  i  =  tokenLength;  i  <  1;  i++)  {  [BUGGY]    {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	282	283	1	add	for(int  i  =  tokenLength;  i  <  1;  i++)  {	for  (int  i  =  1;  i  <  tokenLength;  i++)  {  	compilable	  [FE]  UnrecognizedOptionException	57	1
1130	[BUG]  [BUGGY]  for(int  i  =  tokenLength;  i  <  1;  i++)  {    [FE]  UnrecognizedOptionException  [CONTEXT]    {  int  tokenLength  =  token.length();    [BUGGY]  for(int  i  =  tokenLength;  i  <  1;  i++)  {  [BUGGY]    {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	282	283	1	replace	for(int  i  =  tokenLength;  i  <  1;  i++)  {	for  (int  i  =  1;  i  <  tokenLength;  i++)  {  	compilable	  [FE]  UnrecognizedOptionException	57	1
1001	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (this.options.hasOption(token))  {  currentOption  =  this.options.getOption(token);    [BUGGY]  tokens.add(currentOption);  [BUGGY]    }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	244	244	1	add	tokens.add(currentOption);	tokens.add(token);  	compilable	  [FE]  UnrecognizedOptionException	51	1
1002	[BUG]  [BUGGY]  tokens.add(currentOption);    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (this.options.hasOption(token))  {  currentOption  =  this.options.getOption(token);    [BUGGY]  tokens.add(currentOption);  [BUGGY]    }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	244	244	1	replace	tokens.add(currentOption);	tokens.add(token);  	compilable	  [FE]  UnrecognizedOptionException	51	1
1002	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (this.options.hasOption(token))  {  currentOption  =  this.options.getOption(token);    [BUGGY]  tokens.remove(currentOption);  [BUGGY]    }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	244	244	1	add	tokens.remove(currentOption);	tokens.add(token);  	compilable	  [FE]  UnrecognizedOptionException	51	1
1003	[BUG]  [BUGGY]  tokens.remove(currentOption);    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (this.options.hasOption(token))  {  currentOption  =  this.options.getOption(token);    [BUGGY]  tokens.remove(currentOption);  [BUGGY]    }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	244	244	1	replace	tokens.remove(currentOption);	tokens.add(token);  	compilable	  [FE]  UnrecognizedOptionException	51	1
1007	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (this.options.hasOption(token))  {  currentOption  =  this.options.getOption(token);    [BUGGY]  tokens.remove(token);  [BUGGY]    }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	244	244	1	add	tokens.remove(token);	tokens.add(token);  	compilable	  [FE]  UnrecognizedOptionException	51	1
1008	[BUG]  [BUGGY]  tokens.remove(token);    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (this.options.hasOption(token))  {  currentOption  =  this.options.getOption(token);    [BUGGY]  tokens.remove(token);  [BUGGY]    }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	244	244	1	replace	tokens.remove(token);	tokens.add(token);  	compilable	  [FE]  UnrecognizedOptionException	51	1
603	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();    [BUGGY]  if(tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  [BUGGY]    if  (tokenLength  ==  2)        {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	134	135	1	add	if(tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }		compilable	  [FE]  UnrecognizedOptionException	31	1
604	[BUG]  [BUGGY]  if(tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();    [BUGGY]  if(tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  [BUGGY]    if  (tokenLength  ==  2)        {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	134	135	1	replace	if(tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }		compilable	  [FE]  UnrecognizedOptionException	31	1
610	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();    [BUGGY]  if(tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  }  [BUGGY]    if  (tokenLength  ==  2)        {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	134	135	1	add	if(tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  }		compilable	  [FE]  UnrecognizedOptionException	31	1
611	[BUG]  [BUGGY]  if(tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  }    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();    [BUGGY]  if(tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  }  [BUGGY]    if  (tokenLength  ==  2)        {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	134	135	1	replace	if(tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  }		compilable	  [FE]  UnrecognizedOptionException	31	1
1362	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  if(currentOption.hasArg()  &&(token.length()  ==  (i  +  1)))  {  [BUGGY]    {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	292	293	1	add	if(currentOption.hasArg()  &&(token.length()  ==  (i  +  1)))  {	if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  	compilable	  [FE]  UnrecognizedOptionException	69	1
1363	[BUG]  [BUGGY]  if(currentOption.hasArg()  &&(token.length()  ==  (i  +  1)))  {    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  if(currentOption.hasArg()  &&(token.length()  ==  (i  +  1)))  {  [BUGGY]    {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	292	293	1	replace	if(currentOption.hasArg()  &&(token.length()  ==  (i  +  1)))  {	if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  	compilable	  [FE]  UnrecognizedOptionException	69	1
1363	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  if(currentOption.hasArg()  ||(token.length()!=  (i  +  1)))  {  [BUGGY]    {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	292	293	1	add	if(currentOption.hasArg()  ||(token.length()!=  (i  +  1)))  {	if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  	compilable	  [FE]  UnrecognizedOptionException	69	1
1364	[BUG]  [BUGGY]  if(currentOption.hasArg()  ||(token.length()!=  (i  +  1)))  {    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  if(currentOption.hasArg()  ||(token.length()!=  (i  +  1)))  {  [BUGGY]    {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	292	293	1	replace	if(currentOption.hasArg()  ||(token.length()!=  (i  +  1)))  {	if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  	compilable	  [FE]  UnrecognizedOptionException	69	1
1365	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  if(currentOption!=  null  &&  currentOption.hasArg()  &&(token.length()!=  (i  +  1)))  {  [BUGGY]    {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	292	293	1	add	if(currentOption!=  null  &&  currentOption.hasArg()  &&(token.length()!=  (i  +  1)))  {	if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  	compilable	  [FE]  UnrecognizedOptionException	69	1
1366	[BUG]  [BUGGY]  if(currentOption!=  null  &&  currentOption.hasArg()  &&(token.length()!=  (i  +  1)))  {    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  if(currentOption!=  null  &&  currentOption.hasArg()  &&(token.length()!=  (i  +  1)))  {  [BUGGY]    {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	292	293	1	replace	if(currentOption!=  null  &&  currentOption.hasArg()  &&(token.length()!=  (i  +  1)))  {	if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  	compilable	  [FE]  UnrecognizedOptionException	69	1
1366	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  if(currentOption!=  null  ||  currentOption.hasArg()  &&(token.length()!=  (i  +  1)))  {  [BUGGY]    {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	292	293	1	add	if(currentOption!=  null  ||  currentOption.hasArg()  &&(token.length()!=  (i  +  1)))  {	if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  	compilable	  [FE]  UnrecognizedOptionException	69	1
1367	[BUG]  [BUGGY]  if(currentOption!=  null  ||  currentOption.hasArg()  &&(token.length()!=  (i  +  1)))  {    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  if(currentOption!=  null  ||  currentOption.hasArg()  &&(token.length()!=  (i  +  1)))  {  [BUGGY]    {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	292	293	1	replace	if(currentOption!=  null  ||  currentOption.hasArg()  &&(token.length()!=  (i  +  1)))  {	if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  	compilable	  [FE]  UnrecognizedOptionException	69	1
1367	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  if(currentOption.hasArg()  &&(token.length()!=  (i  +  2)))  {  [BUGGY]    {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	292	293	1	add	if(currentOption.hasArg()  &&(token.length()!=  (i  +  2)))  {	if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  	compilable	  [FE]  UnrecognizedOptionException	69	1
1368	[BUG]  [BUGGY]  if(currentOption.hasArg()  &&(token.length()!=  (i  +  2)))  {    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  if(currentOption.hasArg()  &&(token.length()!=  (i  +  2)))  {  [BUGGY]    {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	292	293	1	replace	if(currentOption.hasArg()  &&(token.length()!=  (i  +  2)))  {	if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  	compilable	  [FE]  UnrecognizedOptionException	69	1
1368	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  if(currentOption.hasArgs()  &&(token.length()!=  (i  +  1)))  {  [BUGGY]    {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	292	293	1	add	if(currentOption.hasArgs()  &&(token.length()!=  (i  +  1)))  {	if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  	compilable	  [FE]  UnrecognizedOptionException	69	1
1369	[BUG]  [BUGGY]  if(currentOption.hasArgs()  &&(token.length()!=  (i  +  1)))  {    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  if(currentOption.hasArgs()  &&(token.length()!=  (i  +  1)))  {  [BUGGY]    {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	292	293	1	replace	if(currentOption.hasArgs()  &&(token.length()!=  (i  +  1)))  {	if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  	compilable	  [FE]  UnrecognizedOptionException	69	1
1369	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  if(currentOption.hasArg()  &&  (token.length()  ==  (i  +  1)))  {  [BUGGY]    {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	292	293	1	add	if(currentOption.hasArg()  &&  (token.length()  ==  (i  +  1)))  {	if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  	compilable	  [FE]  UnrecognizedOptionException	69	1
1370	[BUG]  [BUGGY]  if(currentOption.hasArg()  &&  (token.length()  ==  (i  +  1)))  {    [FE]  UnrecognizedOptionException  [CONTEXT]    if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  if(currentOption.hasArg()  &&  (token.length()  ==  (i  +  1)))  {  [BUGGY]    {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	292	293	1	replace	if(currentOption.hasArg()  &&  (token.length()  ==  (i  +  1)))  {	if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  	compilable	  [FE]  UnrecognizedOptionException	69	1
1082	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {    [BUGGY]  int  tokenLength  =  token.length()  -  1;  [BUGGY]      for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	280	280	1	add	int  tokenLength  =  token.length()  -  1;	int  tokenLength  =  token.length();  	compilable	  [FE]  UnrecognizedOptionException	55	1
1083	[BUG]  [BUGGY]  int  tokenLength  =  token.length()  -  1;    [FE]  UnrecognizedOptionException  [CONTEXT]    {    [BUGGY]  int  tokenLength  =  token.length()  -  1;  [BUGGY]      for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	280	280	1	replace	int  tokenLength  =  token.length()  -  1;	int  tokenLength  =  token.length();  	compilable	  [FE]  UnrecognizedOptionException	55	1
1083	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {    [BUGGY]  int  tokenLength  =  token.length()  +  1;  [BUGGY]      for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	280	280	1	add	int  tokenLength  =  token.length()  +  1;	int  tokenLength  =  token.length();  	compilable	  [FE]  UnrecognizedOptionException	55	1
1084	[BUG]  [BUGGY]  int  tokenLength  =  token.length()  +  1;    [FE]  UnrecognizedOptionException  [CONTEXT]    {    [BUGGY]  int  tokenLength  =  token.length()  +  1;  [BUGGY]      for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	280	280	1	replace	int  tokenLength  =  token.length()  +  1;	int  tokenLength  =  token.length();  	compilable	  [FE]  UnrecognizedOptionException	55	1
1084	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {    [BUGGY]  int  tokenLength  =  token.length()  -  2;  [BUGGY]      for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	280	280	1	add	int  tokenLength  =  token.length()  -  2;	int  tokenLength  =  token.length();  	compilable	  [FE]  UnrecognizedOptionException	55	1
1085	[BUG]  [BUGGY]  int  tokenLength  =  token.length()  -  2;    [FE]  UnrecognizedOptionException  [CONTEXT]    {    [BUGGY]  int  tokenLength  =  token.length()  -  2;  [BUGGY]      for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	280	280	1	replace	int  tokenLength  =  token.length()  -  2;	int  tokenLength  =  token.length();  	compilable	  [FE]  UnrecognizedOptionException	55	1
1085	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {    [BUGGY]  int  tokenLength  =  token.length()  *  2;  [BUGGY]      for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	280	280	1	add	int  tokenLength  =  token.length()  *  2;	int  tokenLength  =  token.length();  	compilable	  [FE]  UnrecognizedOptionException	55	1
1086	[BUG]  [BUGGY]  int  tokenLength  =  token.length()  *  2;    [FE]  UnrecognizedOptionException  [CONTEXT]    {    [BUGGY]  int  tokenLength  =  token.length()  *  2;  [BUGGY]      for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	280	280	1	replace	int  tokenLength  =  token.length()  *  2;	int  tokenLength  =  token.length();  	compilable	  [FE]  UnrecognizedOptionException	55	1
1086	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {    [BUGGY]  int  tokenLength  =  token.lastIndexOf( "- ");  [BUGGY]      for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	280	280	1	add	int  tokenLength  =  token.lastIndexOf( "- ");	int  tokenLength  =  token.length();  	compilable	  [FE]  UnrecognizedOptionException	55	1
1087	[BUG]  [BUGGY]  int  tokenLength  =  token.lastIndexOf( "- ");    [FE]  UnrecognizedOptionException  [CONTEXT]    {    [BUGGY]  int  tokenLength  =  token.lastIndexOf( "- ");  [BUGGY]      for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	280	280	1	replace	int  tokenLength  =  token.lastIndexOf( "- ");	int  tokenLength  =  token.length();  	compilable	  [FE]  UnrecognizedOptionException	55	1
1088	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {    [BUGGY]  int  tokenLength  =  token.length()  -  4;  [BUGGY]      for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	280	280	1	add	int  tokenLength  =  token.length()  -  4;	int  tokenLength  =  token.length();  	compilable	  [FE]  UnrecognizedOptionException	55	1
1089	[BUG]  [BUGGY]  int  tokenLength  =  token.length()  -  4;    [FE]  UnrecognizedOptionException  [CONTEXT]    {    [BUGGY]  int  tokenLength  =  token.length()  -  4;  [BUGGY]      for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	280	280	1	replace	int  tokenLength  =  token.length()  -  4;	int  tokenLength  =  token.length();  	compilable	  [FE]  UnrecognizedOptionException	55	1
1089	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {    [BUGGY]  int  tokenLength  =  token.lastIndexOf('n');  [BUGGY]      for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	280	280	1	add	int  tokenLength  =  token.lastIndexOf('n');	int  tokenLength  =  token.length();  	compilable	  [FE]  UnrecognizedOptionException	55	1
1090	[BUG]  [BUGGY]  int  tokenLength  =  token.lastIndexOf('n');    [FE]  UnrecognizedOptionException  [CONTEXT]    {    [BUGGY]  int  tokenLength  =  token.lastIndexOf('n');  [BUGGY]      for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	280	280	1	replace	int  tokenLength  =  token.lastIndexOf('n');	int  tokenLength  =  token.length();  	compilable	  [FE]  UnrecognizedOptionException	55	1
1090	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    {    [BUGGY]  int  tokenLength  =  token.length()  -  3;  [BUGGY]      for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	280	280	1	add	int  tokenLength  =  token.length()  -  3;	int  tokenLength  =  token.length();  	compilable	  [FE]  UnrecognizedOptionException	55	1
1091	[BUG]  [BUGGY]  int  tokenLength  =  token.length()  -  3;    [FE]  UnrecognizedOptionException  [CONTEXT]    {    [BUGGY]  int  tokenLength  =  token.length()  -  3;  [BUGGY]      for  (int  i  =  1;  i  <  tokenLength;  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  boolean  hasOption  =  options.hasOption(ch);  if  (hasOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void    String  token  boolean  stopAtNonOption  [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest  hasOption  stopAtNonOption  String  ch  token  int  i  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	280	280	1	replace	int  tokenLength  =  token.length()  -  3;	int  tokenLength  =  token.length();  	compilable	  [FE]  UnrecognizedOptionException	55	1
582	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();    [BUGGY]  if(tokenLength  ==  1)  {  [BUGGY]    {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	134	135	1	add	if(tokenLength  ==  1)  {	if  (tokenLength  ==  2)  {  	compilable	  [FE]  UnrecognizedOptionException	30	1
583	[BUG]  [BUGGY]  if(tokenLength  ==  1)  {    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();    [BUGGY]  if(tokenLength  ==  1)  {  [BUGGY]    {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	134	135	1	replace	if(tokenLength  ==  1)  {	if  (tokenLength  ==  2)  {  	compilable	  [FE]  UnrecognizedOptionException	30	1
586	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();    [BUGGY]  if(tokenLength  ==  2  ||  token.charAt(tokenLength  -  1)!=  '/')  {  [BUGGY]    {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	134	135	1	add	if(tokenLength  ==  2  ||  token.charAt(tokenLength  -  1)!=  '/')  {	if  (tokenLength  ==  2)  {  	compilable	  [FE]  UnrecognizedOptionException	30	1
587	[BUG]  [BUGGY]  if(tokenLength  ==  2  ||  token.charAt(tokenLength  -  1)!=  '/')  {    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();    [BUGGY]  if(tokenLength  ==  2  ||  token.charAt(tokenLength  -  1)!=  '/')  {  [BUGGY]    {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	134	135	1	replace	if(tokenLength  ==  2  ||  token.charAt(tokenLength  -  1)!=  '/')  {	if  (tokenLength  ==  2)  {  	compilable	  [FE]  UnrecognizedOptionException	30	1
587	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();    [BUGGY]  if(tokenLength  ==  2  ||  token.charAt(tokenLength  -  1)!=  '+')  {  [BUGGY]    {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	134	135	1	add	if(tokenLength  ==  2  ||  token.charAt(tokenLength  -  1)!=  '+')  {	if  (tokenLength  ==  2)  {  	compilable	  [FE]  UnrecognizedOptionException	30	1
588	[BUG]  [BUGGY]  if(tokenLength  ==  2  ||  token.charAt(tokenLength  -  1)!=  '+')  {    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();    [BUGGY]  if(tokenLength  ==  2  ||  token.charAt(tokenLength  -  1)!=  '+')  {  [BUGGY]    {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	134	135	1	replace	if(tokenLength  ==  2  ||  token.charAt(tokenLength  -  1)!=  '+')  {	if  (tokenLength  ==  2)  {  	compilable	  [FE]  UnrecognizedOptionException	30	1
588	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();    [BUGGY]  if(tokenLength  ==  2  ||  token.charAt(tokenLength  -  1)!=  '_')  {  [BUGGY]    {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	134	135	1	add	if(tokenLength  ==  2  ||  token.charAt(tokenLength  -  1)!=  '_')  {	if  (tokenLength  ==  2)  {  	compilable	  [FE]  UnrecognizedOptionException	30	1
589	[BUG]  [BUGGY]  if(tokenLength  ==  2  ||  token.charAt(tokenLength  -  1)!=  '_')  {    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();    [BUGGY]  if(tokenLength  ==  2  ||  token.charAt(tokenLength  -  1)!=  '_')  {  [BUGGY]    {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	134	135	1	replace	if(tokenLength  ==  2  ||  token.charAt(tokenLength  -  1)!=  '_')  {	if  (tokenLength  ==  2)  {  	compilable	  [FE]  UnrecognizedOptionException	30	1
589	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();    [BUGGY]  if(tokenLength  ==  2  ||  token.charAt(tokenLength  -  1)!=  '0')  {  [BUGGY]    {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	134	135	1	add	if(tokenLength  ==  2  ||  token.charAt(tokenLength  -  1)!=  '0')  {	if  (tokenLength  ==  2)  {  	compilable	  [FE]  UnrecognizedOptionException	30	1
590	[BUG]  [BUGGY]  if(tokenLength  ==  2  ||  token.charAt(tokenLength  -  1)!=  '0')  {    [FE]  UnrecognizedOptionException  [CONTEXT]    else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();    [BUGGY]  if(tokenLength  ==  2  ||  token.charAt(tokenLength  -  1)!=  '0')  {  [BUGGY]    {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }    else  {  burstToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]    Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  ArrayList  tokens  Iterator  iter  Option  currentOption  String[]  arguments  String  token  int  tokenLength    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	134	135	1	replace	if(tokenLength  ==  2  ||  token.charAt(tokenLength  -  1)!=  '0')  {	if  (tokenLength  ==  2)  {  	compilable	  [FE]  UnrecognizedOptionException	30	1
882	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  gobble(Iterator  iter)  {    [BUGGY]  boolean  eatTheRest  =  iter.hasNext();  [BUGGY]    if  (eatTheRest)    {  {  while  (iter.hasNext())  {  tokens.add(iter.next());  }  }  }  [CLASS]  PosixParser  [METHOD]  gobble  [RETURN_TYPE]  void    Iterator  iter  [VARIABLES]  ArrayList  tokens  Iterator  iter  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	172	173	1	add	boolean  eatTheRest  =  iter.hasNext();		compilable	  [FE]  UnrecognizedOptionException	45	1
883	[BUG]  [BUGGY]  boolean  eatTheRest  =  iter.hasNext();    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  gobble(Iterator  iter)  {    [BUGGY]  boolean  eatTheRest  =  iter.hasNext();  [BUGGY]    if  (eatTheRest)    {  {  while  (iter.hasNext())  {  tokens.add(iter.next());  }  }  }  [CLASS]  PosixParser  [METHOD]  gobble  [RETURN_TYPE]  void    Iterator  iter  [VARIABLES]  ArrayList  tokens  Iterator  iter  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	172	173	1	replace	boolean  eatTheRest  =  iter.hasNext();		compilable	  [FE]  UnrecognizedOptionException	45	1
886	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  gobble(Iterator  iter)  {    [BUGGY]  tokens.add(iter.next());  [BUGGY]    if  (eatTheRest)    {  {  while  (iter.hasNext())  {  tokens.add(iter.next());  }  }  }  [CLASS]  PosixParser  [METHOD]  gobble  [RETURN_TYPE]  void    Iterator  iter  [VARIABLES]  ArrayList  tokens  Iterator  iter  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	172	173	1	add	tokens.add(iter.next());		compilable	  [FE]  UnrecognizedOptionException	45	1
887	[BUG]  [BUGGY]  tokens.add(iter.next());    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  gobble(Iterator  iter)  {    [BUGGY]  tokens.add(iter.next());  [BUGGY]    if  (eatTheRest)    {  {  while  (iter.hasNext())  {  tokens.add(iter.next());  }  }  }  [CLASS]  PosixParser  [METHOD]  gobble  [RETURN_TYPE]  void    Iterator  iter  [VARIABLES]  ArrayList  tokens  Iterator  iter  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	172	173	1	replace	tokens.add(iter.next());		compilable	  [FE]  UnrecognizedOptionException	45	1
887	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  gobble(Iterator  iter)  {    [BUGGY]  boolean  eatTheRest  =  iter.hasNext();  tokens.add(iter.next());  [BUGGY]    if  (eatTheRest)    {  {  while  (iter.hasNext())  {  tokens.add(iter.next());  }  }  }  [CLASS]  PosixParser  [METHOD]  gobble  [RETURN_TYPE]  void    Iterator  iter  [VARIABLES]  ArrayList  tokens  Iterator  iter  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	172	173	1	add	boolean  eatTheRest  =  iter.hasNext();  tokens.add(iter.next());		compilable	  [FE]  UnrecognizedOptionException	45	1
888	[BUG]  [BUGGY]  boolean  eatTheRest  =  iter.hasNext();  tokens.add(iter.next());    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  gobble(Iterator  iter)  {    [BUGGY]  boolean  eatTheRest  =  iter.hasNext();  tokens.add(iter.next());  [BUGGY]    if  (eatTheRest)    {  {  while  (iter.hasNext())  {  tokens.add(iter.next());  }  }  }  [CLASS]  PosixParser  [METHOD]  gobble  [RETURN_TYPE]  void    Iterator  iter  [VARIABLES]  ArrayList  tokens  Iterator  iter  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	172	173	1	replace	boolean  eatTheRest  =  iter.hasNext();  tokens.add(iter.next());		compilable	  [FE]  UnrecognizedOptionException	45	1
889	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  gobble(Iterator  iter)  {    [BUGGY]  tokens.add(iter);  [BUGGY]    if  (eatTheRest)    {  {  while  (iter.hasNext())  {  tokens.add(iter.next());  }  }  }  [CLASS]  PosixParser  [METHOD]  gobble  [RETURN_TYPE]  void    Iterator  iter  [VARIABLES]  ArrayList  tokens  Iterator  iter  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	172	173	1	add	tokens.add(iter);		compilable	  [FE]  UnrecognizedOptionException	45	1
890	[BUG]  [BUGGY]  tokens.add(iter);    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  gobble(Iterator  iter)  {    [BUGGY]  tokens.add(iter);  [BUGGY]    if  (eatTheRest)    {  {  while  (iter.hasNext())  {  tokens.add(iter.next());  }  }  }  [CLASS]  PosixParser  [METHOD]  gobble  [RETURN_TYPE]  void    Iterator  iter  [VARIABLES]  ArrayList  tokens  Iterator  iter  Options  options  Option  currentOption  boolean  eatTheRest  stopAtNonOption    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	172	173	1	replace	tokens.add(iter);		compilable	  [FE]  UnrecognizedOptionException	45	1
81	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {    [BUGGY]  tokens.clear();  [BUGGY]    eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	51	51	1	add	tokens.clear();		compilable	  [FE]  UnrecognizedOptionException	5	1
82	[BUG]  [BUGGY]  tokens.clear();    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {    [BUGGY]  tokens.clear();  [BUGGY]    eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	51	51	1	replace	tokens.clear();		compilable	  [FE]  UnrecognizedOptionException	5	1
82	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {    [BUGGY]  tokens.clear();  currentOption  =  null;  [BUGGY]    eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	51	51	1	add	tokens.clear();  currentOption  =  null;		compilable	  [FE]  UnrecognizedOptionException	5	1
83	[BUG]  [BUGGY]  tokens.clear();  currentOption  =  null;    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {    [BUGGY]  tokens.clear();  currentOption  =  null;  [BUGGY]    eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	51	51	1	replace	tokens.clear();  currentOption  =  null;		compilable	  [FE]  UnrecognizedOptionException	5	1
86	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {    [BUGGY]  tokens.clear();  tokens.add(currentOption);  [BUGGY]    eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	51	51	1	add	tokens.clear();  tokens.add(currentOption);		compilable	  [FE]  UnrecognizedOptionException	5	1
87	[BUG]  [BUGGY]  tokens.clear();  tokens.add(currentOption);    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {    [BUGGY]  tokens.clear();  tokens.add(currentOption);  [BUGGY]    eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	51	51	1	replace	tokens.clear();  tokens.add(currentOption);		compilable	  [FE]  UnrecognizedOptionException	5	1
87	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {    [BUGGY]  tokens.clear();  tokens.clear();  [BUGGY]    eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	51	51	1	add	tokens.clear();  tokens.clear();		compilable	  [FE]  UnrecognizedOptionException	5	1
88	[BUG]  [BUGGY]  tokens.clear();  tokens.clear();    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {    [BUGGY]  tokens.clear();  tokens.clear();  [BUGGY]    eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	51	51	1	replace	tokens.clear();  tokens.clear();		compilable	  [FE]  UnrecognizedOptionException	5	1
88	[BUG]  [BUGGY]    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {    [BUGGY]  tokens.clear();  eatTheRest  =  true;  [BUGGY]    eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	51	51	1	add	tokens.clear();  eatTheRest  =  true;		compilable	  [FE]  UnrecognizedOptionException	5	1
89	[BUG]  [BUGGY]  tokens.clear();  eatTheRest  =  true;    [FE]  UnrecognizedOptionException  [CONTEXT]    private  void  init()  {    [BUGGY]  tokens.clear();  eatTheRest  =  true;  [BUGGY]    eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void    [VARIABLES]  ArrayList  tokens  Options  options  Option  currentOption  boolean  eatTheRest    	projects/Cli2/src/java/org/apache/commons/cli/PosixParser.java	1.0	51	51	1	replace	tokens.clear();  eatTheRest  =  true;		compilable	  [FE]  UnrecognizedOptionException	5	1
