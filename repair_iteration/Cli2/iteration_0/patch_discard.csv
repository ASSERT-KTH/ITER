patch is same with buggy,,if (token.startsWith("--")) { ,if(token.startsWith("--")) {
compilation error,[CE] variable iter is already defined in method flatten(Options,String[],boolean),,Iterator iter = arguments[iter.next()];
compilation error,[CE] variable iter is already defined in method flatten(Options,String[],boolean),,Iterator iter = arguments[iter.next() ];
compilation error,[CE] variable token is already defined in method flatten(Options,String[],boolean),,String token =(String)iter.next();
compilation error,[CE] variable iter is already defined in method flatten(Options,String[],boolean),,Iterator iter = arguments[iter.next() + 1];
compilation error,[CE] variable iter is already defined in method flatten(Options,String[],boolean),,Iterator iter = arguments[iter.next()].iterator();
compilation error,[CE] variable token is already defined in method flatten(Options,String[],boolean),,String token = iter.next();
compilation error,[CE] variable iter is already defined in method flatten(Options,String[],boolean),,Iterator iter = currentOption.iterateNext();
compilation error,[CE] variable iter is already defined in method flatten(Options,String[],boolean),,Iterator iter = options.next();
compilation error,[CE] variable token might not have been initialized,,tokens.add(token);
compilation error,[CE] illegal start of expression,,while(iter.hasNext()) { tokens.add(token);
compilation error,[CE] variable token might not have been initialized,,tokens.add(token); tokens.add(arguments[0]);
compilation error,[CE] incompatible types,,tokens.add(arguments[token]);
compilation error,[CE] no suitable method found for add(String,String),,tokens.add(token); tokens.add(arguments[0], arguments[1]);
compilation error,[CE] cannot find symbol,,tokens.add(token); currentOption = iter.getOptions();
compilation error,[CE] incompatible types,,tokens.add(token); tokens.add(arguments[token]);
compilation error,[CE] incompatible types,,tokens.add(token); currentOption = iter.next();
compilation error,[CE] cannot find symbol,,tokens.add(token); tokens.add(arguments[0].toArray());
compilation error,[CE] variable token might not have been initialized,,iter.remove(); tokens.add(token);
compilation error,[CE] illegal start of expression,,if(stopAtNonOption) { tokens.add(token); if(options.hasOption(token)) { tokens.add(token); }
compilation error,[CE] method getOption in class Options cannot be applied to given types;,,tokens.add(token); currentOption = options.getOption(token, stopAtNonOption);
compilation error,[CE] illegal start of expression,,if(stopAtNonOption) { tokens.add(token); if(options.hasOption(token)) { processOptionToken(token, stopAtNonOption); }
compilation error,[CE] cannot find symbol,,stopAtNonOption = options.get(tokenLength); tokens.add(token);
compilation error,[CE] method getOption in class Options cannot be applied to given types;,,tokens.add(token); stopAtNonOption = options.getOption(token, stopAtNonOption);
compilation error,[CE] cannot find symbol,,tokens.add(token); this.options.remove(token);
compilation error,[CE] not a statement,,if(stopAtNonOption) { tokens.add("-" + ch); continueAtNonOption; }
compilation error,[CE] ,,boolean stopAtNonOption = options.hasArg() &&(token.length()!= (i + 1))) { tokens.add("-" + ch);
compilation error,[CE] cannot find symbol,,if(stopAtNonOption) { tokens.add("-" + ch); options.add(token.substring(i + 1)); }
compilation error,[CE] ,,boolean stopAtNonOption = options.hasArg() &&(token.length()!= (i + 1))); tokens.add("-" + ch);
compilation error,[CE] incompatible types,,tokens.add("-" + ch); stopAtNonOption = options.getOption(ch);
patch is same with buggy,,int tokenLength = token.length(); ,int tokenLength = token.length();
patch is same with buggy,,if (hasOption) { ,if(hasOption) {
compilation error,[CE] boolean cannot be dereferenced,if (hasOption) { ,if(hasOption || hasOption.equals(ch)) {
compilation error,[CE] cannot find symbol isAtNonOption,if (hasOption) { ,if(hasOption || isAtNonOption) {
compilation error,[CE] incomparable types: boolean and <null>,if (hasOption) { ,if(hasOption || hasOption!= null) {
compilation error,[CE] boolean cannot be dereferenced,if (hasOption) { ,if(hasOption || hasOption.hasArg()) {
compilation error,[CE] cannot find symbol isRequired,if (hasOption) { ,if(hasOption || isRequired) {
compilation error,[CE] boolean cannot be dereferenced,if (hasOption) { ,if(hasOption || hasOption.isRequired()) {
compilation error,[CE] cannot find symbol,eatTheRest = false; ,if(!currentOption.isEmpty()) { eatTheRest = false; } else { tokens.clear(); eatTheRest = true; }
compilation error,[CE] cannot find symbol,eatTheRest = false; ,if(!currentOption.isArray()) { eatTheRest = false; } else { tokens.clear(); eatTheRest = true; }
compilation error,[CE] cannot find symbol,eatTheRest = false; ,if(!currentOption.isEmpty()) { eatTheRest = false; } else { tokens.add(currentOption); eatTheRest = true; }
compilation error,[CE] cannot find symbol,,this.options.remove(token); tokens.add(token);
compilation error,[CE] incompatible types,,tokens.add(token); this.options = options.getOption(token);
patch is same with buggy,,tokens.add("-" + ch); ,tokens.add("-" + ch);
compilation error,[CE] no suitable method found for add(String,boolean),tokens.add("-" + ch); ,tokens.add("-" + ch, stopAtNonOption);
compilation error,[CE] not a statement,tokens.add("-" + ch); ,tokens.add("-" + ch)+"-" + eatTheRest);
compilation error,[CE] not a statement,tokens.add("-" + ch); ,tokens.add("-" + ch)+"-" + stopAtNonOption);
patch is same with buggy,,tokens.add("-" + ch); ,tokens.add(" -" + ch);
compilation error,[CE] illegal start of expression,} ,tokens.clear(); currentOption = null;
compilation error,[CE] illegal start of expression,} ,tokens.add(currentOption);
compilation error,[CE] illegal start of expression,} ,tokens.clear();
compilation error,[CE] illegal start of expression,} ,tokens.clear(); eatTheRest = true;
compilation error,[CE] illegal start of expression,} ,tokens.clear(); tokens.add(currentOption);
compilation error,[CE] illegal start of expression,} ,tokens.clear(); currentOption = options.getOption(currentOption);
compilation error,[CE] illegal start of expression,} ,tokens.clear(); currentOption = options.getOption(tokens);
compilation error,[CE] illegal start of expression,} ,tokens.clear(); currentOption = Options.getOption(tokens);
compilation error,[CE] illegal start of expression,} ,tokens.add("--"); currentOption = null;
compilation error,[CE] illegal start of expression,} ,tokens.clear(); currentOption = options.getOption(this);
patch is same with buggy,,token = (String) iter.next(); ,token =(String)iter.next();
patch is same with buggy,,token = (String) iter.next(); ,token = (String)iter.next();
compilation error,[CE] cannot find symbol,token = (String) iter.next(); ,token =(String)iter.nextShortCircuit();
compilation error,[CE] ';' expected,token = (String) iter.next(); ,token is(String)iter.next();
compilation error,[CE] inconvertible types,token = (String) iter.next(); ,token =(String)iter.remove();
compilation error,[CE] incompatible types,token = (String) iter.next(); ,token = iter.next();
compilation error,[CE] inconvertible types,token = (String) iter.next(); ,token =(String)iter.hasNext();
patch is same with buggy,,token = (String) iter.next(); ,token =(String )iter.next();
compilation error,[CE] cannot find symbol,token = (String) iter.next(); ,token =(String)iter.current();
compilation error,[CE] incompatible types,,tokens.add(token); stopAtNonOption = options.getOption(token);
compilation error,[CE] cannot find symbol,,tokens.copyCurrentStructure(token);
compilation error,[CE] not a statement,,stopAtNonOption? tokens.get(token): null;
compilation error,[CE] not a statement,,stopAtNonOption? token.toLowerCase() : null;
compilation error,[CE] incompatible types,,tokens.add("-"); stopAtNonOption = options.getOption(token);
compilation error,[CE] not a statement,,stopAtNonOption? token.toLowerCase(token): null;
patch is same with buggy,,private ArrayList tokens = new ArrayList(); ,private ArrayList tokens = new ArrayList();
compilation error,[CE] cannot find symbol,private ArrayList tokens = new ArrayList(); ,private List tokens = new ArrayList();
compilation error,[CE] illegal start of type,private ArrayList tokens = new ArrayList(); ,private new ArrayList tokens = new ArrayList();
compilation error,[CE] no suitable constructor found for ArrayList(int,int),private ArrayList tokens = new ArrayList(); ,private ArrayList tokens = new ArrayList(0, 0);
compilation error,[CE] illegal start of type,private ArrayList tokens = new ArrayList(); ,private new ArrayListTokens = new ArrayList();
compilation error,[CE] no suitable constructor found for ArrayList(int,int,int),private ArrayList tokens = new ArrayList(); ,private ArrayList tokens = new ArrayList(0, 0, 0);
compilation error,[CE] reached end of file while parsing,,if(stopAtNonOption) { process(token.substring(i + 1)); if(currentOption.hasArg() &&(token.length()!= (i + 1))) { tokens.add(token.substring(i + 1)); }
compilation error,[CE] reached end of file while parsing,,if(stopAtNonOption) { process(token.substring(i + 1)); if(currentOption.hasArg() &&(token.length()!= (i + 2))) { tokens.add(token.substring(i + 1)); }
compilation error,[CE] reached end of file while parsing,,if(stopAtNonOption) { process(token.substring(i + 1)); if(currentOption.hasArg() &&(token.length()!= (i + 1))) { tokens.add("-" + ch); }
compilation error,[CE] reached end of file while parsing,,if(stopAtNonOption) { process(token.substring(i + 1)); if(currentOption.hasArg() &&(token.length()!= (i + 2))) { tokens.add("-" + ch); }
patch is same with buggy,,Iterator iter = Arrays.asList(arguments).iterator(); ,Iterator iter = Arrays.asList(arguments).iterator();
compilation error,[CE] cannot find symbol arguments,Iterator iter = Arrays.asList(arguments).iterator(); ,Iterator iter = Arrays.asList(this.arguments).iterator();
compilation error,[CE] cannot find symbol,Iterator iter = Arrays.asList(arguments).iterator(); ,Iterator iter = options.asList(arguments).iterator();
compilation error,[CE] cannot find symbol arrays,Iterator iter = Arrays.asList(arguments).iterator(); ,Iterator iter = arrays.asList(arguments).iterator();
compilation error,[CE] cannot find symbol,Iterator iter = Arrays.asList(arguments).iterator(); ,Iterator iter = arguments.iterator();
compilation error,[CE] cannot find symbol,Iterator iter = Arrays.asList(arguments).iterator(); ,Iterator iter = options.iterator();
compilation error,[CE] cannot find symbol alternatives,Iterator iter = Arrays.asList(arguments).iterator(); ,Iterator iter = Arrays.asList(alternatives).iterator();
patch is same with buggy,,else if ("-".equals(token)) { ,else if("-".equals(token)) {
compilation error,[CE] illegal start of expression,else if ("-".equals(token)) { ,else if(."-".equals(token)) {
compilation error,[CE] method getOption in class Options cannot be applied to given types;,,tokens.clear(); currentOption = options.getOption(tokens);
compilation error,[CE] method getOption in class Options cannot be applied to given types;,,tokens.clear(); currentOption = options.getOption(currentOption);
compilation error,[CE] method getOption in class Options cannot be applied to given types;,,tokens.clear(); currentOption = options.getOption(this);
compilation error,[CE] no suitable constructor found for Option(ArrayList),,tokens.clear(); currentOption = new Option(tokens);
compilation error,[CE] array dimension missing,return (String[]) tokens.toArray(new String[] {}); ,return(String[])tokens.toArray(new String[] );
compilation error,[CE] array dimension missing,return (String[]) tokens.toArray(new String[] {}); ,return(String[])tokens.toArray(new String[], stopAtNonOption);
compilation error,[CE] array dimension missing,return (String[]) tokens.toArray(new String[] {}); ,return(String[])tokens.toArray(new String[], tokenLength);
compilation error,[CE] array dimension missing,return (String[]) tokens.toArray(new String[] {}); ,return(String[])tokens.toArray(new String[] );
compilation error,[CE] array dimension missing,return (String[]) tokens.toArray(new String[] {}); ,return(String[])tokens.toArray(new String[]);
compilation error,[CE] array dimension missing,return (String[]) tokens.toArray(new String[] {}); ,return(String[])tokens.toArray(new String[], iter);
compilation error,[CE] array dimension missing,return (String[]) tokens.toArray(new String[] {}); ,return(String[])tokens.toArray(new String[] =>);
compilation error,[CE] array dimension missing,return (String[]) tokens.toArray(new String[] {}); ,return(String[])tokens.toArray(new String[], arguments);
compilation error,[CE] array dimension missing,return (String[]) tokens.toArray(new String[] {}); ,return(String[])tokens.toArray(new String[] ), stopAtNonOption);
compilation error,[CE] array dimension missing,return (String[]) tokens.toArray(new String[] {}); ,return(String[])tokens.toArray(new String[] ), stopAtNonOption);
patch is same with buggy,,tokens.clear(); ,tokens.clear();
compilation error,[CE] cannot find symbol,tokens.clear(); ,tokens.remove(currentOption.getLocalMillis());
compilation error,[CE] cannot find symbol,tokens.clear(); ,tokens.remove(currentOption.tokens());
compilation error,[CE] cannot find symbol,tokens.clear(); ,tokens.remove(currentOption.getLocalName());
compilation error,[CE] cannot find symbol ch,,tokens.add("-" + ch);
compilation error,[CE] cannot find symbol ch,,tokens.add("-" + ch); currentOption = options.getOption(ch);
compilation error,[CE] no suitable constructor found for ArrayList(String),,ArrayList tokens = new ArrayList < String>(token.substring(i + 1)); tokens.add("-" + ch);
compilation error,[CE] cannot find symbol ch,,ArrayList tokens = new ArrayList < String>(token.charAt(i)); tokens.add("-" + ch);
compilation error,[CE] no suitable constructor found for ArrayList(String),,ArrayList tokens = new ArrayList < String>(token.substring(i)); tokens.add("-" + ch);
compilation error,[CE] cannot find symbol ArrayLists,,ArrayList tokens = ArrayLists.newArrayList(); tokens.add(token.substring(i + 1));
compilation error,[CE] variable stopAtNonOption is already defined in method burstToken(String,boolean),,boolean stopAtNonOption = options.hasArg(token.length()); tokens.add("-" + ch);
compilation error,[CE] incompatible types,currentOption = null; ,currentOption = options;
compilation error,[CE] cannot find symbol NEGATIVE,currentOption = null; ,currentOption = Options.NEGATIVE;
compilation error,[CE] cannot find symbol WRITE,currentOption = null; ,currentOption = Option.WRITE;
compilation error,[CE] cannot find symbol NEGATIVE,currentOption = null; ,currentOption = Option.NEGATIVE;
compilation error,[CE] incompatible types,currentOption = null; ,currentOption = eatTheRest;
compilation error,[CE] cannot find symbol WRITE,currentOption = null; ,currentOption = Options.WRITE;
compilation error,[CE] cannot find symbol WRITE_THIS,currentOption = null; ,currentOption = Option.WRITE_THIS;
compilation error,[CE] method getOption in class Options cannot be applied to given types;,currentOption = null; ,currentOption = options.getOption(this);
compilation error,[CE] cannot find symbol NOW,currentOption = null; ,currentOption = Options.NOW;
compilation error,[CE] cannot find symbol option,currentOption = null; ,currentOption = option;
compilation error,[CE] incompatible types,,token = iter.next();
compilation error,[CE] illegal start of expression,,while(iter.hasNext()) { token = iter.next();
compilation error,[CE] variable iter is already defined in method flatten(Options,String[],boolean),,Iterator iter = arguments[iter.next()];
compilation error,[CE] variable iter is already defined in method flatten(Options,String[],boolean),,Iterator iter = arguments[iter.next()]; tokens.add(token);
compilation error,[CE] variable iter is already defined in method flatten(Options,String[],boolean),,Iterator iter = arguments[iter.next() ];
compilation error,[CE] illegal start of expression,,while(iter.hasNext()) { token = currentOption.next();
compilation error,[CE] variable iter is already defined in method flatten(Options,String[],boolean),,Iterator iter = arguments[iter.next() ]; tokens.add(token);
compilation error,[CE] incompatible types,,tokens.add(token); stopAtNonOption = options.getOption(token);
compilation error,[CE] method getOption in class Options cannot be applied to given types;,,tokens.add(token); currentOption = options.getOption(token, stopAtNonOption);
compilation error,[CE] cannot find symbol,,tokens.add(token); currentOption = options.iterator();
compilation error,[CE] method getOption in class Options cannot be applied to given types;,,tokens.add("-"); currentOption = options.getOption(token, stopAtNonOption);
patch is same with buggy,,processOptionToken(token, stopAtNonOption); ,processOptionToken(token, stopAtNonOption);
compilation error,[CE] cannot find symbol,processOptionToken(token, stopAtNonOption); ,processIgnoreCase(token, stopAtNonOption);
compilation error,[CE] cannot find symbol,processOptionToken(token, stopAtNonOption); ,processArgumentToken(token, stopAtNonOption);
compilation error,[CE] cannot find symbol,processOptionToken(token, stopAtNonOption); ,eatTheRest(token, stopAtNonOption);
compilation error,[CE] cannot find symbol,processOptionToken(token, stopAtNonOption); ,processSeparatorToken(token, stopAtNonOption);
compilation error,[CE] cannot find symbol,processOptionToken(token, stopAtNonOption); ,createEmptyToken(token, stopAtNonOption);
compilation error,[CE] cannot find symbol,processOptionToken(token, stopAtNonOption); ,processUnknownToken(token, stopAtNonOption);
compilation error,[CE] not a statement,processOptionToken(token, stopAtNonOption); ,processOptionToken(token, stopAtNonOption) &&(options.hasOption(token)) && tokens.contains(token)) {
compilation error,[CE] not a statement,processOptionToken(token, stopAtNonOption); ,processOptionToken(token, stopAtNonOption)&&(options.hasOption(token))? burstToken(token): null;
patch is same with buggy,,else if (stopAtNonOption) { ,else if(stopAtNonOption) {
patch is same with buggy,,currentOption = options.getOption(ch); ,currentOption = options.getOption(ch);
compilation error,[CE] method getOption in class Options cannot be applied to given types;,currentOption = options.getOption(ch); ,currentOption = options.getOption(ch, stopAtNonOption);
compilation error,[CE] method getOption in class Options cannot be applied to given types;,currentOption = options.getOption(ch); ,currentOption = options.getOption(ch, eatTheRest);
compilation error,[CE] bad operand types for binary operator '+',currentOption = options.getOption(ch); ,currentOption = options.getOption(ch)+ 1;
compilation error,[CE] bad operand types for binary operator '-',currentOption = options.getOption(ch); ,currentOption = options.getOption(ch)- 1;
compilation error,[CE] bad operand types for binary operator '+',currentOption = options.getOption(ch); ,currentOption = options.getOption(ch)+ eatTheRest;
compilation error,[CE] ';' expected,currentOption = options.getOption(ch); ,currentOption = options.getOption(ch), stopAtNonOption);
compilation error,[CE] bad operand types for binary operator '-',currentOption = options.getOption(ch); ,currentOption = options.getOption(ch - 1);
compilation error,[CE] cannot find symbol Ch,currentOption = options.getOption(ch); ,currentOption = options.getOption(Ch);
compilation error,[CE] illegal start of expression,,else if(token.startsWith("-")) { if(token.startsWith("-")) { processSingleHyphen(token, stopAtNonOption); }
compilation error,[CE] illegal start of expression,,else if("-".equals(token)) { if(token.startsWith("-")) { processSingleHyphen(token, stopAtNonOption); }
compilation error,[CE] illegal start of expression,,else if(token.startsWith("--")) { if(token.startsWith("--")) { processSingleHyphen(token, stopAtNonOption); }
compilation error,[CE] illegal start of expression,,else if(token.startsWith("-")) { if(token.startsWith("-")) { tokens.add(token); }
compilation error,[CE] illegal start of expression,,if(token.startsWith("-")) { if(token.startsWith("-")) { processSingleHyphen(token, stopAtNonOption); }
compilation error,[CE] illegal start of expression,,else if(token.startsWith("-")) { if(token.startsWith(".-")) { processSingleHyphen(token, stopAtNonOption); }
compilation error,[CE] illegal start of expression,,else if("-".equals(token)) { if(token.startsWith("-")) { tokens.add(token); }
compilation error,[CE] illegal start of expression,,else if(token.startsWith("-")) { if(token.startsWith("-")) { processSingleHyphen(token, stopAtNonOption); }
compilation error,[CE] illegal start of expression,,else if(token.startsWith("-")) { if(token.startsWith("-")) { processSingleHyphen(token); }
compilation error,[CE] illegal start of expression,,else if(token.startsWith("--")) { if(token.startsWith("--")) { tokens.add(token); }
compilation error,[CE] illegal start of expression,,while(iter.hasNext()) { tokens.add(token);
compilation error,[CE] illegal start of expression,,while(iter.hasNext()) { token = iter.next();
compilation error,[CE] incompatible types,,token = iter.next();
compilation error,[CE] illegal start of expression,,while(iter.hasNext()) { tokens.add(token.substring(0, token.indexOf('-')));
compilation error,[CE] illegal start of expression,,while(iter.hasNext()) { tokens.add(token.substring(0, token.length));
compilation error,[CE] ';' expected,,tokens.add(token.substring(0, token.length)));
compilation error,[CE] ';' expected,,token =(String)iter.next(); tokens.add(token.substring(0, token.length)));
patch is same with buggy,,burstToken(token, stopAtNonOption); ,burstToken(token, stopAtNonOption);
compilation error,[CE] cannot find symbol,burstToken(token, stopAtNonOption); ,addToken(token, stopAtNonOption);
compilation error,[CE] cannot find symbol,burstToken(token, stopAtNonOption); ,eatTheRest(token, stopAtNonOption);
compilation error,[CE] cannot find symbol,burstToken(token, stopAtNonOption); ,consumeTheRest(token, stopAtNonOption);
compilation error,[CE] cannot find symbol,burstToken(token, stopAtNonOption); ,setThreadToken(token, stopAtNonOption);
compilation error,[CE] cannot find symbol,burstToken(token, stopAtNonOption); ,expandToken(token, stopAtNonOption);
compilation error,[CE] cannot find symbol,burstToken(token, stopAtNonOption); ,createEmptyOptionToken(token, stopAtNonOption);
compilation error,[CE] cannot find symbol,burstToken(token, stopAtNonOption); ,createEmptyOption(token, stopAtNonOption);
compilation error,[CE] not a statement,burstToken(token, stopAtNonOption); ,burstToken(token, stopAtNonOption)+ 1;
compilation error,[CE] method getOption in class Options cannot be applied to given types;,,tokens.add("-" + ch); currentOption = options.getOption(currentOption);
compilation error,[CE] method getOption in class Options cannot be applied to given types;,,tokens.add("-" + ch); currentOption = options.getOption(ch, tokenLength);
compilation error,[CE] method getOption in class Options cannot be applied to given types;,,tokens.add(token.substring(i + 1)); currentOption = options.getOption(currentOption);
compilation error,[CE] cannot find symbol,if (this.options.hasOption(token)) { ,if(this.options.hasOption(token)|| this.options.hasArg(token)) {
compilation error,[CE] cannot find symbol,if (this.options.hasOption(token)) { ,if(this.options.hasOption(token)|| currentOption.hasOption(token)) {
compilation error,[CE] incomparable types: Option and boolean,if (this.options.hasOption(token)) { ,if(this.options.hasOption(token)|| this.options.getOption(token) == stopAtNonOption) {
compilation error,[CE] bad operand types for binary operator '||',if (this.options.hasOption(token)) { ,if(this.options.hasOption(token)|| this.options.getOption(token)) {
compilation error,[CE] incomparable types: Option and boolean,if (this.options.hasOption(token)) { ,if(this.options.hasOption(token)|| this.options.getOption(token)!= stopAtNonOption) {
compilation error,[CE] cannot find symbol,init(); ,stopAtNonOption();
compilation error,[CE] not a statement,init(); ,stopAtNonOption? currentOption.getValue() : null;
compilation error,[CE] not a statement,init(); ,stopAtNonOption? tokens : new LinkedList < String>();
compilation error,[CE] call to super must be first statement in constructor,init(); ,super();
compilation error,[CE] not a statement,init(); ,stopAtNonOption && tokenLength > 0 && token.length > 0;
compilation error,[CE] not a statement,init(); ,stopAtNonOption? tokens.get(token): null;
compilation error,[CE] not a statement,init(); ,stopAtNonOption && tokenLength > 0 && token.length > 0);
compilation error,[CE] not a statement,init(); ,stopAtNonOption? currentOption : null;
compilation error,[CE] not a statement,init(); ,stopAtNonOption? tokens : new ArrayList < String>();
compilation error,[CE] not a statement,init(); ,stopAtNonOption? tokens : new LinkedHashSet < String>();
patch is same with buggy,,String ch = String.valueOf(token.charAt(i)); ,String ch = String.valueOf(token.charAt(i));
compilation error,[CE] incompatible types,String ch = String.valueOf(token.charAt(i)); ,char ch = String.valueOf(token.charAt(i));
compilation error,[CE] non-static method substring(int) cannot be referenced from a static context,String ch = String.valueOf(token.charAt(i)); ,String ch = String.substring(token.charAt(i));
compilation error,[CE] no suitable method found for valueOf(char,boolean),String ch = String.valueOf(token.charAt(i)); ,String ch = String.valueOf(token.charAt(i), stopAtNonOption);
compilation error,[CE] ';' expected,String ch = String.valueOf(token.charAt(i)); ,String ch = String.valueOf(token.charAt(i), stopAtNonOption));
compilation error,[CE] ';' expected,String ch = String.valueOf(token.charAt(i)); ,String ch = String.valueOf(token.charAt(i)- 1));
compilation error,[CE] cannot find symbol,String ch = String.valueOf(token.charAt(i)); ,Str ch = String.valueOf(token.charAt(i));
patch is same with buggy,,while (iter.hasNext()) { ,while(iter.hasNext()) {
compilation error,[CE] incompatible types,while (iter.hasNext()) { ,while(iter.next()) {
compilation error,[CE] variable token might not have been initialized,while (iter.hasNext()) { ,while(iter.hasNext() && token.startsWith("-")) {
compilation error,[CE] cannot find symbol,while (iter.hasNext()) { ,while(iter.mayHaveSideEffects()) {
compilation error,[CE] cannot find symbol,while (iter.hasNext()) { ,while(iter.isEmpty()) {
compilation error,[CE] variable token might not have been initialized,while (iter.hasNext()) { ,while(iter.hasNext() && token.length() > 0) {
patch is same with buggy,,while (iter.hasNext()) { ,while (iter.hasNext()) {
compilation error,[CE] variable token might not have been initialized,while (iter.hasNext()) { ,while(iter.hasNext() && token.startsWith(".-")) {
compilation error,[CE] variable token might not have been initialized,while (iter.hasNext()) { ,while(iter.hasNext() && token.startsWith("--")) {
compilation error,[CE] cannot find symbol token,,tokens.add(token);
compilation error,[CE] cannot find symbol token,,tokens.add(token); tokenLength++;
compilation error,[CE] cannot find symbol token,,token = Arrays.asList(arguments).iterator();
compilation error,[CE] cannot find symbol token,,tokens.add(token); currentOption = options.getOption(token);
compilation error,[CE] cannot find symbol token,,tokens.add(token); this.arguments = new ArrayList < String>();
compilation error,[CE] cannot find symbol tokenLength,,tokenLength = tokenLength(); tokens.add(token);
compilation error,[CE] cannot find symbol token,,token = Arrays.asList(tokens).iterator();
compilation error,[CE] cannot find symbol token,,tokens.add(token); tokenLength = tokenLength;
compilation error,[CE] cannot find symbol tokenLength,,tokenLength = tokenLength();
compilation error,[CE] cannot find symbol token,,token = Arrays.asList(arguments).iterator(); tokenLength++;
compilation error,[CE] method getOption in class Options cannot be applied to given types;,,tokens.clear(); currentOption = options.getOption(tokens);
compilation error,[CE] method getOption in class Options cannot be applied to given types;,,tokens.add("--"); currentOption = options.getOption(tokens);
compilation error,[CE] method getOption in class Options cannot be applied to given types;,,currentOption = options.getOption(tokens);
compilation error,[CE] method getOption in class Options cannot be applied to given types;,,tokens.remove(tokens.size() - 1); currentOption = options.getOption(tokens);
compilation error,[CE] method getOption in class Options cannot be applied to given types;,,tokens.add("-eatTheRest"); currentOption = options.getOption(tokens);
compilation error,[CE] cannot find symbol token,,tokens.add(token); currentOption = options.getOption(tokens);
compilation error,[CE] method getOption in class Options cannot be applied to given types;,,tokens.add("--"); currentOption = options.getOption(tokens, eatTheRest);
patch is same with buggy,,currentOption = this.options.getOption(token); ,currentOption = this.options.getOption(token);
compilation error,[CE] method getOption in class Options cannot be applied to given types;,currentOption = this.options.getOption(token); ,currentOption = this.options.getOption(token, stopAtNonOption);
compilation error,[CE] bad operand types for binary operator '-',currentOption = this.options.getOption(token); ,currentOption = this.options.getOption(token)- 1;
compilation error,[CE] ';' expected,currentOption = this.options.getOption(token); ,currentOption = this.options.getOption(token), stopAtNonOption);
compilation error,[CE] bad operand types for binary operator '+',currentOption = this.options.getOption(token); ,currentOption = this.options.getOption(token)+ 1;
compilation error,[CE] method getOption in class Options cannot be applied to given types;,currentOption = this.options.getOption(token); ,currentOption = this.options.getOption(1);
compilation error,[CE] cannot find symbol,currentOption = this.options.getOption(token); ,currentOption =(option)this.options.getOption(token);
compilation error,[CE] incompatible types,currentOption = this.options.getOption(token); ,currentOption = this.options.getOption(token)+" eatTheRest";
compilation error,[CE] ';' expected,currentOption = this.options.getOption(token); ,currentOption = this.options.getOption(token), stopAtNonOption;
compilation error,[CE] cannot find symbol,currentOption = this.options.getOption(token); ,currentOption =(Option)this.options.get(token);
compilation error,[CE] reached end of file while parsing,,if(stopAtNonOption) { tokens.add("-" + ch); currentOption = options.getOption(ch); for(int i = 1; i < tokenLength; i++) { tokens.add("-" + ch); }
compilation error,[CE] reached end of file while parsing,,if(stopAtNonOption) { tokens.add("-" + ch); currentOption = options.getOption(ch); if(currentOption.hasArg() &&(token.length()!= (i + 1))) { tokens.add("-" + ch); }
compilation error,[CE] reached end of file while parsing,,if(stopAtNonOption) { tokens.add("-" + ch); currentOption = options.getOption(ch); for(int i = 0; i < tokenLength; i++) { tokens.add("-" + ch); }
compilation error,[CE] reached end of file while parsing,,if(stopAtNonOption) { tokens.add("-" + ch); currentOption = options.getOption(ch); for(int i = 1; i < tokenLength; i++) { tokens.add(token.substring(i + 1)); break; }
compilation error,[CE] incompatible types,,tokens.add("-" + ch); hasOption = options.getOption(ch);
compilation error,[CE] variable ch is already defined in method burstToken(String,boolean),,String ch = token.substring(i); currentOption = options.getOption(ch);
compilation error,[CE] variable ch is already defined in method burstToken(String,boolean),,String ch = token.substring(i);
compilation error,[CE] variable ch is already defined in method burstToken(String,boolean),,String ch = token.substring(i + 1); currentOption = options.getOption(ch);
compilation error,[CE] variable ch is already defined in method burstToken(String,boolean),,String ch = token.substring(i + 1);
compilation error,[CE] variable ch is already defined in method burstToken(String,boolean),,String ch = token.substring(i).trim(); currentOption = options.getOption(ch);
compilation error,[CE] variable ch is already defined in method burstToken(String,boolean),,String ch = token.substring(i, stopAtNonOption);
compilation error,[CE] no suitable method found for substring(int,boolean),,token.substring(i, stopAtNonOption);
compilation error,[CE] reached end of file while parsing,,if(stopAtNonOption) { eatTheRest = options.getOption(ch); if(currentOption.hasArg() &&(token.length()!= (i + 1))) { tokens.add(token.substring(i + 1)); break; }
compilation error,[CE] reached end of file while parsing,,if(stopAtNonOption) { eatTheRest = tokens.get(ch); if(currentOption.hasArg() &&(token.length()!= (i + 1))) { tokens.add(token.substring(i + 1)); break; }
compilation error,[CE] illegal start of expression,,if(stopAtNonOption) { eatTheRest = options.getOption(ch); if(currentOption.hasArg() && token.length()!= (i + 1))) { tokens.add(token.substring(i + 1)); break; }
compilation error,[CE] unreachable statement,,tokens.add(token.substring(i + 1)); break;
compilation error,[CE] reached end of file while parsing,,if(stopAtNonOption) { eatTheRest = options.getOption(ch); if(currentOption.hasArgs() &&(token.length()!= (i + 1))) { tokens.add(token.substring(i + 1)); break; }
compilation error,[CE] reached end of file while parsing,,if(stopAtNonOption) { if(options.hasOption(ch)) { tokens.add(token.substring(i + 1)); break; }
compilation error,[CE] reached end of file while parsing,,if(stopAtNonOption) { eatTheRest = options.getOption(ch); if(currentOption.hasArg() &&(token.length()!= (i + 1))) { tokens.add("-" + ch); }
compilation error,[CE] illegal start of expression,,if(stopAtNonOption) { eatTheRest = options.getOption(ch); if(currentOption.hasArg() &&(token.length()!= (i + 1))) } tokens.add(token.substring(i + 1)); break; }
compilation error,[CE] reached end of file while parsing,,if(stopAtNonOption) { eatTheRest = options.getOption(ch); if(currentOption.hasArg() &&(token.length()!= (i + 2))) { tokens.add(token.substring(i + 1)); break; }
patch is same with buggy,,this.options = options; ,this.options = options;
compilation error,[CE] incompatible types,this.options = options; ,this.options = Arrays.asList(arguments);
compilation error,[CE] incompatible types,this.options = options; ,this.options = new ArrayList < String>();
compilation error,[CE] no suitable constructor found for Option(String[],boolean),this.options = options; ,this.options = new Option(arguments, stopAtNonOption);
compilation error,[CE] ';' expected,this.options = options; ,this.options = Arrays.asList(arguments));
compilation error,[CE] cannot find symbol,this.options = options; ,this.options = Arrays.asList(arguments).iterate();
compilation error,[CE] incompatible types,this.options = options; ,this.options = Arrays.asList(arguments).iterator();
compilation error,[CE] cannot find symbol tokenLength,this.options = options; ,this.options = new ArrayList < String>(tokenLength, stopAtNonOption);
compilation error,[CE] cannot find symbol,this.options = options; ,this.options = Options.newHashSet();
compilation error,[CE] ';' expected,this.options = options; ,this.options = new ArrayList < String>(tokenLength, stopAtNonOption));
compilation error,[CE] illegal start of expression,} ,tokens.add(token);
compilation error,[CE] illegal start of expression,} ,tokens.add(token); currentOption = this.options.getOption(token);
compilation error,[CE] illegal start of expression,} ,tokens.add(token); tokens.add(token);
compilation error,[CE] illegal start of expression,} ,tokens.add(token); eatTheRest = true;
compilation error,[CE] illegal start of expression,} ,tokens.add("--"); currentOption = this.options.getOption(token); tokens.add(token);
compilation error,[CE] illegal start of expression,} ,tokens.add(token); currentOption = options.getOption(token);
compilation error,[CE] illegal start of expression,} ,tokens.add(token); currentOption = this.options.getOption(token); tokens.add(token);
compilation error,[CE] illegal start of expression,} ,tokens.add(token); stopAtNonOption = true;
compilation error,[CE] illegal start of expression,} ,tokens.add("--"); currentOption = this.options.getOption(token);
compilation error,[CE] illegal start of expression,} ,tokens.add(token); currentOption = this.options.getOption(token); eatTheRest = true;
patch is same with buggy,,for (int i = 1; i < tokenLength; i++) { ,for(int i = 1; i < tokenLength; i++) {
patch is same with buggy,,for (int i = 1; i < tokenLength; i++) { ,for (int i = 1; i < tokenLength; i++) {
compilation error,[CE] incompatible types,for (int i = 1; i < tokenLength; i++) { ,for(int i = 1; i >> tokenLength; i++) {
patch is same with buggy,,for (int i = 1; i < tokenLength; i++) { ,for(int i= 1; i < tokenLength; i++) {
compilation error,[CE] cannot find symbol ch,,tokens.add("-" + ch);
compilation error,[CE] cannot find symbol ch,,tokens.add("-" + ch); currentOption = options.getOption(ch);
compilation error,[CE] variable stopAtNonOption is already defined in method burstToken(String,boolean),,boolean stopAtNonOption = options.hasOption(ch); tokens.add("-" + ch);
compilation error,[CE] variable stopAtNonOption is already defined in method burstToken(String,boolean),,boolean stopAtNonOption = options.hasOption(ch);
compilation error,[CE] cannot find symbol ch,,ArrayList tokens = new ArrayList < String>(); tokens.add("-" + ch);
compilation error,[CE] cannot find symbol Collections,,ArrayList tokens = Collections.emptyList(); tokens.add("-" + ch);
compilation error,[CE] variable stopAtNonOption is already defined in method burstToken(String,boolean),,boolean stopAtNonOption = options.hasOption(ch); currentOption = options.getOption(ch);
compilation error,[CE] cannot find symbol Validate,,Validate.notNull(token); tokens.add("-" + ch);
compilation error,[CE] cannot find symbol arrayList,,ArrayList tokens = arrayList.newArrayList(); tokens.add("-" + ch);
compilation error,[CE] cannot find symbol Collections,,ArrayList tokens = Collections.emptyList(); tokens.add(token);
compilation error,[CE] cannot find symbol ch,,tokens.add("-" + ch);
compilation error,[CE] variable stopAtNonOption is already defined in method burstToken(String,boolean),,boolean stopAtNonOption = options.hasArg(tokenLength); tokens.add("-" + ch);
compilation error,[CE] variable stopAtNonOption is already defined in method burstToken(String,boolean),,boolean stopAtNonOption = options.hasArg(tokenLength);
compilation error,[CE] variable stopAtNonOption is already defined in method burstToken(String,boolean),,int stopAtNonOption = options.getOption(ch); tokens.add("-" + ch);
compilation error,[CE] cannot find symbol ch,,if(stopAtNonOption) { tokens.add("-" + ch); tokens.add(token.substring(0, tokenLength)); }
compilation error,[CE] cannot find symbol ch,,tokens.add("-" + ch); tokens.add(token.substring(0, tokenLength));
compilation error,[CE] cannot find symbol ch,,if(stopAtNonOption) { tokens.add("-" + ch); tokens.add(token.charAt(i)); }
compilation error,[CE] cannot find symbol ch,,tokens.add("-" + ch); tokens.add(token.charAt(0));
compilation error,[CE] cannot find symbol ch,,if(stopAtNonOption) { tokens.add("-" + ch); tokens.add(token.charAt(0)); }
compilation error,[CE] cannot find symbol ch,,if(stopAtNonOption) { tokens.add("-" + ch); tokenLength = token.length(); }
patch is same with buggy,,tokens.add(token.substring(i + 1)); ,tokens.add(token.substring(i + 1));
compilation error,[CE] cannot find symbol,tokens.add(token.substring(i + 1)); ,tokens.add(token.substring(i + 1), currentOption.getArg());
compilation error,[CE] no suitable method found for add(String,Option),tokens.add(token.substring(i + 1)); ,tokens.add(token.substring(i + 1), currentOption);
compilation error,[CE] no suitable method found for add(String,String),tokens.add(token.substring(i + 1)); ,tokens.add(token.substring(i + 1), currentOption.getValue());
compilation error,[CE] ';' expected,tokens.add(token.substring(i + 1)); ,tokens.add(token.substring(i + 1), currentOption.getArg()));
compilation error,[CE] ';' expected,tokens.add(token.substring(i + 1)); ,tokens.add(token.substring(i + 1), currentOption.getValue()));
compilation error,[CE] cannot find symbol,tokens.add(token.substring(i + 1)); ,tokens.add(token.substring(i + 1), currentOption.getLeastSupertype(ch));
compilation error,[CE] ';' expected,tokens.add(token.substring(i + 1)); ,tokens.add(token.substring(i + 1), currentOption.getValue() - token.length()));
compilation error,[CE] ';' expected,tokens.add(token.substring(i + 1)); ,tokens.add(token.substring(i + 1), currentOption.getArg() - token.length()));
compilation error,[CE] cannot find symbol,tokens.add(token.substring(i + 1)); ,tokens.add(token.substring(i, currentOption.getArg()));
compilation error,[CE] cannot find symbol,tokens.add(token); ,tokens.add(catchOption(token));
compilation error,[CE] cannot find symbol,tokens.add(token); ,tokens.add(catchOption(token, currentOption));
compilation error,[CE] cannot find symbol,tokens.add(token); ,tokens.add(catchOptionToString(token));
compilation error,[CE] cannot find symbol,tokens.add(token); ,tokens.add(catchOptionToString(token, currentOption));
compilation error,[CE] no suitable method found for add(Option,String),tokens.add(token); ,tokens.add(currentOption, token);
compilation error,[CE] cannot find symbol,tokens.add(token); ,tokens.add(catchOption(token), currentOption);
compilation error,[CE] cannot find symbol,tokens.add(token); ,tokens.add(catchOptionToken(token));
compilation error,[CE] 'else' without 'if',,while(tokenLength > 0) { tokens.add(token);
compilation error,[CE] illegal start of expression,,if(tokenLength == 2) { processOptionToken(token, stopAtNonOption); if(options.hasOption(token)) { tokens.add(token); }
compilation error,[CE] 'else' without 'if',,while(tokenLength > 2 && token.startsWith("-")) { tokenLength = token.length();
compilation error,[CE] 'else' without 'if',,while(tokenLength > 2) { tokens.add(token);
compilation error,[CE] illegal start of expression,,if(tokenLength == 2) { processOptionToken(token, stopAtNonOption); if(hasArgs()) { tokens.add(token); }
compilation error,[CE] 'else' without 'if',,while(tokenLength > 2 && token.startsWith("-")) { tokenLength++;
compilation error,[CE] 'else' without 'if',,while(token.startsWith("--")) { tokenLength = token.length();
compilation error,[CE] 'else' without 'if',,while(stopAtNonOption) { tokens.add(token);
patch is same with buggy,,if (currentOption.hasArg() && (token.length() != (i + 1))) { ,if(currentOption.hasArg() &&(token.length()!= (i + 1))) {
patch is same with buggy,,if (currentOption.hasArg() && (token.length() != (i + 1))) { ,if(currentOption.hasArg() && (token.length()!= (i + 1))) {
patch is same with buggy,,if (currentOption.hasArg() && (token.length() != (i + 1))) { ,if (currentOption.hasArg() &&(token.length()!= (i + 1))) {
patch is same with buggy,,int tokenLength = token.length(); ,int tokenLength = token.length();
patch is same with buggy,,int tokenLength = token.length(); ,int tokenLength = token.length();
compilation error,[CE] cannot find symbol token,,token = token.toLowerCase(); token = token.toLowerCase();
compilation error,[CE] cannot find symbol token,,token = tokens.toLowerCase(); token = token.toLowerCase();
compilation error,[CE] cannot find symbol token,,token = token.toLowerCase(); token =(String[])token.toLowerCase();
compilation error,[CE] cannot find symbol token,,token = Arrays.asList(arguments).iterator(); token = new String[arguments.length];
compilation error,[CE] cannot find symbol token,,token = token.toLowerCase(); currentOption = options.getOption(token);
compilation error,[CE] cannot find symbol token,,token = Arrays.asList(tokens).iterator(); token = new String[arguments.length];
compilation error,[CE] cannot find symbol token,,token = Arrays.asList(arguments).iterator(); token = iter.next();
compilation error,[CE] cannot find symbol token,,token = Arrays.asList(arguments).iterator(); token = new String[tokenLength];
compilation error,[CE] cannot find symbol token,,token = token.toLowerCase(); token =(String[])iter.next();
compilation error,[CE] cannot find symbol token,,token = token.toLowerCase();
patch is same with buggy,,if (tokenLength == 2) { ,if(tokenLength == 2) {
compilation error,[CE] cannot find symbol blockAtNonOption,if (tokenLength == 2) { ,if(blockAtNonOption.isEmpty() || tokenLength == 2) {
compilation error,[CE] cannot find symbol blockAtNonOption,if (tokenLength == 2) { ,if(blockAtNonOption.hasArg(tokenLength)|| tokenLength == 2) {
compilation error,[CE] cannot find symbol blockAtNonOption,if (tokenLength == 2) { ,if(blockAtNonOption.hasArg(token)|| tokenLength == 2) {
compilation error,[CE] cannot find symbol blockAtNonOption,if (tokenLength == 2) { ,if(blockAtNonOption.equals(token)|| tokenLength == 2) {
compilation error,[CE] cannot find symbol,,tokens.add(iter.getValue());
compilation error,[CE] illegal start of expression,,while(iter.hasNext()) { tokens.add(iter.next());
compilation error,[CE] cannot find symbol,,boolean eatTheRest = iter.hasChildren();
compilation error,[CE] cannot find symbol,,tokens.add(iter.getValue()); currentOption = iter.getOption();
compilation error,[CE] cannot find symbol,,tokens.add(iter.getValue()); currentOption = iter.next();
compilation error,[CE] cannot find symbol,,boolean eatTheRest = iter.hasOption(currentOption);
compilation error,[CE] method getOption in class Options cannot be applied to given types;,,tokens.clear(); currentOption = options.getOption(currentOption);
compilation error,[CE] method getOption in class Options cannot be applied to given types;,,tokens.clear(); currentOption = options.getOption(tokens);
compilation error,[CE] method getOption in class Options cannot be applied to given types;,,tokens.clear(); currentOption = options.getOption(this);
compilation error,[CE] method getOption in class Options cannot be applied to given types;,,tokens.clear(); currentOption = Options.getOption(tokens);
compilation error,[CE] cannot find symbol Token,,tokens.clear(); currentOption = options.getOption(Token.FUNCTION);
compilation error,[CE] 'else' without 'if',,tokens.add(token.substring(i));
compilation error,[CE] 'else' without 'if',,tokens.add("-" + ch); currentOption = options.getOption(ch);
compilation error,[CE] 'else' without 'if',,tokens.add(token.substring(i)); currentOption = options.getOption(ch);
compilation error,[CE] 'else' without 'if',,tokens.add("-" + ch);
compilation error,[CE] reached end of file while parsing,,if(stopAtNonOption) { if(currentOption.hasArg() &&(token.length()!= (i + 1))) { tokens.add("-" + ch); }
compilation error,[CE] reached end of file while parsing,,if(stopAtNonOption) { if(currentOption.hasArg() &&(token.length()!= (i + 1))) { tokens.add(token.substring(i + 1)); }
compilation error,[CE] reached end of file while parsing,,if(stopAtNonOption) { if(currentOption.hasArg() && currentOption.hasArg(ch)) { tokens.add(token.substring(i + 1)); }
compilation error,[CE] reached end of file while parsing,,if(stopAtNonOption) { if(currentOption.hasArgs() &&(token.length()!= (i + 1))) { tokens.add("-" + ch); }
compilation error,[CE] reached end of file while parsing,,if(stopAtNonOption) { if(currentOption.hasArg() &&(token.length()!= (i + 1))) { process(token.substring(i)); }
compilation error,[CE] 'else' without 'if',,tokens.add(token.substring(i)); tokens.add("-" + ch);
compilation error,[CE] illegal start of type,,return new ArrayList();
compilation error,[CE] <identifier> expected,,ArrayList tokens = new ArrayList(); tokens.add(new ArrayList());
compilation error,[CE] <identifier> expected,,ArrayList tokens = new ArrayList(); tokens.add(Token.EMPTY);
compilation error,[CE] illegal start of type,,return new ArrayList(Tokens.EMPTY);
compilation error,[CE] illegal start of type,,return(ArrayList)tokens.newArrayList();
compilation error,[CE] <identifier> expected,,ArrayList tokens = new ArrayList(); tokens.add(PosixParser.valueOf(tokens));
compilation error,[CE] illegal start of type,,return new ArrayList(Token.EMPTY);
compilation error,[CE] <identifier> expected,,ArrayList tokens = new ArrayList(); tokens.addAll(tokens);
compilation error,[CE] <identifier> expected,,ArrayList tokens = new ArrayList(); tokens.add(PosixParser.newHashSet());
compilation error,[CE] <identifier> expected,,ArrayList tokens = new ArrayList(); tokens.add(PositionParser.valueOf(tokens));
