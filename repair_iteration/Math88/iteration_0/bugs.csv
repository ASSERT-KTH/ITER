bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] coefficients[i] = 0; [FE] AssertionError testMath272 [CONTEXT] for (int i = 0; i < coefficients.length; i++) { basicRow = getBasicRow(getNumObjectiveFunctions() + i);   coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative); if (basicRow != null) { for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) { if (tableau.getEntry(basicRow, j) == 1) { [BUGGY] coefficients[i] = 0; [BUGGY] } } } } return new RealPointValuePair(coefficients, f.getValue(coefficients)); } [CLASS] SimplexTableau [METHOD] getSolution [RETURN_TYPE] RealPointValuePair  [VARIABLES] Integer basicRow boolean maximize restrictToNonNegative RealMatrix tableau double[] coefficients double coefficient epsilon mostNegative sum LinearObjectiveFunction f Collection constraints long serialVersionUID int artificialVar col count destPos height i j numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	
2	[BUG] [BUGGY] [FE] AssertionError testMath272 [CONTEXT] for (int i = 0; i < coefficients.length; i++) { basicRow = getBasicRow(getNumObjectiveFunctions() + i);   coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative); if (basicRow != null) { for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) { if (tableau.getEntry(basicRow, j) == 1) { [BUGGY] [BUGGY] coefficients[i] = 0; } } } } return new RealPointValuePair(coefficients, f.getValue(coefficients)); } [CLASS] SimplexTableau [METHOD] getSolution [RETURN_TYPE] RealPointValuePair  [VARIABLES] Integer basicRow boolean maximize restrictToNonNegative RealMatrix tableau double[] coefficients double coefficient epsilon mostNegative sum LinearObjectiveFunction f Collection constraints long serialVersionUID int artificialVar col count destPos height i j numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	add	
3	[BUG] [BUGGY] matrix[row][getSlackVariableOffset() + slackVar++] = -1; // excess  } [FE] AssertionError testMath272 [CONTEXT] getInvertedCoeffiecientSum(constraint.getCoefficients()); }  matrix[row][width - 1] = constraint.getValue();  if (constraint.getRelationship() == Relationship.LEQ) { matrix[row][getSlackVariableOffset() + slackVar++] = 1;// slack } else if (constraint.getRelationship() == Relationship.GEQ) { [BUGGY] matrix[row][getSlackVariableOffset() + slackVar++] = -1; // excess     } [BUGGY] }  if ((constraint.getRelationship() == Relationship.EQ) || (constraint.getRelationship() == Relationship.GEQ)) { matrix[0][getArtificialVariableOffset() + artificialVar] = 1; matrix[row][getArtificialVariableOffset() + artificialVar++] = 1; } }  [CLASS] SimplexTableau [METHOD] createTableau [RETURN_TYPE] double[][]  final boolean maximize [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double epsilon RealVector objectiveCoefficients LinearObjectiveFunction f double[][] matrix LinearConstraint constraint Collection constraints List constraints long serialVersionUID int artificialVar height i numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.4082482904638631	172	173	1	replace	
4	[BUG] [BUGGY] [FE] AssertionError testMath272 [CONTEXT] getInvertedCoeffiecientSum(constraint.getCoefficients()); }  matrix[row][width - 1] = constraint.getValue();  if (constraint.getRelationship() == Relationship.LEQ) { matrix[row][getSlackVariableOffset() + slackVar++] = 1;// slack } else if (constraint.getRelationship() == Relationship.GEQ) { [BUGGY] [BUGGY] matrix[row][getSlackVariableOffset() + slackVar++] = -1; // excess     } }  if ((constraint.getRelationship() == Relationship.EQ) || (constraint.getRelationship() == Relationship.GEQ)) { matrix[0][getArtificialVariableOffset() + artificialVar] = 1; matrix[row][getArtificialVariableOffset() + artificialVar++] = 1; } }  [CLASS] SimplexTableau [METHOD] createTableau [RETURN_TYPE] double[][]  final boolean maximize [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double epsilon RealVector objectiveCoefficients LinearObjectiveFunction f double[][] matrix LinearConstraint constraint Collection constraints List constraints long serialVersionUID int artificialVar height i numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.4082482904638631	172	173	1	add	
5	[BUG] [BUGGY] return null; [FE] AssertionError testMath272 [CONTEXT] private Integer getBasicRow(final int col) { Integer row = null; for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) { if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { if (row == null) { row = i; } else { [BUGGY] return null; [BUGGY] } } } return row; } [CLASS] SimplexTableau [METHOD] getBasicRow [RETURN_TYPE] Integer  final int col [VARIABLES] Integer row boolean maximize restrictToNonNegative RealMatrix tableau double coefficient epsilon sum LinearObjectiveFunction f Collection constraints long serialVersionUID int artificialVar col count height i numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	
6	[BUG] [BUGGY] [FE] AssertionError testMath272 [CONTEXT] private Integer getBasicRow(final int col) { Integer row = null; for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) { if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { if (row == null) { row = i; } else { [BUGGY] [BUGGY] return null; } } } return row; } [CLASS] SimplexTableau [METHOD] getBasicRow [RETURN_TYPE] Integer  final int col [VARIABLES] Integer row boolean maximize restrictToNonNegative RealMatrix tableau double coefficient epsilon sum LinearObjectiveFunction f Collection constraints long serialVersionUID int artificialVar col count height i numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	add	
7	[BUG] [BUGGY] int width = getWidth() - numArtificialVariables - 1; [FE] AssertionError testMath272 [CONTEXT] protected void discardArtificialVariables() { if (numArtificialVariables == 0) { return; } [BUGGY] int width = getWidth() - numArtificialVariables - 1; [BUGGY] int height = getHeight() - 1; double[][] matrix = new double[height][width]; for (int i = 0; i < height; i++) { for (int j = 0; j < width - 1; j++) { matrix[i][j] = getEntry(i + 1, j + 1); } matrix[i][width - 1] = getEntry(i + 1, getRhsOffset()); } this.tableau = new RealMatrixImpl(matrix); this.numArtificialVariables = 0; [CLASS] SimplexTableau [METHOD] discardArtificialVariables [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient epsilon sum LinearObjectiveFunction f double[][] matrix Collection constraints long serialVersionUID int artificialVar col count height i j numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	293	293	1	replace	
8	[BUG] [BUGGY] [FE] AssertionError testMath272 [CONTEXT] protected void discardArtificialVariables() { if (numArtificialVariables == 0) { return; } [BUGGY] [BUGGY] int width = getWidth() - numArtificialVariables - 1; int height = getHeight() - 1; double[][] matrix = new double[height][width]; for (int i = 0; i < height; i++) { for (int j = 0; j < width - 1; j++) { matrix[i][j] = getEntry(i + 1, j + 1); } matrix[i][width - 1] = getEntry(i + 1, getRhsOffset()); } this.tableau = new RealMatrixImpl(matrix); this.numArtificialVariables = 0; [CLASS] SimplexTableau [METHOD] discardArtificialVariables [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient epsilon sum LinearObjectiveFunction f double[][] matrix Collection constraints long serialVersionUID int artificialVar col count height i j numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	293	293	1	add	
9	[BUG] [BUGGY] int height = getHeight() - 1; [FE] AssertionError testMath272 [CONTEXT] protected void discardArtificialVariables() { if (numArtificialVariables == 0) { return; } int width = getWidth() - numArtificialVariables - 1; [BUGGY] int height = getHeight() - 1; [BUGGY] double[][] matrix = new double[height][width]; for (int i = 0; i < height; i++) { for (int j = 0; j < width - 1; j++) { matrix[i][j] = getEntry(i + 1, j + 1); } matrix[i][width - 1] = getEntry(i + 1, getRhsOffset()); } this.tableau = new RealMatrixImpl(matrix); this.numArtificialVariables = 0; } [CLASS] SimplexTableau [METHOD] discardArtificialVariables [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient epsilon sum LinearObjectiveFunction f double[][] matrix Collection constraints long serialVersionUID int artificialVar col count height i j numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	294	294	1	replace	
10	[BUG] [BUGGY] [FE] AssertionError testMath272 [CONTEXT] protected void discardArtificialVariables() { if (numArtificialVariables == 0) { return; } int width = getWidth() - numArtificialVariables - 1; [BUGGY] [BUGGY] int height = getHeight() - 1; double[][] matrix = new double[height][width]; for (int i = 0; i < height; i++) { for (int j = 0; j < width - 1; j++) { matrix[i][j] = getEntry(i + 1, j + 1); } matrix[i][width - 1] = getEntry(i + 1, getRhsOffset()); } this.tableau = new RealMatrixImpl(matrix); this.numArtificialVariables = 0; } [CLASS] SimplexTableau [METHOD] discardArtificialVariables [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient epsilon sum LinearObjectiveFunction f double[][] matrix Collection constraints long serialVersionUID int artificialVar col count height i j numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	294	294	1	add	
11	[BUG] [BUGGY] double[][] matrix = new double[height][width]; [FE] AssertionError testMath272 [CONTEXT] protected void discardArtificialVariables() { if (numArtificialVariables == 0) { return; } int width = getWidth() - numArtificialVariables - 1; int height = getHeight() - 1; [BUGGY] double[][] matrix = new double[height][width]; [BUGGY] for (int i = 0; i < height; i++) { for (int j = 0; j < width - 1; j++) { matrix[i][j] = getEntry(i + 1, j + 1); } matrix[i][width - 1] = getEntry(i + 1, getRhsOffset()); } this.tableau = new RealMatrixImpl(matrix); this.numArtificialVariables = 0; } [CLASS] SimplexTableau [METHOD] discardArtificialVariables [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient epsilon sum LinearObjectiveFunction f double[][] matrix Collection constraints long serialVersionUID int artificialVar col count height i j numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	295	295	1	replace	
12	[BUG] [BUGGY] [FE] AssertionError testMath272 [CONTEXT] protected void discardArtificialVariables() { if (numArtificialVariables == 0) { return; } int width = getWidth() - numArtificialVariables - 1; int height = getHeight() - 1; [BUGGY] [BUGGY] double[][] matrix = new double[height][width]; for (int i = 0; i < height; i++) { for (int j = 0; j < width - 1; j++) { matrix[i][j] = getEntry(i + 1, j + 1); } matrix[i][width - 1] = getEntry(i + 1, getRhsOffset()); } this.tableau = new RealMatrixImpl(matrix); this.numArtificialVariables = 0; } [CLASS] SimplexTableau [METHOD] discardArtificialVariables [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient epsilon sum LinearObjectiveFunction f double[][] matrix Collection constraints long serialVersionUID int artificialVar col count height i j numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	295	295	1	add	
13	[BUG] [BUGGY] for (int i = 0; i < height; i++) { [FE] AssertionError testMath272 [CONTEXT] protected void discardArtificialVariables() { if (numArtificialVariables == 0) { return; } int width = getWidth() - numArtificialVariables - 1; int height = getHeight() - 1; double[][] matrix = new double[height][width]; [BUGGY] for (int i = 0; i < height; i++) { [BUGGY] for (int j = 0; j < width - 1; j++) { matrix[i][j] = getEntry(i + 1, j + 1); } matrix[i][width - 1] = getEntry(i + 1, getRhsOffset()); } this.tableau = new RealMatrixImpl(matrix); this.numArtificialVariables = 0; } [CLASS] SimplexTableau [METHOD] discardArtificialVariables [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient epsilon sum LinearObjectiveFunction f double[][] matrix Collection constraints long serialVersionUID int artificialVar col count height i j numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	296	296	1	replace	
14	[BUG] [BUGGY] [FE] AssertionError testMath272 [CONTEXT] protected void discardArtificialVariables() { if (numArtificialVariables == 0) { return; } int width = getWidth() - numArtificialVariables - 1; int height = getHeight() - 1; double[][] matrix = new double[height][width]; [BUGGY] [BUGGY] for (int i = 0; i < height; i++) { for (int j = 0; j < width - 1; j++) { matrix[i][j] = getEntry(i + 1, j + 1); } matrix[i][width - 1] = getEntry(i + 1, getRhsOffset()); } this.tableau = new RealMatrixImpl(matrix); this.numArtificialVariables = 0; } [CLASS] SimplexTableau [METHOD] discardArtificialVariables [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient epsilon sum LinearObjectiveFunction f double[][] matrix Collection constraints long serialVersionUID int artificialVar col count height i j numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	296	296	1	add	
15	[BUG] [BUGGY] for (int j = 0; j < width - 1; j++) { [FE] AssertionError testMath272 [CONTEXT] protected void discardArtificialVariables() { if (numArtificialVariables == 0) { return; } int width = getWidth() - numArtificialVariables - 1; int height = getHeight() - 1; double[][] matrix = new double[height][width]; for (int i = 0; i < height; i++) { [BUGGY] for (int j = 0; j < width - 1; j++) { [BUGGY] matrix[i][j] = getEntry(i + 1, j + 1); } matrix[i][width - 1] = getEntry(i + 1, getRhsOffset()); } this.tableau = new RealMatrixImpl(matrix); this.numArtificialVariables = 0; } [CLASS] SimplexTableau [METHOD] discardArtificialVariables [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient epsilon sum LinearObjectiveFunction f double[][] matrix Collection constraints long serialVersionUID int artificialVar col count height i j numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	297	297	1	replace	
16	[BUG] [BUGGY] [FE] AssertionError testMath272 [CONTEXT] protected void discardArtificialVariables() { if (numArtificialVariables == 0) { return; } int width = getWidth() - numArtificialVariables - 1; int height = getHeight() - 1; double[][] matrix = new double[height][width]; for (int i = 0; i < height; i++) { [BUGGY] [BUGGY] for (int j = 0; j < width - 1; j++) { matrix[i][j] = getEntry(i + 1, j + 1); } matrix[i][width - 1] = getEntry(i + 1, getRhsOffset()); } this.tableau = new RealMatrixImpl(matrix); this.numArtificialVariables = 0; } [CLASS] SimplexTableau [METHOD] discardArtificialVariables [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient epsilon sum LinearObjectiveFunction f double[][] matrix Collection constraints long serialVersionUID int artificialVar col count height i j numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	297	297	1	add	
17	[BUG] [BUGGY] matrix[i][j] = getEntry(i + 1, j + 1); [FE] AssertionError testMath272 [CONTEXT] protected void discardArtificialVariables() { if (numArtificialVariables == 0) { return; } int width = getWidth() - numArtificialVariables - 1; int height = getHeight() - 1; double[][] matrix = new double[height][width]; for (int i = 0; i < height; i++) { for (int j = 0; j < width - 1; j++) { [BUGGY] matrix[i][j] = getEntry(i + 1, j + 1); [BUGGY] } matrix[i][width - 1] = getEntry(i + 1, getRhsOffset()); } this.tableau = new RealMatrixImpl(matrix); this.numArtificialVariables = 0; } [CLASS] SimplexTableau [METHOD] discardArtificialVariables [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient epsilon sum LinearObjectiveFunction f double[][] matrix Collection constraints long serialVersionUID int artificialVar col count height i j numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	298	298	1	replace	
18	[BUG] [BUGGY] [FE] AssertionError testMath272 [CONTEXT] protected void discardArtificialVariables() { if (numArtificialVariables == 0) { return; } int width = getWidth() - numArtificialVariables - 1; int height = getHeight() - 1; double[][] matrix = new double[height][width]; for (int i = 0; i < height; i++) { for (int j = 0; j < width - 1; j++) { [BUGGY] [BUGGY] matrix[i][j] = getEntry(i + 1, j + 1); } matrix[i][width - 1] = getEntry(i + 1, getRhsOffset()); } this.tableau = new RealMatrixImpl(matrix); this.numArtificialVariables = 0; } [CLASS] SimplexTableau [METHOD] discardArtificialVariables [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient epsilon sum LinearObjectiveFunction f double[][] matrix Collection constraints long serialVersionUID int artificialVar col count height i j numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	298	298	1	add	
19	[BUG] [BUGGY] matrix[i][width - 1] = getEntry(i + 1, getRhsOffset()); [FE] AssertionError testMath272 [CONTEXT] if (numArtificialVariables == 0) { return; } int width = getWidth() - numArtificialVariables - 1; int height = getHeight() - 1; double[][] matrix = new double[height][width]; for (int i = 0; i < height; i++) { for (int j = 0; j < width - 1; j++) { matrix[i][j] = getEntry(i + 1, j + 1); } [BUGGY] matrix[i][width - 1] = getEntry(i + 1, getRhsOffset()); [BUGGY] } this.tableau = new RealMatrixImpl(matrix); this.numArtificialVariables = 0; } [CLASS] SimplexTableau [METHOD] discardArtificialVariables [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient epsilon sum LinearObjectiveFunction f double[][] matrix Collection constraints long serialVersionUID int artificialVar col count height i j numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	300	300	1	replace	
20	[BUG] [BUGGY] [FE] AssertionError testMath272 [CONTEXT] if (numArtificialVariables == 0) { return; } int width = getWidth() - numArtificialVariables - 1; int height = getHeight() - 1; double[][] matrix = new double[height][width]; for (int i = 0; i < height; i++) { for (int j = 0; j < width - 1; j++) { matrix[i][j] = getEntry(i + 1, j + 1); } [BUGGY] [BUGGY] matrix[i][width - 1] = getEntry(i + 1, getRhsOffset()); } this.tableau = new RealMatrixImpl(matrix); this.numArtificialVariables = 0; } [CLASS] SimplexTableau [METHOD] discardArtificialVariables [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient epsilon sum LinearObjectiveFunction f double[][] matrix Collection constraints long serialVersionUID int artificialVar col count height i j numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	300	300	1	add	
