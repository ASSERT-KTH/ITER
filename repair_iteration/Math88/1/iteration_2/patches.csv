bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).addValue(basicRow,  coefficients[j]);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).addValue(basicRow,  coefficients[j]);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).addValue(basicRow,  coefficients[j]);	  ((    LinearObjectiveFunction)tableau).addValue(basicRow,    coefficients[i]);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
2	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).addValue(basicRow,  j,  coefficients[i]);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).addValue(basicRow,  j,  coefficients[i]);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).addValue(basicRow,  j,  coefficients[i]);	  ((    LinearObjectiveFunction)tableau).addValue(basicRow,    coefficients[i]);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
3	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)factory).addValue(basicRow,  coefficients[i]);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)factory).addValue(basicRow,  coefficients[i]);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)factory).addValue(basicRow,  coefficients[i]);	  ((    LinearObjectiveFunction)tableau).addValue(basicRow,    coefficients[i]);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
4	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).addValue(basicRow,  coefficients[i],  j);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).addValue(basicRow,  coefficients[i],  j);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).addValue(basicRow,  coefficients[i],  j);	  ((    LinearObjectiveFunction)tableau).addValue(basicRow,    coefficients[i]);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
5	[BUG]  [BUGGY]  solve(basicColumn,  f.getValue(basicRow),  coefficients);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicColumn,  f.getValue(basicRow),  coefficients);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicColumn,  f.getValue(basicRow),  coefficients);	  solve(basicRow,    f.getValue(basicColumn),    coefficients);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
6	[BUG]  [BUGGY]  solve(basicRow,  f.getValue(basicColumn,  j),  coefficients);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicRow,  f.getValue(basicColumn,  j),  coefficients);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicRow,  f.getValue(basicColumn,  j),  coefficients);	  solve(basicRow,    f.getValue(basicColumn),    coefficients);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
7	[BUG]  [BUGGY]  solve(basicRow,  f.getValue(basicColumn),  coefficients,  tableau);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicRow,  f.getValue(basicColumn),  coefficients,  tableau);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicRow,  f.getValue(basicColumn),  coefficients,  tableau);	  solve(basicRow,    f.getValue(basicColumn),    coefficients);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
8	[BUG]  [BUGGY]  coefficients[i]  =(basicRow  ==  null?  0  :  tableau.getValue(basicRow,  j));  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[i]  =(basicRow  ==  null?  0  :  tableau.getValue(basicRow,  j));  [BUGGY]      }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[i]  =(basicRow  ==  null?  0  :  tableau.getValue(basicRow,  j));	  coefficients[i]    =(basicRow    ==    null?    0    :    baseRow.getValue(basicRow,    j));    	non-compiled	[CE]  	71	None	replace
9	[BUG]  [BUGGY]  coefficients[i]  =(basicRow  ==  null?  0  :  baseRow.getValue(basicRow,  j  +  1));  [CE]  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[i]  =(basicRow  ==  null?  0  :  baseRow.getValue(basicRow,  j  +  1));  [BUGGY]      }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[i]  =(basicRow  ==  null?  0  :  baseRow.getValue(basicRow,  j  +  1));	  coefficients[i]    =(basicRow    ==    null?    0    :    baseRow.getValue(basicRow,    j));    	non-compiled	[CE]  	71	None	replace
10	[BUG]  [BUGGY]  coefficients[i]  =(baseRow  ==  null?  0  :  baseRow.getValue(basicRow,  j));  [CE]  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[i]  =(baseRow  ==  null?  0  :  baseRow.getValue(basicRow,  j));  [BUGGY]      }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[i]  =(baseRow  ==  null?  0  :  baseRow.getValue(basicRow,  j));	  coefficients[i]    =(basicRow    ==    null?    0    :    baseRow.getValue(basicRow,    j));    	non-compiled	[CE]  	71	None	replace
11	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicColumn,  f.getValue(basicRow));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicColumn,  f.getValue(basicRow));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setValue(basicColumn,  f.getValue(basicRow));	  ((    LinearObjectiveFunction)tableau).setValue(basicRow,    f.getValue(basicColumn));    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
12	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicColumn,  j));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicColumn,  j));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicColumn,  j));	  ((    LinearObjectiveFunction)tableau).setValue(basicRow,    f.getValue(basicColumn));    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
13	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)basicColumn).setValue(basicRow,  f.getValue(basicColumn));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)basicColumn).setValue(basicRow,  f.getValue(basicColumn));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)basicColumn).setValue(basicRow,  f.getValue(basicColumn));	  ((    LinearObjectiveFunction)tableau).setValue(basicRow,    f.getValue(basicColumn));    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
14	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicColumn,  0));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicColumn,  0));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicColumn,  0));	  ((    LinearObjectiveFunction)tableau).setValue(basicRow,    f.getValue(basicColumn));    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
15	[BUG]  [BUGGY]  coefficients[i]  =(basicRow  ==  null?  0  :  tableau.getValue(basicRow));  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[i]  =(basicRow  ==  null?  0  :  tableau.getValue(basicRow));  [BUGGY]      }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[i]  =(basicRow  ==  null?  0  :  tableau.getValue(basicRow));	  coefficients[i]    =(basicRow    ==    null?    0    :    basicRow.getValue(basicRow));    	non-compiled	[CE]  	6	None	replace
16	[BUG]  [BUGGY]  solve(basicColumn,  table.getValue(basicRow));  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicColumn,  table.getValue(basicRow));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicColumn,  table.getValue(basicRow));	  solve(basicRow,    tableau.getValue(basicColumn));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
17	[BUG]  [BUGGY]  solve(basicColumn,  tableau.getValue(basicRow));  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicColumn,  tableau.getValue(basicRow));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicColumn,  tableau.getValue(basicRow));	  solve(basicRow,    tableau.getValue(basicColumn));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
18	[BUG]  [BUGGY]  coefficients[i]  =(basicRow  ==  null?  0  :  tableau.getValue(j));  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[i]  =(basicRow  ==  null?  0  :  tableau.getValue(j));  [BUGGY]      }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[i]  =(basicRow  ==  null?  0  :  tableau.getValue(j));	  coefficients[i]    =(basicRow    ==    null?    0    :    baseRow.getValue(j));    	non-compiled	[CE]  	50	None	replace
19	[BUG]  [BUGGY]  coefficients[i]  =(baseRow  ==  null?  0  :  baseRow.getValue(j));  [CE]  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[i]  =(baseRow  ==  null?  0  :  baseRow.getValue(j));  [BUGGY]      }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[i]  =(baseRow  ==  null?  0  :  baseRow.getValue(j));	  coefficients[i]    =(basicRow    ==    null?    0    :    baseRow.getValue(j));    	non-compiled	[CE]  	50	None	replace
20	[BUG]  [BUGGY]  coefficients[i]  =(basicRow!=  null?  0  :  baseRow.getValue(j));  [CE]  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[i]  =(basicRow!=  null?  0  :  baseRow.getValue(j));  [BUGGY]      }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[i]  =(basicRow!=  null?  0  :  baseRow.getValue(j));	  coefficients[i]    =(basicRow    ==    null?    0    :    baseRow.getValue(j));    	non-compiled	[CE]  	50	None	replace
21	[BUG]  [BUGGY]  f.setValue(basicRow[j],  coefficients[i]);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  f.setValue(basicRow[j],  coefficients[i]);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	f.setValue(basicRow[j],  coefficients[i]);	  f.setValue(basicRow[j]);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
22	[BUG]  [BUGGY]  f.setValue(basicRow[j]  -  1);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  f.setValue(basicRow[j]  -  1);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	f.setValue(basicRow[j]  -  1);	  f.setValue(basicRow[j]);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
23	[BUG]  [BUGGY]  f.setValue(basicRow[j]  +  1);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  f.setValue(basicRow[j]  +  1);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	f.setValue(basicRow[j]  +  1);	  f.setValue(basicRow[j]);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
24	[BUG]  [BUGGY]  f.setValue(basicRow[i]);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  f.setValue(basicRow[i]);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	f.setValue(basicRow[i]);	  f.setValue(basicRow[j]);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
25	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicVar),  coefficients);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicVar),  coefficients);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicVar),  coefficients);	  ((    LinearObjectiveFunction)tableau).setValue(basicRow,    f.getValue(basicVar));    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
26	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicVar,  j));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicVar,  j));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicVar,  j));	  ((    LinearObjectiveFunction)tableau).setValue(basicRow,    f.getValue(basicVar));    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
27	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)basicVar).setValue(basicRow,  f.getValue(basicVar));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)basicVar).setValue(basicRow,  f.getValue(basicVar));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)basicVar).setValue(basicRow,  f.getValue(basicVar));	  ((    LinearObjectiveFunction)tableau).setValue(basicRow,    f.getValue(basicVar));    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
28	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicVar,  0));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicVar,  0));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicVar,  0));	  ((    LinearObjectiveFunction)tableau).setValue(basicRow,    f.getValue(basicVar));    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
29	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)factory).setValue(basicRow,  coefficients[i]);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)factory).setValue(basicRow,  coefficients[i]);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)factory).setValue(basicRow,  coefficients[i]);	  ((    LinearObjectiveFunction)factory).setValue(coefficients[i]);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
30	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)factory).setValue(basicRow[i]);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)factory).setValue(basicRow[i]);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)factory).setValue(basicRow[i]);	  ((    LinearObjectiveFunction)factory).setValue(coefficients[i]);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
31	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)factory).setValue(baseRow,  coefficients[i]);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)factory).setValue(baseRow,  coefficients[i]);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)factory).setValue(baseRow,  coefficients[i]);	  ((    LinearObjectiveFunction)factory).setValue(coefficients[i]);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
32	[BUG]  [BUGGY]  solve(basicRow,  f.getValue(basicRow),  coefficients[j]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicRow,  f.getValue(basicRow),  coefficients[j]);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicRow,  f.getValue(basicRow),  coefficients[j]);	  solve(basicRow,    f.getValue(basicRow),    j);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
33	[BUG]  [BUGGY]  solve(basicRow,  tableau.getValue(basicRow),  j);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicRow,  tableau.getValue(basicRow),  j);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicRow,  tableau.getValue(basicRow),  j);	  solve(basicRow,    f.getValue(basicRow),    j);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
34	[BUG]  [BUGGY]  double  coefficients[]  =  f.getValue(basicRow,  j  +  1);  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  double  coefficients[]  =  f.getValue(basicRow,  j  +  1);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	double  coefficients[]  =  f.getValue(basicRow,  j  +  1);	  double    coefficients[]    =    f.getValue(basicRow,    j);    	non-compiled	[CE]  	1	None	replace
35	[BUG]  [BUGGY]  double  coefficients[]  =  f.getValue(basicRow,  j  -  1);  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  double  coefficients[]  =  f.getValue(basicRow,  j  -  1);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	double  coefficients[]  =  f.getValue(basicRow,  j  -  1);	  double    coefficients[]    =    f.getValue(basicRow,    j);    	non-compiled	[CE]  	1	None	replace
36	[BUG]  [BUGGY]  double  coefficients[]  =  f.getValue(basicRow,  i);  [CE]  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  double  coefficients[]  =  f.getValue(basicRow,  i);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	double  coefficients[]  =  f.getValue(basicRow,  i);	  double    coefficients[]    =    f.getValue(basicRow,    j);    	non-compiled	[CE]  	1	None	replace
37	[BUG]  [BUGGY]  coefficients[j]  =(basicRow  ==  null?  0  :  tableau.getValue(basicRow));  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[j]  =(basicRow  ==  null?  0  :  tableau.getValue(basicRow));  [BUGGY]      }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[j]  =(basicRow  ==  null?  0  :  tableau.getValue(basicRow));	  coefficients[j]    =(basicRow    ==    null?    0    :    basicRow.getValue(basicRow));    	non-compiled	[CE]  	20	None	replace
38	[BUG]  [BUGGY]  coefficients[j]  =(basicRow  ==  null?  0  :  baseRow.getValue(basicRow));  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[j]  =(basicRow  ==  null?  0  :  baseRow.getValue(basicRow));  [BUGGY]      }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[j]  =(basicRow  ==  null?  0  :  baseRow.getValue(basicRow));	  coefficients[j]    =(basicRow    ==    null?    0    :    basicRow.getValue(basicRow));    	non-compiled	[CE]  	20	None	replace
39	[BUG]  [BUGGY]  coefficients[i]  =  tableau.getValue(basicRow,  column);  [CE]  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[i]  =  tableau.getValue(basicRow,  column);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[i]  =  tableau.getValue(basicRow,  column);	  coefficients[i]    =    f.getValue(basicRow,    column);    	non-compiled	[CE]  	11	None	replace
40	[BUG]  [BUGGY]  coefficients[i]  =  baseRow.getValue(f,  j);  [CE]  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[i]  =  baseRow.getValue(f,  j);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[i]  =  baseRow.getValue(f,  j);	  coefficients[i]    =    f.getValue(basicRow,    column);    	non-compiled	[CE]  	11	None	replace
41	[BUG]  [BUGGY]  coefficients[j]  =(basicRow  ==  null?  0  :  tableau.getValue(basicRow,  j));  [CE]  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[j]  =(basicRow  ==  null?  0  :  tableau.getValue(basicRow,  j));  [BUGGY]      }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[j]  =(basicRow  ==  null?  0  :  tableau.getValue(basicRow,  j));	  coefficients[j]    =(basicRow    ==    null?    0    :    basicRow.getValue(basicRow,    j));    	non-compiled	[CE]  	19	None	replace
42	[BUG]  [BUGGY]  coefficients[j]  =(basicRow!=  null?  0  :  tableau.getValue(basicRow,  j));  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[j]  =(basicRow!=  null?  0  :  tableau.getValue(basicRow,  j));  [BUGGY]      }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[j]  =(basicRow!=  null?  0  :  tableau.getValue(basicRow,  j));	  coefficients[j]    =(basicRow    ==    null?    0    :    basicRow.getValue(basicRow,    j));    	non-compiled	[CE]  	19	None	replace
43	[BUG]  [BUGGY]  solve(basicRow,  f.getValue(basicRow)+  j);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicRow,  f.getValue(basicRow)+  j);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicRow,  f.getValue(basicRow)+  j);	  solve(basicRow,    f.getValue(basicRow)+    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
44	[BUG]  [BUGGY]  solve(basicRow,  f.getValue(basicRow)+  1));  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicRow,  f.getValue(basicRow)+  1));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicRow,  f.getValue(basicRow)+  1));	  solve(basicRow,    f.getValue(basicRow)+    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
45	[BUG]  [BUGGY]  solve(basicRow,  f.getValue(basicRow)+  1),  coefficients);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicRow,  f.getValue(basicRow)+  1),  coefficients);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicRow,  f.getValue(basicRow)+  1),  coefficients);	  solve(basicRow,    f.getValue(basicRow)+    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
46	[BUG]  [BUGGY]  solve(basicRow,  f.getValue(basicRow)+  1),  coefficients[i]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicRow,  f.getValue(basicRow)+  1),  coefficients[i]);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicRow,  f.getValue(basicRow)+  1),  coefficients[i]);	  solve(basicRow,    f.getValue(basicRow)+    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
47	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)factory).setValue(basicRow,  f.getValue(coefficients));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)factory).setValue(basicRow,  f.getValue(coefficients));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)factory).setValue(basicRow,  f.getValue(coefficients));	  ((    LinearObjectiveFunction)factory).setValue(coefficients,    f.getValue(coefficients));    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
48	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)factory).setValue(coefficients,  f.getValue(basicRow));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)factory).setValue(coefficients,  f.getValue(basicRow));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)factory).setValue(coefficients,  f.getValue(basicRow));	  ((    LinearObjectiveFunction)factory).setValue(coefficients,    f.getValue(coefficients));    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
49	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)factory).setValue(baseRow,  f.getValue(coefficients));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)factory).setValue(baseRow,  f.getValue(coefficients));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)factory).setValue(baseRow,  f.getValue(coefficients));	  ((    LinearObjectiveFunction)factory).setValue(coefficients,    f.getValue(coefficients));    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
50	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)factory).setValue(baseRow,  f.getValue(baseRow));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)factory).setValue(baseRow,  f.getValue(baseRow));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)factory).setValue(baseRow,  f.getValue(baseRow));	  ((    LinearObjectiveFunction)factory).setValue(coefficients,    f.getValue(coefficients));    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
51	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow[j]);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow[j]);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setValue(basicRow[j]);	  ((    LinearObjectiveFunction)tableau).setValue(basicRow[i]);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
52	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)basicRow).setValue(tableau[i]);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)basicRow).setValue(tableau[i]);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)basicRow).setValue(tableau[i]);	  ((    LinearObjectiveFunction)tableau).setValue(basicRow[i]);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
53	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow[j],  coefficients[i]);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow[j],  coefficients[i]);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setValue(basicRow[j],  coefficients[i]);	  ((    LinearObjectiveFunction)tableau).setValue(basicRow[i]);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
54	[BUG]  [BUGGY]  coefficients[j]  =(basicRow  ==  null?  0  :  baseRow.getValue(basicRow,  j  +  1));  [CE]  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[j]  =(basicRow  ==  null?  0  :  baseRow.getValue(basicRow,  j  +  1));  [BUGGY]      }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[j]  =(basicRow  ==  null?  0  :  baseRow.getValue(basicRow,  j  +  1));	  coefficients[j]    =(basicRow    ==    null?    0    :    baseRow.getValue(basicRow,    j));    	non-compiled	[CE]  	75	None	replace
55	[BUG]  [BUGGY]  coefficients[j]  =(basicRow  ==  null?  0  :  baseRow.getValue(basicRow,  i));  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[j]  =(basicRow  ==  null?  0  :  baseRow.getValue(basicRow,  i));  [BUGGY]      }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[j]  =(basicRow  ==  null?  0  :  baseRow.getValue(basicRow,  i));	  coefficients[j]    =(basicRow    ==    null?    0    :    baseRow.getValue(basicRow,    j));    	non-compiled	[CE]  	75	None	replace
56	[BUG]  [BUGGY]  ((  RealMatrix)tableau).setValue(basicRow,  coefficients[j]);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  RealMatrix)tableau).setValue(basicRow,  coefficients[j]);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  RealMatrix)tableau).setValue(basicRow,  coefficients[j]);	  ((    RealMatrix)tableau).setValue(basicRow,    coefficients[i]);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
57	[BUG]  [BUGGY]  ((  RealMatrix)tableau).setValue(basicRow,  j,  coefficients[i]);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  RealMatrix)tableau).setValue(basicRow,  j,  coefficients[i]);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  RealMatrix)tableau).setValue(basicRow,  j,  coefficients[i]);	  ((    RealMatrix)tableau).setValue(basicRow,    coefficients[i]);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
58	[BUG]  [BUGGY]  ((  RealMatrix)tableau).setValue(basicRow,  coefficients[j],  epsilon);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  RealMatrix)tableau).setValue(basicRow,  coefficients[j],  epsilon);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  RealMatrix)tableau).setValue(basicRow,  coefficients[j],  epsilon);	  ((    RealMatrix)tableau).setValue(basicRow,    coefficients[i]);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
59	[BUG]  [BUGGY]  ((  RealMatrix)tableau).setValue(basicRow,  coefficients[0]);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  RealMatrix)tableau).setValue(basicRow,  coefficients[0]);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  RealMatrix)tableau).setValue(basicRow,  coefficients[0]);	  ((    RealMatrix)tableau).setValue(basicRow,    coefficients[i]);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
60	[BUG]  [BUGGY]  solve(basicRow,  f.getValue(basicRow),  coefficients,  tableau);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicRow,  f.getValue(basicRow),  coefficients,  tableau);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicRow,  f.getValue(basicRow),  coefficients,  tableau);	  solve(basicRow,    f.getValue(basicRow),    coefficients);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
61	[BUG]  [BUGGY]  solve(basicRow,  f.getValue(basicRow,  j),  coefficients);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicRow,  f.getValue(basicRow,  j),  coefficients);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicRow,  f.getValue(basicRow,  j),  coefficients);	  solve(basicRow,    f.getValue(basicRow),    coefficients);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
62	[BUG]  [BUGGY]  solve(basicRow,  f.getValue(basicRow),  coefficients,  column);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicRow,  f.getValue(basicRow),  coefficients,  column);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicRow,  f.getValue(basicRow),  coefficients,  column);	  solve(basicRow,    f.getValue(basicRow),    coefficients);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
63	[BUG]  [BUGGY]  coefficients[i]  =  f.getValue(basicRow,  0);  [CE]  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[i]  =  f.getValue(basicRow,  0);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[i]  =  f.getValue(basicRow,  0);	  coefficients[i]    =    f.getValue(basicRow,    tableau);    	non-compiled	[CE]  	44	None	replace
64	[BUG]  [BUGGY]  coefficients[i]  =  Tableau.getValue(basicRow,  j);  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[i]  =  Tableau.getValue(basicRow,  j);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[i]  =  Tableau.getValue(basicRow,  j);	  coefficients[i]    =    f.getValue(basicRow,    tableau);    	non-compiled	[CE]  	44	None	replace
65	[BUG]  [BUGGY]  f.setValue(basicRow,  j  +  1,  coefficients[i]);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  f.setValue(basicRow,  j  +  1,  coefficients[i]);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	f.setValue(basicRow,  j  +  1,  coefficients[i]);	  f.setValue(basicRow,    j    +    1);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
66	[BUG]  [BUGGY]  f.setValue(basicRow,  j  *  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  f.setValue(basicRow,  j  *  1);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	f.setValue(basicRow,  j  *  1);	  f.setValue(basicRow,    j    +    1);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
67	[BUG]  [BUGGY]  f.setValue(basicRow,  j  +  2);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  f.setValue(basicRow,  j  +  2);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	f.setValue(basicRow,  j  +  2);	  f.setValue(basicRow,    j    +    1);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
68	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setBasicRow(basicRow,  j  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setBasicRow(basicRow,  j  +  1);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setBasicRow(basicRow,  j  +  1);	  ((    LinearObjectiveFunction)tableau).setBasicRow(basicRow,    j);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
69	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setBasicRow(basicRow,  coefficients[j]);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setBasicRow(basicRow,  coefficients[j]);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setBasicRow(basicRow,  coefficients[j]);	  ((    LinearObjectiveFunction)tableau).setBasicRow(basicRow,    j);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
70	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setBasicRow(basicRow,  i);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setBasicRow(basicRow,  i);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setBasicRow(basicRow,  i);	  ((    LinearObjectiveFunction)tableau).setBasicRow(basicRow,    j);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
71	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setBasicRow(basicRow,  0);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setBasicRow(basicRow,  0);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setBasicRow(basicRow,  0);	  ((    LinearObjectiveFunction)tableau).setBasicRow(basicRow,    j);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
72	[BUG]  [BUGGY]  solve(basicPos,  f.getValue(basicRow)+  1));  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicPos,  f.getValue(basicRow)+  1));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicPos,  f.getValue(basicRow)+  1));	  solve(basicRow,    f.getValue(basicPos)+    1));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
73	[BUG]  [BUGGY]  solve(basicRow,  f.getValue(basicPos)+  1),  coefficients[i]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicRow,  f.getValue(basicPos)+  1),  coefficients[i]);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicRow,  f.getValue(basicPos)+  1),  coefficients[i]);	  solve(basicRow,    f.getValue(basicPos)+    1));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
74	[BUG]  [BUGGY]  solve(basicRow,  f.getValue(basicPos)+  1),  coefficients);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicRow,  f.getValue(basicPos)+  1),  coefficients);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicRow,  f.getValue(basicPos)+  1),  coefficients);	  solve(basicRow,    f.getValue(basicPos)+    1));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
75	[BUG]  [BUGGY]  solve(basicRow,  f.getValue(basicPos,  j)+  1));  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicRow,  f.getValue(basicPos,  j)+  1));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicRow,  f.getValue(basicPos,  j)+  1));	  solve(basicRow,    f.getValue(basicPos)+    1));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
76	[BUG]  [BUGGY]  double  coefficients[]  =  tableau.getValue(basicRow,  0);  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  double  coefficients[]  =  tableau.getValue(basicRow,  0);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	double  coefficients[]  =  tableau.getValue(basicRow,  0);	  double    coefficients[]    =    f.getValue(basicRow,    0);    	non-compiled	[CE]  	57	None	replace
77	[BUG]  [BUGGY]  double  coefficients[]  =  f.getValue(basicRow,  1);  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  double  coefficients[]  =  f.getValue(basicRow,  1);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	double  coefficients[]  =  f.getValue(basicRow,  1);	  double    coefficients[]    =    f.getValue(basicRow,    0);    	non-compiled	[CE]  	57	None	replace
78	[BUG]  [BUGGY]  f.setValue(basicRow,  0);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  f.setValue(basicRow,  0);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	f.setValue(basicRow,  0);	  f.setValue(basicRow,    i);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
79	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicColumns,  1));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicColumns,  1));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicColumns,  1));	  ((    LinearObjectiveFunction)tableau).setValue(basicRow,    f.getValue(basicColumns));    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
80	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicColumns,  f.getValue(basicRow));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicColumns,  f.getValue(basicRow));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setValue(basicColumns,  f.getValue(basicRow));	  ((    LinearObjectiveFunction)tableau).setValue(basicRow,    f.getValue(basicColumns));    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
81	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicColumns,  coefficients.length));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicColumns,  coefficients.length));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicColumns,  coefficients.length));	  ((    LinearObjectiveFunction)tableau).setValue(basicRow,    f.getValue(basicColumns));    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
82	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicColumns),  coefficients);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicColumns),  coefficients);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicColumns),  coefficients);	  ((    LinearObjectiveFunction)tableau).setValue(basicRow,    f.getValue(basicColumns));    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
83	[BUG]  [BUGGY]  coefficients[i]  =(basicRow  ==  null?  0  :  basicRow);  [CE]  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[i]  =(basicRow  ==  null?  0  :  basicRow);  [BUGGY]      }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[i]  =(basicRow  ==  null?  0  :  basicRow);	  coefficients[i]    =    basicRow;    	non-compiled	[CE]  	72	None	replace
84	[BUG]  [BUGGY]  coefficients[i]  =(basicRow  ==  null?  0  :  basicRow.doubleValue());  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[i]  =(basicRow  ==  null?  0  :  basicRow.doubleValue());  [BUGGY]      }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[i]  =(basicRow  ==  null?  0  :  basicRow.doubleValue());	  coefficients[i]    =    basicRow;    	non-compiled	[CE]  	72	None	replace
85	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setBasicRow(basicRow  +  i);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setBasicRow(basicRow  +  i);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setBasicRow(basicRow  +  i);	  ((    LinearObjectiveFunction)tableau).setBasicRow(basicRow    +    j);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
86	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setBasicRow(basicRow  *  j);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setBasicRow(basicRow  *  j);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setBasicRow(basicRow  *  j);	  ((    LinearObjectiveFunction)tableau).setBasicRow(basicRow    +    j);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
87	[BUG]  [BUGGY]  f.setValue(basicRow,  0,  j);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  f.setValue(basicRow,  0,  j);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	f.setValue(basicRow,  0,  j);	  f.setValue(basicRow,    j);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
88	[BUG]  [BUGGY]  solve(basicRow,  tableau.getValue(basicRow,  j));  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicRow,  tableau.getValue(basicRow,  j));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicRow,  tableau.getValue(basicRow,  j));	  solve(basicRow,    f.getValue(basicRow,    j));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
89	[BUG]  [BUGGY]  solve(basicRow,  f.getValue(basicRow,  j),  coefficients[i]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicRow,  f.getValue(basicRow,  j),  coefficients[i]);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicRow,  f.getValue(basicRow,  j),  coefficients[i]);	  solve(basicRow,    f.getValue(basicRow,    j));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
90	[BUG]  [BUGGY]  solve(basicRow,  f.getValue(basicRow,  j),  tableau);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicRow,  f.getValue(basicRow,  j),  tableau);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicRow,  f.getValue(basicRow,  j),  tableau);	  solve(basicRow,    f.getValue(basicRow,    j));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
91	[BUG]  [BUGGY]  solve(basicPos,  f.getValue(basicRow,  j));  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicPos,  f.getValue(basicRow,  j));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicPos,  f.getValue(basicRow,  j));	  solve(basicPos,    f.getValue(basicRow));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
92	[BUG]  [BUGGY]  solve(basicPos,  f.getValue(basicRow),  coefficients);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicPos,  f.getValue(basicRow),  coefficients);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicPos,  f.getValue(basicRow),  coefficients);	  solve(basicPos,    f.getValue(basicRow));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
93	[BUG]  [BUGGY]  solve(basicPos,  f.getValue(basicRow,  i));  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicPos,  f.getValue(basicRow,  i));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicPos,  f.getValue(basicRow,  i));	  solve(basicPos,    f.getValue(basicRow));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
94	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)basicRow).setCoefficients(tableau);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)basicRow).setCoefficients(tableau);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)basicRow).setCoefficients(tableau);	  ((    LinearObjectiveFunction)tableau).setCoefficients(basicRow);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
95	[BUG]  [BUGGY]  coefficients[j]  =(basicRow!=  null?  0  :  tableau.getEntry(basicRow,  j));  [CE]  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[j]  =(basicRow!=  null?  0  :  tableau.getEntry(basicRow,  j));  [BUGGY]      }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[j]  =(basicRow!=  null?  0  :  tableau.getEntry(basicRow,  j));	  coefficients[j]    =(basicRow    ==    null?    0    :    tableau.getEntry(basicRow,    j));    	non-compiled	[CE]  	58	None	replace
96	[BUG]  [BUGGY]  coefficients[j]  =(baseRow  ==  null?  0  :  tableau.getEntry(basicRow,  j));  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[j]  =(baseRow  ==  null?  0  :  tableau.getEntry(basicRow,  j));  [BUGGY]      }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[j]  =(baseRow  ==  null?  0  :  tableau.getEntry(basicRow,  j));	  coefficients[j]    =(basicRow    ==    null?    0    :    tableau.getEntry(basicRow,    j));    	non-compiled	[CE]  	58	None	replace
97	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setCoefficients(basicRow,  j);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setCoefficients(basicRow,  j);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setCoefficients(basicRow,  j);	  ((    LinearObjectiveFunction)tableau).setCoefficients(basicRow,    coefficients);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
98	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setCoefficients(basicRow,  coefficients.length);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setCoefficients(basicRow,  coefficients.length);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setCoefficients(basicRow,  coefficients.length);	  ((    LinearObjectiveFunction)tableau).setCoefficients(basicRow,    coefficients);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
99	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setCoefficients(basicRow,  coefficients,  mostNegative);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setCoefficients(basicRow,  coefficients,  mostNegative);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setCoefficients(basicRow,  coefficients,  mostNegative);	  ((    LinearObjectiveFunction)tableau).setCoefficients(basicRow,    coefficients);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
100	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setCoefficients(basicRow,  coefficients[j]);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setCoefficients(basicRow,  coefficients[j]);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setCoefficients(basicRow,  coefficients[j]);	  ((    LinearObjectiveFunction)tableau).setCoefficients(basicRow,    coefficients);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
101	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  coefficients.getValue(basicRow));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  coefficients.getValue(basicRow));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setValue(basicRow,  coefficients.getValue(basicRow));	  ((    LinearObjectiveFunction)tableau).setValue(coefficients,    f.getValue(basicRow));    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
102	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)basicRow).setValue(coefficients,  f.getValue(basicRow));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)basicRow).setValue(coefficients,  f.getValue(basicRow));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)basicRow).setValue(coefficients,  f.getValue(basicRow));	  ((    LinearObjectiveFunction)tableau).setValue(coefficients,    f.getValue(basicRow));    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
103	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  coefficients[j]);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  coefficients[j]);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setValue(basicRow,  coefficients[j]);	  ((    LinearObjectiveFunction)tableau).setValue(basicRow,    coefficients[i]);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
104	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  j,  coefficients[i]);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  j,  coefficients[i]);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setValue(basicRow,  j,  coefficients[i]);	  ((    LinearObjectiveFunction)tableau).setValue(basicRow,    coefficients[i]);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
105	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  j);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  j);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setValue(basicRow,  j);	  ((    LinearObjectiveFunction)tableau).setValue(basicRow,    coefficients[i]);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
106	[BUG]  [BUGGY]  solve(basicColumn,  f.getValue(basicRow,  j));  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicColumn,  f.getValue(basicRow,  j));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicColumn,  f.getValue(basicRow,  j));	  solve(basicRow,    f.getValue(basicColumn,    j));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	73	None	replace
107	[BUG]  [BUGGY]  solve(basicRow,  f.getValue(basicColumn,  j),  coefficients[i]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicRow,  f.getValue(basicColumn,  j),  coefficients[i]);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicRow,  f.getValue(basicColumn,  j),  coefficients[i]);	  solve(basicRow,    f.getValue(basicColumn,    j));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	73	None	replace
108	[BUG]  [BUGGY]  solve(basicColumn,  f.getValue(basicRow,  j),  coefficients);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicColumn,  f.getValue(basicRow,  j),  coefficients);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicColumn,  f.getValue(basicRow,  j),  coefficients);	  solve(basicRow,    f.getValue(basicColumn,    j));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	73	None	replace
109	[BUG]  [BUGGY]  coefficients[i]  =(basicRow  ==  null?  0  :  tableau.getValue(basicRow),  j);  [CE]  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[i]  =(basicRow  ==  null?  0  :  tableau.getValue(basicRow),  j);  [BUGGY]      }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[i]  =(basicRow  ==  null?  0  :  tableau.getValue(basicRow),  j);	  coefficients[i]    =(basicRow    ==    null?    0    :    basicRow.getValue(basicRow),    j);    	non-compiled	[CE]  	7	None	replace
110	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicRow),  coefficients);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicRow),  coefficients);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicRow),  coefficients);	  ((    LinearObjectiveFunction)tableau).setValue(basicRow,    f.getValue(basicRow));    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
111	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicRow,  j));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicRow,  j));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicRow,  j));	  ((    LinearObjectiveFunction)tableau).setValue(basicRow,    f.getValue(basicRow));    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
112	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicRow),  coefficients[j]);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicRow),  coefficients[j]);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicRow),  coefficients[j]);	  ((    LinearObjectiveFunction)tableau).setValue(basicRow,    f.getValue(basicRow));    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
113	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)basicRow).setValue(tableau);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)basicRow).setValue(tableau);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)basicRow).setValue(tableau);	  ((    LinearObjectiveFunction)tableau).setValue(basicRow);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
114	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  coefficients);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  coefficients);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setValue(basicRow,  coefficients);	  ((    LinearObjectiveFunction)tableau).setValue(basicRow);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
115	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  basicRow);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  basicRow);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setValue(basicRow,  basicRow);	  ((    LinearObjectiveFunction)tableau).setValue(basicRow);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
116	[BUG]  [BUGGY]  coefficients[i]  =  baseRow  ==  null?  0  :  tableau.getValue(basicRow);  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[i]  =  baseRow  ==  null?  0  :  tableau.getValue(basicRow);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[i]  =  baseRow  ==  null?  0  :  tableau.getValue(basicRow);	  coefficients[i]    =    tableau.getValue(basicRow);    	non-compiled	[CE]  	10	None	replace
117	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicPos),  coefficients);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicPos),  coefficients);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicPos),  coefficients);	  ((    LinearObjectiveFunction)tableau).setValue(basicRow,    f.getValue(basicPos));    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
118	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicPos  +  1));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicPos  +  1));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicPos  +  1));	  ((    LinearObjectiveFunction)tableau).setValue(basicRow,    f.getValue(basicPos));    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
119	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicPos,  f.getValue(basicRow));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicPos,  f.getValue(basicRow));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setValue(basicPos,  f.getValue(basicRow));	  ((    LinearObjectiveFunction)tableau).setValue(basicRow,    f.getValue(basicPos));    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
120	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)basicPos).setValue(basicRow,  f.getValue(basicPos));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)basicPos).setValue(basicRow,  f.getValue(basicPos));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)basicPos).setValue(basicRow,  f.getValue(basicPos));	  ((    LinearObjectiveFunction)tableau).setValue(basicRow,    f.getValue(basicPos));    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
121	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)basicRow).setCoefficients(coefficients,  basicRow);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)basicRow).setCoefficients(coefficients,  basicRow);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)basicRow).setCoefficients(coefficients,  basicRow);	  ((    LinearObjectiveFunction)basicRow).setCoefficients(coefficients);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
122	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)basicRow).setCoefficients(coefficients,  0,  coefficients.length);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)basicRow).setCoefficients(coefficients,  0,  coefficients.length);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)basicRow).setCoefficients(coefficients,  0,  coefficients.length);	  ((    LinearObjectiveFunction)basicRow).setCoefficients(coefficients);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
123	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)basicRow).setCoefficients(coefficients,  f.getValue(basicRow));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)basicRow).setCoefficients(coefficients,  f.getValue(basicRow));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)basicRow).setCoefficients(coefficients,  f.getValue(basicRow));	  ((    LinearObjectiveFunction)basicRow).setCoefficients(coefficients);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
124	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)basicRow).setCoefficients(coefficients,  baseRow);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)basicRow).setCoefficients(coefficients,  baseRow);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)basicRow).setCoefficients(coefficients,  baseRow);	  ((    LinearObjectiveFunction)basicRow).setCoefficients(coefficients);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
125	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)basicRow).setBasicColumn(j);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)basicRow).setBasicColumn(j);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)basicRow).setBasicColumn(j);	  ((    LinearObjectiveFunction)basicRow).setBasicRow(j);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
126	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)basicRow).setBasicRow(basicRow,  j);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)basicRow).setBasicRow(basicRow,  j);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)basicRow).setBasicRow(basicRow,  j);	  ((    LinearObjectiveFunction)basicRow).setBasicRow(j);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
127	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)basicRow).setBasicRow(j  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)basicRow).setBasicRow(j  +  1);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)basicRow).setBasicRow(j  +  1);	  ((    LinearObjectiveFunction)basicRow).setBasicRow(j);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
128	[BUG]  [BUGGY]  f.setValue(basicRow,  0,  coefficients[i]);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  f.setValue(basicRow,  0,  coefficients[i]);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	f.setValue(basicRow,  0,  coefficients[i]);	  f.setValue(basicRow,    coefficients[i]);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
129	[BUG]  [BUGGY]  f.setValue(basicRow,  coefficients[i]  +  1);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  f.setValue(basicRow,  coefficients[i]  +  1);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	f.setValue(basicRow,  coefficients[i]  +  1);	  f.setValue(basicRow,    coefficients[i]);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
130	[BUG]  [BUGGY]  f.setValue(basicRow,  coefficients[i]  -  basicRow);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  f.setValue(basicRow,  coefficients[i]  -  basicRow);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	f.setValue(basicRow,  coefficients[i]  -  basicRow);	  f.setValue(basicRow,    coefficients[i]);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
131	[BUG]  [BUGGY]  coefficients[i]  =  baseRow.getValue(basicRow,  j);  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[i]  =  baseRow.getValue(basicRow,  j);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[i]  =  baseRow.getValue(basicRow,  j);	  coefficients[i]    =    tableau.getValue(basicRow,    j);    	non-compiled	[CE]  	9	None	replace
132	[BUG]  [BUGGY]  coefficients[i]  =  baseRow.getValue(j,  tableau);  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[i]  =  baseRow.getValue(j,  tableau);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[i]  =  baseRow.getValue(j,  tableau);	  coefficients[i]    =    tableau.getValue(basicRow,    j);    	non-compiled	[CE]  	9	None	replace
133	[BUG]  [BUGGY]  f.setValue(basicRow  +  i);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  f.setValue(basicRow  +  i);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	f.setValue(basicRow  +  i);	  f.setValue(basicRow    +    j);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
134	[BUG]  [BUGGY]  f.setValue(basicRow  +  j,  coefficients[i]);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  f.setValue(basicRow  +  j,  coefficients[i]);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	f.setValue(basicRow  +  j,  coefficients[i]);	  f.setValue(basicRow    +    j);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
135	[BUG]  [BUGGY]  f.setValue(basicRow  +  1,  j);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  f.setValue(basicRow  +  1,  j);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	f.setValue(basicRow  +  1,  j);	  f.setValue(basicRow    +    j);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
136	[BUG]  [BUGGY]  f.setValue(basicRow  +  i,  j);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  f.setValue(basicRow  +  i,  j);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	f.setValue(basicRow  +  i,  j);	  f.setValue(basicRow    +    j);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
137	[BUG]  [BUGGY]  coefficients[i]  =(basicRow  ==  null?  0  :  getEntry(basicRow,  j));  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[i]  =(basicRow  ==  null?  0  :  getEntry(basicRow,  j));  [BUGGY]      }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[i]  =(basicRow  ==  null?  0  :  getEntry(basicRow,  j));	  coefficients[i]    =    j    ==    0?    0    :    getEntry(basicRow,    j);    	non-compiled	[CE]  	56	None	replace
138	[BUG]  [BUGGY]  coefficients[i]  =  j  ==  0?  0  :  getEntry(basicRow,  getRhsOffset());  [CE]  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[i]  =  j  ==  0?  0  :  getEntry(basicRow,  getRhsOffset());  [BUGGY]      }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[i]  =  j  ==  0?  0  :  getEntry(basicRow,  getRhsOffset());	  coefficients[i]    =    j    ==    0?    0    :    getEntry(basicRow,    j);    	non-compiled	[CE]  	56	None	replace
139	[BUG]  [BUGGY]  coefficients[i]  =  j  ==  0?  0  :  getEntry(basicRow,  getRhsOffset()));  [CE]  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[i]  =  j  ==  0?  0  :  getEntry(basicRow,  getRhsOffset()));  [BUGGY]      }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[i]  =  j  ==  0?  0  :  getEntry(basicRow,  getRhsOffset()));	  coefficients[i]    =    j    ==    0?    0    :    getEntry(basicRow,    j);    	non-compiled	[CE]  	56	None	replace
140	[BUG]  [BUGGY]  solve(basicColumn,  f.getValue(basicRow)+  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicColumn,  f.getValue(basicRow)+  1);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicColumn,  f.getValue(basicRow)+  1);	  solve(basicRow,    f.getValue(basicColumn)+    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
141	[BUG]  [BUGGY]  solve(basicColumn,  f.getValue(basicRow)+  1));  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicColumn,  f.getValue(basicRow)+  1));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicColumn,  f.getValue(basicRow)+  1));	  solve(basicRow,    f.getValue(basicColumn)+    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
142	[BUG]  [BUGGY]  solve(basicRow,  f.getValue(basicColumn)+  j);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicRow,  f.getValue(basicColumn)+  j);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicRow,  f.getValue(basicColumn)+  j);	  solve(basicRow,    f.getValue(basicColumn)+    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
143	[BUG]  [BUGGY]  solve(basicRow,  f.getValue(basicColumn)+  1));  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicRow,  f.getValue(basicColumn)+  1));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicRow,  f.getValue(basicColumn)+  1));	  solve(basicRow,    f.getValue(basicColumn)+    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
144	[BUG]  [BUGGY]  solve(basicColumn,  baseRow,  f.getValue(basicRow));  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicColumn,  baseRow,  f.getValue(basicRow));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicColumn,  baseRow,  f.getValue(basicRow));	  solve(basicColumn,    f.getValue(basicRow));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
145	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicRow,  coefficients));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicRow,  coefficients));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicRow,  coefficients));	  ((    LinearObjectiveFunction)tableau).setValue(basicRow,    f.getValue(coefficients));    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
146	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setBasicRow(basicRow  +  1,  j);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setBasicRow(basicRow  +  1,  j);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setBasicRow(basicRow  +  1,  j);	  ((    LinearObjectiveFunction)tableau).setBasicRow(basicRow    +    1);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
147	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)basicRow).setValue(basicRow,  f.getValue(basicRow));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)basicRow).setValue(basicRow,  f.getValue(basicRow));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)basicRow).setValue(basicRow,  f.getValue(basicRow));	  ((    LinearObjectiveFunction)basicRow).setValue(coefficients,    f.getValue(coefficients));    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
148	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)basicRow).setValue(coefficients,  tableau.getValue(basicRow));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)basicRow).setValue(coefficients,  tableau.getValue(basicRow));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)basicRow).setValue(coefficients,  tableau.getValue(basicRow));	  ((    LinearObjectiveFunction)basicRow).setValue(coefficients,    f.getValue(coefficients));    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
149	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)basicRow).setValue(basicRow,  f.getValue(basicColumns));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)basicRow).setValue(basicRow,  f.getValue(basicColumns));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)basicRow).setValue(basicRow,  f.getValue(basicColumns));	  ((    LinearObjectiveFunction)basicRow).setValue(coefficients,    f.getValue(coefficients));    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
150	[BUG]  [BUGGY]  double  coefficients[]  =  graph.getValue(basicRow,  j);  [CE]  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  double  coefficients[]  =  graph.getValue(basicRow,  j);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	double  coefficients[]  =  graph.getValue(basicRow,  j);	  double    coefficients[]    =    graph.getValue(basicRow);    	non-compiled	[CE]  	3	None	replace
151	[BUG]  [BUGGY]  double  coefficients[]  =  graph.getValue(basicRow,  0);  [CE]  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  double  coefficients[]  =  graph.getValue(basicRow,  0);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	double  coefficients[]  =  graph.getValue(basicRow,  0);	  double    coefficients[]    =    graph.getValue(basicRow);    	non-compiled	[CE]  	3	None	replace
152	[BUG]  [BUGGY]  coefficients[i]  =  f.getValue(basicRow,  j  +  1);  [CE]  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[i]  =  f.getValue(basicRow,  j  +  1);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[i]  =  f.getValue(basicRow,  j  +  1);	  coefficients[i]    =    f.getValue(basicRow,    j);    	non-compiled	[CE]  	8	None	replace
153	[BUG]  [BUGGY]  coefficients[i]  =  f.getValue(basicRow,  j  -  1);  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[i]  =  f.getValue(basicRow,  j  -  1);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[i]  =  f.getValue(basicRow,  j  -  1);	  coefficients[i]    =    f.getValue(basicRow,    j);    	non-compiled	[CE]  	8	None	replace
154	[BUG]  [BUGGY]  solve(basicPos,  f.getValue(basicRow)+  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicPos,  f.getValue(basicRow)+  1);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicPos,  f.getValue(basicRow)+  1);	  solve(basicRow,    f.getValue(basicPos)+    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
155	[BUG]  [BUGGY]  solve(basicRow,  f.getValue(basicPos),  coefficients[j]  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicRow,  f.getValue(basicPos),  coefficients[j]  +  1);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicRow,  f.getValue(basicPos),  coefficients[j]  +  1);	  solve(basicRow,    f.getValue(basicPos)+    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
156	[BUG]  [BUGGY]  solve(basicColumn,  f.getValue(basicRow),  j);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicColumn,  f.getValue(basicRow),  j);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicColumn,  f.getValue(basicRow),  j);	  solve(basicRow,    f.getValue(basicColumn),    j);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	74	None	replace
157	[BUG]  [BUGGY]  solve(basicRow,  f.getValue(basicColumn,  i));  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicRow,  f.getValue(basicColumn,  i));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicRow,  f.getValue(basicColumn,  i));	  solve(basicRow,    f.getValue(basicColumn),    j);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	74	None	replace
158	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)basicRow).setBasicColumn(basicColumn);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)basicRow).setBasicColumn(basicColumn);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)basicRow).setBasicColumn(basicColumn);	  ((    LinearObjectiveFunction)basicRow).setBasicRow(basicRow);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
159	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)basicRow).setBasicRow(basicRow  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)basicRow).setBasicRow(basicRow  +  1);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)basicRow).setBasicRow(basicRow  +  1);	  ((    LinearObjectiveFunction)basicRow).setBasicRow(basicRow);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
160	[BUG]  [BUGGY]  coefficients[i]  =  baseRow  ==  null?  0  :  baseRow;  [CE]  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[i]  =  baseRow  ==  null?  0  :  baseRow;  [BUGGY]      }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[i]  =  baseRow  ==  null?  0  :  baseRow;	  coefficients[i]    =    baseRow;    	non-compiled	[CE]  	30	None	replace
161	[BUG]  [BUGGY]  coefficients[i]  =  baseRow!=  null?  0  :  baseRow;  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[i]  =  baseRow!=  null?  0  :  baseRow;  [BUGGY]      }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[i]  =  baseRow!=  null?  0  :  baseRow;	  coefficients[i]    =    baseRow;    	non-compiled	[CE]  	30	None	replace
162	[BUG]  [BUGGY]  solve(basicRow,  f.getValue(basicPos),  coefficients,  tableau);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicRow,  f.getValue(basicPos),  coefficients,  tableau);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicRow,  f.getValue(basicPos),  coefficients,  tableau);	  solve(basicRow,    f.getValue(basicPos),    coefficients);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
163	[BUG]  [BUGGY]  solve(coefficients,  f.getValue(basicPos),  baseRow);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(coefficients,  f.getValue(basicPos),  baseRow);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(coefficients,  f.getValue(basicPos),  baseRow);	  solve(basicRow,    f.getValue(basicPos),    coefficients);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
164	[BUG]  [BUGGY]  coefficients[i]  =(basicRow!=  null?  0  :  tableau.getEntry(basicRow,  j));  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[i]  =(basicRow!=  null?  0  :  tableau.getEntry(basicRow,  j));  [BUGGY]      }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[i]  =(basicRow!=  null?  0  :  tableau.getEntry(basicRow,  j));	  coefficients[i]    =(basicRow    ==    null?    0    :    tableau.getEntry(basicRow,    j));    	non-compiled	[CE]  	31	None	replace
165	[BUG]  [BUGGY]  coefficients[i]  =(baseRow  ==  null?  0  :  tableau.getEntry(basicRow,  j));  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[i]  =(baseRow  ==  null?  0  :  tableau.getEntry(basicRow,  j));  [BUGGY]      }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[i]  =(baseRow  ==  null?  0  :  tableau.getEntry(basicRow,  j));	  coefficients[i]    =(basicRow    ==    null?    0    :    tableau.getEntry(basicRow,    j));    	non-compiled	[CE]  	31	None	replace
166	[BUG]  [BUGGY]  coefficients[j]  =(basicRow  ==  null?  0  :  tableau.getValue(basicRow),  j);  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[j]  =(basicRow  ==  null?  0  :  tableau.getValue(basicRow),  j);  [BUGGY]      }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[j]  =(basicRow  ==  null?  0  :  tableau.getValue(basicRow),  j);	  coefficients[j]    =(basicRow    ==    null?    0    :    basicRow.getValue(basicRow),    j);    	non-compiled	[CE]  	21	None	replace
167	[BUG]  [BUGGY]  coefficients[j]  =(basicRow!=  null?  0  :  tableau.getValue(basicRow),  j);  [CE]  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[j]  =(basicRow!=  null?  0  :  tableau.getValue(basicRow),  j);  [BUGGY]      }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[j]  =(basicRow!=  null?  0  :  tableau.getValue(basicRow),  j);	  coefficients[j]    =(basicRow    ==    null?    0    :    basicRow.getValue(basicRow),    j);    	non-compiled	[CE]  	21	None	replace
168	[BUG]  [BUGGY]  double  coefficients[]  =  baseRow.getValue(basicRow,  j);  [CE]  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  double  coefficients[]  =  baseRow.getValue(basicRow,  j);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	double  coefficients[]  =  baseRow.getValue(basicRow,  j);	  double    coefficients[]    =    tableau.getValue(basicRow,    j);    	non-compiled	[CE]  	4	None	replace
169	[BUG]  [BUGGY]  solve(basicRow,  tableau.getValue(basicRow),  coefficients);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicRow,  tableau.getValue(basicRow),  coefficients);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicRow,  tableau.getValue(basicRow),  coefficients);	  solve(basicRow,    tableau.getValue(basicRow));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
170	[BUG]  [BUGGY]  coefficients[i]  =(basicRow!=  null?  0  :  tableau.getValue(basicRow,  j));  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[i]  =(basicRow!=  null?  0  :  tableau.getValue(basicRow,  j));  [BUGGY]      }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[i]  =(basicRow!=  null?  0  :  tableau.getValue(basicRow,  j));	  coefficients[i]    =(basicRow    ==    null?    0    :    basicRow.getValue(basicRow,    j));    	non-compiled	[CE]  	5	None	replace
171	[BUG]  [BUGGY]  f.setValue(basicRow,  coefficients[j]  -  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  f.setValue(basicRow,  coefficients[j]  -  1);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	f.setValue(basicRow,  coefficients[j]  -  1);	  f.setValue(basicRow,    coefficients[j]);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
172	[BUG]  [BUGGY]  f.setValue(basicRow,  coefficients[j]  +  1);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  f.setValue(basicRow,  coefficients[j]  +  1);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	f.setValue(basicRow,  coefficients[j]  +  1);	  f.setValue(basicRow,    coefficients[j]);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
173	[BUG]  [BUGGY]  f.setValue(basicRow,  coefficients[j]  -  basicRow);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  f.setValue(basicRow,  coefficients[j]  -  basicRow);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	f.setValue(basicRow,  coefficients[j]  -  basicRow);	  f.setValue(basicRow,    coefficients[j]);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
174	[BUG]  [BUGGY]  solve(basicPos,  tableau.getValue(basicRow));  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicPos,  tableau.getValue(basicRow));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicPos,  tableau.getValue(basicRow));	  solve(basicRow,    tableau.getValue(basicPos));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
175	[BUG]  [BUGGY]  solve(basicPos,  table.getValue(basicRow));  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicPos,  table.getValue(basicRow));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicPos,  table.getValue(basicRow));	  solve(basicRow,    tableau.getValue(basicPos));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
176	[BUG]  [BUGGY]  solve(basicPos,  graph.getValue(basicRow));  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicPos,  graph.getValue(basicRow));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicPos,  graph.getValue(basicRow));	  solve(basicRow,    tableau.getValue(basicPos));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
177	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)basicRow).setValue(basicRow,  coefficients[i]);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)basicRow).setValue(basicRow,  coefficients[i]);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)basicRow).setValue(basicRow,  coefficients[i]);	  ((    LinearObjectiveFunction)basicRow).setValue(coefficients[i]);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
178	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)basicRow).setValue(coefficients[j]);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)basicRow).setValue(coefficients[j]);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)basicRow).setValue(coefficients[j]);	  ((    LinearObjectiveFunction)basicRow).setValue(coefficients[i]);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
179	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)basicRow).setValue(basicRow,  coefficients[j]);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)basicRow).setValue(basicRow,  coefficients[j]);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)basicRow).setValue(basicRow,  coefficients[j]);	  ((    LinearObjectiveFunction)basicRow).setValue(coefficients[i]);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
180	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)basicRow).setValue(basicRow[j]);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)basicRow).setValue(basicRow[j]);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)basicRow).setValue(basicRow[j]);	  ((    LinearObjectiveFunction)basicRow).setValue(coefficients[i]);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
181	[BUG]  [BUGGY]  coefficients[i]  =  (j  ==  0?  0  :  tableau.getEntry(basicRow,  j));  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[i]  =  (j  ==  0?  0  :  tableau.getEntry(basicRow,  j));  [BUGGY]      }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[i]  =  (j  ==  0?  0  :  tableau.getEntry(basicRow,  j));	  coefficients[i]    =    j    ==    0?    0    :    tableau.getEntry(basicRow,    j));    	non-compiled	[CE]  	55	None	replace
182	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setCoefficient(basicRow,  j);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setCoefficient(basicRow,  j);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setCoefficient(basicRow,  j);	  ((    LinearObjectiveFunction)tableau).setCoefficient(basicRow,    coefficients);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
183	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setCoefficient(basicRow,  coefficients.length);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setCoefficient(basicRow,  coefficients.length);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setCoefficient(basicRow,  coefficients.length);	  ((    LinearObjectiveFunction)tableau).setCoefficient(basicRow,    coefficients);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
184	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setCoefficient(basicRow,  coefficients[j]);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setCoefficient(basicRow,  coefficients[j]);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setCoefficient(basicRow,  coefficients[j]);	  ((    LinearObjectiveFunction)tableau).setCoefficient(basicRow,    coefficients);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
185	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setCoefficient(basicRow,  coefficients,  mostNegative);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setCoefficient(basicRow,  coefficients,  mostNegative);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setCoefficient(basicRow,  coefficients,  mostNegative);	  ((    LinearObjectiveFunction)tableau).setCoefficient(basicRow,    coefficients);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
186	[BUG]  [BUGGY]  coefficients[i]  =(basicRow  ==  null?  0  :  basicRow.getValue(j));  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[i]  =(basicRow  ==  null?  0  :  basicRow.getValue(j));  [BUGGY]      }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[i]  =(basicRow  ==  null?  0  :  basicRow.getValue(j));	  coefficients[i]    =(basicRow    ==    null?    0    :    basicRow.getValue(basicRow));    	non-compiled	[CE]  ']'  expected	6	None	replace
187	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setCoefficients(basicRow,  mostNegative);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setCoefficients(basicRow,  mostNegative);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setCoefficients(basicRow,  mostNegative);	  ((    LinearObjectiveFunction)tableau).setCoefficients(basicRow);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
188	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)basicRow).setBasicRow(i);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)basicRow).setBasicRow(i);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)basicRow).setBasicRow(i);	  ((    LinearObjectiveFunction)basicRow).setBasicRow(j);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
189	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)basicRow).setBasicRow(j  -  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)basicRow).setBasicRow(j  -  1);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)basicRow).setBasicRow(j  -  1);	  ((    LinearObjectiveFunction)basicRow).setBasicRow(j);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
190	[BUG]  [BUGGY]  solve(basicRow,  f.getValue(basicPos)+  j);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicRow,  f.getValue(basicPos)+  j);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicRow,  f.getValue(basicPos)+  j);	  solve(basicRow,    f.getValue(basicPos)+    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
191	[BUG]  [BUGGY]  solve(basicRow,  f.getValue(basicPos)+  i);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicRow,  f.getValue(basicPos)+  i);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicRow,  f.getValue(basicPos)+  i);	  solve(basicRow,    f.getValue(basicPos)+    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
192	[BUG]  [BUGGY]  solve(basicRow,  f.getValue(basicColumn)+  i);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicRow,  f.getValue(basicColumn)+  i);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicRow,  f.getValue(basicColumn)+  i);	  solve(basicRow,    f.getValue(basicColumn)+    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
193	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicColumns,  0));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicColumns,  0));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicColumns,  0));	  ((    LinearObjectiveFunction)tableau).setValue(basicRow,    f.getValue(basicColumns));    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
194	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicColumns,  j));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicColumns,  j));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicColumns,  j));	  ((    LinearObjectiveFunction)tableau).setValue(basicRow,    f.getValue(basicColumns));    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
195	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicColumns,  i));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicColumns,  i));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicColumns,  i));	  ((    LinearObjectiveFunction)tableau).setValue(basicRow,    f.getValue(basicColumns));    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
196	[BUG]  [BUGGY]  solve(basicRow,  f.getValue(basicPos),  coefficients[i]));  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicRow,  f.getValue(basicPos),  coefficients[i]));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicRow,  f.getValue(basicPos),  coefficients[i]));	  solve(basicRow,    f.getValue(basicPos)+    1));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
197	[BUG]  [BUGGY]  solve(basicRow,  f.getValue(basicRow)+  i);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicRow,  f.getValue(basicRow)+  i);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicRow,  f.getValue(basicRow)+  i);	  solve(basicRow,    f.getValue(basicRow)+    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
198	[BUG]  [BUGGY]  solve(basicRow,  f.getValue(basicRow)+  1  +  j);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicRow,  f.getValue(basicRow)+  1  +  j);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicRow,  f.getValue(basicRow)+  1  +  j);	  solve(basicRow,    f.getValue(basicRow)+    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
199	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)basicRow).setValue(f.getValue(basicRow));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)basicRow).setValue(f.getValue(basicRow));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)basicRow).setValue(f.getValue(basicRow));	  ((    LinearObjectiveFunction)basicRow).setValue(coefficients[i]);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
200	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)basicRow).setValue(f,  coefficients[i]);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)basicRow).setValue(f,  coefficients[i]);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)basicRow).setValue(f,  coefficients[i]);	  ((    LinearObjectiveFunction)basicRow).setValue(coefficients[i]);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
201	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setBasicRow(basicRow,  basicRow);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setBasicRow(basicRow,  basicRow);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setBasicRow(basicRow,  basicRow);	  ((    LinearObjectiveFunction)tableau).setBasicRow(basicRow,    j);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
202	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setCoefficients(basicRow,  0,  coefficients);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setCoefficients(basicRow,  0,  coefficients);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setCoefficients(basicRow,  0,  coefficients);	  ((    LinearObjectiveFunction)tableau).setCoefficients(basicRow,    coefficients);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
203	[BUG]  [BUGGY]  f.setValue(basicRow,  0,  coefficients[j]);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  f.setValue(basicRow,  0,  coefficients[j]);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	f.setValue(basicRow,  0,  coefficients[j]);	  f.setValue(basicRow,    coefficients[j]);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
204	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)factory).setValue(basicRow,  f.getValue(basicRow));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)factory).setValue(basicRow,  f.getValue(basicRow));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)factory).setValue(basicRow,  f.getValue(basicRow));	  ((    LinearObjectiveFunction)factory).setValue(coefficients,    f.getValue(coefficients));    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
205	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)factory).setValue(basicRow,  f.getValue(basicColumn));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)factory).setValue(basicRow,  f.getValue(basicColumn));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)factory).setValue(basicRow,  f.getValue(basicColumn));	  ((    LinearObjectiveFunction)factory).setValue(coefficients,    f.getValue(coefficients));    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
206	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)factory).setValue(basicRow,  f.getValue(basicVar));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)factory).setValue(basicRow,  f.getValue(basicVar));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)factory).setValue(basicRow,  f.getValue(basicVar));	  ((    LinearObjectiveFunction)factory).setValue(coefficients,    f.getValue(coefficients));    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
207	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)factory).setValue(basicRow,  f.getValue(basicColumns));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)factory).setValue(basicRow,  f.getValue(basicColumns));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)factory).setValue(basicRow,  f.getValue(basicColumns));	  ((    LinearObjectiveFunction)factory).setValue(coefficients,    f.getValue(coefficients));    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
208	[BUG]  [BUGGY]  coefficients[i]  =(basicRow  ==  null?  0  :  tableau.getEntry(basicRow,  getRhsOffset()));  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[i]  =(basicRow  ==  null?  0  :  tableau.getEntry(basicRow,  getRhsOffset()));  [BUGGY]      }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[i]  =(basicRow  ==  null?  0  :  tableau.getEntry(basicRow,  getRhsOffset()));	  coefficients[i]    =(basicRow    ==    null?    0    :    tableau.getEntry(basicRow,    j));    	non-compiled	[CE]  ']'  expected	31	None	replace
209	[BUG]  [BUGGY]  ((  RealMatrix)tableau).setValue(basicRow,  f.getValue(basicRow,  j));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  RealMatrix)tableau).setValue(basicRow,  f.getValue(basicRow,  j));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  RealMatrix)tableau).setValue(basicRow,  f.getValue(basicRow,  j));	  ((    RealMatrix)tableau).setValue(basicRow,    coefficients[i]);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
210	[BUG]  [BUGGY]  ((  RealMatrix)tableau).setValue(basicRow,  coefficients[i],  mostNegative);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  RealMatrix)tableau).setValue(basicRow,  coefficients[i],  mostNegative);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  RealMatrix)tableau).setValue(basicRow,  coefficients[i],  mostNegative);	  ((    RealMatrix)tableau).setValue(basicRow,    coefficients[i]);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
211	[BUG]  [BUGGY]  ((  RealMatrix)tableau).setValue(basicRow,  j);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  RealMatrix)tableau).setValue(basicRow,  j);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  RealMatrix)tableau).setValue(basicRow,  j);	  ((    RealMatrix)tableau).setValue(basicRow,    coefficients[i]);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
212	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)basicRow).setValue(data,  f.getValue(basicRow));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)basicRow).setValue(data,  f.getValue(basicRow));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)basicRow).setValue(data,  f.getValue(basicRow));	  ((    LinearObjectiveFunction)basicRow).setValue(coefficients,    f.getValue(coefficients));    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
213	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicRow)+  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicRow)+  1);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicRow)+  1);	  ((    LinearObjectiveFunction)tableau).setValue(basicRow,    f.getValue(basicRow));    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
214	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicRow  +  1));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicRow  +  1));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicRow  +  1));	  ((    LinearObjectiveFunction)tableau).setValue(basicRow,    f.getValue(basicRow));    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
215	[BUG]  [BUGGY]  coefficients[j]  =(basicRow  ==  null?  0  :  tableau.getEntry(basicRow,  getRhsOffset()));  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[j]  =(basicRow  ==  null?  0  :  tableau.getEntry(basicRow,  getRhsOffset()));  [BUGGY]      }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[j]  =(basicRow  ==  null?  0  :  tableau.getEntry(basicRow,  getRhsOffset()));	  coefficients[j]    =(basicRow    ==    null?    0    :    tableau.getEntry(basicRow,    j));    	non-compiled	[CE]  ']'  expected	58	None	replace
216	[BUG]  [BUGGY]  coefficients[j]  =(basicRow  ==  null?  0  :  baseRow.getValue(basicRow),  j);  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[j]  =(basicRow  ==  null?  0  :  baseRow.getValue(basicRow),  j);  [BUGGY]      }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[j]  =(basicRow  ==  null?  0  :  baseRow.getValue(basicRow),  j);	  coefficients[j]    =(basicRow    ==    null?    0    :    basicRow.getValue(basicRow),    j);    	non-compiled	[CE]  ']'  expected	21	None	replace
217	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)basicRow).setCoefficients(coefficients,  mostNegative);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)basicRow).setCoefficients(coefficients,  mostNegative);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)basicRow).setCoefficients(coefficients,  mostNegative);	  ((    LinearObjectiveFunction)basicRow).setCoefficients(coefficients);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
218	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)basicRow).setCoefficients(values);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)basicRow).setCoefficients(values);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)basicRow).setCoefficients(values);	  ((    LinearObjectiveFunction)basicRow).setCoefficients(coefficients);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
219	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)basicRow).setCoefficients(buffered);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)basicRow).setCoefficients(buffered);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)basicRow).setCoefficients(buffered);	  ((    LinearObjectiveFunction)basicRow).setCoefficients(coefficients);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
220	[BUG]  [BUGGY]  solve(basicRow,  table.getValue(basicRow),  coefficients);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicRow,  table.getValue(basicRow),  coefficients);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicRow,  table.getValue(basicRow),  coefficients);	  solve(basicRow,    tableau.getValue(basicRow));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
221	[BUG]  [BUGGY]  coefficients[i]  =  tableau.getValue(basicRow,  j  +  1);  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[i]  =  tableau.getValue(basicRow,  j  +  1);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[i]  =  tableau.getValue(basicRow,  j  +  1);	  coefficients[i]    =    tableau.getValue(basicRow,    j);    	non-compiled	[CE]  ']'  expected	9	None	replace
222	[BUG]  [BUGGY]  coefficients[i]  =(basicRow  ==  null?  0  :  basicRow.getValue(basicRow),  j  +  1);  [CE]  ']'  expected  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[i]  =(basicRow  ==  null?  0  :  basicRow.getValue(basicRow),  j  +  1);  [BUGGY]      }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[i]  =(basicRow  ==  null?  0  :  basicRow.getValue(basicRow),  j  +  1);	  coefficients[i]    =(basicRow    ==    null?    0    :    basicRow.getValue(basicRow),    j);    	non-compiled	[CE]  ']'  expected	7	None	replace
223	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicColumn  +  1));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicColumn  +  1));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicColumn  +  1));	  ((    LinearObjectiveFunction)tableau).setValue(basicRow,    f.getValue(basicColumn));    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
224	[BUG]  [BUGGY]  coefficients[i]  =  baseRow  ==  null?  0  :  f.getValue(basicRow,  column);  [CE]  ']'  expected  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[i]  =  baseRow  ==  null?  0  :  f.getValue(basicRow,  column);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[i]  =  baseRow  ==  null?  0  :  f.getValue(basicRow,  column);	  coefficients[i]    =    f.getValue(basicRow,    column);    	non-compiled	[CE]  ']'  expected	11	None	replace
225	[BUG]  [BUGGY]  solve(basicRow,  f.getValue(basicRow),  coefficients,  type);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicRow,  f.getValue(basicRow),  coefficients,  type);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicRow,  f.getValue(basicRow),  coefficients,  type);	  solve(basicRow,    f.getValue(basicRow),    coefficients);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
226	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicPos,  j));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicPos,  j));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicPos,  j));	  ((    LinearObjectiveFunction)tableau).setValue(basicRow,    f.getValue(basicPos));    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
227	[BUG]  [BUGGY]  solve(basicRow,  f.getValue(basicRow),  i);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicRow,  f.getValue(basicRow),  i);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicRow,  f.getValue(basicRow),  i);	  solve(basicRow,    f.getValue(basicRow),    j);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
228	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).addValue(basicRow,  f,  coefficients[i]);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).addValue(basicRow,  f,  coefficients[i]);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).addValue(basicRow,  f,  coefficients[i]);	  ((    LinearObjectiveFunction)tableau).addValue(basicRow,    coefficients[i]);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
229	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).addValue(basicRow,  coefficients[i],  mostNegative);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).addValue(basicRow,  coefficients[i],  mostNegative);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).addValue(basicRow,  coefficients[i],  mostNegative);	  ((    LinearObjectiveFunction)tableau).addValue(basicRow,    coefficients[i]);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
230	[BUG]  [BUGGY]  coefficients[i]  =(basicRow  ==  null?  0  :  baseRow);  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[i]  =(basicRow  ==  null?  0  :  baseRow);  [BUGGY]      }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[i]  =(basicRow  ==  null?  0  :  baseRow);	  coefficients[i]    =    baseRow;    	non-compiled	[CE]  ']'  expected	30	None	replace
231	[BUG]  [BUGGY]  coefficients[i]  =  baseRow  ==  null?  0  :  baseRow.doubleValue();  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[i]  =  baseRow  ==  null?  0  :  baseRow.doubleValue();  [BUGGY]      }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[i]  =  baseRow  ==  null?  0  :  baseRow.doubleValue();	  coefficients[i]    =    baseRow;    	non-compiled	[CE]  ']'  expected	30	None	replace
232	[BUG]  [BUGGY]  coefficients[j]  =(basicRow  ==  null?  0  :  basicRow.getValue(basicRow)+  1);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[j]  =(basicRow  ==  null?  0  :  basicRow.getValue(basicRow)+  1);  [BUGGY]      }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[j]  =(basicRow  ==  null?  0  :  basicRow.getValue(basicRow)+  1);	  coefficients[j]    =(basicRow    ==    null?    0    :    basicRow.getValue(basicRow));    	non-compiled	[CE]  <identifier>  expected	20	None	replace
233	[BUG]  [BUGGY]  f.setValue(basicRow,  j  +  1,  coefficients);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  f.setValue(basicRow,  j  +  1,  coefficients);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	f.setValue(basicRow,  j  +  1,  coefficients);	  f.setValue(basicRow,    j    +    1);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
234	[BUG]  [BUGGY]  f.setValue(basicRow  *  j);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  f.setValue(basicRow  *  j);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	f.setValue(basicRow  *  j);	  f.setValue(basicRow    +    j);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
235	[BUG]  [BUGGY]  solve(basicRow,  f.getValue(basicColumn,  j),  tableau);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicRow,  f.getValue(basicColumn,  j),  tableau);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicRow,  f.getValue(basicColumn,  j),  tableau);	  solve(basicRow,    f.getValue(basicColumn,    j));    	non-compiled	[CE]  ')'  expected	73	None	replace
236	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setCoefficient(basicRow,  epsilon);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setCoefficient(basicRow,  epsilon);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setCoefficient(basicRow,  epsilon);	  ((    LinearObjectiveFunction)tableau).setCoefficient(basicRow,    coefficients);    	non-compiled	[CE]  ')'  expected	25	None	replace
237	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setCoefficient(basicRow,  0,  coefficients);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setCoefficient(basicRow,  0,  coefficients);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setCoefficient(basicRow,  0,  coefficients);	  ((    LinearObjectiveFunction)tableau).setCoefficient(basicRow,    coefficients);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
238	[BUG]  [BUGGY]  f.setValue(basicRow,  coefficients[i]  -  1);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  f.setValue(basicRow,  coefficients[i]  -  1);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	f.setValue(basicRow,  coefficients[i]  -  1);	  f.setValue(basicRow,    coefficients[i]);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
239	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)factory).setBasicRow(basicRow,  coefficients[i]);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)factory).setBasicRow(basicRow,  coefficients[i]);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)factory).setBasicRow(basicRow,  coefficients[i]);	  ((    LinearObjectiveFunction)factory).setValue(coefficients[i]);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
240	[BUG]  [BUGGY]  double  coefficients[]  =  tableau.getValue(basicRow,  i);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  double  coefficients[]  =  tableau.getValue(basicRow,  i);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	double  coefficients[]  =  tableau.getValue(basicRow,  i);	  double    coefficients[]    =    tableau.getValue(basicRow,    j);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
241	[BUG]  [BUGGY]  f.setValue(basicRow[0]);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  f.setValue(basicRow[0]);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	f.setValue(basicRow[0]);	  f.setValue(basicRow[j]);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
242	[BUG]  [BUGGY]  coefficients[j]  =(basicRow!=  null?  0  :  basicRow.getValue(basicRow,  j));  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[j]  =(basicRow!=  null?  0  :  basicRow.getValue(basicRow,  j));  [BUGGY]      }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[j]  =(basicRow!=  null?  0  :  basicRow.getValue(basicRow,  j));	  coefficients[j]    =(basicRow    ==    null?    0    :    basicRow.getValue(basicRow,    j));    	non-compiled	[CE]  ']'  expected	19	None	replace
243	[BUG]  [BUGGY]  coefficients[j]  =(basicRow!=  null?  0  :  basicRow.getValue(basicRow));  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[j]  =(basicRow!=  null?  0  :  basicRow.getValue(basicRow));  [BUGGY]      }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[j]  =(basicRow!=  null?  0  :  basicRow.getValue(basicRow));	  coefficients[j]    =(basicRow    ==    null?    0    :    basicRow.getValue(basicRow));    	non-compiled	[CE]  ']'  expected	20	None	replace
244	[BUG]  [BUGGY]  coefficients[i]  =  f.getValue(basicRow,  j)+  1;  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[i]  =  f.getValue(basicRow,  j)+  1;  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[i]  =  f.getValue(basicRow,  j)+  1;	  coefficients[i]    =    f.getValue(basicRow,    tableau);    	non-compiled	[CE]  ']'  expected	44	None	replace
245	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)factory).setValue(basicRow,  f.getValue(basicCoefficients));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)factory).setValue(basicRow,  f.getValue(basicCoefficients));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)factory).setValue(basicRow,  f.getValue(basicCoefficients));	  ((    LinearObjectiveFunction)factory).setValue(coefficients,    f.getValue(coefficients));    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
246	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)factory).setValue(basicRow,  f.getValue(basicPos));  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)factory).setValue(basicRow,  f.getValue(basicPos));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)factory).setValue(basicRow,  f.getValue(basicPos));	  ((    LinearObjectiveFunction)factory).setValue(coefficients,    f.getValue(coefficients));    	non-compiled	[CE]  <identifier>  expected	29	None	replace
247	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)basicRow).setBasicRow(basicRow,  basicRow);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)basicRow).setBasicRow(basicRow,  basicRow);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)basicRow).setBasicRow(basicRow,  basicRow);	  ((    LinearObjectiveFunction)basicRow).setBasicRow(basicRow);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
248	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setCoefficient(basicRow,  basicRow);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setCoefficient(basicRow,  basicRow);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setCoefficient(basicRow,  basicRow);	  ((    LinearObjectiveFunction)tableau).setCoefficient(basicRow,    coefficients);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
249	[BUG]  [BUGGY]  double  coefficients[]  =  graph.getValue(basicRow,  j)+  1;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  double  coefficients[]  =  graph.getValue(basicRow,  j)+  1;  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	double  coefficients[]  =  graph.getValue(basicRow,  j)+  1;	  double    coefficients[]    =    tableau.getValue(basicRow,    j);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
250	[BUG]  [BUGGY]  coefficients[i]  =  baseRow  ==  null?  0  :  baseRow.getValue(j);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[i]  =  baseRow  ==  null?  0  :  baseRow.getValue(j);  [BUGGY]      }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[i]  =  baseRow  ==  null?  0  :  baseRow.getValue(j);	  coefficients[i]    =    baseRow;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
251	[BUG]  [BUGGY]  solve(basicRow,  f.getValue(basicRow,  j  +  1));  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicRow,  f.getValue(basicRow,  j  +  1));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicRow,  f.getValue(basicRow,  j  +  1));	  solve(basicRow,    f.getValue(basicRow,    j));    	non-compiled	[CE]  <identifier>  expected	64	None	replace
252	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicVar,  f.getValue(basicRow));  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicVar,  f.getValue(basicRow));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setValue(basicVar,  f.getValue(basicRow));	  ((    LinearObjectiveFunction)tableau).setValue(basicRow,    f.getValue(basicVar));    	non-compiled	[CE]  <identifier>  expected	48	None	replace
253	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setCoefficients(basicRow,  basicRow);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setCoefficients(basicRow,  basicRow);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setCoefficients(basicRow,  basicRow);	  ((    LinearObjectiveFunction)tableau).setCoefficients(basicRow,    coefficients);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
254	[BUG]  [BUGGY]  coefficients[j]  =(basicRow!=  null?  0  :  baseRow.getValue(basicRow,  j));  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[j]  =(basicRow!=  null?  0  :  baseRow.getValue(basicRow,  j));  [BUGGY]      }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[j]  =(basicRow!=  null?  0  :  baseRow.getValue(basicRow,  j));	  coefficients[j]    =(basicRow    ==    null?    0    :    baseRow.getValue(basicRow,    j));    	non-compiled	[CE]  <identifier>  expected	75	None	replace
255	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicRow),  j);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicRow),  j);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicRow),  j);	  ((    LinearObjectiveFunction)tableau).setValue(basicRow,    f.getValue(basicRow));    	non-compiled	[CE]  <identifier>  expected	28	None	replace
256	[BUG]  [BUGGY]  coefficients[i]  =  tableau.getEntry(basicRow,  j);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[i]  =  tableau.getEntry(basicRow,  j);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[i]  =  tableau.getEntry(basicRow,  j);	  coefficients[i]    =    f.getValue(basicRow,    column);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
257	[BUG]  [BUGGY]  f.setValue(basicRow,  j  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  f.setValue(basicRow,  j  -  1);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	f.setValue(basicRow,  j  -  1);	  f.setValue(basicRow,    j    +    1);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
258	[BUG]  [BUGGY]  coefficients[j]  =(basicRow  ==  null?  0  :  tableau.getValue(basicRow,  j);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[j]  =(basicRow  ==  null?  0  :  tableau.getValue(basicRow,  j);  [BUGGY]      }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[j]  =(basicRow  ==  null?  0  :  tableau.getValue(basicRow,  j);	  coefficients[j]    =(basicRow    ==    null?    0    :    basicRow.getValue(basicRow),    j);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
259	[BUG]  [BUGGY]  coefficients[i]  =  tableau.getValue(basicRow,  j)+  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[i]  =  tableau.getValue(basicRow,  j)+  1;  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[i]  =  tableau.getValue(basicRow,  j)+  1;	  coefficients[i]    =    tableau.getValue(basicRow);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
260	[BUG]  [BUGGY]  coefficients[i]  =  tableau.getValue(basicRow,  j)-  1;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[i]  =  tableau.getValue(basicRow,  j)-  1;  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[i]  =  tableau.getValue(basicRow,  j)-  1;	  coefficients[i]    =    tableau.getValue(basicRow);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
261	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  coefficients[i],  j);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  coefficients[i],  j);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setValue(basicRow,  coefficients[i],  j);	  ((    LinearObjectiveFunction)tableau).setValue(basicRow,    coefficients[i]);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
262	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)basicRow).setValue(coefficients[i],  f.getValue(basicRow));  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)basicRow).setValue(coefficients[i],  f.getValue(basicRow));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)basicRow).setValue(coefficients[i],  f.getValue(basicRow));	  ((    LinearObjectiveFunction)basicRow).setValue(coefficients[i]);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
263	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)basicRow).setValue(coefficients[i],  basicRow);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)basicRow).setValue(coefficients[i],  basicRow);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)basicRow).setValue(coefficients[i],  basicRow);	  ((    LinearObjectiveFunction)basicRow).setValue(coefficients[i]);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
264	[BUG]  [BUGGY]  coefficients[i]  =(basicRow!=  null?  0  :  baseRow.getValue(basicRow,  j));  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[i]  =(basicRow!=  null?  0  :  baseRow.getValue(basicRow,  j));  [BUGGY]      }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[i]  =(basicRow!=  null?  0  :  baseRow.getValue(basicRow,  j));	  coefficients[i]    =(basicRow    ==    null?    0    :    baseRow.getValue(basicRow,    j));    	non-compiled	[CE]  <identifier>  expected	71	None	replace
265	[BUG]  [BUGGY]  solve(basicRow,  f.getValue(basicPos)/  1);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicRow,  f.getValue(basicPos)/  1);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicRow,  f.getValue(basicPos)/  1);	  solve(basicRow,    f.getValue(basicPos)+    1);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
266	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)basicRow).setCoefficients(basicRow,  coefficients);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)basicRow).setCoefficients(basicRow,  coefficients);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)basicRow).setCoefficients(basicRow,  coefficients);	  ((    LinearObjectiveFunction)basicRow).setCoefficients(coefficients);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
267	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)basicRow).setCoefficients(basicRow);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)basicRow).setCoefficients(basicRow);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)basicRow).setCoefficients(basicRow);	  ((    LinearObjectiveFunction)basicRow).setCoefficients(coefficients);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
268	[BUG]  [BUGGY]  solve(basicRow,  f.getValue(basicColumn,  j  +  1));  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(basicRow,  f.getValue(basicColumn,  j  +  1));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(basicRow,  f.getValue(basicColumn,  j  +  1));	  solve(basicRow,    f.getValue(basicColumn,    j));    	non-compiled	[CE]  <identifier>  expected	73	None	replace
269	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)basicRow).addValue(coefficients[i]);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)basicRow).addValue(coefficients[i]);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)basicRow).addValue(coefficients[i]);	  ((    LinearObjectiveFunction)tableau).addValue(basicRow,    coefficients[i]);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
270	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)basicRow).setValue(0,  f.getValue(basicRow));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)basicRow).setValue(0,  f.getValue(basicRow));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)basicRow).setValue(0,  f.getValue(basicRow));	  ((    LinearObjectiveFunction)basicRow).setValue(coefficients,    f.getValue(coefficients));    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
271	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)basicRow).setValue(coefficients,  graph.getValue(coefficients));  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)basicRow).setValue(coefficients,  graph.getValue(coefficients));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)basicRow).setValue(coefficients,  graph.getValue(coefficients));	  ((    LinearObjectiveFunction)basicRow).setValue(coefficients,    f.getValue(coefficients));    	non-compiled	[CE]  <identifier>  expected	27	None	replace
272	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setBasicRow(basicRow,  j  -  1);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setBasicRow(basicRow,  j  -  1);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setBasicRow(basicRow,  j  -  1);	  ((    LinearObjectiveFunction)tableau).setBasicRow(basicRow,    j);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
273	[BUG]  [BUGGY]  solve(coefficients,  f.getValue(basicColumn),  baseRow);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(coefficients,  f.getValue(basicColumn),  baseRow);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(coefficients,  f.getValue(basicColumn),  baseRow);	  solve(basicRow,    f.getValue(basicColumn),    coefficients);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
274	[BUG]  [BUGGY]  f.setValue(basicRow  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  f.setValue(basicRow  +  1);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	f.setValue(basicRow  +  1);	  f.setValue(basicRow    +    j);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
275	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)basicRow).setValue(coefficients);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)basicRow).setValue(coefficients);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)basicRow).setValue(coefficients);	  ((    LinearObjectiveFunction)tableau).setValue(basicRow);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
276	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)factory).setValue(basicRow);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)factory).setValue(basicRow);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)factory).setValue(basicRow);	  ((    LinearObjectiveFunction)tableau).setValue(basicRow);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
277	[BUG]  [BUGGY]  coefficients[i]  =(basicRow!=  null?  0  :  basicRow.getValue(basicRow));  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[i]  =(basicRow!=  null?  0  :  basicRow.getValue(basicRow));  [BUGGY]      }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[i]  =(basicRow!=  null?  0  :  basicRow.getValue(basicRow));	  coefficients[i]    =(basicRow    ==    null?    0    :    basicRow.getValue(basicRow));    	non-compiled	[CE]  <identifier>  expected	6	None	replace
278	[BUG]  [BUGGY]  coefficients[i]  =  graph.getValue(basicRow,  j);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[i]  =  graph.getValue(basicRow,  j);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[i]  =  graph.getValue(basicRow,  j);	  coefficients[i]    =    tableau.getValue(basicRow,    j);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
279	[BUG]  [BUGGY]  ((  RealMatrix)tableau).setValue(basicRow,  coefficients[i],  j);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  RealMatrix)tableau).setValue(basicRow,  coefficients[i],  j);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  RealMatrix)tableau).setValue(basicRow,  coefficients[i],  j);	  ((    RealMatrix)tableau).setValue(basicRow,    coefficients[i]);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
280	[BUG]  [BUGGY]  ((  RealMatrix)tableau).setValue(basicRow,  coefficients[i]  -  basicRow);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  RealMatrix)tableau).setValue(basicRow,  coefficients[i]  -  basicRow);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  RealMatrix)tableau).setValue(basicRow,  coefficients[i]  -  basicRow);	  ((    RealMatrix)tableau).setValue(basicRow,    coefficients[i]);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
281	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)factory).setValue(baselineRow,  coefficients[i]);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)factory).setValue(baselineRow,  coefficients[i]);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)factory).setValue(baselineRow,  coefficients[i]);	  ((    LinearObjectiveFunction)factory).setValue(coefficients[i]);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
282	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)basicRow).setValue(basicRow[i]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)basicRow).setValue(basicRow[i]);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)basicRow).setValue(basicRow[i]);	  ((    LinearObjectiveFunction)tableau).setValue(basicRow[i]);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
283	[BUG]  [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicColumns,  basicRow));  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  ((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicColumns,  basicRow));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	((  LinearObjectiveFunction)tableau).setValue(basicRow,  f.getValue(basicColumns,  basicRow));	  ((    LinearObjectiveFunction)tableau).setValue(basicRow,    f.getValue(basicColumns));    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
284	[BUG]  [BUGGY]  solve(coefficients,  f.getValue(basicRow),  coefficients);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  solve(coefficients,  f.getValue(basicRow),  coefficients);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	solve(coefficients,  f.getValue(basicRow),  coefficients);	  solve(basicRow,    f.getValue(basicRow),    coefficients);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
285	[BUG]  [BUGGY]  coefficients[i]  =(basicRow!=  null?  0  :  basicRow.getValue(basicRow,  j));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  if  (tableau.getEntry(basicRow,  j)  ==  1)  {      [BUGGY]  coefficients[i]  =(basicRow!=  null?  0  :  basicRow.getValue(basicRow,  j));  [BUGGY]      }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.5773502691896258	339	339	1	replace	coefficients[i]  =(basicRow!=  null?  0  :  basicRow.getValue(basicRow,  j));	  coefficients[i]    =(basicRow    ==    null?    0    :    basicRow.getValue(basicRow,    j));    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
