bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  row  -(int)MathUtils.equals(getEntry(i,  col),  0.0,  epsilon);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  row  -(int)MathUtils.equals(getEntry(i,  col),  0.0,  epsilon);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  row  -(int)MathUtils.equals(getEntry(i,  col),  0.0,  epsilon);	  return    this.baseRow    -(int)MathUtils.equals(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	81	None	replace
2	[BUG]  [BUGGY]  return  this.baseRow  -(int)MathUtils.equals(getEntry(i,  col),  0.0,  row);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  this.baseRow  -(int)MathUtils.equals(getEntry(i,  col),  0.0,  row);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  this.baseRow  -(int)MathUtils.equals(getEntry(i,  col),  0.0,  row);	  return    this.baseRow    -(int)MathUtils.equals(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	81	None	replace
3	[BUG]  [BUGGY]  return  this.baseRow  -(int)MathUtils.equals(getEntry(i,  col),  0.0,  height);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  this.baseRow  -(int)MathUtils.equals(getEntry(i,  col),  0.0,  height);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  this.baseRow  -(int)MathUtils.equals(getEntry(i,  col),  0.0,  height);	  return    this.baseRow    -(int)MathUtils.equals(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	81	None	replace
4	[BUG]  [BUGGY]  return  row  *(int)MathUtils.equals(getEntry(i,  col),  0.0,  epsilon);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  row  *(int)MathUtils.equals(getEntry(i,  col),  0.0,  epsilon);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  row  *(int)MathUtils.equals(getEntry(i,  col),  0.0,  epsilon);	  return    this.baseRow    -(int)MathUtils.equals(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	81	None	replace
5	[BUG]  [BUGGY]  row  =(Integer)MathUtils.equals(getEntry(i,  col),  0.0,  epsilon);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(Integer)MathUtils.equals(getEntry(i,  col),  0.0,  epsilon);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)MathUtils.equals(getEntry(i,  col),  0.0,  epsilon);	  row    =(int)MathUtils.equals(getEntry(i,    col),    0.0,    amount);    	non-compiled	[CE]  not  a  statement	44	None	replace
6	[BUG]  [BUGGY]  row  =(Integer)MathUtils.escape(getEntry(i,  col),  0.0,  sum);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(Integer)MathUtils.escape(getEntry(i,  col),  0.0,  sum);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)MathUtils.escape(getEntry(i,  col),  0.0,  sum);	  row    =(int)MathUtils.escape(getEntry(i,    col),    0.0,    sum);    	non-compiled	[CE]  not  a  statement	19	None	replace
7	[BUG]  [BUGGY]  row  =(Integer)MathUtils.escape(getEntry(i,  col),  1.0,  epsilon);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(Integer)MathUtils.escape(getEntry(i,  col),  1.0,  epsilon);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)MathUtils.escape(getEntry(i,  col),  1.0,  epsilon);	  row    =(Integer)MathUtils.escape(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	20	None	replace
8	[BUG]  [BUGGY]  row  =(Integer)MathUtils.escape(getEntry(i,  col),  0.0,  amount);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(Integer)MathUtils.escape(getEntry(i,  col),  0.0,  amount);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)MathUtils.escape(getEntry(i,  col),  0.0,  amount);	  row    =(Integer)MathUtils.escape(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	20	None	replace
9	[BUG]  [BUGGY]  row  =(Integer)MathUtils.escape(getEntry(i,  col),  0.0,  height);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(Integer)MathUtils.escape(getEntry(i,  col),  0.0,  height);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)MathUtils.escape(getEntry(i,  col),  0.0,  height);	  row    =(Integer)MathUtils.escape(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	20	None	replace
10	[BUG]  [BUGGY]  row  =(Integer)MathUtils.equals(getEntry(i,  col),  1.0,  epsilon  +  1);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(Integer)MathUtils.equals(getEntry(i,  col),  1.0,  epsilon  +  1);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)MathUtils.equals(getEntry(i,  col),  1.0,  epsilon  +  1);	  row    =(int)MathUtils.equals(getEntry(i,    col),    1.0,    epsilon    +    1);    	non-compiled	[CE]  not  a  statement	69	None	replace
11	[BUG]  [BUGGY]  row  =(Integer)Math.ceil(getEntry(i,  col),  0.0);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(Integer)Math.ceil(getEntry(i,  col),  0.0);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)Math.ceil(getEntry(i,  col),  0.0);	  row    =(int)Math.ceil(getEntry(i,    col),    0.0);    	non-compiled	[CE]  not  a  statement	47	None	replace
12	[BUG]  [BUGGY]  return  row.intValue()  -  col;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  row.intValue()  -  col;  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  row.intValue()  -  col;	  return    row.intValue();    	non-compiled	[CE]  not  a  statement	5	None	replace
13	[BUG]  [BUGGY]  return  row.intValue()  +  col;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  row.intValue()  +  col;  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  row.intValue()  +  col;	  return    row.intValue();    	non-compiled	[CE]  not  a  statement	5	None	replace
14	[BUG]  [BUGGY]  return  row.intValue()  /  col;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  row.intValue()  /  col;  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  row.intValue()  /  col;	  return    row.intValue();    	non-compiled	[CE]  not  a  statement	5	None	replace
15	[BUG]  [BUGGY]  return(Integer)MathUtils.equals(getEntry(i,  col),  0.0,  epsilon);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(Integer)MathUtils.equals(getEntry(i,  col),  0.0,  epsilon);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(Integer)MathUtils.equals(getEntry(i,  col),  0.0,  epsilon);	  return(int)MathUtils.equals(getEntry(i,    col),    0.0,    row);    	non-compiled	[CE]  not  a  statement	1	None	replace
16	[BUG]  [BUGGY]  return(int)MathUtils.equals(getEntry(i,  col),  0.0,  row,  epsilon);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(int)MathUtils.equals(getEntry(i,  col),  0.0,  row,  epsilon);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)MathUtils.equals(getEntry(i,  col),  0.0,  row,  epsilon);	  return(int)MathUtils.equals(getEntry(i,    col),    0.0,    row);    	non-compiled	[CE]  not  a  statement	1	None	replace
17	[BUG]  [BUGGY]  row  =(int)Math.rint(col);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)Math.rint(col);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.rint(col);	  row    =(int)Math.floor(epsilon);    	non-compiled	[CE]  not  a  statement	66	None	replace
18	[BUG]  [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  0.0,  height,  epsilon);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  0.0,  height,  epsilon);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.ceil(getEntry(i,  col),  0.0,  height,  epsilon);	  row    =(int)Math.ceil(getEntry(i,    col),    0.0,    epsilon,    height);    	non-compiled	[CE]  not  a  statement	78	None	replace
19	[BUG]  [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  0.01,  epsilon,  height);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  0.01,  epsilon,  height);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.ceil(getEntry(i,  col),  0.01,  epsilon,  height);	  row    =(int)Math.ceil(getEntry(i,    col),    0.0,    epsilon,    height);    	non-compiled	[CE]  not  a  statement	78	None	replace
20	[BUG]  [BUGGY]  row  =(Integer)Math.ceil(getEntry(i,  col),  0.0,  epsilon,  height);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(Integer)Math.ceil(getEntry(i,  col),  0.0,  epsilon,  height);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)Math.ceil(getEntry(i,  col),  0.0,  epsilon,  height);	  row    =(int)Math.ceil(getEntry(i,    col),    0.0,    epsilon,    height);    	non-compiled	[CE]  not  a  statement	78	None	replace
21	[BUG]  [BUGGY]  return(int)MathUtils.equals(getEntry(row,  col),  0.0,  sum);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(int)MathUtils.equals(getEntry(row,  col),  0.0,  sum);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)MathUtils.equals(getEntry(row,  col),  0.0,  sum);	  return(int)MathUtils.equals(getEntry(row,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	50	None	replace
22	[BUG]  [BUGGY]  return(int)MathUtils.equals(getEntry(row,  col),  0.0,  this.sum);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(int)MathUtils.equals(getEntry(row,  col),  0.0,  this.sum);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)MathUtils.equals(getEntry(row,  col),  0.0,  this.sum);	  return(int)MathUtils.equals(getEntry(row,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	50	None	replace
23	[BUG]  [BUGGY]  return(int)MathUtils.equals(getEntry(row,  col),  1.0,  sum);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(int)MathUtils.equals(getEntry(row,  col),  1.0,  sum);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)MathUtils.equals(getEntry(row,  col),  1.0,  sum);	  return(int)MathUtils.equals(getEntry(row,    col),    1.0,    epsilon);    	non-compiled	[CE]  not  a  statement	57	None	replace
24	[BUG]  [BUGGY]  return(int)this.baseRow  +  i;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(int)this.baseRow  +  i;  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)this.baseRow  +  i;	  return(int)this.baseRow;    	non-compiled	[CE]  not  a  statement	25	None	replace
25	[BUG]  [BUGGY]  return(int)this.baseRow  +  col;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(int)this.baseRow  +  col;  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)this.baseRow  +  col;	  return(int)this.baseRow;    	non-compiled	[CE]  not  a  statement	25	None	replace
26	[BUG]  [BUGGY]  return(int)this.baseRow  +  1;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(int)this.baseRow  +  1;  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)this.baseRow  +  1;	  return(int)this.baseRow;    	non-compiled	[CE]  not  a  statement	25	None	replace
27	[BUG]  [BUGGY]  row  =(Integer)Math.ceil(getEntry(i,  col),  1.0,  epsilon);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(Integer)Math.ceil(getEntry(i,  col),  1.0,  epsilon);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)Math.ceil(getEntry(i,  col),  1.0,  epsilon);	  row    =(int)Math.ceil(getEntry(i,    col),    1.0,    epsilon);    	non-compiled	[CE]  not  a  statement	61	None	replace
28	[BUG]  [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  1.0,  Math.pow(10,  epsilon));  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  1.0,  Math.pow(10,  epsilon));  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.ceil(getEntry(i,  col),  1.0,  Math.pow(10,  epsilon));	  row    =(int)Math.ceil(getEntry(i,    col),    1.0,    epsilon);    	non-compiled	[CE]  not  a  statement	61	None	replace
29	[BUG]  [BUGGY]  return  row  <  =  0?  0  :  col;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  row  <  =  0?  0  :  col;  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  row  <  =  0?  0  :  col;	  return    row    <    =    0?    0    :    row;    	non-compiled	[CE]  not  a  statement	75	None	replace
30	[BUG]  [BUGGY]  return  row  <  0?  0  :  col;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  row  <  0?  0  :  col;  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  row  <  0?  0  :  col;	  return    row    <    =    0?    0    :    row;    	non-compiled	[CE]  not  a  statement	75	None	replace
31	[BUG]  [BUGGY]  row  =(Integer)MathUtils.equals(getEntry(i,  col),  1.0);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(Integer)MathUtils.equals(getEntry(i,  col),  1.0);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)MathUtils.equals(getEntry(i,  col),  1.0);	  row    =(Integer)MathUtils.equals(getEntry(i,    col),    0.0);    	non-compiled	[CE]  not  a  statement	23	None	replace
32	[BUG]  [BUGGY]  row  =(int)MathUtils.escape(getEntry(i,  col),  1.0,  sum);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.escape(getEntry(i,  col),  1.0,  sum);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.escape(getEntry(i,  col),  1.0,  sum);	  row    =(int)MathUtils.escape(getEntry(i,    col),    1.0,    epsilon);    	non-compiled	[CE]  not  a  statement	52	None	replace
33	[BUG]  [BUGGY]  row  =(Integer)Math.floor(i);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(Integer)Math.floor(i);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)Math.floor(i);	  row    =(int)Math.floor(i);    	non-compiled	[CE]  not  a  statement	39	None	replace
34	[BUG]  [BUGGY]  row  =(Integer)Math.ceil(getEntry(i,  col),  0);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(Integer)Math.ceil(getEntry(i,  col),  0);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)Math.ceil(getEntry(i,  col),  0);	  row    =(Integer)Math.ceil(getEntry(i,    col),    epsilon);    	non-compiled	[CE]  not  a  statement	48	None	replace
35	[BUG]  [BUGGY]  row  =(Integer)Math.ceil(getEntry(i,  col),  sum);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(Integer)Math.ceil(getEntry(i,  col),  sum);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)Math.ceil(getEntry(i,  col),  sum);	  row    =(Integer)Math.ceil(getEntry(i,    col),    epsilon);    	non-compiled	[CE]  not  a  statement	48	None	replace
36	[BUG]  [BUGGY]  return(Integer)MathUtils.equals(getEntry(i,  col),  1.0,  epsilon);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(Integer)MathUtils.equals(getEntry(i,  col),  1.0,  epsilon);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(Integer)MathUtils.equals(getEntry(i,  col),  1.0,  epsilon);	  return(int)MathUtils.equals(getEntry(i,    col),    1.0,    row);    	non-compiled	[CE]  not  a  statement	17	None	replace
37	[BUG]  [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  0,  epsilon  *  1);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  0,  epsilon  *  1);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.equals(getEntry(i,  col),  0,  epsilon  *  1);	  row    =(int)MathUtils.equals(getEntry(i,    col),    0,    epsilon    +    1);    	non-compiled	[CE]  not  a  statement	60	None	replace
38	[BUG]  [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  0,  epsilon);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  0,  epsilon);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.ceil(getEntry(i,  col),  0,  epsilon);	  row    =(int)Math.ceil(getEntry(i,    col),    0);    	non-compiled	[CE]  not  a  statement	49	None	replace
39	[BUG]  [BUGGY]  row  =(Integer)Math.floor(getEntry(i,  col),  0.0,  height);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(Integer)Math.floor(getEntry(i,  col),  0.0,  height);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)Math.floor(getEntry(i,  col),  0.0,  height);	  row    =(int)Math.floor(getEntry(i,    col),    0.0,    height);    	non-compiled	[CE]  not  a  statement	32	None	replace
40	[BUG]  [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  1.0,  height);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  1.0,  height);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.floor(getEntry(i,  col),  1.0,  height);	  row    =(int)Math.floor(getEntry(i,    col),    0.0,    height);    	non-compiled	[CE]  not  a  statement	32	None	replace
41	[BUG]  [BUGGY]  return  row  +  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  row  +  1;  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  row  +  1;	  return    i    +    1;    	non-compiled	[CE]  not  a  statement	8	None	replace
42	[BUG]  [BUGGY]  return  i  +  2;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  i  +  2;  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  i  +  2;	  return    i    +    1;    	non-compiled	[CE]  not  a  statement	8	None	replace
43	[BUG]  [BUGGY]  return  col  +  1;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  col  +  1;  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  col  +  1;	  return    i    +    1;    	non-compiled	[CE]  not  a  statement	8	None	replace
44	[BUG]  [BUGGY]  row  =(Integer)MathUtils.equals(getEntry(i,  col),  1.0,  sum);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(Integer)MathUtils.equals(getEntry(i,  col),  1.0,  sum);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)MathUtils.equals(getEntry(i,  col),  1.0,  sum);	  row    =(Integer)MathUtils.equals(getEntry(i,    col),    1.0,    epsilon);    	non-compiled	[CE]  not  a  statement	28	None	replace
45	[BUG]  [BUGGY]  row  =(Integer)MathUtils.equals(getEntry(i,  col),  1.0,  height);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(Integer)MathUtils.equals(getEntry(i,  col),  1.0,  height);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)MathUtils.equals(getEntry(i,  col),  1.0,  height);	  row    =(Integer)MathUtils.equals(getEntry(i,    col),    1.0,    epsilon);    	non-compiled	[CE]  not  a  statement	28	None	replace
46	[BUG]  [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  coefficient,  epsilon,  0.0);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  coefficient,  epsilon,  0.0);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.equals(getEntry(i,  col),  coefficient,  epsilon,  0.0);	  row    =(int)MathUtils.equals(getEntry(i,    col),    epsilon,    0.0);    	non-compiled	[CE]  not  a  statement	55	None	replace
47	[BUG]  [BUGGY]  row  =(Integer)Math.floor(getEntry(i,  col),  0.0,  epsilon,  height);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(Integer)Math.floor(getEntry(i,  col),  0.0,  epsilon,  height);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)Math.floor(getEntry(i,  col),  0.0,  epsilon,  height);	  row    =(int)Math.floor(getEntry(i,    col),    0.0,    epsilon,    height);    	non-compiled	[CE]  not  a  statement	80	None	replace
48	[BUG]  [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  0.01,  epsilon,  height);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  0.01,  epsilon,  height);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.floor(getEntry(i,  col),  0.01,  epsilon,  height);	  row    =(int)Math.floor(getEntry(i,    col),    0.0,    epsilon,    height);    	non-compiled	[CE]  not  a  statement	80	None	replace
49	[BUG]  [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  0.0,  height,  epsilon);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  0.0,  height,  epsilon);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.floor(getEntry(i,  col),  0.0,  height,  epsilon);	  row    =(int)Math.floor(getEntry(i,    col),    0.0,    epsilon,    height);    	non-compiled	[CE]  not  a  statement	80	None	replace
50	[BUG]  [BUGGY]  return(int)(MathUtils.equals(getEntry(i,  col),  0.0,  epsilon)));  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(int)(MathUtils.equals(getEntry(i,  col),  0.0,  epsilon)));  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)(MathUtils.equals(getEntry(i,  col),  0.0,  epsilon)));	  return(int)(MathUtils.equals(getEntry(i,    col),    0.0,    Math.abs(col)));    	non-compiled	[CE]  not  a  statement	13	None	replace
51	[BUG]  [BUGGY]  return(int)(MathUtils.equals(getEntry(i,  col),  0.0,  Math.abs(epsilon)));  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(int)(MathUtils.equals(getEntry(i,  col),  0.0,  Math.abs(epsilon)));  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)(MathUtils.equals(getEntry(i,  col),  0.0,  Math.abs(epsilon)));	  return(int)(MathUtils.equals(getEntry(i,    col),    0.0,    Math.abs(col)));    	non-compiled	[CE]  not  a  statement	13	None	replace
52	[BUG]  [BUGGY]  return(int)(MathUtils.equals(getEntry(i,  col),  1.0,  Math.abs(col)));  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(int)(MathUtils.equals(getEntry(i,  col),  1.0,  Math.abs(col)));  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)(MathUtils.equals(getEntry(i,  col),  1.0,  Math.abs(col)));	  return(int)(MathUtils.equals(getEntry(i,    col),    0.0,    Math.abs(col)));    	non-compiled	[CE]  not  a  statement	13	None	replace
53	[BUG]  [BUGGY]  row  =(Integer)MathUtils.escape(getEntry(i,  col),  0.0,  this.value);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(Integer)MathUtils.escape(getEntry(i,  col),  0.0,  this.value);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)MathUtils.escape(getEntry(i,  col),  0.0,  this.value);	  row    =(int)MathUtils.escape(getEntry(i,    col),    0.0,    this.value);    	non-compiled	[CE]  not  a  statement	71	None	replace
54	[BUG]  [BUGGY]  row  =(int)MathUtils.escape(getEntry(i,  col),  0.0,  this.value,  epsilon);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.escape(getEntry(i,  col),  0.0,  this.value,  epsilon);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.escape(getEntry(i,  col),  0.0,  this.value,  epsilon);	  row    =(int)MathUtils.escape(getEntry(i,    col),    0.0,    this.value);    	non-compiled	[CE]  not  a  statement	71	None	replace
55	[BUG]  [BUGGY]  return(int)MathUtils.equals(getEntry(i,  col),  0,  this.sum);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(int)MathUtils.equals(getEntry(i,  col),  0,  this.sum);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)MathUtils.equals(getEntry(i,  col),  0,  this.sum);	  return(int)MathUtils.equals(getEntry(i,    col),    0.0,    this.sum);    	non-compiled	[CE]  not  a  statement	4	None	replace
56	[BUG]  [BUGGY]  return(int)(MathUtils.equals(getEntry(i,  col),  1.0,  row));  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(int)(MathUtils.equals(getEntry(i,  col),  1.0,  row));  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)(MathUtils.equals(getEntry(i,  col),  1.0,  row));	  return(int)(MathUtils.equals(getEntry(i,    col),    1.0,    epsilon));    	non-compiled	[CE]  not  a  statement	12	None	replace
57	[BUG]  [BUGGY]  return(int)(MathUtils.equals(getEntry(i,  col),  1.0,  sum));  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(int)(MathUtils.equals(getEntry(i,  col),  1.0,  sum));  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)(MathUtils.equals(getEntry(i,  col),  1.0,  sum));	  return(int)(MathUtils.equals(getEntry(i,    col),    1.0,    epsilon));    	non-compiled	[CE]  not  a  statement	12	None	replace
58	[BUG]  [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  0.0,  amount);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  0.0,  amount);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.floor(getEntry(i,  col),  0.0,  amount);	  row    =(int)Math.floor(getEntry(i,    col),    0.0,    sum);    	non-compiled	[CE]  not  a  statement	59	None	replace
59	[BUG]  [BUGGY]  row  =(Integer)MathUtils.equals(getEntry(i,  col),  0,  0);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(Integer)MathUtils.equals(getEntry(i,  col),  0,  0);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)MathUtils.equals(getEntry(i,  col),  0,  0);	  row    =(int)MathUtils.equals(getEntry(i,    col),    0,    0);    	non-compiled	[CE]  not  a  statement	37	None	replace
60	[BUG]  [BUGGY]  row  =(Integer)MathUtils.eq(getEntry(i,  col),  0.0,  sum);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(Integer)MathUtils.eq(getEntry(i,  col),  0.0,  sum);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)MathUtils.eq(getEntry(i,  col),  0.0,  sum);	  row    =(Integer)MathUtils.eq(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	15	None	replace
61	[BUG]  [BUGGY]  row  =(Integer)MathUtils.eq(getEntry(i,  col),  0.0,  amount);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(Integer)MathUtils.eq(getEntry(i,  col),  0.0,  amount);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)MathUtils.eq(getEntry(i,  col),  0.0,  amount);	  row    =(Integer)MathUtils.eq(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	15	None	replace
62	[BUG]  [BUGGY]  row  =(Integer)MathUtils.eq(getEntry(i,  col),  0.0,  this.col);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(Integer)MathUtils.eq(getEntry(i,  col),  0.0,  this.col);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)MathUtils.eq(getEntry(i,  col),  0.0,  this.col);	  row    =(Integer)MathUtils.eq(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	15	None	replace
63	[BUG]  [BUGGY]  row  =(int)MathUtils.eq(getEntry(i,  col),  1.0,  sum);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.eq(getEntry(i,  col),  1.0,  sum);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.eq(getEntry(i,  col),  1.0,  sum);	  row    =(int)MathUtils.eq(getEntry(i,    col),    0.0,    sum);    	non-compiled	[CE]  not  a  statement	14	None	replace
64	[BUG]  [BUGGY]  return(int)MathUtils.equals(getEntry(i,  col),  0.0,  field,  epsilon);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(int)MathUtils.equals(getEntry(i,  col),  0.0,  field,  epsilon);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)MathUtils.equals(getEntry(i,  col),  0.0,  field,  epsilon);	  return(int)MathUtils.equals(getEntry(i,    col),    0.0,    field);    	non-compiled	[CE]  not  a  statement	3	None	replace
65	[BUG]  [BUGGY]  return  row  -  i;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  row  -  i;  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  row  -  i;	  return    this.baseRow    -    i;    	non-compiled	[CE]  not  a  statement	27	None	replace
66	[BUG]  [BUGGY]  return  this.baseRow  -  i  +  1;  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  this.baseRow  -  i  +  1;  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  this.baseRow  -  i  +  1;	  return    this.baseRow    -    i;    	non-compiled	[CE]  not  a  statement	27	None	replace
67	[BUG]  [BUGGY]  return  row  -  this.baseRow;  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  row  -  this.baseRow;  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  row  -  this.baseRow;	  return    this.baseRow    -    i;    	non-compiled	[CE]  not  a  statement	27	None	replace
68	[BUG]  [BUGGY]  return  i  -  this.baseRow;  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  i  -  this.baseRow;  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  i  -  this.baseRow;	  return    this.baseRow    -    i;    	non-compiled	[CE]  not  a  statement	27	None	replace
69	[BUG]  [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  0.0,  height  +  1);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  0.0,  height  +  1);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.equals(getEntry(i,  col),  0.0,  height  +  1);	  row    =(int)MathUtils.equals(getEntry(i,    col),    0.0,    epsilon    +    1);    	non-compiled	[CE]  not  a  statement	77	None	replace
70	[BUG]  [BUGGY]  row  =(Integer)Math.floor(getEntry(i,  col),  1.0,  epsilon);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(Integer)Math.floor(getEntry(i,  col),  1.0,  epsilon);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)Math.floor(getEntry(i,  col),  1.0,  epsilon);	  row    =(int)Math.floor(getEntry(i,    col),    1.0,    epsilon);    	non-compiled	[CE]  not  a  statement	79	None	replace
71	[BUG]  [BUGGY]  return  row  +  this.baseRow;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  row  +  this.baseRow;  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  row  +  this.baseRow;	  return    this.baseRow    +    i;    	non-compiled	[CE]  not  a  statement	26	None	replace
72	[BUG]  [BUGGY]  return  row  +  i;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  row  +  i;  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  row  +  i;	  return    this.baseRow    +    i;    	non-compiled	[CE]  not  a  statement	26	None	replace
73	[BUG]  [BUGGY]  return  this.baseRow  /  i;  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  this.baseRow  /  i;  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  this.baseRow  /  i;	  return    this.baseRow    +    i;    	non-compiled	[CE]  not  a  statement	26	None	replace
74	[BUG]  [BUGGY]  return  this.baseRow  +  i  +  1;  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  this.baseRow  +  i  +  1;  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  this.baseRow  +  i  +  1;	  return    this.baseRow    +    i;    	non-compiled	[CE]  not  a  statement	26	None	replace
75	[BUG]  [BUGGY]  return(Integer)(MathUtils.equals(getEntry(i,  col),  0.0,  epsilon));  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(Integer)(MathUtils.equals(getEntry(i,  col),  0.0,  epsilon));  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(Integer)(MathUtils.equals(getEntry(i,  col),  0.0,  epsilon));	  return(int)(MathUtils.equals(getEntry(i,    col),    0.0,    sum));    	non-compiled	[CE]  not  a  statement	11	None	replace
76	[BUG]  [BUGGY]  return(int)(MathUtils.equals(getEntry(i,  col),  0,  epsilon));  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(int)(MathUtils.equals(getEntry(i,  col),  0,  epsilon));  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)(MathUtils.equals(getEntry(i,  col),  0,  epsilon));	  return(int)(MathUtils.equals(getEntry(i,    col),    0.0,    sum));    	non-compiled	[CE]  not  a  statement	11	None	replace
77	[BUG]  [BUGGY]  return  row  =  col;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  row  =  col;  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  row  =  col;	  return    row    =    i;    	non-compiled	[CE]  not  a  statement	7	None	replace
78	[BUG]  [BUGGY]  return  row  =(int)MathUtils.equals(getEntry(i,  col),  0.0,  epsilon);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  row  =(int)MathUtils.equals(getEntry(i,  col),  0.0,  epsilon);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  row  =(int)MathUtils.equals(getEntry(i,  col),  0.0,  epsilon);	  return    row    =    i;    	non-compiled	[CE]  not  a  statement	7	None	replace
79	[BUG]  [BUGGY]  return  row  =(int)MathUtils.equals(getEntry(i,  col),  0);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  row  =(int)MathUtils.equals(getEntry(i,  col),  0);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  row  =(int)MathUtils.equals(getEntry(i,  col),  0);	  return    row    =    i;    	non-compiled	[CE]  not  a  statement	7	None	replace
80	[BUG]  [BUGGY]  return  row  =(int)MathUtils.equals(getEntry(i,  col));  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  row  =(int)MathUtils.equals(getEntry(i,  col));  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  row  =(int)MathUtils.equals(getEntry(i,  col));	  return    row    =    i;    	non-compiled	[CE]  not  a  statement	7	None	replace
81	[BUG]  [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  0.01,  artificialVar);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  0.01,  artificialVar);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.floor(getEntry(i,  col),  0.01,  artificialVar);	  row    =(int)Math.floor(getEntry(i,    col),    0.0,    artificialVar);    	non-compiled	[CE]  not  a  statement	58	None	replace
82	[BUG]  [BUGGY]  row  =(int)MathUtils.equals(getEntry(row,  col),  0.0,  epsilon);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.equals(getEntry(row,  col),  0.0,  epsilon);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.equals(getEntry(row,  col),  0.0,  epsilon);	  row    =(int)MathUtils.equals(getEntry(row,    col),    1.0,    epsilon);    	non-compiled	[CE]  not  a  statement	70	None	replace
83	[BUG]  [BUGGY]  row  =(Integer)MathUtils.equals(getEntry(row,  col),  1.0,  epsilon);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(Integer)MathUtils.equals(getEntry(row,  col),  1.0,  epsilon);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)MathUtils.equals(getEntry(row,  col),  1.0,  epsilon);	  row    =(int)MathUtils.equals(getEntry(row,    col),    1.0,    epsilon);    	non-compiled	[CE]  not  a  statement	70	None	replace
84	[BUG]  [BUGGY]  row  =(Integer)Math.ceil(getEntry(i,  col),  0.0,  height);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(Integer)Math.ceil(getEntry(i,  col),  0.0,  height);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)Math.ceil(getEntry(i,  col),  0.0,  height);	  row    =(int)Math.ceil(getEntry(i,    col),    0.0,    height);    	non-compiled	[CE]  not  a  statement	36	None	replace
85	[BUG]  [BUGGY]  row  =(int)MathUtils.convert(getEntry(i,  col),  0.0,  sum);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.convert(getEntry(i,  col),  0.0,  sum);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.convert(getEntry(i,  col),  0.0,  sum);	  row    =(int)MathUtils.convert(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	46	None	replace
86	[BUG]  [BUGGY]  row  =(int)MathUtils.convert(getEntry(i,  col),  1.0,  epsilon);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.convert(getEntry(i,  col),  1.0,  epsilon);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.convert(getEntry(i,  col),  1.0,  epsilon);	  row    =(int)MathUtils.convert(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	46	None	replace
87	[BUG]  [BUGGY]  row  =(int)MathUtils.convert(getEntry(i,  col),  0.0,  height);  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.convert(getEntry(i,  col),  0.0,  height);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.convert(getEntry(i,  col),  0.0,  height);	  row    =(int)MathUtils.convert(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	46	None	replace
88	[BUG]  [BUGGY]  return(int)MathUtils.equals(getEntry(i,  col),  0,  row);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(int)MathUtils.equals(getEntry(i,  col),  0,  row);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)MathUtils.equals(getEntry(i,  col),  0,  row);	  return(int)MathUtils.equals(getEntry(i,    col),    0,    epsilon);    	non-compiled	[CE]  not  a  statement	30	None	replace
89	[BUG]  [BUGGY]  return(int)MathUtils.equals(getEntry(i,  col),  0,  0);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(int)MathUtils.equals(getEntry(i,  col),  0,  0);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)MathUtils.equals(getEntry(i,  col),  0,  0);	  return(int)MathUtils.equals(getEntry(i,    col),    0,    epsilon);    	non-compiled	[CE]  not  a  statement	30	None	replace
90	[BUG]  [BUGGY]  row  =(Integer)Math.floor(row);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(Integer)Math.floor(row);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)Math.floor(row);	  row    =(int)Math.floor(row);    	non-compiled	[CE]  not  a  statement	41	None	replace
91	[BUG]  [BUGGY]  row  =(int)Math.floor(row,  col);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)Math.floor(row,  col);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.floor(row,  col);	  row    =(int)Math.floor(row);    	non-compiled	[CE]  not  a  statement	41	None	replace
92	[BUG]  [BUGGY]  row  =(int)MathUtils.eq(getEntry(i,  col),  0.0,  height,  epsilon);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.eq(getEntry(i,  col),  0.0,  height,  epsilon);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.eq(getEntry(i,  col),  0.0,  height,  epsilon);	  row    =(int)MathUtils.eq(getEntry(i,    col),    0.0,    epsilon,    height);    	non-compiled	[CE]  not  a  statement	82	None	replace
93	[BUG]  [BUGGY]  row  =(Integer)MathUtils.eq(getEntry(i,  col),  0.0,  epsilon,  height);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(Integer)MathUtils.eq(getEntry(i,  col),  0.0,  epsilon,  height);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)MathUtils.eq(getEntry(i,  col),  0.0,  epsilon,  height);	  row    =(int)MathUtils.eq(getEntry(i,    col),    0.0,    epsilon,    height);    	non-compiled	[CE]  not  a  statement	82	None	replace
94	[BUG]  [BUGGY]  row  =(int)MathUtils.eq(getEntry(i,  col),  0.01,  epsilon,  height);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.eq(getEntry(i,  col),  0.01,  epsilon,  height);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.eq(getEntry(i,  col),  0.01,  epsilon,  height);	  row    =(int)MathUtils.eq(getEntry(i,    col),    0.0,    epsilon,    height);    	non-compiled	[CE]  not  a  statement	82	None	replace
95	[BUG]  [BUGGY]  return  row  +(int)MathUtils.doubleValue(getEntry(i,  col),  0.0,  epsilon);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  row  +(int)MathUtils.doubleValue(getEntry(i,  col),  0.0,  epsilon);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  row  +(int)MathUtils.doubleValue(getEntry(i,  col),  0.0,  epsilon);	  return    i    +(int)MathUtils.doubleValue(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	54	None	replace
96	[BUG]  [BUGGY]  return  row  *(int)MathUtils.doubleValue(getEntry(i,  col),  0.0,  epsilon);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  row  *(int)MathUtils.doubleValue(getEntry(i,  col),  0.0,  epsilon);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  row  *(int)MathUtils.doubleValue(getEntry(i,  col),  0.0,  epsilon);	  return    i    +(int)MathUtils.doubleValue(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	54	None	replace
97	[BUG]  [BUGGY]  return  column  +(int)MathUtils.doubleValue(getEntry(i,  col),  0.0,  epsilon);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  column  +(int)MathUtils.doubleValue(getEntry(i,  col),  0.0,  epsilon);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  column  +(int)MathUtils.doubleValue(getEntry(i,  col),  0.0,  epsilon);	  return    i    +(int)MathUtils.doubleValue(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	54	None	replace
98	[BUG]  [BUGGY]  row  =  MathUtils.equals(getEntry(i,  col),  0.0,  sum);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =  MathUtils.equals(getEntry(i,  col),  0.0,  sum);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =  MathUtils.equals(getEntry(i,  col),  0.0,  sum);	  row    =    MathUtils.equals(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	45	None	replace
99	[BUG]  [BUGGY]  row  =  MathUtils.equals(getEntry(i,  col),  0.0,  field);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =  MathUtils.equals(getEntry(i,  col),  0.0,  field);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =  MathUtils.equals(getEntry(i,  col),  0.0,  field);	  row    =    MathUtils.equals(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	45	None	replace
100	[BUG]  [BUGGY]  row  =  MathUtils.equals(getEntry(i,  col),  0.0,  amount);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =  MathUtils.equals(getEntry(i,  col),  0.0,  amount);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =  MathUtils.equals(getEntry(i,  col),  0.0,  amount);	  row    =    MathUtils.equals(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	45	None	replace
101	[BUG]  [BUGGY]  return  -1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  -1;  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  -1;	  return    0;    	non-compiled	[CE]  not  a  statement	76	None	replace
102	[BUG]  [BUGGY]  return  1;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  1;  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  1;	  return    0;    	non-compiled	[CE]  not  a  statement	76	None	replace
103	[BUG]  [BUGGY]  row  =(Integer)MathUtils.eq(getEntry(i,  col),  1.0,  epsilon);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(Integer)MathUtils.eq(getEntry(i,  col),  1.0,  epsilon);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)MathUtils.eq(getEntry(i,  col),  1.0,  epsilon);	  row    =(int)MathUtils.eq(getEntry(i,    col),    1.0,    epsilon);    	non-compiled	[CE]  not  a  statement	63	None	replace
104	[BUG]  [BUGGY]  return  row  +(int)MathUtils.equals(getEntry(i,  col),  0.0,  epsilon);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  row  +(int)MathUtils.equals(getEntry(i,  col),  0.0,  epsilon);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  row  +(int)MathUtils.equals(getEntry(i,  col),  0.0,  epsilon);	  return    i    +(int)MathUtils.equals(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	53	None	replace
105	[BUG]  [BUGGY]  return  column  +(int)MathUtils.equals(getEntry(i,  col),  0.0,  epsilon);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  column  +(int)MathUtils.equals(getEntry(i,  col),  0.0,  epsilon);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  column  +(int)MathUtils.equals(getEntry(i,  col),  0.0,  epsilon);	  return    i    +(int)MathUtils.equals(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	53	None	replace
106	[BUG]  [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  0,  0.0,  epsilon);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  0,  0.0,  epsilon);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.equals(getEntry(i,  col),  0,  0.0,  epsilon);	  row    =(int)MathUtils.equals(getEntry(i,    col),    0,    0.0);    	non-compiled	[CE]  not  a  statement	38	None	replace
107	[BUG]  [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  0.0,  Math.pow(10,  height));  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  0.0,  Math.pow(10,  height));  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.floor(getEntry(i,  col),  0.0,  Math.pow(10,  height));	  row    =(int)Math.floor(getEntry(i,    col),    0.0,    Math.pow(10,    epsilon));    	non-compiled	[CE]  not  a  statement	33	None	replace
108	[BUG]  [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  1.0,  Math.pow(10,  epsilon));  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  1.0,  Math.pow(10,  epsilon));  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.floor(getEntry(i,  col),  1.0,  Math.pow(10,  epsilon));	  row    =(int)Math.floor(getEntry(i,    col),    0.0,    Math.pow(10,    epsilon));    	non-compiled	[CE]  not  a  statement	33	None	replace
109	[BUG]  [BUGGY]  row  =(Integer)Math.floor(getEntry(i,  col),  0.0,  Math.pow(10,  epsilon));  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(Integer)Math.floor(getEntry(i,  col),  0.0,  Math.pow(10,  epsilon));  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)Math.floor(getEntry(i,  col),  0.0,  Math.pow(10,  epsilon));	  row    =(int)Math.floor(getEntry(i,    col),    0.0,    Math.pow(10,    epsilon));    	non-compiled	[CE]  not  a  statement	33	None	replace
110	[BUG]  [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  0.0,  Math.pow(20,  epsilon));  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  0.0,  Math.pow(20,  epsilon));  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.floor(getEntry(i,  col),  0.0,  Math.pow(20,  epsilon));	  row    =(int)Math.floor(getEntry(i,    col),    0.0,    Math.pow(10,    epsilon));    	non-compiled	[CE]  not  a  statement	33	None	replace
111	[BUG]  [BUGGY]  return  col  -(int)MathUtils.equals(getEntry(i,  col),  0.0,  epsilon);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  col  -(int)MathUtils.equals(getEntry(i,  col),  0.0,  epsilon);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  col  -(int)MathUtils.equals(getEntry(i,  col),  0.0,  epsilon);	  return    col;    	non-compiled	[CE]  not  a  statement	6	None	replace
112	[BUG]  [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  coefficient);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  coefficient);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.equals(getEntry(i,  col),  coefficient);	  row    =(int)MathUtils.equals(getEntry(i,    col),    epsilon);    	non-compiled	[CE]  not  a  statement	72	None	replace
113	[BUG]  [BUGGY]  return  row  <  0?  0  :  column;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  row  <  0?  0  :  column;  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  row  <  0?  0  :  column;	  return    row    <    0?    0    :    row;    	non-compiled	[CE]  not  a  statement	74	None	replace
114	[BUG]  [BUGGY]  return  row  >=  0?  0  :  row;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  row  >=  0?  0  :  row;  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  row  >=  0?  0  :  row;	  return    row    <    0?    0    :    row;    	non-compiled	[CE]  not  a  statement	74	None	replace
115	[BUG]  [BUGGY]  row  =(Integer)Math.floor(getEntry(i,  col),  0.0,  sum);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(Integer)Math.floor(getEntry(i,  col),  0.0,  sum);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)Math.floor(getEntry(i,  col),  0.0,  sum);	  row    =(Integer)Math.floor(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	31	None	replace
116	[BUG]  [BUGGY]  return  row  +  col;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  row  +  col;  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  row  +  col;	  return    i    +    col;    	non-compiled	[CE]  not  a  statement	9	None	replace
117	[BUG]  [BUGGY]  return  i  +  col  +  1;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  i  +  col  +  1;  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  i  +  col  +  1;	  return    i    +    col;    	non-compiled	[CE]  not  a  statement	9	None	replace
118	[BUG]  [BUGGY]  return  i  +  this.col;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  i  +  this.col;  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  i  +  this.col;	  return    i    +    col;    	non-compiled	[CE]  not  a  statement	9	None	replace
119	[BUG]  [BUGGY]  row  =(Integer)MathUtils.floor(col);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(Integer)MathUtils.floor(col);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)MathUtils.floor(col);	  row    =(Integer)Math.floor(col);    	non-compiled	[CE]  not  a  statement	40	None	replace
120	[BUG]  [BUGGY]  return(int)Math.floor(row);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(int)Math.floor(row);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)Math.floor(row);	  return(int)Math.floor(col);    	non-compiled	[CE]  not  a  statement	65	None	replace
121	[BUG]  [BUGGY]  return(int)Math.floor(row,  col);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(int)Math.floor(row,  col);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)Math.floor(row,  col);	  return(int)Math.floor(col);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
122	[BUG]  [BUGGY]  return(int)MathUtils.floor(getEntry(i,  col),  epsilon);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(int)MathUtils.floor(getEntry(i,  col),  epsilon);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)MathUtils.floor(getEntry(i,  col),  epsilon);	  return(int)Math.floor(col);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
123	[BUG]  [BUGGY]  return(int)MathUtils.floor(getEntry(i,  col),  0);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(int)MathUtils.floor(getEntry(i,  col),  0);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)MathUtils.floor(getEntry(i,  col),  0);	  return(int)Math.floor(col);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
124	[BUG]  [BUGGY]  row  =(Integer)Math.ceil(getEntry(i,  col),  0.0,  sum);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(Integer)Math.ceil(getEntry(i,  col),  0.0,  sum);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)Math.ceil(getEntry(i,  col),  0.0,  sum);	  row    =(Integer)Math.ceil(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
125	[BUG]  [BUGGY]  row  =(Integer)Math.ceil(getEntry(i,  col),  0.0,  Math.pow(10,  epsilon));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(Integer)Math.ceil(getEntry(i,  col),  0.0,  Math.pow(10,  epsilon));  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)Math.ceil(getEntry(i,  col),  0.0,  Math.pow(10,  epsilon));	  row    =(Integer)Math.ceil(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
126	[BUG]  [BUGGY]  return(int)(MathUtils.equals(getEntry(row,  col),  0.0,  sum));  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(int)(MathUtils.equals(getEntry(row,  col),  0.0,  sum));  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)(MathUtils.equals(getEntry(row,  col),  0.0,  sum));	  return(int)(MathUtils.equals(getEntry(row,    col),    0.0,    epsilon));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
127	[BUG]  [BUGGY]  return(int)(MathUtils.equals(getEntry(row,  col),  1.0,  epsilon));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(int)(MathUtils.equals(getEntry(row,  col),  1.0,  epsilon));  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)(MathUtils.equals(getEntry(row,  col),  1.0,  epsilon));	  return(int)(MathUtils.equals(getEntry(row,    col),    0.0,    epsilon));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
128	[BUG]  [BUGGY]  return(int)(MathUtils.equals(getEntry(row,  col),  0.0,  Math.abs(col)));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(int)(MathUtils.equals(getEntry(row,  col),  0.0,  Math.abs(col)));  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)(MathUtils.equals(getEntry(row,  col),  0.0,  Math.abs(col)));	  return(int)(MathUtils.equals(getEntry(row,    col),    0.0,    epsilon));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
129	[BUG]  [BUGGY]  row  =(int)MathUtils.escape(getEntry(i,  col),  1.0,  artificialVar);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.escape(getEntry(i,  col),  1.0,  artificialVar);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.escape(getEntry(i,  col),  1.0,  artificialVar);	  row    =(int)MathUtils.escape(getEntry(i,    col),    0.0,    artificialVar);    	non-compiled	[CE]  not  a  statement	51	None	replace
130	[BUG]  [BUGGY]  row  =(Integer)Math.ceil(getEntry(i,  col),  1.0);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(Integer)Math.ceil(getEntry(i,  col),  1.0);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)Math.ceil(getEntry(i,  col),  1.0);	  row    =(int)Math.ceil(getEntry(i,    col),    1.0);    	non-compiled	[CE]  not  a  statement	73	None	replace
131	[BUG]  [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  0.5);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  0.5);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.ceil(getEntry(i,  col),  0.5);	  row    =(int)Math.ceil(getEntry(i,    col),    1.0);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
132	[BUG]  [BUGGY]  return  i  +(int)MathUtils.doubleValue(getEntry(i,  col),  0.0,  sum);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  i  +(int)MathUtils.doubleValue(getEntry(i,  col),  0.0,  sum);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  i  +(int)MathUtils.doubleValue(getEntry(i,  col),  0.0,  sum);	  return    i    +(int)MathUtils.doubleValue(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
133	[BUG]  [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  1.0,  0.0);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  1.0,  0.0);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.equals(getEntry(i,  col),  1.0,  0.0);	  row    =(int)MathUtils.equals(getEntry(i,    col),    0,    0.0);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
134	[BUG]  [BUGGY]  row  =(int)MathUtils.eq(getEntry(i,  col),  1.0,  height);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.eq(getEntry(i,  col),  1.0,  height);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.eq(getEntry(i,  col),  1.0,  height);	  row    =(int)MathUtils.eq(getEntry(i,    col),    1.0,    epsilon);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
135	[BUG]  [BUGGY]  return(int)(MathUtils.equals(getEntry(i,  col),  sum,  epsilon));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(int)(MathUtils.equals(getEntry(i,  col),  sum,  epsilon));  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)(MathUtils.equals(getEntry(i,  col),  sum,  epsilon));	  return(int)(MathUtils.equals(getEntry(i,    col),    0.0,    sum));    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
136	[BUG]  [BUGGY]  return(int)(MathUtils.equals(getEntry(i,  col),  coefficient,  0.0,  sum));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(int)(MathUtils.equals(getEntry(i,  col),  coefficient,  0.0,  sum));  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)(MathUtils.equals(getEntry(i,  col),  coefficient,  0.0,  sum));	  return(int)(MathUtils.equals(getEntry(i,    col),    0.0,    sum));    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
137	[BUG]  [BUGGY]  row  =  MathUtils.equals(getEntry(i,  col),  0.0,  epsilon  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =  MathUtils.equals(getEntry(i,  col),  0.0,  epsilon  +  1);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =  MathUtils.equals(getEntry(i,  col),  0.0,  epsilon  +  1);	  row    =    MathUtils.equals(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
138	[BUG]  [BUGGY]  row  =  MathUtils.equals(getEntry(i,  col),  1.0,  epsilon);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =  MathUtils.equals(getEntry(i,  col),  1.0,  epsilon);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =  MathUtils.equals(getEntry(i,  col),  1.0,  epsilon);	  row    =    MathUtils.equals(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
139	[BUG]  [BUGGY]  row  =(Integer)MathUtils.equals(getEntry(i,  col),  epsilon,  0.0);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(Integer)MathUtils.equals(getEntry(i,  col),  epsilon,  0.0);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)MathUtils.equals(getEntry(i,  col),  epsilon,  0.0);	  row    =(Integer)MathUtils.equals(getEntry(i,    col),    0.0);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
140	[BUG]  [BUGGY]  return(int)Math.floor(getEntry(i,  col),  epsilon);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(int)Math.floor(getEntry(i,  col),  epsilon);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)Math.floor(getEntry(i,  col),  epsilon);	  return(int)Math.floor(col);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
141	[BUG]  [BUGGY]  return(int)Math.floor(epsilon);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(int)Math.floor(epsilon);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)Math.floor(epsilon);	  return(int)Math.floor(col);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
142	[BUG]  [BUGGY]  row  =(int)MathUtils.convert(getEntry(i,  col),  coefficient,  0.0,  epsilon);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.convert(getEntry(i,  col),  coefficient,  0.0,  epsilon);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.convert(getEntry(i,  col),  coefficient,  0.0,  epsilon);	  row    =(int)MathUtils.convert(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
143	[BUG]  [BUGGY]  return  this.baseRow  -(int)MathUtils.equals(getEntry(i,  col),  0.0,  sum);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  this.baseRow  -(int)MathUtils.equals(getEntry(i,  col),  0.0,  sum);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  this.baseRow  -(int)MathUtils.equals(getEntry(i,  col),  0.0,  sum);	  return    this.baseRow    -(int)MathUtils.equals(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
144	[BUG]  [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  1.0,  artificialVar);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  1.0,  artificialVar);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.floor(getEntry(i,  col),  1.0,  artificialVar);	  row    =(int)Math.floor(getEntry(i,    col),    1.0,    epsilon);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
145	[BUG]  [BUGGY]  row  =(int)MathUtils.escape(getEntry(i,  col),  1.0,  amount);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.escape(getEntry(i,  col),  1.0,  amount);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.escape(getEntry(i,  col),  1.0,  amount);	  row    =(int)MathUtils.escape(getEntry(i,    col),    0.0,    amount);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
146	[BUG]  [BUGGY]  return  row  <  0?  0  :  i;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  row  <  0?  0  :  i;  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  row  <  0?  0  :  i;	  return    row    <    0?    0    :    row;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
147	[BUG]  [BUGGY]  return(int)(MathUtils.equals(getEntry(row,  col),  0.0,  amount));  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(int)(MathUtils.equals(getEntry(row,  col),  0.0,  amount));  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)(MathUtils.equals(getEntry(row,  col),  0.0,  amount));	  return(int)(MathUtils.equals(getEntry(row,    col),    0.0,    epsilon));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
148	[BUG]  [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  coefficient,  0.0,  epsilon);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  coefficient,  0.0,  epsilon);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.equals(getEntry(i,  col),  coefficient,  0.0,  epsilon);	  row    =(int)MathUtils.equals(getEntry(i,    col),    0.0,    sum);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
149	[BUG]  [BUGGY]  return  col  +  i;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  col  +  i;  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  col  +  i;	  return    i    +    col;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
150	[BUG]  [BUGGY]  return  i  +  row;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  i  +  row;  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  i  +  row;	  return    i    +    col;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
151	[BUG]  [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  sum,  0.0);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  sum,  0.0);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.equals(getEntry(i,  col),  sum,  0.0);	  row    =(int)MathUtils.equals(getEntry(i,    col),    epsilon,    0.0);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
152	[BUG]  [BUGGY]  row  =(int)MathUtils.equals(getEntry(col,  col),  1.0,  epsilon);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.equals(getEntry(col,  col),  1.0,  epsilon);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.equals(getEntry(col,  col),  1.0,  epsilon);	  row    =(int)MathUtils.equals(getEntry(row,    col),    1.0,    epsilon);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
153	[BUG]  [BUGGY]  row  =(int)MathUtils.eq(getEntry(i,  col),  coefficient,  0.0,  epsilon);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.eq(getEntry(i,  col),  coefficient,  0.0,  epsilon);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.eq(getEntry(i,  col),  coefficient,  0.0,  epsilon);	  row    =(int)MathUtils.eq(getEntry(i,    col),    0.0,    sum);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
154	[BUG]  [BUGGY]  row  =(int)MathUtils.eq(getEntry(i,  col),  0,  epsilon);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.eq(getEntry(i,  col),  0,  epsilon);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.eq(getEntry(i,  col),  0,  epsilon);	  row    =(int)MathUtils.eq(getEntry(i,    col),    0.0,    sum);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
155	[BUG]  [BUGGY]  return  row  =  i  +  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  row  =  i  +  1;  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  row  =  i  +  1;	  return    row    =    i;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
156	[BUG]  [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  0,  epsilon);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  0,  epsilon);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.floor(getEntry(i,  col),  0,  epsilon);	  row    =(int)Math.floor(getEntry(i,    col),    0.0,    height);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
157	[BUG]  [BUGGY]  row  =(int)MathUtils.escape(getEntry(i,  col),  0.01,  artificialVar);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.escape(getEntry(i,  col),  0.01,  artificialVar);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.escape(getEntry(i,  col),  0.01,  artificialVar);	  row    =(int)MathUtils.escape(getEntry(i,    col),    0.0,    artificialVar);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
158	[BUG]  [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  0.0,  epsilon,  artificialVar);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  0.0,  epsilon,  artificialVar);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.floor(getEntry(i,  col),  0.0,  epsilon,  artificialVar);	  row    =(int)Math.floor(getEntry(i,    col),    0.0,    epsilon,    height);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
159	[BUG]  [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  0.0,  height,  artificialVar);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  0.0,  height,  artificialVar);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.floor(getEntry(i,  col),  0.0,  height,  artificialVar);	  row    =(int)Math.floor(getEntry(i,    col),    0.0,    epsilon,    height);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
160	[BUG]  [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  1.0,  epsilon,  height);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  1.0,  epsilon,  height);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.ceil(getEntry(i,  col),  1.0,  epsilon,  height);	  row    =(int)Math.ceil(getEntry(i,    col),    0.0,    epsilon,    height);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
161	[BUG]  [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  0);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  0);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.equals(getEntry(i,  col),  0);	  row    =(int)MathUtils.equals(getEntry(i,    col),    0,    0);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
162	[BUG]  [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  1.0,  sum);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  1.0,  sum);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.floor(getEntry(i,  col),  1.0,  sum);	  row    =(int)Math.floor(getEntry(i,    col),    0.0,    sum);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
163	[BUG]  [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  epsilon,  0.0);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  epsilon,  0.0);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.floor(getEntry(i,  col),  epsilon,  0.0);	  row    =(int)Math.floor(getEntry(i,    col),    0.0,    sum);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
164	[BUG]  [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  0.5,  height);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  0.5,  height);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.equals(getEntry(i,  col),  0.5,  height);	  row    =(int)MathUtils.equals(getEntry(i,    col),    1.0,    height);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
165	[BUG]  [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  1.0,  amount);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  1.0,  amount);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.equals(getEntry(i,  col),  1.0,  amount);	  row    =(int)MathUtils.equals(getEntry(i,    col),    0.0,    amount);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
166	[BUG]  [BUGGY]  return(int)MathUtils.equals(getEntry(i,  col),  coefficient,  epsilon);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(int)MathUtils.equals(getEntry(i,  col),  coefficient,  epsilon);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)MathUtils.equals(getEntry(i,  col),  coefficient,  epsilon);	  return(int)MathUtils.equals(getEntry(i,    col),    0.0,    sum);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
167	[BUG]  [BUGGY]  return(int)MathUtils.equals(getEntry(i,  col),  0.5,  epsilon);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(int)MathUtils.equals(getEntry(i,  col),  0.5,  epsilon);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)MathUtils.equals(getEntry(i,  col),  0.5,  epsilon);	  return(int)MathUtils.equals(getEntry(i,    col),    1.0,    row);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
168	[BUG]  [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  1);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.ceil(getEntry(i,  col),  1);	  row    =(int)Math.ceil(getEntry(i,    col),    0);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
169	[BUG]  [BUGGY]  row  =(Integer)Math.ceil(getEntry(i,  col),  0.0,  amount);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(Integer)Math.ceil(getEntry(i,  col),  0.0,  amount);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)Math.ceil(getEntry(i,  col),  0.0,  amount);	  row    =(Integer)Math.ceil(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
170	[BUG]  [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  epsilon,  0.0);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  epsilon,  0.0);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.ceil(getEntry(i,  col),  epsilon,  0.0);	  row    =(int)Math.ceil(getEntry(i,    col),    0.0,    sum);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
171	[BUG]  [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  0.01,  epsilon);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  0.01,  epsilon);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.ceil(getEntry(i,  col),  0.01,  epsilon);	  row    =(int)Math.ceil(getEntry(i,    col),    0.0,    sum);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
172	[BUG]  [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  1.0,  sum);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  1.0,  sum);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.ceil(getEntry(i,  col),  1.0,  sum);	  row    =(int)Math.ceil(getEntry(i,    col),    0.0,    sum);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
173	[BUG]  [BUGGY]  return(int)(MathUtils.equals(getEntry(i,  col),  epsilon,  0.0,  Math.abs(col)));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(int)(MathUtils.equals(getEntry(i,  col),  epsilon,  0.0,  Math.abs(col)));  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)(MathUtils.equals(getEntry(i,  col),  epsilon,  0.0,  Math.abs(col)));	  return(int)(MathUtils.equals(getEntry(i,    col),    0.0,    Math.abs(col)));    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
174	[BUG]  [BUGGY]  return(int)(MathUtils.equals(getEntry(row,  col),  0.0,  Math.abs(epsilon)));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(int)(MathUtils.equals(getEntry(row,  col),  0.0,  Math.abs(epsilon)));  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)(MathUtils.equals(getEntry(row,  col),  0.0,  Math.abs(epsilon)));	  return(int)(MathUtils.equals(getEntry(i,    col),    0.0,    Math.abs(col)));    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
175	[BUG]  [BUGGY]  row  =(Integer)MathUtils.equals(getEntry(i,  col),  0.5,  epsilon);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(Integer)MathUtils.equals(getEntry(i,  col),  0.5,  epsilon);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)MathUtils.equals(getEntry(i,  col),  0.5,  epsilon);	  row    =(Integer)MathUtils.equals(getEntry(i,    col),    1.0,    epsilon);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
176	[BUG]  [BUGGY]  row  =(int)MathUtils.escape(getEntry(i,  col),  1.0,  height);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.escape(getEntry(i,  col),  1.0,  height);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.escape(getEntry(i,  col),  1.0,  height);	  row    =(int)MathUtils.escape(getEntry(i,    col),    0.0,    height);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
177	[BUG]  [BUGGY]  row  =(int)MathUtils.eq(getEntry(i,  col),  1.0,  amount);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.eq(getEntry(i,  col),  1.0,  amount);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.eq(getEntry(i,  col),  1.0,  amount);	  row    =(int)MathUtils.eq(getEntry(i,    col),    0.0,    amount);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
178	[BUG]  [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  0.0,  sum  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  0.0,  sum  +  1);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.equals(getEntry(i,  col),  0.0,  sum  +  1);	  row    =(int)MathUtils.equals(getEntry(i,    col),    0.0,    epsilon    +    1);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
179	[BUG]  [BUGGY]  row  =(Integer)Math.floor(col  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(Integer)Math.floor(col  -  1);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)Math.floor(col  -  1);	  row    =(Integer)Math.floor(col);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
180	[BUG]  [BUGGY]  row  =(int)MathUtils.eq(getEntry(i,  col),  0.0,  sum,  height);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.eq(getEntry(i,  col),  0.0,  sum,  height);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.eq(getEntry(i,  col),  0.0,  sum,  height);	  row    =(int)MathUtils.eq(getEntry(i,    col),    0.0,    epsilon,    height);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
181	[BUG]  [BUGGY]  row  =(int)MathUtils.eq(getEntry(i,  col),  coefficient,  epsilon,  height);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.eq(getEntry(i,  col),  coefficient,  epsilon,  height);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.eq(getEntry(i,  col),  coefficient,  epsilon,  height);	  row    =(int)MathUtils.eq(getEntry(i,    col),    0.0,    epsilon,    height);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
182	[BUG]  [BUGGY]  row  =(int)MathUtils.eq(getEntry(i,  col),  1.0,  epsilon,  height);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.eq(getEntry(i,  col),  1.0,  epsilon,  height);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.eq(getEntry(i,  col),  1.0,  epsilon,  height);	  row    =(int)MathUtils.eq(getEntry(i,    col),    0.0,    epsilon,    height);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
183	[BUG]  [BUGGY]  return  i.intValue();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  i.intValue();  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  i.intValue();	  return    row.intValue();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
184	[BUG]  [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  sum);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  sum);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.equals(getEntry(i,  col),  sum);	  row    =(int)MathUtils.equals(getEntry(i,    col),    epsilon);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
185	[BUG]  [BUGGY]  return(int)MathUtils.equals(getEntry(row,  col),  0,  epsilon);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(int)MathUtils.equals(getEntry(row,  col),  0,  epsilon);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)MathUtils.equals(getEntry(row,  col),  0,  epsilon);	  return(int)MathUtils.equals(getEntry(i,    col),    0,    epsilon);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
186	[BUG]  [BUGGY]  row  =(int)MathUtils.escape(getEntry(i,  col),  0.0,  slackVar);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.escape(getEntry(i,  col),  0.0,  slackVar);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.escape(getEntry(i,  col),  0.0,  slackVar);	  row    =(int)MathUtils.escape(getEntry(i,    col),    0.0,    sum);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
187	[BUG]  [BUGGY]  return  i  +(int)MathUtils.equals(getEntry(i,  col),  0.0,  sum);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  i  +(int)MathUtils.equals(getEntry(i,  col),  0.0,  sum);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  i  +(int)MathUtils.equals(getEntry(i,  col),  0.0,  sum);	  return    i    +(int)MathUtils.equals(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
188	[BUG]  [BUGGY]  return  i  +(int)MathUtils.equals(getEntry(i,  col),  0.0,  artificialVar);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  i  +(int)MathUtils.equals(getEntry(i,  col),  0.0,  artificialVar);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  i  +(int)MathUtils.equals(getEntry(i,  col),  0.0,  artificialVar);	  return    i    +(int)MathUtils.equals(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
189	[BUG]  [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  epsilon,  0.0,  height);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  epsilon,  0.0,  height);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.ceil(getEntry(i,  col),  epsilon,  0.0,  height);	  row    =(int)Math.ceil(getEntry(i,    col),    0.0,    height);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
190	[BUG]  [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  1.0,  height);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  1.0,  height);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.ceil(getEntry(i,  col),  1.0,  height);	  row    =(int)Math.ceil(getEntry(i,    col),    0.0,    height);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
191	[BUG]  [BUGGY]  return(int)MathUtils.equals(getEntry(row,  col),  0.0,  amount);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(int)MathUtils.equals(getEntry(row,  col),  0.0,  amount);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)MathUtils.equals(getEntry(row,  col),  0.0,  amount);	  return(int)MathUtils.equals(getEntry(row,    col),    0.0,    epsilon);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
192	[BUG]  [BUGGY]  return(int)MathUtils.equals(getEntry(i,  col),  0.5,  sum);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(int)MathUtils.equals(getEntry(i,  col),  0.5,  sum);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)MathUtils.equals(getEntry(i,  col),  0.5,  sum);	  return(int)MathUtils.equals(getEntry(i,    col),    1.0,    sum);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
193	[BUG]  [BUGGY]  row  =(int)MathUtils.escape(getEntry(i,  col),  1.0,  this.value);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.escape(getEntry(i,  col),  1.0,  this.value);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.escape(getEntry(i,  col),  1.0,  this.value);	  row    =(int)MathUtils.escape(getEntry(i,    col),    0.0,    this.value);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
194	[BUG]  [BUGGY]  return(int)MathUtils.equals(getEntry(i,  col),  1.0,  this.sum);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(int)MathUtils.equals(getEntry(i,  col),  1.0,  this.sum);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)MathUtils.equals(getEntry(i,  col),  1.0,  this.sum);	  return(int)MathUtils.equals(getEntry(i,    col),    0.0,    this.sum);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
195	[BUG]  [BUGGY]  return(int)MathUtils.equals(getEntry(col,  col),  0.0,  epsilon);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(int)MathUtils.equals(getEntry(col,  col),  0.0,  epsilon);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)MathUtils.equals(getEntry(col,  col),  0.0,  epsilon);	  return(int)MathUtils.equals(getEntry(i,    col),    0.0,    field);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
196	[BUG]  [BUGGY]  return  row  =(int)MathUtils.eq(getEntry(i,  col),  0.0,  epsilon);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  row  =(int)MathUtils.eq(getEntry(i,  col),  0.0,  epsilon);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  row  =(int)MathUtils.eq(getEntry(i,  col),  0.0,  epsilon);	  return    row    =    i;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
197	[BUG]  [BUGGY]  return(int)(MathUtils.equals(getEntry(row,  col),  0.0,  row));  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(int)(MathUtils.equals(getEntry(row,  col),  0.0,  row));  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)(MathUtils.equals(getEntry(row,  col),  0.0,  row));	  return(int)(MathUtils.equals(getEntry(row,    col),    0.0,    epsilon));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
198	[BUG]  [BUGGY]  row  =  MathUtils.equals(getEntry(i,  col),  0.0,  epsilon,  height);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =  MathUtils.equals(getEntry(i,  col),  0.0,  epsilon,  height);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =  MathUtils.equals(getEntry(i,  col),  0.0,  epsilon,  height);	  row    =    MathUtils.equals(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
199	[BUG]  [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  1.0,  epsilon,  height);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  1.0,  epsilon,  height);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.floor(getEntry(i,  col),  1.0,  epsilon,  height);	  row    =(int)Math.floor(getEntry(i,    col),    0.0,    epsilon,    height);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
200	[BUG]  [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  epsilon,  0.0,  sum);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  epsilon,  0.0,  sum);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.floor(getEntry(i,  col),  epsilon,  0.0,  sum);	  row    =(int)Math.floor(getEntry(i,    col),    0.0,    sum);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
201	[BUG]  [BUGGY]  row  =(int)MathUtils.equals(getEntry(row,  col),  1.0,  epsilon  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.equals(getEntry(row,  col),  1.0,  epsilon  +  1);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.equals(getEntry(row,  col),  1.0,  epsilon  +  1);	  row    =(int)MathUtils.equals(getEntry(row,    col),    1.0,    epsilon);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
202	[BUG]  [BUGGY]  row  =(int)MathUtils.escape(getEntry(i,  col),  1.0,  epsilon,  height);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.escape(getEntry(i,  col),  1.0,  epsilon,  height);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.escape(getEntry(i,  col),  1.0,  epsilon,  height);	  row    =(int)MathUtils.escape(getEntry(i,    col),    1.0,    epsilon);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
203	[BUG]  [BUGGY]  row  =(int)MathUtils.escape(getEntry(i,  col),  1.0,  epsilon  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.escape(getEntry(i,  col),  1.0,  epsilon  +  1);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.escape(getEntry(i,  col),  1.0,  epsilon  +  1);	  row    =(int)MathUtils.escape(getEntry(i,    col),    1.0,    epsilon);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
204	[BUG]  [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  epsilon,  0.0,  height);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  epsilon,  0.0,  height);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.floor(getEntry(i,  col),  epsilon,  0.0,  height);	  row    =(int)Math.floor(getEntry(i,    col),    0.0,    height);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
205	[BUG]  [BUGGY]  row  =(Integer)MathUtils.eq(getEntry(i,  col),  0.0,  this.value);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(Integer)MathUtils.eq(getEntry(i,  col),  0.0,  this.value);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)MathUtils.eq(getEntry(i,  col),  0.0,  this.value);	  row    =(Integer)MathUtils.eq(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
206	[BUG]  [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  1.0,  epsilon  *  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  1.0,  epsilon  *  1);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.equals(getEntry(i,  col),  1.0,  epsilon  *  1);	  row    =(int)MathUtils.equals(getEntry(i,    col),    1.0,    epsilon    +    1);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
207	[BUG]  [BUGGY]  return  this.baseRow  -(int)MathUtils.equals(getEntry(i,  col),  1.0,  epsilon);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  this.baseRow  -(int)MathUtils.equals(getEntry(i,  col),  1.0,  epsilon);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  this.baseRow  -(int)MathUtils.equals(getEntry(i,  col),  1.0,  epsilon);	  return    this.baseRow    -(int)MathUtils.equals(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
208	[BUG]  [BUGGY]  row  =(int)MathUtils.escape(getEntry(i,  col),  0.00,  epsilon);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.escape(getEntry(i,  col),  0.00,  epsilon);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.escape(getEntry(i,  col),  0.00,  epsilon);	  row    =(int)MathUtils.escape(getEntry(i,    col),    0.0,    amount);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
209	[BUG]  [BUGGY]  row  =(int)Math.log(getEntry(i,  col),  0.0,  epsilon);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)Math.log(getEntry(i,  col),  0.0,  epsilon);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.log(getEntry(i,  col),  0.0,  epsilon);	  row    =(int)Math.floor(getEntry(i,    col),    0.0,    artificialVar);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
210	[BUG]  [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  epsilon,  0.0,  artificialVar);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  epsilon,  0.0,  artificialVar);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.floor(getEntry(i,  col),  epsilon,  0.0,  artificialVar);	  row    =(int)Math.floor(getEntry(i,    col),    0.0,    artificialVar);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
211	[BUG]  [BUGGY]  return  row  *  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  row  *  1;  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  row  *  1;	  return    i    +    1;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
212	[BUG]  [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  1.0,  epsilon  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  1.0,  epsilon  +  1);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.ceil(getEntry(i,  col),  1.0,  epsilon  +  1);	  row    =(int)Math.ceil(getEntry(i,    col),    1.0,    epsilon);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
213	[BUG]  [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  0.00,  epsilon);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  0.00,  epsilon);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.equals(getEntry(i,  col),  0.00,  epsilon);	  row    =(int)MathUtils.equals(getEntry(i,    col),    0.0,    artificialVar);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
214	[BUG]  [BUGGY]  row  =(int)MathUtils.eq(getEntry(i,  col),  0.00,  epsilon);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.eq(getEntry(i,  col),  0.00,  epsilon);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.eq(getEntry(i,  col),  0.00,  epsilon);	  row    =(int)MathUtils.eq(getEntry(i,    col),    0.0,    amount);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
215	[BUG]  [BUGGY]  return(int)MathUtils.equals(getEntry(row,  col),  0.0,  epsilon,  sum);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(int)MathUtils.equals(getEntry(row,  col),  0.0,  epsilon,  sum);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)MathUtils.equals(getEntry(row,  col),  0.0,  epsilon,  sum);	  return(int)MathUtils.equals(getEntry(row,    col),    0.0,    epsilon);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
216	[BUG]  [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  0.5,  artificialVar);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  0.5,  artificialVar);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.equals(getEntry(i,  col),  0.5,  artificialVar);	  row    =(int)MathUtils.equals(getEntry(i,    col),    1.0,    artificialVar);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
217	[BUG]  [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  0.5,  height);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  0.5,  height);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.ceil(getEntry(i,  col),  0.5,  height);	  row    =(int)Math.ceil(getEntry(i,    col),    0.0,    height);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
218	[BUG]  [BUGGY]  row  =(Integer)Math.ceil(getEntry(i,  col),  0.0,  this.value);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(Integer)Math.ceil(getEntry(i,  col),  0.0,  this.value);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)Math.ceil(getEntry(i,  col),  0.0,  this.value);	  row    =(Integer)Math.ceil(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
219	[BUG]  [BUGGY]  row  =(int)MathUtils.convert(getEntry(i,  col),  coefficient,  epsilon);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.convert(getEntry(i,  col),  coefficient,  epsilon);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.convert(getEntry(i,  col),  coefficient,  epsilon);	  row    =(int)MathUtils.convert(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
220	[BUG]  [BUGGY]  return  i  +  1,  col;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  i  +  1,  col;  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  i  +  1,  col;	  return    i    +    col;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
221	[BUG]  [BUGGY]  row  =(int)MathUtils.equals(getEntry(col,  col),  0.0,  epsilon);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.equals(getEntry(col,  col),  0.0,  epsilon);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.equals(getEntry(col,  col),  0.0,  epsilon);	  row    =(int)MathUtils.equals(getEntry(i,    col),    0.0,    sum);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
222	[BUG]  [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  -1);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  -1);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.ceil(getEntry(i,  col),  -1);	  row    =(int)Math.ceil(getEntry(i,    col),    0);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
223	[BUG]  [BUGGY]  return  row  *  this.baseRow  +  i;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  row  *  this.baseRow  +  i;  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  row  *  this.baseRow  +  i;	  return    this.baseRow    +    i;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
224	[BUG]  [BUGGY]  return(int)MathUtils.equals(getEntry(i,  col),  5.0,  epsilon);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(int)MathUtils.equals(getEntry(i,  col),  5.0,  epsilon);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)MathUtils.equals(getEntry(i,  col),  5.0,  epsilon);	  return(int)MathUtils.equals(getEntry(i,    col),    1.0,    row);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
225	[BUG]  [BUGGY]  return  row  *  this.baseRow  -  i;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  row  *  this.baseRow  -  i;  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  row  *  this.baseRow  -  i;	  return    this.baseRow    -    i;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
226	[BUG]  [BUGGY]  return  this.baseRow  -  col;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  this.baseRow  -  col;  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  this.baseRow  -  col;	  return    this.baseRow    -    i;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
227	[BUG]  [BUGGY]  return  i  +(int)MathUtils.equals(getEntry(i,  col),  0.0,  row);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  i  +(int)MathUtils.equals(getEntry(i,  col),  0.0,  row);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  i  +(int)MathUtils.equals(getEntry(i,  col),  0.0,  row);	  return    i    +(int)MathUtils.equals(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
228	[BUG]  [BUGGY]  row  =(Integer)MathUtils.equals(getEntry(i,  col),  0);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(Integer)MathUtils.equals(getEntry(i,  col),  0);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)MathUtils.equals(getEntry(i,  col),  0);	  row    =(Integer)MathUtils.equals(getEntry(i,    col),    0.0);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
229	[BUG]  [BUGGY]  return  row  +(int)MathUtils.doubleValue(getEntry(i,  col),  0.001,  epsilon);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  row  +(int)MathUtils.doubleValue(getEntry(i,  col),  0.001,  epsilon);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  row  +(int)MathUtils.doubleValue(getEntry(i,  col),  0.001,  epsilon);	  return    i    +(int)MathUtils.doubleValue(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
230	[BUG]  [BUGGY]  row  =(int)MathUtils.eq(getEntry(i,  col),  0.0,  epsilon,  artificialVar);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.eq(getEntry(i,  col),  0.0,  epsilon,  artificialVar);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.eq(getEntry(i,  col),  0.0,  epsilon,  artificialVar);	  row    =(int)MathUtils.eq(getEntry(i,    col),    0.0,    epsilon,    height);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
231	[BUG]  [BUGGY]  row  =(int)MathUtils.eq(getEntry(i,  col),  0.5,  height);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.eq(getEntry(i,  col),  0.5,  height);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.eq(getEntry(i,  col),  0.5,  height);	  row    =(int)MathUtils.eq(getEntry(i,    col),    0.0,    height);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
232	[BUG]  [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  5.0,  epsilon);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  5.0,  epsilon);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.equals(getEntry(i,  col),  5.0,  epsilon);	  row    =(int)MathUtils.equals(getEntry(i,    col),    1.0,    sum);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
233	[BUG]  [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  epsilon,  0.0,  sum);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  epsilon,  0.0,  sum);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.ceil(getEntry(i,  col),  epsilon,  0.0,  sum);	  row    =(int)Math.ceil(getEntry(i,    col),    0.0,    sum);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
234	[BUG]  [BUGGY]  row  =(int)MathUtils.eq(getEntry(i,  col),  1.0,  epsilon  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.eq(getEntry(i,  col),  1.0,  epsilon  +  1);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.eq(getEntry(i,  col),  1.0,  epsilon  +  1);	  row    =(int)MathUtils.eq(getEntry(i,    col),    1.0,    epsilon);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
235	[BUG]  [BUGGY]  return(int)MathUtils.equals(getEntry(row,  col),  1.0,  epsilon,  sum);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(int)MathUtils.equals(getEntry(row,  col),  1.0,  epsilon,  sum);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)MathUtils.equals(getEntry(row,  col),  1.0,  epsilon,  sum);	  return(int)MathUtils.equals(getEntry(row,    col),    1.0,    epsilon);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
236	[BUG]  [BUGGY]  return  row  ==  0?  0  :  row;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return  row  ==  0?  0  :  row;  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  row  ==  0?  0  :  row;	  return    row    <    =    0?    0    :    row;    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
237	[BUG]  [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  1.0,  epsilon  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  1.0,  epsilon  +  1);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.floor(getEntry(i,  col),  1.0,  epsilon  +  1);	  row    =(int)Math.floor(getEntry(i,    col),    1.0,    epsilon);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
238	[BUG]  [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  0.0,  epsilon  *  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  0.0,  epsilon  *  1);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.equals(getEntry(i,  col),  0.0,  epsilon  *  1);	  row    =(int)MathUtils.equals(getEntry(i,    col),    0.0,    epsilon    +    1);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
239	[BUG]  [BUGGY]  row  =(int)MathUtils.eq(getEntry(i,  col),  0.5,  epsilon);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.eq(getEntry(i,  col),  0.5,  epsilon);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.eq(getEntry(i,  col),  0.5,  epsilon);	  row    =(int)MathUtils.eq(getEntry(i,    col),    0.0,    sum);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
240	[BUG]  [BUGGY]  row  =(int)MathUtils.escape(getEntry(i,  col),  0.5,  artificialVar);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.escape(getEntry(i,  col),  0.5,  artificialVar);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.escape(getEntry(i,  col),  0.5,  artificialVar);	  row    =(int)MathUtils.escape(getEntry(i,    col),    0.0,    artificialVar);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
241	[BUG]  [BUGGY]  row  =(int)MathUtils.escape(getEntry(i,  col),  0.5,  height);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  row  =(int)MathUtils.escape(getEntry(i,  col),  0.5,  height);  [BUGGY]      return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.escape(getEntry(i,  col),  0.5,  height);	  row    =(int)MathUtils.escape(getEntry(i,    col),    0.0,    height);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
242	[BUG]  [BUGGY]  return(int)MathUtils.equals(getEntry(col,  col),  1.0,  epsilon);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {      [BUGGY]  return(int)MathUtils.equals(getEntry(col,  col),  1.0,  epsilon);  [BUGGY]      }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)MathUtils.equals(getEntry(col,  col),  1.0,  epsilon);	  return(int)MathUtils.equals(getEntry(i,    col),    1.0,    sum);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
