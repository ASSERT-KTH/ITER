bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return(int)MathUtils.equals(getEntry(i,  col),  0.0,  row);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  return(int)MathUtils.equals(getEntry(i,  col),  0.0,  row);  [BUGGY]    }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)MathUtils.equals(getEntry(i,  col),  0.0,  row);	  return(int)MathUtils.equals(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	10	None	replace
2	[BUG]  [BUGGY]  return(int)MathUtils.equals(getEntry(i,  col),  0.0,  sum);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  return(int)MathUtils.equals(getEntry(i,  col),  0.0,  sum);  [BUGGY]    }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)MathUtils.equals(getEntry(i,  col),  0.0,  sum);	  return(int)MathUtils.equals(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	10	None	replace
3	[BUG]  [BUGGY]  return(int)MathUtils.equals(getEntry(i,  col),  0.0,  field);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  return(int)MathUtils.equals(getEntry(i,  col),  0.0,  field);  [BUGGY]    }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)MathUtils.equals(getEntry(i,  col),  0.0,  field);	  return(int)MathUtils.equals(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	10	None	replace
4	[BUG]  [BUGGY]  return(int)MathUtils.equals(getEntry(i,  col),  0.0,  this.sum);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  return(int)MathUtils.equals(getEntry(i,  col),  0.0,  this.sum);  [BUGGY]    }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)MathUtils.equals(getEntry(i,  col),  0.0,  this.sum);	  return(int)MathUtils.equals(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	10	None	replace
5	[BUG]  [BUGGY]  return  row.intValue();  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  return  row.intValue();  [BUGGY]    }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  row.intValue();	  return    row;    	non-compiled	[CE]  not  a  statement	2	None	replace
6	[BUG]  [BUGGY]  return  col;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  return  col;  [BUGGY]    }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  col;	  return    row;    	non-compiled	[CE]  not  a  statement	2	None	replace
7	[BUG]  [BUGGY]  return  row  =  i;  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  return  row  =  i;  [BUGGY]    }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  row  =  i;	  return    row;    	non-compiled	[CE]  not  a  statement	2	None	replace
8	[BUG]  [BUGGY]  return  i  +  1;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  return  i  +  1;  [BUGGY]    }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  i  +  1;	  return    i;    	non-compiled	[CE]  not  a  statement	3	None	replace
9	[BUG]  [BUGGY]  return  i  +  col;  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  return  i  +  col;  [BUGGY]    }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  i  +  col;	  return    i;    	non-compiled	[CE]  not  a  statement	3	None	replace
10	[BUG]  [BUGGY]  return(int)(MathUtils.equals(getEntry(i,  col),  0.0,  row));  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  return(int)(MathUtils.equals(getEntry(i,  col),  0.0,  row));  [BUGGY]    }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)(MathUtils.equals(getEntry(i,  col),  0.0,  row));	  return(int)(MathUtils.equals(getEntry(i,    col),    0.0,    epsilon));    	non-compiled	[CE]  not  a  statement	18	None	replace
11	[BUG]  [BUGGY]  return(int)(MathUtils.equals(getEntry(i,  col),  0.0,  sum));  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  return(int)(MathUtils.equals(getEntry(i,  col),  0.0,  sum));  [BUGGY]    }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)(MathUtils.equals(getEntry(i,  col),  0.0,  sum));	  return(int)(MathUtils.equals(getEntry(i,    col),    0.0,    epsilon));    	non-compiled	[CE]  not  a  statement	18	None	replace
12	[BUG]  [BUGGY]  return(int)(MathUtils.equals(getEntry(i,  col),  1.0,  epsilon));  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  return(int)(MathUtils.equals(getEntry(i,  col),  1.0,  epsilon));  [BUGGY]    }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)(MathUtils.equals(getEntry(i,  col),  1.0,  epsilon));	  return(int)(MathUtils.equals(getEntry(i,    col),    0.0,    epsilon));    	non-compiled	[CE]  not  a  statement	18	None	replace
13	[BUG]  [BUGGY]  return(int)(MathUtils.equals(getEntry(i,  col),  0.0,  Math.abs(col)));  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  return(int)(MathUtils.equals(getEntry(i,  col),  0.0,  Math.abs(col)));  [BUGGY]    }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)(MathUtils.equals(getEntry(i,  col),  0.0,  Math.abs(col)));	  return(int)(MathUtils.equals(getEntry(i,    col),    0.0,    epsilon));    	non-compiled	[CE]  not  a  statement	18	None	replace
14	[BUG]  [BUGGY]  row  =(int)MathUtils.eq(getEntry(i,  col),  0.0,  sum);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(int)MathUtils.eq(getEntry(i,  col),  0.0,  sum);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.eq(getEntry(i,  col),  0.0,  sum);	      row    =(int)MathUtils.eq(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	7	None	replace
15	[BUG]  [BUGGY]  row  =(Integer)MathUtils.eq(getEntry(i,  col),  0.0,  epsilon);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(Integer)MathUtils.eq(getEntry(i,  col),  0.0,  epsilon);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)MathUtils.eq(getEntry(i,  col),  0.0,  epsilon);	      row    =(int)MathUtils.eq(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	7	None	replace
16	[BUG]  [BUGGY]  row  =(int)MathUtils.eq(getEntry(i,  col),  0.0,  height);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(int)MathUtils.eq(getEntry(i,  col),  0.0,  height);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.eq(getEntry(i,  col),  0.0,  height);	      row    =(int)MathUtils.eq(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	7	None	replace
17	[BUG]  [BUGGY]  return(int)MathUtils.equals(getEntry(i,  col),  1.0,  row);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  return(int)MathUtils.equals(getEntry(i,  col),  1.0,  row);  [BUGGY]    }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)MathUtils.equals(getEntry(i,  col),  1.0,  row);	  return(int)MathUtils.equals(getEntry(i,    col),    1.0,    epsilon);    	non-compiled	[CE]  not  a  statement	11	None	replace
18	[BUG]  [BUGGY]  return(int)MathUtils.equals(getEntry(i,  col),  1.0,  sum);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  return(int)MathUtils.equals(getEntry(i,  col),  1.0,  sum);  [BUGGY]    }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)MathUtils.equals(getEntry(i,  col),  1.0,  sum);	  return(int)MathUtils.equals(getEntry(i,    col),    1.0,    epsilon);    	non-compiled	[CE]  not  a  statement	11	None	replace
19	[BUG]  [BUGGY]  row  =(int)MathUtils.escape(getEntry(i,  col),  0.0,  sum);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(int)MathUtils.escape(getEntry(i,  col),  0.0,  sum);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.escape(getEntry(i,  col),  0.0,  sum);	      row    =(int)MathUtils.escape(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	8	None	replace
20	[BUG]  [BUGGY]  row  =(Integer)MathUtils.escape(getEntry(i,  col),  0.0,  epsilon);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(Integer)MathUtils.escape(getEntry(i,  col),  0.0,  epsilon);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)MathUtils.escape(getEntry(i,  col),  0.0,  epsilon);	      row    =(int)MathUtils.escape(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	8	None	replace
21	[BUG]  [BUGGY]  row  =(int)MathUtils.escape(getEntry(i,  col),  0.0,  height);  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(int)MathUtils.escape(getEntry(i,  col),  0.0,  height);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.escape(getEntry(i,  col),  0.0,  height);	      row    =(int)MathUtils.escape(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	8	None	replace
22	[BUG]  [BUGGY]  row  =(int)MathUtils.escape(getEntry(i,  col),  0.0,  amount);  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(int)MathUtils.escape(getEntry(i,  col),  0.0,  amount);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.escape(getEntry(i,  col),  0.0,  amount);	      row    =(int)MathUtils.escape(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	8	None	replace
23	[BUG]  [BUGGY]  row  =(Integer)MathUtils.equals(getEntry(i,  col),  0.0);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(Integer)MathUtils.equals(getEntry(i,  col),  0.0);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)MathUtils.equals(getEntry(i,  col),  0.0);	      row    =(int)MathUtils.equals(getEntry(i,    col),    0.0);    	non-compiled	[CE]  not  a  statement	17	None	replace
24	[BUG]  [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  1.0);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  1.0);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.equals(getEntry(i,  col),  1.0);	      row    =(int)MathUtils.equals(getEntry(i,    col),    0.0);    	non-compiled	[CE]  not  a  statement	17	None	replace
25	[BUG]  [BUGGY]  return(int)this.baseRow;  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  return(int)this.baseRow;  [BUGGY]    }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)this.baseRow;	  return    this.baseRow;    	non-compiled	[CE]  not  a  statement	4	None	replace
26	[BUG]  [BUGGY]  return  this.baseRow  +  i;  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  return  this.baseRow  +  i;  [BUGGY]    }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  this.baseRow  +  i;	  return    this.baseRow;    	non-compiled	[CE]  not  a  statement	4	None	replace
27	[BUG]  [BUGGY]  return  this.baseRow  -  i;  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  return  this.baseRow  -  i;  [BUGGY]    }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  this.baseRow  -  i;	  return    this.baseRow;    	non-compiled	[CE]  not  a  statement	4	None	replace
28	[BUG]  [BUGGY]  row  =(Integer)MathUtils.equals(getEntry(i,  col),  1.0,  epsilon);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(Integer)MathUtils.equals(getEntry(i,  col),  1.0,  epsilon);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)MathUtils.equals(getEntry(i,  col),  1.0,  epsilon);	      row    =(int)MathUtils.equals(getEntry(i,    col),    1.0,    epsilon);    	non-compiled	[CE]  not  a  statement	13	None	replace
29	[BUG]  [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  1.0,  height);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  1.0,  height);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.equals(getEntry(i,  col),  1.0,  height);	      row    =(int)MathUtils.equals(getEntry(i,    col),    1.0,    epsilon);    	non-compiled	[CE]  not  a  statement	13	None	replace
30	[BUG]  [BUGGY]  return(int)MathUtils.equals(getEntry(i,  col),  0,  epsilon);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  return(int)MathUtils.equals(getEntry(i,  col),  0,  epsilon);  [BUGGY]    }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)MathUtils.equals(getEntry(i,  col),  0,  epsilon);	  return    this;    	non-compiled	[CE]  not  a  statement	1	None	replace
31	[BUG]  [BUGGY]  row  =(Integer)Math.floor(getEntry(i,  col),  0.0,  epsilon);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(Integer)Math.floor(getEntry(i,  col),  0.0,  epsilon);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)Math.floor(getEntry(i,  col),  0.0,  epsilon);	      row    =(int)Math.floor(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	16	None	replace
32	[BUG]  [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  0.0,  height);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  0.0,  height);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.floor(getEntry(i,  col),  0.0,  height);	      row    =(int)Math.floor(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	16	None	replace
33	[BUG]  [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  0.0,  Math.pow(10,  epsilon));  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  0.0,  Math.pow(10,  epsilon));  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.floor(getEntry(i,  col),  0.0,  Math.pow(10,  epsilon));	      row    =(int)Math.floor(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	16	None	replace
34	[BUG]  [BUGGY]  row  =(Integer)Math.ceil(getEntry(i,  col),  0.0,  epsilon);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(Integer)Math.ceil(getEntry(i,  col),  0.0,  epsilon);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)Math.ceil(getEntry(i,  col),  0.0,  epsilon);	      row    =(int)Math.ceil(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	14	None	replace
35	[BUG]  [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  0.0,  sum);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  0.0,  sum);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.ceil(getEntry(i,  col),  0.0,  sum);	      row    =(int)Math.ceil(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	14	None	replace
36	[BUG]  [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  0.0,  height);  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  0.0,  height);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.ceil(getEntry(i,  col),  0.0,  height);	      row    =(int)Math.ceil(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	14	None	replace
37	[BUG]  [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  0,  0);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  0,  0);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.equals(getEntry(i,  col),  0,  0);	      row    =(int)MathUtils.equals(getEntry(i,    col),    0,    epsilon);    	non-compiled	[CE]  not  a  statement	9	None	replace
38	[BUG]  [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  0,  0.0);  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  0,  0.0);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.equals(getEntry(i,  col),  0,  0.0);	      row    =(int)MathUtils.equals(getEntry(i,    col),    0,    epsilon);    	non-compiled	[CE]  not  a  statement	9	None	replace
39	[BUG]  [BUGGY]  row  =(int)Math.floor(i);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(int)Math.floor(i);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.floor(i);	      row    =(int)Math.floor(col);    	non-compiled	[CE]  not  a  statement	12	None	replace
40	[BUG]  [BUGGY]  row  =(Integer)Math.floor(col);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(Integer)Math.floor(col);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)Math.floor(col);	      row    =(int)Math.floor(col);    	non-compiled	[CE]  not  a  statement	12	None	replace
41	[BUG]  [BUGGY]  row  =(int)Math.floor(row);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(int)Math.floor(row);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.floor(row);	      row    =(int)Math.floor(col);    	non-compiled	[CE]  not  a  statement	12	None	replace
42	[BUG]  [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  0.0,  height);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  0.0,  height);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.equals(getEntry(i,  col),  0.0,  height);	      row    =(int)MathUtils.equals(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	6	None	replace
43	[BUG]  [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  0.0,  sum);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  0.0,  sum);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.equals(getEntry(i,  col),  0.0,  sum);	      row    =(int)MathUtils.equals(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	6	None	replace
44	[BUG]  [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  0.0,  amount);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  0.0,  amount);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.equals(getEntry(i,  col),  0.0,  amount);	      row    =(int)MathUtils.equals(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	6	None	replace
45	[BUG]  [BUGGY]  row  =  MathUtils.equals(getEntry(i,  col),  0.0,  epsilon);  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =  MathUtils.equals(getEntry(i,  col),  0.0,  epsilon);  [BUGGY]    }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =  MathUtils.equals(getEntry(i,  col),  0.0,  epsilon);	      	non-compiled	[CE]  not  a  statement	5	None	replace
46	[BUG]  [BUGGY]  row  =(int)MathUtils.convert(getEntry(i,  col),  0.0,  epsilon);  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(int)MathUtils.convert(getEntry(i,  col),  0.0,  epsilon);  [BUGGY]    }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.convert(getEntry(i,  col),  0.0,  epsilon);	      	non-compiled	[CE]  not  a  statement	5	None	replace
47	[BUG]  [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  0.0);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  0.0);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.ceil(getEntry(i,  col),  0.0);	      row    =(int)Math.ceil(getEntry(i,    col),    epsilon);    	non-compiled	[CE]  not  a  statement	15	None	replace
48	[BUG]  [BUGGY]  row  =(Integer)Math.ceil(getEntry(i,  col),  epsilon);  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(Integer)Math.ceil(getEntry(i,  col),  epsilon);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(Integer)Math.ceil(getEntry(i,  col),  epsilon);	      row    =(int)Math.ceil(getEntry(i,    col),    epsilon);    	non-compiled	[CE]  not  a  statement	15	None	replace
49	[BUG]  [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  0);  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  0);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.ceil(getEntry(i,  col),  0);	      row    =(int)Math.ceil(getEntry(i,    col),    epsilon);    	non-compiled	[CE]  not  a  statement	15	None	replace
50	[BUG]  [BUGGY]  return(int)MathUtils.equals(getEntry(row,  col),  0.0,  epsilon);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  return(int)MathUtils.equals(getEntry(row,  col),  0.0,  epsilon);  [BUGGY]    }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)MathUtils.equals(getEntry(row,  col),  0.0,  epsilon);	  return(int)MathUtils.equals(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	10	None	replace
51	[BUG]  [BUGGY]  row  =(int)MathUtils.escape(getEntry(i,  col),  0.0,  artificialVar);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(int)MathUtils.escape(getEntry(i,  col),  0.0,  artificialVar);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.escape(getEntry(i,  col),  0.0,  artificialVar);	      row    =(int)MathUtils.escape(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	8	None	replace
52	[BUG]  [BUGGY]  row  =(int)MathUtils.escape(getEntry(i,  col),  1.0,  epsilon);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(int)MathUtils.escape(getEntry(i,  col),  1.0,  epsilon);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.escape(getEntry(i,  col),  1.0,  epsilon);	      row    =(int)MathUtils.escape(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	8	None	replace
53	[BUG]  [BUGGY]  return  i  +(int)MathUtils.equals(getEntry(i,  col),  0.0,  epsilon);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  return  i  +(int)MathUtils.equals(getEntry(i,  col),  0.0,  epsilon);  [BUGGY]    }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  i  +(int)MathUtils.equals(getEntry(i,  col),  0.0,  epsilon);	  return    i;    	non-compiled	[CE]  not  a  statement	3	None	replace
54	[BUG]  [BUGGY]  return  i  +(int)MathUtils.doubleValue(getEntry(i,  col),  0.0,  epsilon);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  return  i  +(int)MathUtils.doubleValue(getEntry(i,  col),  0.0,  epsilon);  [BUGGY]    }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  i  +(int)MathUtils.doubleValue(getEntry(i,  col),  0.0,  epsilon);	  return    i;    	non-compiled	[CE]  not  a  statement	3	None	replace
55	[BUG]  [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  epsilon,  0.0);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  epsilon,  0.0);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.equals(getEntry(i,  col),  epsilon,  0.0);	      row    =(int)MathUtils.equals(getEntry(i,    col),    0.0);    	non-compiled	[CE]  not  a  statement	17	None	replace
56	[BUG]  [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  0.0,  artificialVar);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  0.0,  artificialVar);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.equals(getEntry(i,  col),  0.0,  artificialVar);	      row    =(int)MathUtils.equals(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	6	None	replace
57	[BUG]  [BUGGY]  return(int)MathUtils.equals(getEntry(row,  col),  1.0,  epsilon);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  return(int)MathUtils.equals(getEntry(row,  col),  1.0,  epsilon);  [BUGGY]    }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)MathUtils.equals(getEntry(row,  col),  1.0,  epsilon);	  return(int)MathUtils.equals(getEntry(i,    col),    1.0,    epsilon);    	non-compiled	[CE]  not  a  statement	11	None	replace
58	[BUG]  [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  0.0,  artificialVar);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  0.0,  artificialVar);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.floor(getEntry(i,  col),  0.0,  artificialVar);	      row    =(int)Math.floor(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	16	None	replace
59	[BUG]  [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  0.0,  sum);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  0.0,  sum);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.floor(getEntry(i,  col),  0.0,  sum);	      row    =(int)Math.floor(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	16	None	replace
60	[BUG]  [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  0,  epsilon  +  1);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  0,  epsilon  +  1);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.equals(getEntry(i,  col),  0,  epsilon  +  1);	      row    =(int)MathUtils.equals(getEntry(i,    col),    0,    epsilon);    	non-compiled	[CE]  not  a  statement	9	None	replace
61	[BUG]  [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  1.0,  epsilon);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  1.0,  epsilon);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.ceil(getEntry(i,  col),  1.0,  epsilon);	      row    =(int)Math.ceil(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	14	None	replace
62	[BUG]  [BUGGY]  return(int)(MathUtils.equals(getEntry(row,  col),  0.0,  epsilon));  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  return(int)(MathUtils.equals(getEntry(row,  col),  0.0,  epsilon));  [BUGGY]    }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)(MathUtils.equals(getEntry(row,  col),  0.0,  epsilon));	  return(int)(MathUtils.equals(getEntry(i,    col),    0.0,    epsilon));    	non-compiled	[CE]  not  a  statement	18	None	replace
63	[BUG]  [BUGGY]  row  =(int)MathUtils.eq(getEntry(i,  col),  1.0,  epsilon);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(int)MathUtils.eq(getEntry(i,  col),  1.0,  epsilon);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.eq(getEntry(i,  col),  1.0,  epsilon);	      row    =(int)MathUtils.eq(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	7	None	replace
64	[BUG]  [BUGGY]  row  =(int)MathUtils.eq(getEntry(i,  col),  0.0,  amount);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(int)MathUtils.eq(getEntry(i,  col),  0.0,  amount);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.eq(getEntry(i,  col),  0.0,  amount);	      row    =(int)MathUtils.eq(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	7	None	replace
65	[BUG]  [BUGGY]  return(int)Math.floor(col);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  return(int)Math.floor(col);  [BUGGY]    }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)Math.floor(col);	  return    this.baseRow;    	non-compiled	[CE]  not  a  statement	4	None	replace
66	[BUG]  [BUGGY]  row  =(int)Math.floor(epsilon);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(int)Math.floor(epsilon);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.floor(epsilon);	      row    =(int)Math.floor(col);    	non-compiled	[CE]  not  a  statement	12	None	replace
67	[BUG]  [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  1.0,  sum);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  1.0,  sum);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.equals(getEntry(i,  col),  1.0,  sum);	      row    =(int)MathUtils.equals(getEntry(i,    col),    1.0,    epsilon);    	non-compiled	[CE]  not  a  statement	13	None	replace
68	[BUG]  [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  1.0,  artificialVar);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  1.0,  artificialVar);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.equals(getEntry(i,  col),  1.0,  artificialVar);	      row    =(int)MathUtils.equals(getEntry(i,    col),    1.0,    epsilon);    	non-compiled	[CE]  not  a  statement	13	None	replace
69	[BUG]  [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  1.0,  epsilon  +  1);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  1.0,  epsilon  +  1);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.equals(getEntry(i,  col),  1.0,  epsilon  +  1);	      row    =(int)MathUtils.equals(getEntry(i,    col),    1.0,    epsilon);    	non-compiled	[CE]  not  a  statement	13	None	replace
70	[BUG]  [BUGGY]  row  =(int)MathUtils.equals(getEntry(row,  col),  1.0,  epsilon);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(int)MathUtils.equals(getEntry(row,  col),  1.0,  epsilon);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.equals(getEntry(row,  col),  1.0,  epsilon);	      row    =(int)MathUtils.equals(getEntry(i,    col),    1.0,    epsilon);    	non-compiled	[CE]  not  a  statement	13	None	replace
71	[BUG]  [BUGGY]  row  =(int)MathUtils.escape(getEntry(i,  col),  0.0,  this.value);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(int)MathUtils.escape(getEntry(i,  col),  0.0,  this.value);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.escape(getEntry(i,  col),  0.0,  this.value);	      row    =(int)MathUtils.escape(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	8	None	replace
72	[BUG]  [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  epsilon);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  epsilon);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.equals(getEntry(i,  col),  epsilon);	      row    =(int)MathUtils.equals(getEntry(i,    col),    0.0);    	non-compiled	[CE]  not  a  statement	17	None	replace
73	[BUG]  [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  1.0);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  1.0);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.ceil(getEntry(i,  col),  1.0);	      row    =(int)Math.ceil(getEntry(i,    col),    epsilon);    	non-compiled	[CE]  not  a  statement	15	None	replace
74	[BUG]  [BUGGY]  return  row  <  0?  0  :  row;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  return  row  <  0?  0  :  row;  [BUGGY]    }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  row  <  0?  0  :  row;	  return    row;    	non-compiled	[CE]  not  a  statement	2	None	replace
75	[BUG]  [BUGGY]  return  row  <  =  0?  0  :  row;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  return  row  <  =  0?  0  :  row;  [BUGGY]    }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  row  <  =  0?  0  :  row;	  return    row;    	non-compiled	[CE]  not  a  statement	2	None	replace
76	[BUG]  [BUGGY]  return  0;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  return  0;  [BUGGY]    }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  0;	  return    i;    	non-compiled	[CE]  not  a  statement	3	None	replace
77	[BUG]  [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  0.0,  epsilon  +  1);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(int)MathUtils.equals(getEntry(i,  col),  0.0,  epsilon  +  1);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.equals(getEntry(i,  col),  0.0,  epsilon  +  1);	      row    =(int)MathUtils.equals(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	6	None	replace
78	[BUG]  [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  0.0,  epsilon,  height);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(int)Math.ceil(getEntry(i,  col),  0.0,  epsilon,  height);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.ceil(getEntry(i,  col),  0.0,  epsilon,  height);	      row    =(int)Math.ceil(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	14	None	replace
79	[BUG]  [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  1.0,  epsilon);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  1.0,  epsilon);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.floor(getEntry(i,  col),  1.0,  epsilon);	      row    =(int)Math.floor(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	16	None	replace
80	[BUG]  [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  0.0,  epsilon,  height);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(int)Math.floor(getEntry(i,  col),  0.0,  epsilon,  height);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)Math.floor(getEntry(i,  col),  0.0,  epsilon,  height);	      row    =(int)Math.floor(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	16	None	replace
81	[BUG]  [BUGGY]  return  this.baseRow  -(int)MathUtils.equals(getEntry(i,  col),  0.0,  epsilon);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  return  this.baseRow  -(int)MathUtils.equals(getEntry(i,  col),  0.0,  epsilon);  [BUGGY]    }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  this.baseRow  -(int)MathUtils.equals(getEntry(i,  col),  0.0,  epsilon);	  return    this.baseRow;    	non-compiled	[CE]  not  a  statement	4	None	replace
82	[BUG]  [BUGGY]  row  =(int)MathUtils.eq(getEntry(i,  col),  0.0,  epsilon,  height);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {    [BUGGY]  row  =(int)MathUtils.eq(getEntry(i,  col),  0.0,  epsilon,  height);  [BUGGY]    return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	row  =(int)MathUtils.eq(getEntry(i,  col),  0.0,  epsilon,  height);	      row    =(int)MathUtils.eq(getEntry(i,    col),    0.0,    epsilon);    	non-compiled	[CE]  not  a  statement	7	None	replace
