bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  this;  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {  [BUGGY]  return  this;  [BUGGY]  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  this;	return  null;  	non-compiled	[CE]  not  a  statement	5	None	replace
2	[BUG]  [BUGGY]  return  row;  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {  [BUGGY]  return  row;  [BUGGY]  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  row;	return  null;  	non-compiled	[CE]  not  a  statement	5	None	replace
3	[BUG]  [BUGGY]  return  i;  [CE]  not  a  statement  [FE]        AssertionError  [CONTEXT]  private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {  [BUGGY]  return  i;  [BUGGY]  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  i;	return  null;  	non-compiled	[CE]  not  a  statement	5	None	replace
4	[BUG]  [BUGGY]  return  this.baseRow;  [CE]  not  a  statement  [FE]          AssertionError  [CONTEXT]  private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {  [BUGGY]  return  this.baseRow;  [BUGGY]  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return  this.baseRow;	return  null;  	non-compiled	[CE]  not  a  statement	5	None	replace
5	[BUG]  [BUGGY]    [CE]  not  a  statement  [FE]            AssertionError  [CONTEXT]  private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {  [BUGGY]    [BUGGY]  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	  	return  null;  	non-compiled	[CE]  not  a  statement	5	None	replace
6	[BUG]  [BUGGY]    row  =(int)MathUtils.equals(getEntry(i,  col),  0.0,  epsilon);  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {  [BUGGY]    row  =(int)MathUtils.equals(getEntry(i,  col),  0.0,  epsilon);  [BUGGY]  return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	    row  =(int)MathUtils.equals(getEntry(i,  col),  0.0,  epsilon);		non-compiled	[CE]  not  a  statement	6	None	add
7	[BUG]  [BUGGY]    row  =(int)MathUtils.eq(getEntry(i,  col),  0.0,  epsilon);  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {  [BUGGY]    row  =(int)MathUtils.eq(getEntry(i,  col),  0.0,  epsilon);  [BUGGY]  return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	    row  =(int)MathUtils.eq(getEntry(i,  col),  0.0,  epsilon);		non-compiled	[CE]  not  a  statement	6	None	add
8	[BUG]  [BUGGY]    row  =(int)MathUtils.escape(getEntry(i,  col),  0.0,  epsilon);  [CE]  not  a  statement  [FE]        AssertionError  [CONTEXT]  private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {  [BUGGY]    row  =(int)MathUtils.escape(getEntry(i,  col),  0.0,  epsilon);  [BUGGY]  return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	    row  =(int)MathUtils.escape(getEntry(i,  col),  0.0,  epsilon);		non-compiled	[CE]  not  a  statement	6	None	add
9	[BUG]  [BUGGY]    row  =(int)MathUtils.equals(getEntry(i,  col),  0,  epsilon);  [CE]  not  a  statement  [FE]          AssertionError  [CONTEXT]  private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {  [BUGGY]    row  =(int)MathUtils.equals(getEntry(i,  col),  0,  epsilon);  [BUGGY]  return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	    row  =(int)MathUtils.equals(getEntry(i,  col),  0,  epsilon);		non-compiled	[CE]  not  a  statement	6	None	add
10	[BUG]  [BUGGY]  return(int)MathUtils.equals(getEntry(i,  col),  0.0,  epsilon);  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {  [BUGGY]  return(int)MathUtils.equals(getEntry(i,  col),  0.0,  epsilon);  [BUGGY]  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)MathUtils.equals(getEntry(i,  col),  0.0,  epsilon);	return  null;  	non-compiled	[CE]  not  a  statement	5	None	replace
11	[BUG]  [BUGGY]  return(int)MathUtils.equals(getEntry(i,  col),  1.0,  epsilon);  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {  [BUGGY]  return(int)MathUtils.equals(getEntry(i,  col),  1.0,  epsilon);  [BUGGY]  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)MathUtils.equals(getEntry(i,  col),  1.0,  epsilon);	return  null;  	non-compiled	[CE]  not  a  statement	5	None	replace
12	[BUG]  [BUGGY]    row  =(int)Math.floor(col);  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {  [BUGGY]    row  =(int)Math.floor(col);  [BUGGY]  return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	    row  =(int)Math.floor(col);		non-compiled	[CE]  not  a  statement	6	None	add
13	[BUG]  [BUGGY]    row  =(int)MathUtils.equals(getEntry(i,  col),  1.0,  epsilon);  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {  [BUGGY]    row  =(int)MathUtils.equals(getEntry(i,  col),  1.0,  epsilon);  [BUGGY]  return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	    row  =(int)MathUtils.equals(getEntry(i,  col),  1.0,  epsilon);		non-compiled	[CE]  not  a  statement	6	None	add
14	[BUG]  [BUGGY]    row  =(int)Math.ceil(getEntry(i,  col),  0.0,  epsilon);  [CE]  not  a  statement  [FE]        AssertionError  [CONTEXT]  private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {  [BUGGY]    row  =(int)Math.ceil(getEntry(i,  col),  0.0,  epsilon);  [BUGGY]  return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	    row  =(int)Math.ceil(getEntry(i,  col),  0.0,  epsilon);		non-compiled	[CE]  not  a  statement	6	None	add
15	[BUG]  [BUGGY]    row  =(int)Math.ceil(getEntry(i,  col),  epsilon);  [CE]  not  a  statement  [FE]          AssertionError  [CONTEXT]  private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {  [BUGGY]    row  =(int)Math.ceil(getEntry(i,  col),  epsilon);  [BUGGY]  return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	    row  =(int)Math.ceil(getEntry(i,  col),  epsilon);		non-compiled	[CE]  not  a  statement	6	None	add
16	[BUG]  [BUGGY]    row  =(int)Math.floor(getEntry(i,  col),  0.0,  epsilon);  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {  [BUGGY]    row  =(int)Math.floor(getEntry(i,  col),  0.0,  epsilon);  [BUGGY]  return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	    row  =(int)Math.floor(getEntry(i,  col),  0.0,  epsilon);		non-compiled	[CE]  not  a  statement	6	None	add
17	[BUG]  [BUGGY]    row  =(int)MathUtils.equals(getEntry(i,  col),  0.0);  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {  [BUGGY]    row  =(int)MathUtils.equals(getEntry(i,  col),  0.0);  [BUGGY]  return  null;  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	    row  =(int)MathUtils.equals(getEntry(i,  col),  0.0);		non-compiled	[CE]  not  a  statement	6	None	add
18	[BUG]  [BUGGY]  return(int)(MathUtils.equals(getEntry(i,  col),  0.0,  epsilon));  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  private  Integer  getBasicRow(final  int  col)  {  Integer  row  =  null;  for  (int  i  =  getNumObjectiveFunctions();  i  <  getHeight();  i++)  {  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  if  (row  ==  null)  {  row  =  i;  }  else  {  [BUGGY]  return(int)(MathUtils.equals(getEntry(i,  col),  0.0,  epsilon));  [BUGGY]  }  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  [VARIABLES]  Integer  row  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.35355339059327373	279	279	1	replace	return(int)(MathUtils.equals(getEntry(i,  col),  0.0,  epsilon));	return  null;  	non-compiled	[CE]  not  a  statement	5	None	replace
