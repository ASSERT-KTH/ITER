bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Integer  coefficients[]  =  f.getValue(j,  tableau);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  f.getValue(j,  tableau);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  f.getValue(j,  tableau);	  Integer    coefficients[]    =    f.getValue(j);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
2	[BUG]  [BUGGY]  Integer  coefficients[]  =  f.getValue(j,  column);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  f.getValue(j,  column);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  f.getValue(j,  column);	  Integer    coefficients[]    =    f.getValue(j);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
3	[BUG]  [BUGGY]  if  (j  ==  0  &&  table.getEntry(basicRow,  j)  ==  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j  ==  0  &&  table.getEntry(basicRow,  j)  ==  0)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j  ==  0  &&  table.getEntry(basicRow,  j)  ==  0)  {	  if    (basicRow    ==    null    &&    table.getEntry(basicRow,    j)    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
4	[BUG]  [BUGGY]  if  (j  ==  0  ||  table.getEntry(basicRow,  j)  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j  ==  0  ||  table.getEntry(basicRow,  j)  ==  0)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j  ==  0  ||  table.getEntry(basicRow,  j)  ==  0)  {	  if    (basicRow    ==    null    &&    table.getEntry(basicRow,    j)    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
5	[BUG]  [BUGGY]  Integer  table  =  getTableau(basicRow,  j);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  table  =  getTableau(basicRow,  j);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  table  =  getTableau(basicRow,  j);	  Integer    tableau    =    getTableau(basicRow);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
6	[BUG]  [BUGGY]  Integer  tableau  =  getTableau(basicRow,  i);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  tableau  =  getTableau(basicRow,  i);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  tableau  =  getTableau(basicRow,  i);	  Integer    tableau    =    getTableau(basicRow);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
7	[BUG]  [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getBasicOffset()  -  j);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getBasicOffset()  -  j);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  getEntry(basicRow,  getBasicOffset()  -  j);	  Integer    coefficients[]    =    getEntry(basicRow,    getBasicOffset());    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
8	[BUG]  [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getBasicOffset()  +  j);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getBasicOffset()  +  j);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  getEntry(basicRow,  getBasicOffset()  +  j);	  Integer    coefficients[]    =    getEntry(basicRow,    getBasicOffset());    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
9	[BUG]  [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  i);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  i);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  getEntry(basicRow,  i);	  Integer    coefficients[]    =    getEntry(basicRow,    j);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
10	[BUG]  [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  j  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  j  +  1);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  getEntry(basicRow,  j  +  1);	  Integer    coefficients[]    =    getEntry(basicRow,    j);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
11	[BUG]  [BUGGY]  Tableau  graph  =  getTableau(basicRow,  i);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Tableau  graph  =  getTableau(basicRow,  i);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Tableau  graph  =  getTableau(basicRow,  i);	  Tableau    graph    =    getTableau(basicRow,    j);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
12	[BUG]  [BUGGY]  Tableau  graph  =  getTableau(basicRow,  j  +  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Tableau  graph  =  getTableau(basicRow,  j  +  1);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Tableau  graph  =  getTableau(basicRow,  j  +  1);	  Tableau    graph    =    getTableau(basicRow,    j);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
13	[BUG]  [BUGGY]  Integer  coefficients[]  =  tableau.getValue(basicRow,  i);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  tableau.getValue(basicRow,  i);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  tableau.getValue(basicRow,  i);	  Integer    coefficients[]    =    f.getValue(basicRow,    i);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
14	[BUG]  [BUGGY]  Integer  coefficients[]  =  tableau.getValue(basicRow,  j);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  tableau.getValue(basicRow,  j);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  tableau.getValue(basicRow,  j);	  Integer    coefficients[]    =    f.getValue(basicRow,    i);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
15	[BUG]  [BUGGY]  Integer  coefficients[]  =  graph.getValue(basicRow,  i);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  graph.getValue(basicRow,  i);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  graph.getValue(basicRow,  i);	  Integer    coefficients[]    =    f.getValue(basicRow,    i);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
16	[BUG]  [BUGGY]  if  (j  ==  0  &&  tableau.getEntry(basicRow,  j)  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j  ==  0  &&  tableau.getEntry(basicRow,  j)  ==  0)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j  ==  0  &&  tableau.getEntry(basicRow,  j)  ==  0)  {	  if    (basicRow    ==    null    &&    tableau.getEntry(basicRow,    j)    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
17	[BUG]  [BUGGY]  if  (j  ==  0  &&  baseRow.getEntry(basicRow,  j)  ==  1)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j  ==  0  &&  baseRow.getEntry(basicRow,  j)  ==  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j  ==  0  &&  baseRow.getEntry(basicRow,  j)  ==  1)  {	  if    (j    ==    0    &&    tableau.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getRhsOffset();  i++)  {  coefficients[i]  =  (basicRow  ==  null?  0  :  getEntry(basicRow,  getRhsOffset()));  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  for(int  i  =  0;  i  <  getRhsOffset();  i++)  {  coefficients[i]  =  (basicRow  ==  null?  0  :  getEntry(basicRow,  getRhsOffset()));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	for(int  i  =  0;  i  <  getRhsOffset();  i++)  {  coefficients[i]  =  (basicRow  ==  null?  0  :  getEntry(basicRow,  getRhsOffset()));	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    coefficients[i]    =    (basicRow    ==    null?    0    :    getEntry(basicRow,    getRhsOffset()));    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  coefficients[i]  =  (basicRow  ==  null?  0  :  getEntry(basicRow,  getRhsOffset()));  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  coefficients[i]  =  (basicRow  ==  null?  0  :  getEntry(basicRow,  getRhsOffset()));  }  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  coefficients[i]  =  (basicRow  ==  null?  0  :  getEntry(basicRow,  getRhsOffset()));  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    coefficients[i]    =    (basicRow    ==    null?    0    :    getEntry(basicRow,    getRhsOffset()));    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
20	[BUG]  [BUGGY]  if  (j!=  0  ||  table.getEntry(basicRow,  j)  ==  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j!=  0  ||  table.getEntry(basicRow,  j)  ==  0)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j!=  0  ||  table.getEntry(basicRow,  j)  ==  0)  {	  if    (basicRow    ==    null    ||    table.getEntry(basicRow,    j)    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
21	[BUG]  [BUGGY]  for(int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions();  j++)  {  coefficients[i]  =  0;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  for(int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions();  j++)  {  coefficients[i]  =  0;  }  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	for(int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions();  j++)  {  coefficients[i]  =  0;  }	  for(int    i    =    getNumObjectiveFunctions();    j    <    getNumObjectiveFunctions()    +    i;    j++)    {    coefficients[i]    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
22	[BUG]  [BUGGY]  for(int  j  =  getNumObjectiveFunctions();  j  <  getRhsOffset();  j++)  {  coefficients[i]  =  0;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  for(int  j  =  getNumObjectiveFunctions();  j  <  getRhsOffset();  j++)  {  coefficients[i]  =  0;  }  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	for(int  j  =  getNumObjectiveFunctions();  j  <  getRhsOffset();  j++)  {  coefficients[i]  =  0;  }	  for(int    i    =    getNumObjectiveFunctions();    j    <    getNumObjectiveFunctions()    +    i;    j++)    {    coefficients[i]    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
23	[BUG]  [BUGGY]  for(int  j  =  getNumObjectiveFunctions();  j  <  getSize();  j++)  {  coefficients[i]  =  0;  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  for(int  j  =  getNumObjectiveFunctions();  j  <  getSize();  j++)  {  coefficients[i]  =  0;  }  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	for(int  j  =  getNumObjectiveFunctions();  j  <  getSize();  j++)  {  coefficients[i]  =  0;  }	  for(int    i    =    getNumObjectiveFunctions();    j    <    getNumObjectiveFunctions()    +    i;    j++)    {    coefficients[i]    =    0;    }    	non-compiled	[CE]  ')'  expected	11	None	replace
24	[BUG]  [BUGGY]  for(int  j  =  getNumObjectiveFunctions();  j  <  getBasicFunctions()  +  i;  j++)  {  coefficients[i]  =  0;  }  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  for(int  j  =  getNumObjectiveFunctions();  j  <  getBasicFunctions()  +  i;  j++)  {  coefficients[i]  =  0;  }  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	for(int  j  =  getNumObjectiveFunctions();  j  <  getBasicFunctions()  +  i;  j++)  {  coefficients[i]  =  0;  }	  for(int    i    =    getNumObjectiveFunctions();    j    <    getNumObjectiveFunctions()    +    i;    j++)    {    coefficients[i]    =    0;    }    	non-compiled	[CE]  ')'  expected	11	None	replace
25	[BUG]  [BUGGY]  if  (basicRow.getEntry(basicRow,  i)>  1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow.getEntry(basicRow,  i)>  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow.getEntry(basicRow,  i)>  1)  {	  if    (basicRow.getEntry(basicRow,    j)>    1)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
26	[BUG]  [BUGGY]  if  (j!=  0  &&  basicRow!=  null  &&  basicRow.getEntry(basicRow,  j)  ==  1)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j!=  0  &&  basicRow!=  null  &&  basicRow.getEntry(basicRow,  j)  ==  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j!=  0  &&  basicRow!=  null  &&  basicRow.getEntry(basicRow,  j)  ==  1)  {	  if    (basicRow!=    null    &&    basicRow.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
27	[BUG]  [BUGGY]  if  (j  ==  0  &&  basicRow!=  null  &&  basicRow.getEntry(basicRow,  j)  ==  1)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j  ==  0  &&  basicRow!=  null  &&  basicRow.getEntry(basicRow,  j)  ==  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j  ==  0  &&  basicRow!=  null  &&  basicRow.getEntry(basicRow,  j)  ==  1)  {	  if    (basicRow!=    null    &&    basicRow.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
28	[BUG]  [BUGGY]  if  (j!=  0  ||  basicRow!=  null  &&  basicRow.getEntry(basicRow,  j)  ==  1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j!=  0  ||  basicRow!=  null  &&  basicRow.getEntry(basicRow,  j)  ==  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j!=  0  ||  basicRow!=  null  &&  basicRow.getEntry(basicRow,  j)  ==  1)  {	  if    (basicRow!=    null    &&    basicRow.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
29	[BUG]  [BUGGY]  if  (basicRow.getEntry(basicRow,  j  +  1)!=  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow.getEntry(basicRow,  j  +  1)!=  0)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow.getEntry(basicRow,  j  +  1)!=  0)  {	  if    (basicRow.getEntry(basicRow,    j    +    1)    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
30	[BUG]  [BUGGY]  if  (basicRow.getEntry(basicRow,  j  +  1)  >=  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow.getEntry(basicRow,  j  +  1)  >=  0)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow.getEntry(basicRow,  j  +  1)  >=  0)  {	  if    (basicRow.getEntry(basicRow,    j    +    1)    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
31	[BUG]  [BUGGY]  Integer  coefficients[]  =  basicRow.getValue(j);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  basicRow.getValue(j);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  basicRow.getValue(j);	  Integer    coefficients[]    =    basicRow.getValue(i);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
32	[BUG]  [BUGGY]  Integer  tableau  =  getTableau(basicRow,  j  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  tableau  =  getTableau(basicRow,  j  +  1);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  tableau  =  getTableau(basicRow,  j  +  1);	  Integer    tableau    =    getTableau(basicRow,    j);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
33	[BUG]  [BUGGY]  if  (j.getEntry(basicRow,  i)>  1)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j.getEntry(basicRow,  i)>  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j.getEntry(basicRow,  i)>  1)  {	  if    (j.getEntry(basicRow,    i)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
34	[BUG]  [BUGGY]  if  (j.getEntry(basicRow,  i)  ==  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j.getEntry(basicRow,  i)  ==  0)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j.getEntry(basicRow,  i)  ==  0)  {	  if    (j.getEntry(basicRow,    i)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
35	[BUG]  [BUGGY]  Tableau  table  =  getTableau(basicRow,  j  +  1,  i);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Tableau  table  =  getTableau(basicRow,  j  +  1,  i);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Tableau  table  =  getTableau(basicRow,  j  +  1,  i);	  Tableau    tableau    =    getTableau(basicRow,    j    +    1);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
36	[BUG]  [BUGGY]  if  (j!=  0  &&  table.getEntry(basicRow,  j)  ==  0)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j!=  0  &&  table.getEntry(basicRow,  j)  ==  0)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j!=  0  &&  table.getEntry(basicRow,  j)  ==  0)  {	  if    (basicRow!=    null    &&    table.getEntry(basicRow,    j)    ==    0)    {    	non-compiled	[CE]  ')'  expected	65	None	replace
37	[BUG]  [BUGGY]  Integer  coefficients[]  =  f.getValue(basicRow,  j  +  1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  f.getValue(basicRow,  j  +  1);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  f.getValue(basicRow,  j  +  1);	  Integer    coefficients[]    =    f.getValue(basicRow,    j);    	non-compiled	[CE]  ')'  expected	30	None	replace
38	[BUG]  [BUGGY]  Integer  coefficients[]  =  f.getValue(basicRow,  j  -  1);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  f.getValue(basicRow,  j  -  1);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  f.getValue(basicRow,  j  -  1);	  Integer    coefficients[]    =    f.getValue(basicRow,    j);    	non-compiled	[CE]  ')'  expected	30	None	replace
39	[BUG]  [BUGGY]  Tableau  table  =  getTableau(basicRow,  j);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Tableau  table  =  getTableau(basicRow,  j);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Tableau  table  =  getTableau(basicRow,  j);	  Tableau    table    =    getTableau(basicRow,    i);    	non-compiled	[CE]  ')'  expected	1	None	replace
40	[BUG]  [BUGGY]  Tableau  table  =  getTableau(basicRow,  i  +  1);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Tableau  table  =  getTableau(basicRow,  i  +  1);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Tableau  table  =  getTableau(basicRow,  i  +  1);	  Tableau    table    =    getTableau(basicRow,    i);    	non-compiled	[CE]  ')'  expected	1	None	replace
41	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getRhsOffset();  i++)  {  coefficients[i]  =  -(basicRow  ==  null?  0  :  getEntry(basicRow,  getRhsOffset()));  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  for(int  i  =  0;  i  <  getRhsOffset();  i++)  {  coefficients[i]  =  -(basicRow  ==  null?  0  :  getEntry(basicRow,  getRhsOffset()));  }  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	for(int  i  =  0;  i  <  getRhsOffset();  i++)  {  coefficients[i]  =  -(basicRow  ==  null?  0  :  getEntry(basicRow,  getRhsOffset()));  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    coefficients[i]    =    -(basicRow    ==    null?    0    :    getEntry(basicRow,    getRhsOffset()));    }    	non-compiled	[CE]  ')'  expected	69	None	replace
42	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  coefficients[i]  =  -(basicRow  ==  null?  0  :  getEntry(basicRow,  getRhsOff  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  coefficients[i]  =  -(basicRow  ==  null?  0  :  getEntry(basicRow,  getRhsOff  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  coefficients[i]  =  -(basicRow  ==  null?  0  :  getEntry(basicRow,  getRhsOff	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    coefficients[i]    =    -(basicRow    ==    null?    0    :    getEntry(basicRow,    getRhsOffset()));    }    	non-compiled	[CE]  ')'  expected	69	None	replace
43	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  coefficients[i]  =  -(basicRow  ==  null?  0  :  getEntry(basicRow,  getRhsOffset())  [CE]  ')'  expected  [FE]                            AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  coefficients[i]  =  -(basicRow  ==  null?  0  :  getEntry(basicRow,  getRhsOffset())  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  coefficients[i]  =  -(basicRow  ==  null?  0  :  getEntry(basicRow,  getRhsOffset())	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    coefficients[i]    =    -(basicRow    ==    null?    0    :    getEntry(basicRow,    getRhsOffset()));    }    	non-compiled	[CE]  ')'  expected	69	None	replace
44	[BUG]  [BUGGY]  Integer  coefficients[]  =  graph.getValues();  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  graph.getValues();  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  graph.getValues();	  Integer    coefficients[]    =    tableau.getValues();    	non-compiled	[CE]  ')'  expected	35	None	replace
45	[BUG]  [BUGGY]  if  (base.getEntry(basicRow,  j)  ==  0)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (base.getEntry(basicRow,  j)  ==  0)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (base.getEntry(basicRow,  j)  ==  0)  {	  if    (base.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  ')'  expected	73	None	replace
46	[BUG]  [BUGGY]  if  (base.getEntry(basicRow,  j)>  1)  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (base.getEntry(basicRow,  j)>  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (base.getEntry(basicRow,  j)>  1)  {	  if    (base.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  ')'  expected	73	None	replace
47	[BUG]  [BUGGY]  if  (base.getEntry(basicRow,  j)  <  1)  {  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (base.getEntry(basicRow,  j)  <  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (base.getEntry(basicRow,  j)  <  1)  {	  if    (base.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  ')'  expected	73	None	replace
48	[BUG]  [BUGGY]  if  (j  ==  0  ||  table.getEntry(basicRow,  j)!=  0)  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j  ==  0  ||  table.getEntry(basicRow,  j)!=  0)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j  ==  0  ||  table.getEntry(basicRow,  j)!=  0)  {	  if    (basicRow    ==    null    ||    table.getEntry(basicRow,    j)!=    0)    {    	non-compiled	[CE]  ')'  expected	81	None	replace
49	[BUG]  [BUGGY]  if  (j!=  0  ||  table.getEntry(basicRow,  j)!=  0)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j!=  0  ||  table.getEntry(basicRow,  j)!=  0)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j!=  0  ||  table.getEntry(basicRow,  j)!=  0)  {	  if    (basicRow    ==    null    ||    table.getEntry(basicRow,    j)!=    0)    {    	non-compiled	[CE]  ')'  expected	81	None	replace
50	[BUG]  [BUGGY]  Integer  coefficients[]  =  tableau.getValue(basicRow,  variables);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  tableau.getValue(basicRow,  variables);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  tableau.getValue(basicRow,  variables);	  Integer    coefficients[]    =    f.getValue(basicRow,    variables);    	non-compiled	[CE]  ')'  expected	38	None	replace
51	[BUG]  [BUGGY]  Integer  coefficients[]  =  f.getValue(basicRow,  basicNegative);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  f.getValue(basicRow,  basicNegative);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  f.getValue(basicRow,  basicNegative);	  Integer    coefficients[]    =    f.getValue(basicRow,    variables);    	non-compiled	[CE]  ')'  expected	38	None	replace
52	[BUG]  [BUGGY]  Tableau  table  =  getTableau(basicRow);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Tableau  table  =  getTableau(basicRow);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Tableau  table  =  getTableau(basicRow);	  Tableau    table    =    getTableau(j);    	non-compiled	[CE]  ')'  expected	45	None	replace
53	[BUG]  [BUGGY]  Tableau  table  =  getTableau(j,  i);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Tableau  table  =  getTableau(j,  i);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Tableau  table  =  getTableau(j,  i);	  Tableau    table    =    getTableau(j);    	non-compiled	[CE]  ')'  expected	45	None	replace
54	[BUG]  [BUGGY]  Tableau  table  =  getTableau(i);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Tableau  table  =  getTableau(i);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Tableau  table  =  getTableau(i);	  Tableau    table    =    getTableau(j);    	non-compiled	[CE]  ')'  expected	45	None	replace
55	[BUG]  [BUGGY]  Integer  coefficients[]  =  getColumns().toArray(new  Integer[1]);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  getColumns().toArray(new  Integer[1]);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  getColumns().toArray(new  Integer[1]);	  Integer    coefficients[]    =    getColumns().toArray(new    Integer[0]);    	non-compiled	[CE]  ')'  expected	55	None	replace
56	[BUG]  [BUGGY]  Integer  coefficients[]  =  getRows().toArray(new  Integer[0]);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  getRows().toArray(new  Integer[0]);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  getRows().toArray(new  Integer[0]);	  Integer    coefficients[]    =    getColumns().toArray(new    Integer[0]);    	non-compiled	[CE]  ')'  expected	55	None	replace
57	[BUG]  [BUGGY]  Integer  coefficients[]  =  getColumns().toArray(new  Integer[0]  +  j);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  getColumns().toArray(new  Integer[0]  +  j);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  getColumns().toArray(new  Integer[0]  +  j);	  Integer    coefficients[]    =    getColumns().toArray(new    Integer[0]);    	non-compiled	[CE]  ')'  expected	55	None	replace
58	[BUG]  [BUGGY]  if  (base.getEntry(basicRow,  j)!=  1)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (base.getEntry(basicRow,  j)!=  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (base.getEntry(basicRow,  j)!=  1)  {	  if    (base.getEntry(j,    base)    ==    1)    {    	non-compiled	[CE]  ')'  expected	42	None	replace
59	[BUG]  [BUGGY]  Integer  coefficients[]  =  tableau.getEntry(basicRow,  j);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  tableau.getEntry(basicRow,  j);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  tableau.getEntry(basicRow,  j);	  Integer    coefficients[]    =    f.getEntry(basicRow,    j);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
60	[BUG]  [BUGGY]  Integer  coefficients[]  =  f.getEntry(basicRow,  i);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  f.getEntry(basicRow,  i);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  f.getEntry(basicRow,  i);	  Integer    coefficients[]    =    f.getEntry(basicRow,    j);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
61	[BUG]  [BUGGY]  Integer  coefficients[]  =  f.getEntry(basicRow,  j  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  f.getEntry(basicRow,  j  +  1);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  f.getEntry(basicRow,  j  +  1);	  Integer    coefficients[]    =    f.getEntry(basicRow,    j);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
62	[BUG]  [BUGGY]  Integer  coefficients[]  =  graph.getEntry(basicRow,  j);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  graph.getEntry(basicRow,  j);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  graph.getEntry(basicRow,  j);	  Integer    coefficients[]    =    f.getEntry(basicRow,    j);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
63	[BUG]  [BUGGY]  if  (j  ==  0  ||  table.getEntry(basicRow,  i)  ==  1)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j  ==  0  ||  table.getEntry(basicRow,  i)  ==  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j  ==  0  ||  table.getEntry(basicRow,  i)  ==  1)  {	  if    (j    ==    0    ||    table.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
64	[BUG]  [BUGGY]  if  (j  ==  0  ||  table.getEntry(basicRow,  j)!=  1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j  ==  0  ||  table.getEntry(basicRow,  j)!=  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j  ==  0  ||  table.getEntry(basicRow,  j)!=  1)  {	  if    (j    ==    0    ||    table.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
65	[BUG]  [BUGGY]  if  (j  ==  0  ||  table.getEntry(basicRow,  j)  <  1)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j  ==  0  ||  table.getEntry(basicRow,  j)  <  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j  ==  0  ||  table.getEntry(basicRow,  j)  <  1)  {	  if    (j    ==    0    ||    table.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
66	[BUG]  [BUGGY]  for(int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions();  j++)  {  coefficients[j]  =  0;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  for(int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions();  j++)  {  coefficients[j]  =  0;  }  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	for(int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions();  j++)  {  coefficients[j]  =  0;  }	  for(int    i    =    getNumObjectiveFunctions();    j    <    getNumObjectiveFunctions()    +    i;    j++)    {    coefficients[j]    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
67	[BUG]  [BUGGY]  for(int  j  =  getNumObjectiveFunctions();  j  <  getRhsOffset();  j++)  {  coefficients[j]  =  0;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  for(int  j  =  getNumObjectiveFunctions();  j  <  getRhsOffset();  j++)  {  coefficients[j]  =  0;  }  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	for(int  j  =  getNumObjectiveFunctions();  j  <  getRhsOffset();  j++)  {  coefficients[j]  =  0;  }	  for(int    i    =    getNumObjectiveFunctions();    j    <    getNumObjectiveFunctions()    +    i;    j++)    {    coefficients[j]    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
68	[BUG]  [BUGGY]  for(int  j  =  getNumObjectiveFunctions();  j  <  getSize();  j++)  {  coefficients[j]  =  0;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  for(int  j  =  getNumObjectiveFunctions();  j  <  getSize();  j++)  {  coefficients[j]  =  0;  }  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	for(int  j  =  getNumObjectiveFunctions();  j  <  getSize();  j++)  {  coefficients[j]  =  0;  }	  for(int    i    =    getNumObjectiveFunctions();    j    <    getNumObjectiveFunctions()    +    i;    j++)    {    coefficients[j]    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
69	[BUG]  [BUGGY]  for(int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions().length;  j++)  {  coefficients[j]  =  0;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  for(int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions().length;  j++)  {  coefficients[j]  =  0;  }  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	for(int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions().length;  j++)  {  coefficients[j]  =  0;  }	  for(int    i    =    getNumObjectiveFunctions();    j    <    getNumObjectiveFunctions()    +    i;    j++)    {    coefficients[j]    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
70	[BUG]  [BUGGY]  if  (j  >=  0  &&  table.getEntry(basicRow,  j)  ==  1)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j  >=  0  &&  table.getEntry(basicRow,  j)  ==  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j  >=  0  &&  table.getEntry(basicRow,  j)  ==  1)  {	  if    (j!=    0    &&    table.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
71	[BUG]  [BUGGY]  if  (j!=  0  &&  table.getEntry(basicRow,  i)  ==  1)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j!=  0  &&  table.getEntry(basicRow,  i)  ==  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j!=  0  &&  table.getEntry(basicRow,  i)  ==  1)  {	  if    (j!=    0    &&    table.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  ')'  expected	47	None	replace
72	[BUG]  [BUGGY]  if  (j!=  0  &&  table.getEntry(basicRow,  j)>  1)  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j!=  0  &&  table.getEntry(basicRow,  j)>  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j!=  0  &&  table.getEntry(basicRow,  j)>  1)  {	  if    (j!=    0    &&    table.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  ')'  expected	47	None	replace
73	[BUG]  [BUGGY]  if  (j  ==  null  ||  j.getEntry(basicRow,  j)  ==  1)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j  ==  null  ||  j.getEntry(basicRow,  j)  ==  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j  ==  null  ||  j.getEntry(basicRow,  j)  ==  1)  {	  if    (basicRow    ==    null    ||    j.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  ')'  expected	71	None	replace
74	[BUG]  [BUGGY]  if  (j  ==  0  ||  j.getEntry(basicRow,  j)  ==  1)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j  ==  0  ||  j.getEntry(basicRow,  j)  ==  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j  ==  0  ||  j.getEntry(basicRow,  j)  ==  1)  {	  if    (basicRow    ==    null    ||    j.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  ')'  expected	71	None	replace
75	[BUG]  [BUGGY]  if  (basicRow  ==  null  ||  basicRow.getEntry(basicRow,  j)  ==  1)  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow  ==  null  ||  basicRow.getEntry(basicRow,  j)  ==  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow  ==  null  ||  basicRow.getEntry(basicRow,  j)  ==  1)  {	  if    (basicRow    ==    null    ||    j.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  ')'  expected	71	None	replace
76	[BUG]  [BUGGY]  if  (basicRow  ==  null  ||  j.getEntry(basicRow,  i)  ==  1)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow  ==  null  ||  j.getEntry(basicRow,  i)  ==  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow  ==  null  ||  j.getEntry(basicRow,  i)  ==  1)  {	  if    (basicRow    ==    null    ||    j.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
77	[BUG]  [BUGGY]  if  (j!=  0  &&  tableau.getEntry(basicRow,  j)  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j!=  0  &&  tableau.getEntry(basicRow,  j)  ==  0)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j!=  0  &&  tableau.getEntry(basicRow,  j)  ==  0)  {	  if    (basicRow!=    null    &&    tableau.getEntry(basicRow,    j)    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
78	[BUG]  [BUGGY]  Integer  coefficients[]  =  getEntryRows();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  getEntryRows();  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  getEntryRows();	  Integer    coefficients[]    =    getEntryColumns();    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
79	[BUG]  [BUGGY]  Integer  coefficients[]  =  getEntryColumn(basicRow,  j);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  getEntryColumn(basicRow,  j);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  getEntryColumn(basicRow,  j);	  Integer    coefficients[]    =    getEntryColumns();    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
80	[BUG]  [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getColumns(),  0);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getColumns(),  0);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  getEntry(basicRow,  getColumns(),  0);	  Integer    coefficients[]    =    getEntry(basicRow,    getColumns());    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
81	[BUG]  [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getColumns(),  j);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getColumns(),  j);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  getEntry(basicRow,  getColumns(),  j);	  Integer    coefficients[]    =    getEntry(basicRow,    getColumns());    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
82	[BUG]  [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getColumns(),  i);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getColumns(),  i);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  getEntry(basicRow,  getColumns(),  i);	  Integer    coefficients[]    =    getEntry(basicRow,    getColumns());    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
83	[BUG]  [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getColumns()  -  j);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getColumns()  -  j);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  getEntry(basicRow,  getColumns()  -  j);	  Integer    coefficients[]    =    getEntry(basicRow,    getColumns());    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
84	[BUG]  [BUGGY]  if  (j  ==  0  &&  table.getEntry(basicRow,  j)!=  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j  ==  0  &&  table.getEntry(basicRow,  j)!=  0)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j  ==  0  &&  table.getEntry(basicRow,  j)!=  0)  {	  if    (basicRow    ==    null    &&    table.getEntry(basicRow,    j)!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
85	[BUG]  [BUGGY]  if  (j!=  0  &&  table.getEntry(basicRow,  j)!=  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j!=  0  &&  table.getEntry(basicRow,  j)!=  0)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j!=  0  &&  table.getEntry(basicRow,  j)!=  0)  {	  if    (basicRow    ==    null    &&    table.getEntry(basicRow,    j)!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
86	[BUG]  [BUGGY]  Integer  table  =  getTableau(basicRow,  i);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  table  =  getTableau(basicRow,  i);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  table  =  getTableau(basicRow,  i);	  Integer    table    =    getTableau(basicRow);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
87	[BUG]  [BUGGY]  Integer  table  =  getTableau(basicRow  +  j);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  table  =  getTableau(basicRow  +  j);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  table  =  getTableau(basicRow  +  j);	  Integer    table    =    getTableau(basicRow);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
88	[BUG]  [BUGGY]  Integer  table  =  getTableau(basicRow,  0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  table  =  getTableau(basicRow,  0);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  table  =  getTableau(basicRow,  0);	  Integer    table    =    getTableau(basicRow);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
89	[BUG]  [BUGGY]  if  (basicRow.getEntry(basicRow,  j)  >=  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow.getEntry(basicRow,  j)  >=  0)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow.getEntry(basicRow,  j)  >=  0)  {	  if    (basicRow.getEntry(basicRow,    j)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
90	[BUG]  [BUGGY]  for(int  j  =  getNumObjectiveFunctions();  j  <  getRhsOffset();  j++)  {  basicRow  =  getBasicRow(basicRow,  getRhsOffset());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  for(int  j  =  getNumObjectiveFunctions();  j  <  getRhsOffset();  j++)  {  basicRow  =  getBasicRow(basicRow,  getRhsOffset());  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	for(int  j  =  getNumObjectiveFunctions();  j  <  getRhsOffset();  j++)  {  basicRow  =  getBasicRow(basicRow,  getRhsOffset());	  for(int    i    =    getNumObjectiveFunctions();    j    <    getNumObjectiveFunctions()    +    i;    j++)    {    basicRow    =    getBasicRow(basicRow,    getRhsOffset());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
91	[BUG]  [BUGGY]  for(int  j  =  getRhsOffset();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  basicRow  =  getBasicRow(basicRow,  getRhsOffset());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  for(int  j  =  getRhsOffset();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  basicRow  =  getBasicRow(basicRow,  getRhsOffset());  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	for(int  j  =  getRhsOffset();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  basicRow  =  getBasicRow(basicRow,  getRhsOffset());	  for(int    i    =    getNumObjectiveFunctions();    j    <    getNumObjectiveFunctions()    +    i;    j++)    {    basicRow    =    getBasicRow(basicRow,    getRhsOffset());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
92	[BUG]  [BUGGY]  for(int  j  =  getRhsOffset();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  basicRow  =  getBasicRow(basicRow,  getRhsOffset());  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  for(int  j  =  getRhsOffset();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  basicRow  =  getBasicRow(basicRow,  getRhsOffset());  }  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	for(int  j  =  getRhsOffset();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  basicRow  =  getBasicRow(basicRow,  getRhsOffset());  }	  for(int    i    =    getNumObjectiveFunctions();    j    <    getNumObjectiveFunctions()    +    i;    j++)    {    basicRow    =    getBasicRow(basicRow,    getRhsOffset());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
93	[BUG]  [BUGGY]  for(int  j  =  getNumObjectiveFunctions();  j  <  getRhsOffset();  j++)  {  basicRow  =  getBasicRow(basicRow,  getRhsOffset());  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  for(int  j  =  getNumObjectiveFunctions();  j  <  getRhsOffset();  j++)  {  basicRow  =  getBasicRow(basicRow,  getRhsOffset());  }  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	for(int  j  =  getNumObjectiveFunctions();  j  <  getRhsOffset();  j++)  {  basicRow  =  getBasicRow(basicRow,  getRhsOffset());  }	  for(int    i    =    getNumObjectiveFunctions();    j    <    getNumObjectiveFunctions()    +    i;    j++)    {    basicRow    =    getBasicRow(basicRow,    getRhsOffset());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
94	[BUG]  [BUGGY]  Integer  coefficients[]  =  graph.getValue(j);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  graph.getValue(j);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  graph.getValue(j);	  Integer    coefficients[]    =    tableau.getValue(j);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
95	[BUG]  [BUGGY]  Integer  table  =  getTableau(j  -  2);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  table  =  getTableau(j  -  2);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  table  =  getTableau(j  -  2);	  Integer    table    =    getTableau(j    -    1);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
96	[BUG]  [BUGGY]  Integer  table  =  getTableau(basicRow  -  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  table  =  getTableau(basicRow  -  1);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  table  =  getTableau(basicRow  -  1);	  Integer    table    =    getTableau(j    -    1);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
97	[BUG]  [BUGGY]  Integer  table  =  getTableau(i  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  table  =  getTableau(i  -  1);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  table  =  getTableau(i  -  1);	  Integer    table    =    getTableau(j    -    1);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
98	[BUG]  [BUGGY]  Integer  coefficients[]  =  tableau.getValue(variables,  j);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  tableau.getValue(variables,  j);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  tableau.getValue(variables,  j);	  Integer    coefficients[]    =    f.getValue(variables,    j);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
99	[BUG]  [BUGGY]  Integer  coefficients[]  =  f.getValue(variables,  i);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  f.getValue(variables,  i);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  f.getValue(variables,  i);	  Integer    coefficients[]    =    f.getValue(variables,    j);    	non-compiled	[CE]  ')'  expected	86	None	replace
100	[BUG]  [BUGGY]  Integer  coefficients[]  =  graph.getValue(variables,  j);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  graph.getValue(variables,  j);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  graph.getValue(variables,  j);	  Integer    coefficients[]    =    f.getValue(variables,    j);    	non-compiled	[CE]  ')'  expected	86	None	replace
101	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getRhsOffset();  i++)  {  coefficients[i]  =  (basicRow  ==  null?  0  :  getEntry(basicRow,  getRhsOffset()))  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  for(int  i  =  0;  i  <  getRhsOffset();  i++)  {  coefficients[i]  =  (basicRow  ==  null?  0  :  getEntry(basicRow,  getRhsOffset()))  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	for(int  i  =  0;  i  <  getRhsOffset();  i++)  {  coefficients[i]  =  (basicRow  ==  null?  0  :  getEntry(basicRow,  getRhsOffset()))	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    coefficients[i]    =    (basicRow    ==    null?    0    :    getEntry(basicRow,    getRhsOffset()))    	non-compiled	[CE]  ')'  expected	68	None	replace
102	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getSize();  i++)  {  coefficients[i]  =  (basicRow  ==  null?  0  :  getEntry(basicRow,  getRhsOffset()))  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  for(int  i  =  0;  i  <  getSize();  i++)  {  coefficients[i]  =  (basicRow  ==  null?  0  :  getEntry(basicRow,  getRhsOffset()))  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	for(int  i  =  0;  i  <  getSize();  i++)  {  coefficients[i]  =  (basicRow  ==  null?  0  :  getEntry(basicRow,  getRhsOffset()))	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    coefficients[i]    =    (basicRow    ==    null?    0    :    getEntry(basicRow,    getRhsOffset()))    	non-compiled	[CE]  ')'  expected	68	None	replace
103	[BUG]  [BUGGY]  Integer  coefficients[]  =  baseRow.getValues();  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  baseRow.getValues();  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  baseRow.getValues();	  Integer    coefficients[]    =    basicRow.getValues();    	non-compiled	[CE]  ')'  expected	36	None	replace
104	[BUG]  [BUGGY]  if  (j  ==  0  &&  table.getEntry(basicRow,  i)  ==  1)  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j  ==  0  &&  table.getEntry(basicRow,  i)  ==  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j  ==  0  &&  table.getEntry(basicRow,  i)  ==  1)  {	  if    (j    ==    0    &&    table.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  ')'  expected	19	None	replace
105	[BUG]  [BUGGY]  if  (j  ==  0  &&  table.getEntry(basicRow,  j)>  1)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j  ==  0  &&  table.getEntry(basicRow,  j)>  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j  ==  0  &&  table.getEntry(basicRow,  j)>  1)  {	  if    (j    ==    0    &&    table.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  ')'  expected	19	None	replace
106	[BUG]  [BUGGY]  if  (j  ==  0  &&  basicRow.getEntry(basicRow,  j)  ==  1)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j  ==  0  &&  basicRow.getEntry(basicRow,  j)  ==  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j  ==  0  &&  basicRow.getEntry(basicRow,  j)  ==  1)  {	  if    (j    ==    0    &&    table.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  ')'  expected	19	None	replace
107	[BUG]  [BUGGY]  if  (basicRow.getEntry(j,  j)  ==  0)  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow.getEntry(j,  j)  ==  0)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow.getEntry(j,  j)  ==  0)  {	  if    (basicRow.getEntry(j,    i)    ==    1)    {    	non-compiled	[CE]  ')'  expected	24	None	replace
108	[BUG]  [BUGGY]  Integer  coefficients[]  =  getBasicRows();  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  getBasicRows();  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  getBasicRows();	  Integer    coefficients[]    =    getBasicColumns();    	non-compiled	[CE]  ')'  expected	54	None	replace
109	[BUG]  [BUGGY]  Integer  coefficients[]  =  getBasicColumns().toArray(new  Integer[0]);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  getBasicColumns().toArray(new  Integer[0]);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  getBasicColumns().toArray(new  Integer[0]);	  Integer    coefficients[]    =    getBasicColumns();    	non-compiled	[CE]  ')'  expected	54	None	replace
110	[BUG]  [BUGGY]  Integer  coefficients[]  =  getBasicColumns().toArray(coefficients);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  getBasicColumns().toArray(coefficients);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  getBasicColumns().toArray(coefficients);	  Integer    coefficients[]    =    getBasicColumns();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
111	[BUG]  [BUGGY]  for(int  j  =  getRhsOffset();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  coefficients[i]  =  -(basicRow  ==  null?  0  :  getEntry(basicRow,  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  for(int  j  =  getRhsOffset();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  coefficients[i]  =  -(basicRow  ==  null?  0  :  getEntry(basicRow,  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	for(int  j  =  getRhsOffset();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  coefficients[i]  =  -(basicRow  ==  null?  0  :  getEntry(basicRow,	  for(int    i    =    getNumObjectiveFunctions();    j    <    getNumObjectiveFunctions()    +    i;    j++)    {    coefficients[i]    =    -(basicRow    ==    null?    0    :    getEntry(basicRow,    get    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
112	[BUG]  [BUGGY]  for(int  j  =  getNumObjectiveFunctions();  j  <  getRhsOffset();  j++)  {  coefficients[i]  =  -(basicRow  ==  null?  0  :  getEntry(basicRow,  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  for(int  j  =  getNumObjectiveFunctions();  j  <  getRhsOffset();  j++)  {  coefficients[i]  =  -(basicRow  ==  null?  0  :  getEntry(basicRow,  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	for(int  j  =  getNumObjectiveFunctions();  j  <  getRhsOffset();  j++)  {  coefficients[i]  =  -(basicRow  ==  null?  0  :  getEntry(basicRow,	  for(int    i    =    getNumObjectiveFunctions();    j    <    getNumObjectiveFunctions()    +    i;    j++)    {    coefficients[i]    =    -(basicRow    ==    null?    0    :    getEntry(basicRow,    get    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
113	[BUG]  [BUGGY]  if  (basicRow  ==  null  ||  table.getEntry(basicRow,  j)!=  1)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow  ==  null  ||  table.getEntry(basicRow,  j)!=  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow  ==  null  ||  table.getEntry(basicRow,  j)!=  1)  {	  if    (basicRow    ==    null    ||    table.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
114	[BUG]  [BUGGY]  Tableau  tableau  =  getTableau(basicRow);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Tableau  tableau  =  getTableau(basicRow);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Tableau  tableau  =  getTableau(basicRow);	  Tableau    tableau    =    getTableau(j);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
115	[BUG]  [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getNumObjectiveFunctions()  -  i);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getNumObjectiveFunctions()  -  i);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  getEntry(basicRow,  getNumObjectiveFunctions()  -  i);	  Integer    coefficients[]    =    getEntry(basicRow,    getNumObjectiveFunctions()    -    j);    	non-compiled	[CE]  ')'  expected	41	None	replace
116	[BUG]  [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getNumObjectiveFunctions()  -  j  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getNumObjectiveFunctions()  -  j  +  1);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  getEntry(basicRow,  getNumObjectiveFunctions()  -  j  +  1);	  Integer    coefficients[]    =    getEntry(basicRow,    getNumObjectiveFunctions()    -    j);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
117	[BUG]  [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getNumObjectiveFunctions()  /  j);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getNumObjectiveFunctions()  /  j);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  getEntry(basicRow,  getNumObjectiveFunctions()  /  j);	  Integer    coefficients[]    =    getEntry(basicRow,    getNumObjectiveFunctions()    -    j);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
118	[BUG]  [BUGGY]  Integer  coefficients[]  =  graph.getValue(basicRow,  j);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  graph.getValue(basicRow,  j);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  graph.getValue(basicRow,  j);	  Integer    coefficients[]    =    tableau.getValue(basicRow);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
119	[BUG]  [BUGGY]  if  (j!=  0  &&  basicRow!=  null  &&  basicRow.getEntry(basicRow,  j)  ==  0)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j!=  0  &&  basicRow!=  null  &&  basicRow.getEntry(basicRow,  j)  ==  0)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j!=  0  &&  basicRow!=  null  &&  basicRow.getEntry(basicRow,  j)  ==  0)  {	  if    (basicRow!=    null    &&    basicRow.getEntry(basicRow,    j)    ==    0)    {    	non-compiled	[CE]  ')'  expected	76	None	replace
120	[BUG]  [BUGGY]  if  (j  ==  0  &&  basicRow!=  null  &&  basicRow.getEntry(basicRow,  j)  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j  ==  0  &&  basicRow!=  null  &&  basicRow.getEntry(basicRow,  j)  ==  0)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j  ==  0  &&  basicRow!=  null  &&  basicRow.getEntry(basicRow,  j)  ==  0)  {	  if    (basicRow!=    null    &&    basicRow.getEntry(basicRow,    j)    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
121	[BUG]  [BUGGY]  if  (j!=  0  ||  basicRow!=  null  &&  basicRow.getEntry(basicRow,  j)  ==  0)  {  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j!=  0  ||  basicRow!=  null  &&  basicRow.getEntry(basicRow,  j)  ==  0)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j!=  0  ||  basicRow!=  null  &&  basicRow.getEntry(basicRow,  j)  ==  0)  {	  if    (basicRow!=    null    &&    basicRow.getEntry(basicRow,    j)    ==    0)    {    	non-compiled	[CE]  ')'  expected	76	None	replace
122	[BUG]  [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getObjectiveFunctions(),  j);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getObjectiveFunctions(),  j);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  getEntry(basicRow,  getObjectiveFunctions(),  j);	  Integer    coefficients[]    =    getEntry(basicRow,    getObjectiveFunctions());    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
123	[BUG]  [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getObjectiveFunctions()  +  j);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getObjectiveFunctions()  +  j);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  getEntry(basicRow,  getObjectiveFunctions()  +  j);	  Integer    coefficients[]    =    getEntry(basicRow,    getObjectiveFunctions());    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
124	[BUG]  [BUGGY]  if  (j!=  0  &&  baseRow.getEntry(basicRow,  j)  ==  1)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j!=  0  &&  baseRow.getEntry(basicRow,  j)  ==  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j!=  0  &&  baseRow.getEntry(basicRow,  j)  ==  1)  {	  if    (j!=    0    &&    tableau.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
125	[BUG]  [BUGGY]  if  (j  ==  0  ||  basicRow.getEntry(basicRow,  j)  ==  1)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j  ==  0  ||  basicRow.getEntry(basicRow,  j)  ==  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j  ==  0  ||  basicRow.getEntry(basicRow,  j)  ==  1)  {	  if    (j    ==    0    ||    tableau.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
126	[BUG]  [BUGGY]  if  (j  ==  0  ||  graph.getEntry(basicRow,  j)  ==  1)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j  ==  0  ||  graph.getEntry(basicRow,  j)  ==  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j  ==  0  ||  graph.getEntry(basicRow,  j)  ==  1)  {	  if    (j    ==    0    ||    tableau.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
127	[BUG]  [BUGGY]  if  (j  ==  0  ||  baseRow.getEntry(basicRow,  j)  ==  1)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j  ==  0  ||  baseRow.getEntry(basicRow,  j)  ==  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j  ==  0  ||  baseRow.getEntry(basicRow,  j)  ==  1)  {	  if    (j    ==    0    ||    tableau.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
128	[BUG]  [BUGGY]  if  (j  ==  0  ||  buf.getEntry(basicRow,  j)  ==  1)  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j  ==  0  ||  buf.getEntry(basicRow,  j)  ==  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j  ==  0  ||  buf.getEntry(basicRow,  j)  ==  1)  {	  if    (j    ==    0    ||    tableau.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  ')'  expected	49	None	replace
129	[BUG]  [BUGGY]  if  (base.getEntry(j,  base)  ==  0)  {  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (base.getEntry(j,  base)  ==  0)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (base.getEntry(j,  base)  ==  0)  {	  if    (basicRow.getEntry(j,    base)    ==    0)    {    	non-compiled	[CE]  ')'  expected	9	None	replace
130	[BUG]  [BUGGY]  if  (basicRow.getEntry(j,  i)  ==  0)  {  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow.getEntry(j,  i)  ==  0)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow.getEntry(j,  i)  ==  0)  {	  if    (basicRow.getEntry(j,    base)    ==    0)    {    	non-compiled	[CE]  ')'  expected	9	None	replace
131	[BUG]  [BUGGY]  Integer  graph  =  getTableau(basicRow);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  graph  =  getTableau(basicRow);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  graph  =  getTableau(basicRow);	  Integer    graph    =    getTableau(j);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
132	[BUG]  [BUGGY]  Integer  graph  =  getTableau(basicRow,  j);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  graph  =  getTableau(basicRow,  j);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  graph  =  getTableau(basicRow,  j);	  Integer    graph    =    getTableau(j);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
133	[BUG]  [BUGGY]  Integer  graph  =  getTableau(j  -  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  graph  =  getTableau(j  -  1);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  graph  =  getTableau(j  -  1);	  Integer    graph    =    getTableau(j);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
134	[BUG]  [BUGGY]  Integer  graph  =  getTableau(j  +  i);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  graph  =  getTableau(j  +  i);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  graph  =  getTableau(j  +  i);	  Integer    graph    =    getTableau(j);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
135	[BUG]  [BUGGY]  if  (j  ==  0  &&  basicRow.getEntry(basicRow,  j)  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j  ==  0  &&  basicRow.getEntry(basicRow,  j)  ==  0)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j  ==  0  &&  basicRow.getEntry(basicRow,  j)  ==  0)  {	  if    (basicRow    ==    null    &&    basicRow.getEntry(basicRow,    j)    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
136	[BUG]  [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getRhsOffset()  /  j);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getRhsOffset()  /  j);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  getEntry(basicRow,  getRhsOffset()  /  j);	  Integer    coefficients[]    =    getEntry(basicRow,    getRhsOffset()    +    j);    	non-compiled	[CE]  ')'  expected	84	None	replace
137	[BUG]  [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getRhsOffset()  -  j);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getRhsOffset()  -  j);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  getEntry(basicRow,  getRhsOffset()  -  j);	  Integer    coefficients[]    =    getEntry(basicRow,    getRhsOffset()    +    j);    	non-compiled	[CE]  ')'  expected	84	None	replace
138	[BUG]  [BUGGY]  Integer  table  =  getTableau(0);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  table  =  getTableau(0);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  table  =  getTableau(0);	  Integer    table    =    getTableau();    	non-compiled	[CE]  ')'  expected	57	None	replace
139	[BUG]  [BUGGY]  Integer  table  =  getTableau()  -  j;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  table  =  getTableau()  -  j;  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  table  =  getTableau()  -  j;	  Integer    table    =    getTableau();    	non-compiled	[CE]  ')'  expected	57	None	replace
140	[BUG]  [BUGGY]  Tableau  table  =  getTableau(basicRow,  j  *  1);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Tableau  table  =  getTableau(basicRow,  j  *  1);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Tableau  table  =  getTableau(basicRow,  j  *  1);	  Tableau    table    =    getTableau(basicRow,    j    +    1);    	non-compiled	[CE]  ')'  expected	2	None	replace
141	[BUG]  [BUGGY]  if  (j.getEntry(basicRow,  j)!=  0)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j.getEntry(basicRow,  j)!=  0)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j.getEntry(basicRow,  j)!=  0)  {	  if    (basicRow.getEntry(basicRow,    j)!=    0)    {    	non-compiled	[CE]  ')'  expected	5	None	replace
142	[BUG]  [BUGGY]  Integer  table  =  getTableau(i);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  table  =  getTableau(i);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  table  =  getTableau(i);	  Integer    table    =    getTableau(j);    	non-compiled	[CE]  ')'  expected	10	None	replace
143	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getRhsOffset();  i++)  {  coefficients[i]  =  -(basicRow  ==  null?  0  :  getEntry(basicRow,  getRhsOffset()));  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  for(int  i  =  0;  i  <  getRhsOffset();  i++)  {  coefficients[i]  =  -(basicRow  ==  null?  0  :  getEntry(basicRow,  getRhsOffset()));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	for(int  i  =  0;  i  <  getRhsOffset();  i++)  {  coefficients[i]  =  -(basicRow  ==  null?  0  :  getEntry(basicRow,  getRhsOffset()));	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    coefficients[i]    =    -(basicRow    ==    null?    0    :    getEntry(basicRow,    getRhsOffset()));    	non-compiled	[CE]  ')'  expected	67	None	replace
144	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getSize();  i++)  {  coefficients[i]  =  -(basicRow  ==  null?  0  :  getEntry(basicRow,  getRhsOffset()));  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  for(int  i  =  0;  i  <  getSize();  i++)  {  coefficients[i]  =  -(basicRow  ==  null?  0  :  getEntry(basicRow,  getRhsOffset()));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	for(int  i  =  0;  i  <  getSize();  i++)  {  coefficients[i]  =  -(basicRow  ==  null?  0  :  getEntry(basicRow,  getRhsOffset()));	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    coefficients[i]    =    -(basicRow    ==    null?    0    :    getEntry(basicRow,    getRhsOffset()));    	non-compiled	[CE]  ')'  expected	67	None	replace
145	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicFunctions();  i++)  {  coefficients[i]  =  -(basicRow  ==  null?  0  :  getEntry(basicRow,  getRhsOffset()));  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  for(int  i  =  0;  i  <  getBasicFunctions();  i++)  {  coefficients[i]  =  -(basicRow  ==  null?  0  :  getEntry(basicRow,  getRhsOffset()));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	for(int  i  =  0;  i  <  getBasicFunctions();  i++)  {  coefficients[i]  =  -(basicRow  ==  null?  0  :  getEntry(basicRow,  getRhsOffset()));	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    coefficients[i]    =    -(basicRow    ==    null?    0    :    getEntry(basicRow,    getRhsOffset()));    	non-compiled	[CE]  ')'  expected	67	None	replace
146	[BUG]  [BUGGY]  Integer  coefficients[]  =  tableau.getValue(basicRow,  0);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  tableau.getValue(basicRow,  0);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  tableau.getValue(basicRow,  0);	  Integer    coefficients[]    =    f.getValue(basicRow,    0);    	non-compiled	[CE]  ')'  expected	64	None	replace
147	[BUG]  [BUGGY]  Integer  coefficients[]  =  graph.getValue(basicRow,  0);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  graph.getValue(basicRow,  0);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  graph.getValue(basicRow,  0);	  Integer    coefficients[]    =    f.getValue(basicRow,    0);    	non-compiled	[CE]  ')'  expected	64	None	replace
148	[BUG]  [BUGGY]  if  (j.getEntry(basicRow,  j  +  1)  ==  1)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j.getEntry(basicRow,  j  +  1)  ==  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j.getEntry(basicRow,  j  +  1)  ==  1)  {	  if    (basicRow.getEntry(basicRow,    j    +    1)    ==    1)    {    	non-compiled	[CE]  ')'  expected	88	None	replace
149	[BUG]  [BUGGY]  if  (basicRow.getEntry(basicRow,  j  +  1)>  1)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow.getEntry(basicRow,  j  +  1)>  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow.getEntry(basicRow,  j  +  1)>  1)  {	  if    (basicRow.getEntry(basicRow,    j    +    1)    ==    1)    {    	non-compiled	[CE]  ')'  expected	88	None	replace
150	[BUG]  [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getColumnsOffset()  -  j);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getColumnsOffset()  -  j);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  getEntry(basicRow,  getColumnsOffset()  -  j);	  Integer    coefficients[]    =    getEntry(basicRow,    getColumnsOffset());    	non-compiled	[CE]  ')'  expected	34	None	replace
151	[BUG]  [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getColumnsOffset()  +  j);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getColumnsOffset()  +  j);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  getEntry(basicRow,  getColumnsOffset()  +  j);	  Integer    coefficients[]    =    getEntry(basicRow,    getColumnsOffset());    	non-compiled	[CE]  ')'  expected	34	None	replace
152	[BUG]  [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getColumnsInset());  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getColumnsInset());  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  getEntry(basicRow,  getColumnsInset());	  Integer    coefficients[]    =    getEntry(basicRow,    getColumnsOffset());    	non-compiled	[CE]  ')'  expected	34	None	replace
153	[BUG]  [BUGGY]  if  (j!=  0  &&  basicRow!=  null  &&  j.getEntry(basicRow,  j)  ==  1)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j!=  0  &&  basicRow!=  null  &&  j.getEntry(basicRow,  j)  ==  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j!=  0  &&  basicRow!=  null  &&  j.getEntry(basicRow,  j)  ==  1)  {	  if    (basicRow!=    null    &&    j.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  ')'  expected	72	None	replace
154	[BUG]  [BUGGY]  if  (j!=  null  &&  j.getEntry(basicRow,  j)  ==  1)  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j!=  null  &&  j.getEntry(basicRow,  j)  ==  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j!=  null  &&  j.getEntry(basicRow,  j)  ==  1)  {	  if    (basicRow!=    null    &&    j.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  ')'  expected	72	None	replace
155	[BUG]  [BUGGY]  if  (j!=  null  &&  basicRow.getEntry(basicRow,  j)  ==  1)  {  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j!=  null  &&  basicRow.getEntry(basicRow,  j)  ==  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j!=  null  &&  basicRow.getEntry(basicRow,  j)  ==  1)  {	  if    (basicRow!=    null    &&    j.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  <identifier>  expected	72	None	replace
156	[BUG]  [BUGGY]  if  (j  ==  0  ||  tableau.getEntry(basicRow,  j)  ==  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j  ==  0  ||  tableau.getEntry(basicRow,  j)  ==  0)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j  ==  0  ||  tableau.getEntry(basicRow,  j)  ==  0)  {	  if    (basicRow    ==    null    ||    tableau.getEntry(basicRow,    j)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
157	[BUG]  [BUGGY]  double  coefficients[]  =  f.getValue(basicRow,  j);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  double  coefficients[]  =  f.getValue(basicRow,  j);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	double  coefficients[]  =  f.getValue(basicRow,  j);	  double    coefficients[]    =    f.getValue(basicRow);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
158	[BUG]  [BUGGY]  double  coefficients[]  =  f.getValue(j);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  double  coefficients[]  =  f.getValue(j);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	double  coefficients[]  =  f.getValue(j);	  double    coefficients[]    =    f.getValue(basicRow);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
159	[BUG]  [BUGGY]  double  coefficients[]  =  f.getValue(basicRow,  i);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  double  coefficients[]  =  f.getValue(basicRow,  i);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	double  coefficients[]  =  f.getValue(basicRow,  i);	  double    coefficients[]    =    f.getValue(basicRow);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
160	[BUG]  [BUGGY]  double  coefficients[]  =  f.getValue(basicRow  +  j);  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  double  coefficients[]  =  f.getValue(basicRow  +  j);  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	double  coefficients[]  =  f.getValue(basicRow  +  j);	  double    coefficients[]    =    f.getValue(basicRow);    	non-compiled	[CE]  ')'  expected	85	None	replace
161	[BUG]  [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getNumObjectiveFunctions()  +  i);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getNumObjectiveFunctions()  +  i);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  getEntry(basicRow,  getNumObjectiveFunctions()  +  i);	  Integer    coefficients[]    =    getEntry(basicRow,    getNumObjectiveFunctions()    +    j);    	non-compiled	[CE]  ')'  expected	39	None	replace
162	[BUG]  [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getNumObjectiveFunctions()  *  j);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getNumObjectiveFunctions()  *  j);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  getEntry(basicRow,  getNumObjectiveFunctions()  *  j);	  Integer    coefficients[]    =    getEntry(basicRow,    getNumObjectiveFunctions()    +    j);    	non-compiled	[CE]  ')'  expected	39	None	replace
163	[BUG]  [BUGGY]  Integer  tableau  =  getTableau(j  -  2);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  tableau  =  getTableau(j  -  2);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  tableau  =  getTableau(j  -  2);	  Integer    tableau    =    getTableau(j    -    1);    	non-compiled	[CE]  ')'  expected	18	None	replace
164	[BUG]  [BUGGY]  Integer  coefficients[]  =  getValues();  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  getValues();  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  getValues();	  Integer    coefficients[]    =    getRows();    	non-compiled	[CE]  ')'  expected	53	None	replace
165	[BUG]  [BUGGY]  if  (basicRow.getEntry(basicRow,  i)>  0)  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow.getEntry(basicRow,  i)>  0)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow.getEntry(basicRow,  i)>  0)  {	  if    (basicRow.getEntry(basicRow,    j)>    0)    {    	non-compiled	[CE]  ')'  expected	6	None	replace
166	[BUG]  [BUGGY]  Integer  coefficients[]  =  graph.getValue(i);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  graph.getValue(i);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  graph.getValue(i);	  Integer    coefficients[]    =    basicRow.getValue(i);    	non-compiled	[CE]  ')'  expected	28	None	replace
167	[BUG]  [BUGGY]  Tableau  table  =  getTableau(basicRow,  j  +  1,  f.getValue(basicRow));  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Tableau  table  =  getTableau(basicRow,  j  +  1,  f.getValue(basicRow));  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Tableau  table  =  getTableau(basicRow,  j  +  1,  f.getValue(basicRow));	  Tableau    table    =    getTableau(basicRow,    j    +    1);    	non-compiled	[CE]  ')'  expected	2	None	replace
168	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  coefficients.length;  i++)  {  coefficients[i]  =  -(basicRow  ==  null?  0  :  getEntry(basicRow,  getRhsOffset()));  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  for(int  i  =  0;  i  <  coefficients.length;  i++)  {  coefficients[i]  =  -(basicRow  ==  null?  0  :  getEntry(basicRow,  getRhsOffset()));  }  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	for(int  i  =  0;  i  <  coefficients.length;  i++)  {  coefficients[i]  =  -(basicRow  ==  null?  0  :  getEntry(basicRow,  getRhsOffset()));  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    coefficients[i]    =    -(basicRow    ==    null?    0    :    getEntry(basicRow,    getRhsOffset()));    }    	non-compiled	[CE]  ')'  expected	69	None	replace
169	[BUG]  [BUGGY]  for(int  j  =  getNumObjectiveFunctions();  j  <  getRhsOffset();  j++)  {  coefficients[i]  =  -(basicRow  ==  null?  0  :  getEntry(basicRow,  get  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  for(int  j  =  getNumObjectiveFunctions();  j  <  getRhsOffset();  j++)  {  coefficients[i]  =  -(basicRow  ==  null?  0  :  getEntry(basicRow,  get  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	for(int  j  =  getNumObjectiveFunctions();  j  <  getRhsOffset();  j++)  {  coefficients[i]  =  -(basicRow  ==  null?  0  :  getEntry(basicRow,  get	  for(int    i    =    getNumObjectiveFunctions();    j    <    getNumObjectiveFunctions()    +    i;    j++)    {    coefficients[i]    =    -(basicRow    ==    null?    0    :    getEntry(basicRow,    get    	non-compiled	[CE]  ')'  expected	14	None	replace
170	[BUG]  [BUGGY]  for(int  j  =  getRhsOffset();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  coefficients[i]  =  -(basicRow  ==  null?  0  :  getEntry(basicRow,  get  [CE]  ')'  expected  [FE]                            AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  for(int  j  =  getRhsOffset();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  coefficients[i]  =  -(basicRow  ==  null?  0  :  getEntry(basicRow,  get  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	for(int  j  =  getRhsOffset();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  coefficients[i]  =  -(basicRow  ==  null?  0  :  getEntry(basicRow,  get	  for(int    i    =    getNumObjectiveFunctions();    j    <    getNumObjectiveFunctions()    +    i;    j++)    {    coefficients[i]    =    -(basicRow    ==    null?    0    :    getEntry(basicRow,    get    	non-compiled	[CE]  ')'  expected	14	None	replace
171	[BUG]  [BUGGY]  for(int  j  =  getRowCount();  j  <  getNumObjectiveFunctions();  j++)  {  coefficients[i]  =  -(basicRow  ==  null?  0  :  getEntry(basicRow,  get  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  for(int  j  =  getRowCount();  j  <  getNumObjectiveFunctions();  j++)  {  coefficients[i]  =  -(basicRow  ==  null?  0  :  getEntry(basicRow,  get  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	for(int  j  =  getRowCount();  j  <  getNumObjectiveFunctions();  j++)  {  coefficients[i]  =  -(basicRow  ==  null?  0  :  getEntry(basicRow,  get	  for(int    i    =    getNumObjectiveFunctions();    j    <    getNumObjectiveFunctions()    +    i;    j++)    {    coefficients[i]    =    -(basicRow    ==    null?    0    :    getEntry(basicRow,    get    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
172	[BUG]  [BUGGY]  Integer  tableau  =  getTableau(j  -  1  +  i);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  tableau  =  getTableau(j  -  1  +  i);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  tableau  =  getTableau(j  -  1  +  i);	  Integer    tableau    =    getTableau(j    -    1);    	non-compiled	[CE]  ')'  expected	18	None	replace
173	[BUG]  [BUGGY]  Integer  tableau  =  getTableau(basicRow  -  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  tableau  =  getTableau(basicRow  -  1);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  tableau  =  getTableau(basicRow  -  1);	  Integer    tableau    =    getTableau(j    -    1);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
174	[BUG]  [BUGGY]  if  (basicRow  ==  null  &&  basicRow.getEntry(basicRow,  j)  ==  1)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow  ==  null  &&  basicRow.getEntry(basicRow,  j)  ==  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow  ==  null  &&  basicRow.getEntry(basicRow,  j)  ==  1)  {	  if    (basicRow!=    null    &&    basicRow.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
175	[BUG]  [BUGGY]  Integer  coefficients[]  =  graph.getValue(variables);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  graph.getValue(variables);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  graph.getValue(variables);	  Integer    coefficients[]    =    tableau.getValue(variables);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
176	[BUG]  [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getRhsOffset()  +  i);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getRhsOffset()  +  i);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  getEntry(basicRow,  getRhsOffset()  +  i);	  Integer    coefficients[]    =    getEntry(basicRow,    getRhsOffset()    +    j);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
177	[BUG]  [BUGGY]  Integer  coefficients[]  =  f.getValue(i,  j);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  f.getValue(i,  j);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  f.getValue(i,  j);	  Integer    coefficients[]    =    f.getValue(j);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
178	[BUG]  [BUGGY]  if  (basicRow!=  null  &&  basicRow.getEntry(basicRow,  j)!=  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow!=  null  &&  basicRow.getEntry(basicRow,  j)!=  0)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow!=  null  &&  basicRow.getEntry(basicRow,  j)!=  0)  {	  if    (basicRow.getEntry(basicRow,    j)!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
179	[BUG]  [BUGGY]  if  (basicRow  ==  null  &&  basicRow.getEntry(basicRow,  j)!=  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow  ==  null  &&  basicRow.getEntry(basicRow,  j)!=  0)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow  ==  null  &&  basicRow.getEntry(basicRow,  j)!=  0)  {	  if    (basicRow.getEntry(basicRow,    j)!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
180	[BUG]  [BUGGY]  if  (j!=  0  &&  graph.getEntry(basicRow,  j)  ==  1)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j!=  0  &&  graph.getEntry(basicRow,  j)  ==  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j!=  0  &&  graph.getEntry(basicRow,  j)  ==  1)  {	  if    (j!=    0    &&    tableau.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
181	[BUG]  [BUGGY]  Integer  coefficients[]  =  getColumns().toArray(new  Integer[0]  -  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  getColumns().toArray(new  Integer[0]  -  1);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  getColumns().toArray(new  Integer[0]  -  1);	  Integer    coefficients[]    =    getColumns().toArray(new    Integer[0]);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
182	[BUG]  [BUGGY]  if  (basicRow  ==  null  ||  basicRow.getEntry(basicRow,  j)  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow  ==  null  ||  basicRow.getEntry(basicRow,  j)  ==  0)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow  ==  null  ||  basicRow.getEntry(basicRow,  j)  ==  0)  {	  if    (basicRow    ==    null    &&    basicRow.getEntry(basicRow,    j)    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
183	[BUG]  [BUGGY]  if  (basicRow!=  null  &&  basicRow.getEntry(basicRow,  j)  <  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow!=  null  &&  basicRow.getEntry(basicRow,  j)  <  0)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow!=  null  &&  basicRow.getEntry(basicRow,  j)  <  0)  {	  if    (basicRow.getEntry(basicRow,    j)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
184	[BUG]  [BUGGY]  if  (basicRow.getEntry(basicRow,  j)  >=  1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow.getEntry(basicRow,  j)  >=  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow.getEntry(basicRow,  j)  >=  1)  {	  if    (basicRow.getEntry(basicRow,    j)>    1)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
185	[BUG]  [BUGGY]  Integer  table  =  getTableau(j  +  i);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  table  =  getTableau(j  +  i);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  table  =  getTableau(j  +  i);	  Integer    table    =    getTableau(j);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
186	[BUG]  [BUGGY]  Integer  coefficients[]  =  f.getValue(basicRow,  i  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  f.getValue(basicRow,  i  +  1);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  f.getValue(basicRow,  i  +  1);	  Integer    coefficients[]    =    f.getValue(basicRow,    i);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
187	[BUG]  [BUGGY]  if  (basicRow!=  null  &&  j.getEntry(basicRow,  i)  ==  1)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow!=  null  &&  j.getEntry(basicRow,  i)  ==  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow!=  null  &&  j.getEntry(basicRow,  i)  ==  1)  {	  if    (j.getEntry(basicRow,    i)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
188	[BUG]  [BUGGY]  if  (basicRow  ==  null  &&  j.getEntry(basicRow,  i)  ==  1)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow  ==  null  &&  j.getEntry(basicRow,  i)  ==  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow  ==  null  &&  j.getEntry(basicRow,  i)  ==  1)  {	  if    (j.getEntry(basicRow,    i)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
189	[BUG]  [BUGGY]  Tableau  table  =  getTableau(j  -  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Tableau  table  =  getTableau(j  -  1);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Tableau  table  =  getTableau(j  -  1);	  Tableau    table    =    getTableau(j);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
190	[BUG]  [BUGGY]  if  (basicRow  ==  null  &&  j.getEntry(basicRow,  j)  ==  1)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow  ==  null  &&  j.getEntry(basicRow,  j)  ==  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow  ==  null  &&  j.getEntry(basicRow,  j)  ==  1)  {	  if    (basicRow!=    null    &&    j.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
191	[BUG]  [BUGGY]  if  (basicRow!=  null  &&  j.getEntry(basicRow,  j)  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow!=  null  &&  j.getEntry(basicRow,  j)  ==  0)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow!=  null  &&  j.getEntry(basicRow,  j)  ==  0)  {	  if    (basicRow!=    null    &&    j.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
192	[BUG]  [BUGGY]  if  (j!=  0  &&  j.getEntry(basicRow,  j)  ==  1)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j!=  0  &&  j.getEntry(basicRow,  j)  ==  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j!=  0  &&  j.getEntry(basicRow,  j)  ==  1)  {	  if    (basicRow!=    null    &&    j.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
193	[BUG]  [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getColumnsOffset()  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getColumnsOffset()  -  1);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  getEntry(basicRow,  getColumnsOffset()  -  1);	  Integer    coefficients[]    =    getEntry(basicRow,    getColumnsOffset());    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
194	[BUG]  [BUGGY]  if  (basicRow!=  null  &&  basicRow.getEntry(basicRow,  j)>  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow!=  null  &&  basicRow.getEntry(basicRow,  j)>  0)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow!=  null  &&  basicRow.getEntry(basicRow,  j)>  0)  {	  if    (basicRow.getEntry(basicRow,    j)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
195	[BUG]  [BUGGY]  Integer  table  =  getTableau(j  -  1  +  i);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  table  =  getTableau(j  -  1  +  i);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  table  =  getTableau(j  -  1  +  i);	  Integer    table    =    getTableau(j    -    1);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
196	[BUG]  [BUGGY]  Integer  table  =  getTableau(j  -  1,  i);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  table  =  getTableau(j  -  1,  i);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  table  =  getTableau(j  -  1,  i);	  Integer    table    =    getTableau(j    -    1);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
197	[BUG]  [BUGGY]  Tableau  graph  =  getTableau(basicRow,  j,  i);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Tableau  graph  =  getTableau(basicRow,  j,  i);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Tableau  graph  =  getTableau(basicRow,  j,  i);	  Tableau    graph    =    getTableau(basicRow,    j);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
198	[BUG]  [BUGGY]  Tableau  graph  =  getTableau(basicRow,  0);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Tableau  graph  =  getTableau(basicRow,  0);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Tableau  graph  =  getTableau(basicRow,  0);	  Tableau    graph    =    getTableau(basicRow,    j);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
199	[BUG]  [BUGGY]  Integer  coefficients[]  =  getEntryColumns().toArray(coefficients);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  getEntryColumns().toArray(coefficients);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  getEntryColumns().toArray(coefficients);	  Integer    coefficients[]    =    getEntryColumns();    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
200	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  coefficients.length;  i++)  {  coefficients[i]  =  (basicRow  ==  null?  0  :  getEntry(basicRow,  getRhsOffset()))  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  for(int  i  =  0;  i  <  coefficients.length;  i++)  {  coefficients[i]  =  (basicRow  ==  null?  0  :  getEntry(basicRow,  getRhsOffset()))  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	for(int  i  =  0;  i  <  coefficients.length;  i++)  {  coefficients[i]  =  (basicRow  ==  null?  0  :  getEntry(basicRow,  getRhsOffset()))	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    coefficients[i]    =    (basicRow    ==    null?    0    :    getEntry(basicRow,    getRhsOffset()))    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
201	[BUG]  [BUGGY]  Tableau  table  =  findTableau(basicRow,  j);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Tableau  table  =  findTableau(basicRow,  j);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Tableau  table  =  findTableau(basicRow,  j);	  Tableau    table    =    getTableau(basicRow,    i);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
202	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  coefficients.length;  i++)  {  coefficients[i]  =  -(basicRow  ==  null?  0  :  getEntry(basicRow,  getRhsOffset()));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  for(int  i  =  0;  i  <  coefficients.length;  i++)  {  coefficients[i]  =  -(basicRow  ==  null?  0  :  getEntry(basicRow,  getRhsOffset()));  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	for(int  i  =  0;  i  <  coefficients.length;  i++)  {  coefficients[i]  =  -(basicRow  ==  null?  0  :  getEntry(basicRow,  getRhsOffset()));	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    coefficients[i]    =    -(basicRow    ==    null?    0    :    getEntry(basicRow,    getRhsOffset()));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
203	[BUG]  [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getColumns()  -  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getColumns()  -  1);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  getEntry(basicRow,  getColumns()  -  1);	  Integer    coefficients[]    =    getEntry(basicRow,    getColumns());    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
204	[BUG]  [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getColumns()  +  j);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getColumns()  +  j);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  getEntry(basicRow,  getColumns()  +  j);	  Integer    coefficients[]    =    getEntry(basicRow,    getColumns());    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
205	[BUG]  [BUGGY]  Integer  coefficients[]  =  graph.getValue(value);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  graph.getValue(value);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  graph.getValue(value);	  Integer    coefficients[]    =    tableau.getValue(value);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
206	[BUG]  [BUGGY]  if  (basicRow.getEntry(basicRow,  i)  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow.getEntry(basicRow,  i)  ==  0)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow.getEntry(basicRow,  i)  ==  0)  {	  if    (basicRow.getEntry(j,    tableau)    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
207	[BUG]  [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getObjectiveFunctions()  -  j);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  getObjectiveFunctions()  -  j);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  getEntry(basicRow,  getObjectiveFunctions()  -  j);	  Integer    coefficients[]    =    getEntry(basicRow,    getObjectiveFunctions());    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
208	[BUG]  [BUGGY]  if  (base  ==  null  &&  base.getEntry(basicRow,  j)  ==  1)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (base  ==  null  &&  base.getEntry(basicRow,  j)  ==  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (base  ==  null  &&  base.getEntry(basicRow,  j)  ==  1)  {	  if    (base.getEntry(j,    base)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
209	[BUG]  [BUGGY]  if  (basicRow!=  null  &&  basicRow.getEntry(basicRow,  j  +  1)  ==  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow!=  null  &&  basicRow.getEntry(basicRow,  j  +  1)  ==  0)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow!=  null  &&  basicRow.getEntry(basicRow,  j  +  1)  ==  0)  {	  if    (basicRow.getEntry(basicRow,    j    +    1)    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
210	[BUG]  [BUGGY]  if  (basicRow  ==  null  &&  basicRow.getEntry(basicRow,  j  +  1)  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow  ==  null  &&  basicRow.getEntry(basicRow,  j  +  1)  ==  0)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow  ==  null  &&  basicRow.getEntry(basicRow,  j  +  1)  ==  0)  {	  if    (basicRow.getEntry(basicRow,    j    +    1)    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
211	[BUG]  [BUGGY]  for(int  j  =  getNumObjectiveFunctions();  j  <  getRhsOffset();  j++)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  for(int  j  =  getNumObjectiveFunctions();  j  <  getRhsOffset();  j++)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	for(int  j  =  getNumObjectiveFunctions();  j  <  getRhsOffset();  j++)  {	  for(int    i    =    getNumObjectiveFunctions();    j    <    getNumObjectiveFunctions()    +    i;    j++)    {    basicRow    =    getBasicRow(basicRow,    getRhsOffset());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
212	[BUG]  [BUGGY]  for(int  j  =  getRhsOffset();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  for(int  j  =  getRhsOffset();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	for(int  j  =  getRhsOffset();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {	  for(int    i    =    getNumObjectiveFunctions();    j    <    getNumObjectiveFunctions()    +    i;    j++)    {    basicRow    =    getBasicRow(basicRow,    getRhsOffset());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
213	[BUG]  [BUGGY]  for(int  j  =  getRows();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  for(int  j  =  getRows();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	for(int  j  =  getRows();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {	  for(int    i    =    getNumObjectiveFunctions();    j    <    getNumObjectiveFunctions()    +    i;    j++)    {    basicRow    =    getBasicRow(basicRow,    getRhsOffset());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
214	[BUG]  [BUGGY]  for(int  j  =  getNumObjectiveFunctions();  j  <  getRows()  +  i;  j++)  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  for(int  j  =  getNumObjectiveFunctions();  j  <  getRows()  +  i;  j++)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	for(int  j  =  getNumObjectiveFunctions();  j  <  getRows()  +  i;  j++)  {	  for(int    i    =    getNumObjectiveFunctions();    j    <    getNumObjectiveFunctions()    +    i;    j++)    {    basicRow    =    getBasicRow(basicRow,    getRhsOffset());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
215	[BUG]  [BUGGY]  if  (basicRow  ==  null  ||  j.getEntry(basicRow,  j)!=  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow  ==  null  ||  j.getEntry(basicRow,  j)!=  0)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow  ==  null  ||  j.getEntry(basicRow,  j)!=  0)  {	  if    (basicRow    ==    null    ||    j.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
216	[BUG]  [BUGGY]  if  (basicRow  ==  null  ||  j.getEntry(basicRow,  j)  ==  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow  ==  null  ||  j.getEntry(basicRow,  j)  ==  0)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow  ==  null  ||  j.getEntry(basicRow,  j)  ==  0)  {	  if    (basicRow    ==    null    ||    j.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
217	[BUG]  [BUGGY]  Integer  table  =  getTableau(basicRow,  j  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  table  =  getTableau(basicRow,  j  +  1);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  table  =  getTableau(basicRow,  j  +  1);	  Integer    tableau    =    getTableau(basicRow,    j);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
218	[BUG]  [BUGGY]  if  (basicRow  ==  null  &&  basicRow.getEntry(basicRow,  i)  ==  1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow  ==  null  &&  basicRow.getEntry(basicRow,  i)  ==  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow  ==  null  &&  basicRow.getEntry(basicRow,  i)  ==  1)  {	  if    (basicRow.getEntry(j,    i)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
219	[BUG]  [BUGGY]  if  (basicRow.getEntry(basicRow,  i)!=  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow.getEntry(basicRow,  i)!=  0)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow.getEntry(basicRow,  i)!=  0)  {	  if    (basicRow.getEntry(j,    i)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
220	[BUG]  [BUGGY]  Integer  coefficients[]  =  f.getValue(variables,  j  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  f.getValue(variables,  j  +  1);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  f.getValue(variables,  j  +  1);	  Integer    coefficients[]    =    f.getValue(variables,    j);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
221	[BUG]  [BUGGY]  if  (basicRow  ==  null  ||  table.getEntry(basicRow,  j)  >=  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow  ==  null  ||  table.getEntry(basicRow,  j)  >=  0)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow  ==  null  ||  table.getEntry(basicRow,  j)  >=  0)  {	  if    (basicRow    ==    null    ||    table.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
222	[BUG]  [BUGGY]  if  (j  <  0  ||  table.getEntry(basicRow,  j)  ==  1)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j  <  0  ||  table.getEntry(basicRow,  j)  ==  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j  <  0  ||  table.getEntry(basicRow,  j)  ==  1)  {	  if    (j    ==    0    ||    table.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
223	[BUG]  [BUGGY]  if  (base.getEntry(basicRow,  j)!=  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (base.getEntry(basicRow,  j)!=  0)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (base.getEntry(basicRow,  j)!=  0)  {	  if    (base.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
224	[BUG]  [BUGGY]  if  (base.getEntry(basicRow,  j)  >=  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (base.getEntry(basicRow,  j)  >=  0)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (base.getEntry(basicRow,  j)  >=  0)  {	  if    (base.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
225	[BUG]  [BUGGY]  if  (base.getEntry(basicRow,  j  +  1)  ==  1)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (base.getEntry(basicRow,  j  +  1)  ==  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (base.getEntry(basicRow,  j  +  1)  ==  1)  {	  if    (base.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
226	[BUG]  [BUGGY]  for(int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions();  j++)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  for(int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions();  j++)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	for(int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions();  j++)  {	  for(int    i    =    getNumObjectiveFunctions();    j    <    getNumObjectiveFunctions()    +    i;    j++)    {    coefficients[j]    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
227	[BUG]  [BUGGY]  for(int  j  =  getNumObjectiveFunctions();  j  <  getRowCount();  j++)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  for(int  j  =  getNumObjectiveFunctions();  j  <  getRowCount();  j++)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	for(int  j  =  getNumObjectiveFunctions();  j  <  getRowCount();  j++)  {	  for(int    i    =    getNumObjectiveFunctions();    j    <    getNumObjectiveFunctions()    +    i;    j++)    {    coefficients[j]    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
228	[BUG]  [BUGGY]  for(int  j  =  getNumObjectiveFunctions();  j  <  getWrappedFunctions()  +  i;  j++)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  for(int  j  =  getNumObjectiveFunctions();  j  <  getWrappedFunctions()  +  i;  j++)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	for(int  j  =  getNumObjectiveFunctions();  j  <  getWrappedFunctions()  +  i;  j++)  {	  for(int    i    =    getNumObjectiveFunctions();    j    <    getNumObjectiveFunctions()    +    i;    j++)    {    coefficients[j]    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
229	[BUG]  [BUGGY]  for(int  j  =  getNumObjectiveFunctions();  j  <  getBasicRow()  +  i;  j++)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  for(int  j  =  getNumObjectiveFunctions();  j  <  getBasicRow()  +  i;  j++)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	for(int  j  =  getNumObjectiveFunctions();  j  <  getBasicRow()  +  i;  j++)  {	  for(int    i    =    getNumObjectiveFunctions();    j    <    getNumObjectiveFunctions()    +    i;    j++)    {    coefficients[i]    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
230	[BUG]  [BUGGY]  if  (basicRow  ==  null  ||  tableau.getEntry(basicRow,  j)!=  0)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow  ==  null  ||  tableau.getEntry(basicRow,  j)!=  0)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow  ==  null  ||  tableau.getEntry(basicRow,  j)!=  0)  {	  if    (basicRow    ==    null    ||    tableau.getEntry(basicRow,    j)    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
231	[BUG]  [BUGGY]  Integer  coefficients[]  =  f.getValue(basicRow,  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  f.getValue(basicRow,  1);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  f.getValue(basicRow,  1);	  Integer    coefficients[]    =    f.getValue(basicRow,    0);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
232	[BUG]  [BUGGY]  if  (basicRow!=  null  &&  basicRow.getEntry(basicRow,  i)  ==  1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow!=  null  &&  basicRow.getEntry(basicRow,  i)  ==  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow!=  null  &&  basicRow.getEntry(basicRow,  i)  ==  1)  {	  if    (basicRow.getEntry(basicRow,    i)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
233	[BUG]  [BUGGY]  if  (basicRow  ==  null  ||  basicRow.getEntry(basicRow,  i)  ==  1)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow  ==  null  ||  basicRow.getEntry(basicRow,  i)  ==  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow  ==  null  ||  basicRow.getEntry(basicRow,  i)  ==  1)  {	  if    (basicRow.getEntry(basicRow,    i)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
234	[BUG]  [BUGGY]  if  (basicRow!=  null  &&  basicRow.getEntry(basicRow,  j)!=  1)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow!=  null  &&  basicRow.getEntry(basicRow,  j)!=  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow!=  null  &&  basicRow.getEntry(basicRow,  j)!=  1)  {	  if    (basicRow.getEntry(basicRow,    j)!=    1)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
235	[BUG]  [BUGGY]  Tableau  tableau  =  getTableau(basicRow,  i  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Tableau  tableau  =  getTableau(basicRow,  i  +  1);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Tableau  tableau  =  getTableau(basicRow,  i  +  1);	  Tableau    tableau    =    getTableau(basicRow,    i);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
236	[BUG]  [BUGGY]  Tableau  tableau  =  getTableau(basicRow,  j  +  1,  f.getValue(basicRow));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Tableau  tableau  =  getTableau(basicRow,  j  +  1,  f.getValue(basicRow));  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Tableau  tableau  =  getTableau(basicRow,  j  +  1,  f.getValue(basicRow));	  Tableau    tableau    =    getTableau(basicRow,    j    +    1);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
237	[BUG]  [BUGGY]  Tableau  tableau  =  getTableau(basicRow,  j  +  1,  i);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Tableau  tableau  =  getTableau(basicRow,  j  +  1,  i);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Tableau  tableau  =  getTableau(basicRow,  j  +  1,  i);	  Tableau    tableau    =    getTableau(basicRow,    j    +    1);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
238	[BUG]  [BUGGY]  Integer  coefficients[]  =  tableau.getValue(j,  i);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  tableau.getValue(j,  i);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  tableau.getValue(j,  i);	  Integer    coefficients[]    =    tableau.getValue(j);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
239	[BUG]  [BUGGY]  if  (basicRow.getEntry(basicRow,  j  +  1)  <  1)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow.getEntry(basicRow,  j  +  1)  <  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow.getEntry(basicRow,  j  +  1)  <  1)  {	  if    (basicRow.getEntry(basicRow,    j)    <    1)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
240	[BUG]  [BUGGY]  if  (basicRow!=  null  ||  j.getEntry(basicRow,  j)  ==  1)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow!=  null  ||  j.getEntry(basicRow,  j)  ==  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow!=  null  ||  j.getEntry(basicRow,  j)  ==  1)  {	  if    (basicRow    ==    null    ||    j.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
241	[BUG]  [BUGGY]  if  (basicRow  ==  null  ||  j.getEntry(basicRow,  j)  <  1)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow  ==  null  ||  j.getEntry(basicRow,  j)  <  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow  ==  null  ||  j.getEntry(basicRow,  j)  <  1)  {	  if    (basicRow    ==    null    ||    j.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
242	[BUG]  [BUGGY]  for(int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  1;  j++)  {  coefficients[j]  =  0;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  for(int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  1;  j++)  {  coefficients[j]  =  0;  }  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	for(int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  1;  j++)  {  coefficients[j]  =  0;  }	  for(int    i    =    getNumObjectiveFunctions();    j    <    getNumObjectiveFunctions()    +    i;    j++)    {    coefficients[j]    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
243	[BUG]  [BUGGY]  Integer  tableau  =  getTableau(j  -  1,  i);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  tableau  =  getTableau(j  -  1,  i);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  tableau  =  getTableau(j  -  1,  i);	  Integer    tableau    =    getTableau(j    -    1);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
244	[BUG]  [BUGGY]  for(int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions();  j++)  {  basicRow  =  getBasicRow(basicRow,  getRhsOffset());  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  for(int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions();  j++)  {  basicRow  =  getBasicRow(basicRow,  getRhsOffset());  }  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	for(int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions();  j++)  {  basicRow  =  getBasicRow(basicRow,  getRhsOffset());  }	  for(int    i    =    getNumObjectiveFunctions();    j    <    getNumObjectiveFunctions()    +    i;    j++)    {    basicRow    =    getBasicRow(basicRow,    getRhsOffset());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
245	[BUG]  [BUGGY]  for(int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions();  j++)  {  basicRow  =  getBasicRow(basicRow,  getRhsOffset());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  for(int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions();  j++)  {  basicRow  =  getBasicRow(basicRow,  getRhsOffset());  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	for(int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions();  j++)  {  basicRow  =  getBasicRow(basicRow,  getRhsOffset());	  for(int    i    =    getNumObjectiveFunctions();    j    <    getNumObjectiveFunctions()    +    i;    j++)    {    basicRow    =    getBasicRow(basicRow,    getRhsOffset());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
246	[BUG]  [BUGGY]  if  (basicRow  ==  null  ||  basicRow.getEntry(basicRow,  j)!=  0)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow  ==  null  ||  basicRow.getEntry(basicRow,  j)!=  0)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow  ==  null  ||  basicRow.getEntry(basicRow,  j)!=  0)  {	  if    (basicRow    ==    null    ||    tableau.getEntry(basicRow,    j)    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
247	[BUG]  [BUGGY]  if  (basicRow.getEntry(basicRow,  j  +  1)!=  1)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow.getEntry(basicRow,  j  +  1)!=  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow.getEntry(basicRow,  j  +  1)!=  1)  {	  if    (basicRow.getEntry(basicRow,    j    +    1)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
248	[BUG]  [BUGGY]  if  (basicRow!=  null  &&  basicRow.getEntry(basicRow,  j)>  1)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow!=  null  &&  basicRow.getEntry(basicRow,  j)>  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow!=  null  &&  basicRow.getEntry(basicRow,  j)>  1)  {	  if    (basicRow!=    null    &&    basicRow.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
249	[BUG]  [BUGGY]  if  (basicRow!=  null  &&  basicRow.getEntry(basicRow,  j)  >=  0)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow!=  null  &&  basicRow.getEntry(basicRow,  j)  >=  0)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow!=  null  &&  basicRow.getEntry(basicRow,  j)  >=  0)  {	  if    (basicRow!=    null    &&    basicRow.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  ')'  expected	60	None	replace
250	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getRhsOffset();  i++)  {  coefficients[i]  =  (basicRow  ==  null?  0  :  getEntry(basicRow,  getRhsOffset()));  }  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  for(int  i  =  0;  i  <  getRhsOffset();  i++)  {  coefficients[i]  =  (basicRow  ==  null?  0  :  getEntry(basicRow,  getRhsOffset()));  }  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	for(int  i  =  0;  i  <  getRhsOffset();  i++)  {  coefficients[i]  =  (basicRow  ==  null?  0  :  getEntry(basicRow,  getRhsOffset()));  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    coefficients[i]    =    (basicRow    ==    null?    0    :    getEntry(basicRow,    getRhsOffset()));    	non-compiled	[CE]  ')'  expected	70	None	replace
251	[BUG]  [BUGGY]  Integer  coefficients[]  =  this.tableau.getValue(variables);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  this.tableau.getValue(variables);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  this.tableau.getValue(variables);	  Integer    coefficients[]    =    tableau.getValue(variables);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
252	[BUG]  [BUGGY]  Integer  coefficients[]  =  getColumns().toArray(new  Integer[j]);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  getColumns().toArray(new  Integer[j]);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  getColumns().toArray(new  Integer[j]);	  Integer    coefficients[]    =    getColumns().toArray(new    Integer[0]);    	non-compiled	[CE]  ')'  expected	55	None	replace
253	[BUG]  [BUGGY]  if  (basicRow  ==  null  ||  table.getEntry(basicRow,  j)  <  0)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow  ==  null  ||  table.getEntry(basicRow,  j)  <  0)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow  ==  null  ||  table.getEntry(basicRow,  j)  <  0)  {	  if    (basicRow    ==    null    ||    table.getEntry(basicRow,    j)    ==    0)    {    	non-compiled	[CE]  ')'  expected	82	None	replace
254	[BUG]  [BUGGY]  Integer  coefficients[]  =  getEntryColumns().toArray(new  Integer[0]);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  getEntryColumns().toArray(new  Integer[0]);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  getEntryColumns().toArray(new  Integer[0]);	  Integer    coefficients[]    =    getEntryColumns();    	non-compiled	[CE]  ')'  expected	87	None	replace
255	[BUG]  [BUGGY]  if  (basicRow.getEntry(j,  i)>  1)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow.getEntry(j,  i)>  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow.getEntry(j,  i)>  1)  {	  if    (j.getEntry(basicRow,    i)    ==    1)    {    	non-compiled	[CE]  ')'  expected	22	None	replace
256	[BUG]  [BUGGY]  if  (basicRow  ==  null  ||  table.getEntry(basicRow,  j)>  1)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow  ==  null  ||  table.getEntry(basicRow,  j)>  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow  ==  null  ||  table.getEntry(basicRow,  j)>  1)  {	  if    (basicRow    ==    null    ||    table.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  ')'  expected	50	None	replace
257	[BUG]  [BUGGY]  if  (basicRow  ==  null  ||  table.getEntry(basicRow,  j)  <  1)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow  ==  null  ||  table.getEntry(basicRow,  j)  <  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow  ==  null  ||  table.getEntry(basicRow,  j)  <  1)  {	  if    (basicRow    ==    null    ||    table.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  ')'  expected	50	None	replace
258	[BUG]  [BUGGY]  Tableau  table  =  getTableau(basicRow,  j  -  1);  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Tableau  table  =  getTableau(basicRow,  j  -  1);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Tableau  table  =  getTableau(basicRow,  j  -  1);	  Tableau    tableau    =    getTableau(basicRow,    j    +    1);    	non-compiled	[CE]  ')'  expected	4	None	replace
259	[BUG]  [BUGGY]  Tableau  table  =(Tableau)getTableau();  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Tableau  table  =(Tableau)getTableau();  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Tableau  table  =(Tableau)getTableau();	  Tableau    table    =    getTableau();    	non-compiled	[CE]  ')'  expected	44	None	replace
260	[BUG]  [BUGGY]  Tableau  table  =  getTableau(0);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Tableau  table  =  getTableau(0);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Tableau  table  =  getTableau(0);	  Tableau    table    =    getTableau();    	non-compiled	[CE]  ')'  expected	44	None	replace
261	[BUG]  [BUGGY]  for(int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  1;  j++)  {  coefficients[i]  =  0;  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  for(int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  1;  j++)  {  coefficients[i]  =  0;  }  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	for(int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  1;  j++)  {  coefficients[i]  =  0;  }	  for(int    i    =    getNumObjectiveFunctions();    j    <    getNumObjectiveFunctions()    +    i;    j++)    {    coefficients[i]    =    0;    }    	non-compiled	[CE]  ')'  expected	11	None	replace
262	[BUG]  [BUGGY]  if  (basicRow.getEntry(basicRow,  j  +  1)  <  0)  {  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (basicRow.getEntry(basicRow,  j  +  1)  <  0)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (basicRow.getEntry(basicRow,  j  +  1)  <  0)  {	  if    (basicRow.getEntry(basicRow,    j)    <    0)    {    	non-compiled	[CE]  ')'  expected	7	None	replace
263	[BUG]  [BUGGY]  if  (j  ==  0  ||  graph.getEntry(basicRow,  j)!=  1)  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j  ==  0  ||  graph.getEntry(basicRow,  j)!=  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j  ==  0  ||  graph.getEntry(basicRow,  j)!=  1)  {	  if    (j    ==    0    ||    tableau.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  ')'  expected	49	None	replace
264	[BUG]  [BUGGY]  Integer  graph  =  getTableau(i);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  graph  =  getTableau(i);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  graph  =  getTableau(i);	  Integer    graph    =    getTableau(j);    	non-compiled	[CE]  ')'  expected	17	None	replace
265	[BUG]  [BUGGY]  Integer  coefficients[]  =  f.getValue(variables,  j  -  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  f.getValue(variables,  j  -  1);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  f.getValue(variables,  j  -  1);	  Integer    coefficients[]    =    f.getValue(variables,    j);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
266	[BUG]  [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  j  -  1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Integer  coefficients[]  =  getEntry(basicRow,  j  -  1);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Integer  coefficients[]  =  getEntry(basicRow,  j  -  1);	  Integer    coefficients[]    =    getEntry(basicRow,    j);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
267	[BUG]  [BUGGY]  Tableau  table  =  getTableau(basicRow,  i  +  1,  j);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Tableau  table  =  getTableau(basicRow,  i  +  1,  j);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Tableau  table  =  getTableau(basicRow,  i  +  1,  j);	  Tableau    table    =    getTableau(basicRow,    i);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
268	[BUG]  [BUGGY]  if  (j  ==  0  ||  table.getEntry(basicRow,  j)>  1)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  if  (j  ==  0  ||  table.getEntry(basicRow,  j)>  1)  {  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	if  (j  ==  0  ||  table.getEntry(basicRow,  j)>  1)  {	  if    (j    ==    0    ||    table.getEntry(basicRow,    j)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
269	[BUG]  [BUGGY]  Tableau  table  =  getTableau(basicRow,  j  +  1,  coefficients);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Tableau  table  =  getTableau(basicRow,  j  +  1,  coefficients);  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Tableau  table  =  getTableau(basicRow,  j  +  1,  coefficients);	  Tableau    table    =    getTableau(basicRow,    j    +    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
270	[BUG]  [BUGGY]  Tableau  table  =  getTableau(basicRow,  j)+  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  Tableau  table  =  getTableau(basicRow,  j)+  1;  [BUGGY]      if  (tableau.getEntry(basicRow,  j)  ==  1)  {  coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	Tableau  table  =  getTableau(basicRow,  j)+  1;	  Tableau    table    =    getTableau(basicRow,    j    +    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
271	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  getNumObjectiveFunctions();  i++)  {  coefficients[i]  =  -(basicRow  ==  null?  0  :  getEntry(basicRow,  getRhsOffset()));  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      double  mostNegative  =  basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset());  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  basicRow  =  getBasicRow(getNumObjectiveFunctions()  +  i);    coefficients[i]  =  (basicRow  ==  null  ?  0  :  getEntry(basicRow,  getRhsOffset()))  -  (restrictToNonNegative  ?  0  :  mostNegative);  if  (basicRow  !=  null)  {  for  (int  j  =  getNumObjectiveFunctions();  j  <  getNumObjectiveFunctions()  +  i;  j++)  {      [BUGGY]  for(int  i  =  0;  j  <  getNumObjectiveFunctions();  i++)  {  coefficients[i]  =  -(basicRow  ==  null?  0  :  getEntry(basicRow,  getRhsOffset()));  }  [BUGGY]      coefficients[i]  =  0;  }  }  }  }  return  new  RealPointValuePair(coefficients,  f.getValue(coefficients));  }  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  RealPointValuePair  [VARIABLES]  Integer  basicRow  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double[]  coefficients  double  coefficient  epsilon  mostNegative  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  destPos  height  i  j  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  	projects/Math88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.3333333333333333	338	338	1	replace	for(int  i  =  0;  j  <  getNumObjectiveFunctions();  i++)  {  coefficients[i]  =  -(basicRow  ==  null?  0  :  getEntry(basicRow,  getRhsOffset()));  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    coefficients[i]    =    -(basicRow    ==    null?    0    :    getEntry(basicRow,    getRhsOffset()));    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
