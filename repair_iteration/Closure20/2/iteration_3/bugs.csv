bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.STRING  &&  value.equals( "String "))  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.STRING  &&  value.equals( "String "))  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.STRING  &&  value.equals( "String "))  {	  if(value!=    null    &&    value.getType()    ==    Token.STRING    ||    value.equals(   "String   "))    {    	non-compiled	[CE]  not  a  statement	44	None	replace
2	[BUG]  [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.STRING  ||  value.equals( "String   "))  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.STRING  ||  value.equals( "String   "))  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.getType()  ==  Token.STRING  ||  value.equals( "String   "))  {	  if(value!=    null    &&    value.getType()    ==    Token.STRING    ||    value.equals(   "String   "))    {    	non-compiled	[CE]  not  a  statement	44	None	replace
3	[BUG]  [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.STRING  &&  value.equals( "String "))  {  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.STRING  &&  value.equals( "String "))  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  &&  value.getType()  ==  Token.STRING  &&  value.equals( "String "))  {	  if(value!=    null    &&    value.getType()    ==    Token.STRING    ||    value.equals(   "String   "))    {    	non-compiled	[CE]  not  a  statement	44	None	replace
4	[BUG]  [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.STRING  ||  value.equals( "String "))  {  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.STRING  ||  value.equals( "String "))  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  &&  value.getType()  ==  Token.STRING  ||  value.equals( "String "))  {	  if(value!=    null    &&    value.getType()    ==    Token.STRING    ||    value.equals(   "String   "))    {    	non-compiled	[CE]  not  a  statement	44	None	replace
5	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.STRING  &&  value.getString().equals( "String "))  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.STRING  &&  value.getString().equals( "String "))  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.STRING  &&  value.getString().equals( "String "))  {	  if(value!=    null    &&    value.getType()    ==    Token.STRING    ||    value.getString().equals(   "String   "))    {    	non-compiled	[CE]  not  a  statement	43	None	replace
6	[BUG]  [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.STRING  ||  value.getString().equals( "String   "))  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.STRING  ||  value.getString().equals( "String   "))  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.getType()  ==  Token.STRING  ||  value.getString().equals( "String   "))  {	  if(value!=    null    &&    value.getType()    ==    Token.STRING    ||    value.getString().equals(   "String   "))    {    	non-compiled	[CE]  not  a  statement	43	None	replace
7	[BUG]  [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.STRING  &&  value.getString().equals( "String "))  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.STRING  &&  value.getString().equals( "String "))  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  &&  value.getType()  ==  Token.STRING  &&  value.getString().equals( "String "))  {	  if(value!=    null    &&    value.getType()    ==    Token.STRING    ||    value.getString().equals(   "String   "))    {    	non-compiled	[CE]  not  a  statement	43	None	replace
8	[BUG]  [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.VAR  &&  value.hasChildren())  {  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.VAR  &&  value.hasChildren())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.getType()  ==  Token.VAR  &&  value.hasChildren())  {	  if(value!=    null    &&    value.getType()    ==    Token.VAR    &&    value.hasChildren())    {    	non-compiled	[CE]  not  a  statement	12	None	replace
9	[BUG]  [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.VAR  &&  value.hasChildren())  {  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.VAR  &&  value.hasChildren())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  &&  value.getType()  ==  Token.VAR  &&  value.hasChildren())  {	  if(value!=    null    &&    value.getType()    ==    Token.VAR    &&    value.hasChildren())    {    	non-compiled	[CE]  not  a  statement	12	None	replace
10	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.FUNCTION  &&  value.hasChildren())  {  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.FUNCTION  &&  value.hasChildren())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.FUNCTION  &&  value.hasChildren())  {	  if(value!=    null    &&    value.getType()    ==    Token.VAR    &&    value.hasChildren())    {    	non-compiled	[CE]  not  a  statement	12	None	replace
11	[BUG]  [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.VAR)  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.VAR)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.VAR)  {	  if(value!=    null    &&    value.getType()    ==    Token.BLOCK    ||    value.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  not  a  statement	59	None	replace
12	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.BLOCK  &&  value.getType()  ==  Token.VAR)  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.BLOCK  &&  value.getType()  ==  Token.VAR)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.BLOCK  &&  value.getType()  ==  Token.VAR)  {	  if(value!=    null    &&    value.getType()    ==    Token.BLOCK    ||    value.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  not  a  statement	59	None	replace
13	[BUG]  [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.VAR)  {  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.VAR)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  &&  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.VAR)  {	  if(value!=    null    &&    value.getType()    ==    Token.BLOCK    ||    value.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  not  a  statement	59	None	replace
14	[BUG]  [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.VAR)  {  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.VAR)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  ||  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.VAR)  {	  if(value!=    null    &&    value.getType()    ==    Token.BLOCK    ||    value.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  not  a  statement	59	None	replace
15	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.VAR  ||  value.getType()  ==  Token.BLOCK)  {  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.VAR  ||  value.getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.VAR  ||  value.getType()  ==  Token.BLOCK)  {	  if(value!=    null    &&    value.getType()    ==    Token.BLOCK    ||    value.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  not  a  statement	59	None	replace
16	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.STRING  ||  value.getType()  ==  Token.VAR)  {  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.STRING  ||  value.getType()  ==  Token.VAR)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.STRING  ||  value.getType()  ==  Token.VAR)  {	  if(value!=    null    &&    value.getType()    ==    Token.BLOCK    ||    value.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  not  a  statement	59	None	replace
17	[BUG]  [BUGGY]  Preconditions.checkState(value  ==  null);  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Preconditions.checkState(value  ==  null);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Preconditions.checkState(value  ==  null);	  Preconditions.checkState(value!=    null);    	non-compiled	[CE]  not  a  statement	36	None	replace
18	[BUG]  [BUGGY]  Preconditions.checkState(value!=  null  &&  value.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Preconditions.checkState(value!=  null  &&  value.getType()  ==  Token.FUNCTION);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Preconditions.checkState(value!=  null  &&  value.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(value!=    null);    	non-compiled	[CE]  not  a  statement	36	None	replace
19	[BUG]  [BUGGY]  Preconditions.checkState(value!=  null,  value.detachFromParent());  [CE]  not  a  statement  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Preconditions.checkState(value!=  null,  value.detachFromParent());  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Preconditions.checkState(value!=  null,  value.detachFromParent());	  Preconditions.checkState(value!=    null);    	non-compiled	[CE]  not  a  statement	36	None	replace
20	[BUG]  [BUGGY]  Preconditions.checkState(value!=  null  &&  value.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Preconditions.checkState(value!=  null  &&  value.getType()  ==  Token.NAME);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Preconditions.checkState(value!=  null  &&  value.getType()  ==  Token.NAME);	  Preconditions.checkState(value!=    null);    	non-compiled	[CE]  not  a  statement	36	None	replace
21	[BUG]  [BUGGY]  Preconditions.checkState(value!=  null,  value.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Preconditions.checkState(value!=  null,  value.getType()  ==  Token.NAME);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Preconditions.checkState(value!=  null,  value.getType()  ==  Token.NAME);	  Preconditions.checkState(value!=    null);    	non-compiled	[CE]  not  a  statement	36	None	replace
22	[BUG]  [BUGGY]  Preconditions.checkState(value!=  null,  value.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]                                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Preconditions.checkState(value!=  null,  value.getType()  ==  Token.FUNCTION);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Preconditions.checkState(value!=  null,  value.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(value!=    null);    	non-compiled	[CE]  not  a  statement	36	None	replace
23	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayActionCall());  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayActionCall());  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	NodeTraversal.traverse(compiler,  n,  new  FoldArrayActionCall());	  NodeTraversal.traverse(compiler,    value,    new    FoldArrayActionCall());    	non-compiled	[CE]  not  a  statement	35	None	replace
24	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callTarget,  new  FoldArrayActionCall());  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  callTarget,  new  FoldArrayActionCall());  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	NodeTraversal.traverse(compiler,  callTarget,  new  FoldArrayActionCall());	  NodeTraversal.traverse(compiler,    value,    new    FoldArrayActionCall());    	non-compiled	[CE]  not  a  statement	35	None	replace
25	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  value,  new  FoldArrayActionCall(),  REGEXP_FLAGS_RE);  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  value,  new  FoldArrayActionCall(),  REGEXP_FLAGS_RE);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	NodeTraversal.traverse(compiler,  value,  new  FoldArrayActionCall(),  REGEXP_FLAGS_RE);	  NodeTraversal.traverse(compiler,    value,    new    FoldArrayActionCall());    	non-compiled	[CE]  not  a  statement	35	None	replace
26	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  value,  new  FoldArrayActionCall(),  callTarget);  [CE]  not  a  statement  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  value,  new  FoldArrayActionCall(),  callTarget);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	NodeTraversal.traverse(compiler,  value,  new  FoldArrayActionCall(),  callTarget);	  NodeTraversal.traverse(compiler,    value,    new    FoldArrayActionCall());    	non-compiled	[CE]  not  a  statement	35	None	replace
27	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  value,  new  FoldArrayActionCall(),  n);  [CE]  not  a  statement  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  value,  new  FoldArrayActionCall(),  n);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	NodeTraversal.traverse(compiler,  value,  new  FoldArrayActionCall(),  n);	  NodeTraversal.traverse(compiler,    value,    new    FoldArrayActionCall());    	non-compiled	[CE]  not  a  statement	35	None	replace
28	[BUG]  [BUGGY]  Node  n  =  callTarget.getNext();  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  n  =  callTarget.getNext();  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  n  =  callTarget.getNext();	  Node    n    =    value.getNext();    	non-compiled	[CE]  not  a  statement	25	None	replace
29	[BUG]  [BUGGY]  Node  n  =  value!=  null?  value.getNext()  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  n  =  value!=  null?  value.getNext()  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  n  =  value!=  null?  value.getNext()  :  INVALID_REGULAR_EXPRESSION_FLAGS;	  Node    n    =    value.getNext();    	non-compiled	[CE]  ';'  expected	25	None	replace
30	[BUG]  [BUGGY]  Node  n  =  value!=  null?  value.getNext()  :  Integer.toString(value.getLastChild());  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  n  =  value!=  null?  value.getNext()  :  Integer.toString(value.getLastChild());  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  n  =  value!=  null?  value.getNext()  :  Integer.toString(value.getLastChild());	  Node    n    =    value.getNext();    	non-compiled	[CE]  ';'  expected	25	None	replace
31	[BUG]  [BUGGY]  Node  n  =  value!=  null?  value.getNext()  :  Integer.toString(value.getLowerCase());  [CE]  ';'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  n  =  value!=  null?  value.getNext()  :  Integer.toString(value.getLowerCase());  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  n  =  value!=  null?  value.getNext()  :  Integer.toString(value.getLowerCase());	  Node    n    =    value.getNext();    	non-compiled	[CE]  ';'  expected	25	None	replace
32	[BUG]  [BUGGY]  Node  n  =  value!=  null?  value.getNext()  :  Integer.toString(value.getString());  [CE]  ';'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  n  =  value!=  null?  value.getNext()  :  Integer.toString(value.getString());  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  n  =  value!=  null?  value.getNext()  :  Integer.toString(value.getString());	  Node    n    =    value.getNext();    	non-compiled	[CE]  ';'  expected	25	None	replace
33	[BUG]  [BUGGY]  Node  n  =  value!=  null?  value.getNext()  :  Integer.toString(value.getType());  [CE]  ';'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  n  =  value!=  null?  value.getNext()  :  Integer.toString(value.getType());  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  n  =  value!=  null?  value.getNext()  :  Integer.toString(value.getType());	  Node    n    =    value.getNext();    	non-compiled	[CE]  ';'  expected	25	None	replace
34	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  &&  value.getString().equals( "String "))  {  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  &&  value.getString().equals( "String "))  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.NAME  &&  value.getString().equals( "String "))  {	  if(value!=    null    &&    value.getType()    ==    Token.NAME    ||    value.getString().equals(   "String   "))    {    	non-compiled	[CE]  ';'  expected	49	None	replace
35	[BUG]  [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.NAME  ||  value.getString().equals( "String   "))  {  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.NAME  ||  value.getString().equals( "String   "))  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.getType()  ==  Token.NAME  ||  value.getString().equals( "String   "))  {	  if(value!=    null    &&    value.getType()    ==    Token.NAME    ||    value.getString().equals(   "String   "))    {    	non-compiled	[CE]  ';'  expected	49	None	replace
36	[BUG]  [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.NAME  &&  value.getString().equals( "String "))  {  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.NAME  &&  value.getString().equals( "String "))  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  &&  value.getType()  ==  Token.NAME  &&  value.getString().equals( "String "))  {	  if(value!=    null    &&    value.getType()    ==    Token.NAME    ||    value.getString().equals(   "String   "))    {    	non-compiled	[CE]  ';'  expected	49	None	replace
37	[BUG]  [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.NAME  ||  value.getString().equals( "String "))  {  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.NAME  ||  value.getString().equals( "String "))  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  &&  value.getType()  ==  Token.NAME  ||  value.getString().equals( "String "))  {	  if(value!=    null    &&    value.getType()    ==    Token.NAME    ||    value.getString().equals(   "String   "))    {    	non-compiled	[CE]  ';'  expected	49	None	replace
38	[BUG]  [BUGGY]  Node  next  =  value.getNext()  -  1;  [CE]  ';'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  next  =  value.getNext()  -  1;  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  next  =  value.getNext()  -  1;	  Node    next    =    value.getNext();    	non-compiled	[CE]  ';'  expected	28	None	replace
39	[BUG]  [BUGGY]  Node  next  =  value!=  null?  value.getNext()  :  Integer.toString(value.getLastChild());  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  next  =  value!=  null?  value.getNext()  :  Integer.toString(value.getLastChild());  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  next  =  value!=  null?  value.getNext()  :  Integer.toString(value.getLastChild());	  Node    next    =    value.getNext();    	non-compiled	[CE]  not  a  statement	28	None	replace
40	[BUG]  [BUGGY]  Node  next  =  value!=  null?  value.getNext()  :  DEFAULT_REGULAR_EXPRESSION_FLAGS;  [CE]  not  a  statement  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  next  =  value!=  null?  value.getNext()  :  DEFAULT_REGULAR_EXPRESSION_FLAGS;  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  next  =  value!=  null?  value.getNext()  :  DEFAULT_REGULAR_EXPRESSION_FLAGS;	  Node    next    =    value.getNext();    	non-compiled	[CE]  not  a  statement	28	None	replace
41	[BUG]  [BUGGY]  Node  next  =  value.getNext()  :  null;  [CE]  not  a  statement  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  next  =  value.getNext()  :  null;  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  next  =  value.getNext()  :  null;	  Node    next    =    value.getNext();    	non-compiled	[CE]  not  a  statement	28	None	replace
42	[BUG]  [BUGGY]  Node  next  =  value!=  null?  value.getNext()  :  Integer.toString(value.getLowerCase());  [CE]  not  a  statement  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  next  =  value!=  null?  value.getNext()  :  Integer.toString(value.getLowerCase());  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  next  =  value!=  null?  value.getNext()  :  Integer.toString(value.getLowerCase());	  Node    next    =    value.getNext();    	non-compiled	[CE]  not  a  statement	28	None	replace
43	[BUG]  [BUGGY]  Node  next  =  callTarget.getNext();  [CE]  not  a  statement  [FE]                                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  next  =  callTarget.getNext();  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  next  =  callTarget.getNext();	  Node    next    =    value.getNext();    	non-compiled	[CE]  not  a  statement	28	None	replace
44	[BUG]  [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.VAR  ||  value.getType()  ==  Token.CALL)  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.VAR  ||  value.getType()  ==  Token.CALL)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.getType()  ==  Token.VAR  ||  value.getType()  ==  Token.CALL)  {	  if(value!=    null    &&    value.getType()    ==    Token.VAR    ||    value.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  not  a  statement	42	None	replace
45	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.VAR  &&  value.getType()  ==  Token.CALL)  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.VAR  &&  value.getType()  ==  Token.CALL)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.VAR  &&  value.getType()  ==  Token.CALL)  {	  if(value!=    null    &&    value.getType()    ==    Token.VAR    ||    value.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  not  a  statement	42	None	replace
46	[BUG]  [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.VAR  ||  value.getType()  ==  Token.CALL)  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.VAR  ||  value.getType()  ==  Token.CALL)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  ||  value.getType()  ==  Token.VAR  ||  value.getType()  ==  Token.CALL)  {	  if(value!=    null    &&    value.getType()    ==    Token.VAR    ||    value.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  not  a  statement	42	None	replace
47	[BUG]  [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.VAR  ||  value.getType()  ==  Token.CALL)  {  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.VAR  ||  value.getType()  ==  Token.CALL)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  &&  value.getType()  ==  Token.VAR  ||  value.getType()  ==  Token.CALL)  {	  if(value!=    null    &&    value.getType()    ==    Token.VAR    ||    value.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  not  a  statement	42	None	replace
48	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.CALL  ||  value.getType()  ==  Token.VAR)  {  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.CALL  ||  value.getType()  ==  Token.VAR)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.CALL  ||  value.getType()  ==  Token.VAR)  {	  if(value!=    null    &&    value.getType()    ==    Token.VAR    ||    value.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  not  a  statement	42	None	replace
49	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.FUNCTION  ||  value.getType()  ==  Token.CALL)  {  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.FUNCTION  ||  value.getType()  ==  Token.CALL)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.FUNCTION  ||  value.getType()  ==  Token.CALL)  {	  if(value!=    null    &&    value.getType()    ==    Token.VAR    ||    value.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  not  a  statement	42	None	replace
50	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.FUNCTION  ||  value.getType()  ==  Token.NAME)  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.FUNCTION  ||  value.getType()  ==  Token.NAME)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.FUNCTION  ||  value.getType()  ==  Token.NAME)  {	  if(value!=    null    &&    value.getType()    ==    Token.FUNCTION    &&    value.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
51	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  &&  value.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  &&  value.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.NAME  &&  value.getType()  ==  Token.FUNCTION)  {	  if(value!=    null    &&    value.getType()    ==    Token.FUNCTION    &&    value.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
52	[BUG]  [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.FUNCTION  &&  value.getType()  ==  Token.NAME)  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.FUNCTION  &&  value.getType()  ==  Token.NAME)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  &&  value.getType()  ==  Token.FUNCTION  &&  value.getType()  ==  Token.NAME)  {	  if(value!=    null    &&    value.getType()    ==    Token.FUNCTION    &&    value.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
53	[BUG]  [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.FUNCTION  &&  value.getType()  ==  Token.NAME)  {  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.FUNCTION  &&  value.getType()  ==  Token.NAME)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.getType()  ==  Token.FUNCTION  &&  value.getType()  ==  Token.NAME)  {	  if(value!=    null    &&    value.getType()    ==    Token.FUNCTION    &&    value.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
54	[BUG]  [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.FUNCTION  ||  value.getType()  ==  Token.NAME)  {  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.FUNCTION  ||  value.getType()  ==  Token.NAME)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.getType()  ==  Token.FUNCTION  ||  value.getType()  ==  Token.NAME)  {	  if(value!=    null    &&    value.getType()    ==    Token.FUNCTION    &&    value.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
55	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.FOR  &&  value.getType()  ==  Token.NAME)  {  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.FOR  &&  value.getType()  ==  Token.NAME)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.FOR  &&  value.getType()  ==  Token.NAME)  {	  if(value!=    null    &&    value.getType()    ==    Token.FUNCTION    &&    value.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
56	[BUG]  [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.CALL)  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.CALL)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  ||  value.getType()  ==  Token.CALL)  {	  if(value!=    null    ||    value.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  not  a  statement	4	None	replace
57	[BUG]  [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.GETPROP)  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.GETPROP)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.getType()  ==  Token.GETPROP)  {	  if(value!=    null    ||    value.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  not  a  statement	4	None	replace
58	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "n ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  value);  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  addition  =  IR.add(IR.string( "n ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  value);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  addition  =  IR.add(IR.string( "n ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  value);	  Node    addition    =    IR.add(    IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    n.getParent().replaceChild(n,    value);    	non-compiled	[CE]  not  a  statement	27	None	replace
59	[BUG]  [BUGGY]  Node  addition  =  n.getParent().addChildToFront(value).replaceChild(n,  IR.string( "   ").srcref(callTarget),  value.detachFromParent());  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  addition  =  n.getParent().addChildToFront(value).replaceChild(n,  IR.string( "   ").srcref(callTarget),  value.detachFromParent());  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  addition  =  n.getParent().addChildToFront(value).replaceChild(n,  IR.string( "   ").srcref(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(    IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    n.getParent().replaceChild(n,    value);    	non-compiled	[CE]  not  a  statement	27	None	replace
60	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "n ").src(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  value);  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  addition  =  IR.add(IR.string( "n ").src(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  value);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  addition  =  IR.add(IR.string( "n ").src(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  value);	  Node    addition    =    IR.add(    IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    n.getParent().replaceChild(n,    value);    	non-compiled	[CE]  not  a  statement	27	None	replace
61	[BUG]  [BUGGY]  Node  addition  =  n.getParent().addChildToFront(value,  IR.string( "   ").srcref(callTarget),  value.detachFromParent());  [CE]  not  a  statement  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  addition  =  n.getParent().addChildToFront(value,  IR.string( "   ").srcref(callTarget),  value.detachFromParent());  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  addition  =  n.getParent().addChildToFront(value,  IR.string( "   ").srcref(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(    IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    n.getParent().replaceChild(n,    value);    	non-compiled	[CE]  not  a  statement	27	None	replace
62	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Assignment ")).srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  value);  [CE]  not  a  statement  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  addition  =  IR.add(IR.string( "Assignment ")).srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  value);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  addition  =  IR.add(IR.string( "Assignment ")).srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  value);	  Node    addition    =    IR.add(    IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    n.getParent().replaceChild(n,    value);    	non-compiled	[CE]  not  a  statement	27	None	replace
63	[BUG]  [BUGGY]  Node  addition  =  n.getParent().addChildToFront(value).replaceChild(n,  IR.string( "   ").src(callTarget),  value.detachFromParent());  [CE]  not  a  statement  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  addition  =  n.getParent().addChildToFront(value).replaceChild(n,  IR.string( "   ").src(callTarget),  value.detachFromParent());  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  addition  =  n.getParent().addChildToFront(value).replaceChild(n,  IR.string( "   ").src(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(    IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    n.getParent().replaceChild(n,    value);    	non-compiled	[CE]  not  a  statement	27	None	replace
64	[BUG]  [BUGGY]  Node  addition  =  n.getParent().addChildToFront(value,  IR.string( "   ").src(callTarget),  value.detachFromParent());  [CE]  not  a  statement  [FE]                                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  addition  =  n.getParent().addChildToFront(value,  IR.string( "   ").src(callTarget),  value.detachFromParent());  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  addition  =  n.getParent().addChildToFront(value,  IR.string( "   ").src(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(    IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    n.getParent().replaceChild(n,    value);    	non-compiled	[CE]  not  a  statement	27	None	replace
65	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  value,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  value,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	NodeTraversal.traverse(compiler,  n,  value,  INVALID_REGULAR_EXPRESSION_FLAGS);	  NodeTraversal.traverse(compiler,    n,    value);    	non-compiled	[CE]  not  a  statement	39	None	replace
66	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  value,  n);  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  value,  n);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	NodeTraversal.traverse(compiler,  value,  n);	  NodeTraversal.traverse(compiler,    n,    value);    	non-compiled	[CE]  not  a  statement	39	None	replace
67	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  value,  REGEXP_FLAGS_RE);  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  value,  REGEXP_FLAGS_RE);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	NodeTraversal.traverse(compiler,  n,  value,  REGEXP_FLAGS_RE);	  NodeTraversal.traverse(compiler,    n,    value);    	non-compiled	[CE]  not  a  statement	39	None	replace
68	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  value,  callTarget);  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  value,  callTarget);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	NodeTraversal.traverse(compiler,  n,  value,  callTarget);	  NodeTraversal.traverse(compiler,    n,    value);    	non-compiled	[CE]  not  a  statement	39	None	replace
69	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  value,  this);  [CE]  not  a  statement  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  value,  this);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	NodeTraversal.traverse(compiler,  n,  value,  this);	  NodeTraversal.traverse(compiler,    n,    value);    	non-compiled	[CE]  not  a  statement	39	None	replace
70	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  value,  REGEXP_FLAGS);  [CE]  not  a  statement  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  value,  REGEXP_FLAGS);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	NodeTraversal.traverse(compiler,  n,  value,  REGEXP_FLAGS);	  NodeTraversal.traverse(compiler,    n,    value);    	non-compiled	[CE]  not  a  statement	39	None	replace
71	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  value,  reportCodeChange());  [CE]  not  a  statement  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  value,  reportCodeChange());  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	NodeTraversal.traverse(compiler,  n,  value,  reportCodeChange());	  NodeTraversal.traverse(compiler,    n,    value);    	non-compiled	[CE]  not  a  statement	39	None	replace
72	[BUG]  [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.CALL)  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.CALL)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.CALL)  {	  if(value!=    null    &&    value.getType()    ==    Token.NAME    ||    value.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  not  a  statement	52	None	replace
73	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  &&  value.getType()  ==  Token.CALL)  {  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  &&  value.getType()  ==  Token.CALL)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.NAME  &&  value.getType()  ==  Token.CALL)  {	  if(value!=    null    &&    value.getType()    ==    Token.NAME    ||    value.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  not  a  statement	52	None	replace
74	[BUG]  [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.CALL)  {  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.CALL)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  &&  value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.CALL)  {	  if(value!=    null    &&    value.getType()    ==    Token.NAME    ||    value.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  not  a  statement	52	None	replace
75	[BUG]  [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.CALL)  {  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.CALL)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  ||  value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.CALL)  {	  if(value!=    null    &&    value.getType()    ==    Token.NAME    ||    value.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  not  a  statement	52	None	replace
76	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.SCRIPT)  {  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.SCRIPT)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.SCRIPT)  {	  if(value!=    null    &&    value.getType()    ==    Token.NAME    ||    value.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  not  a  statement	52	None	replace
77	[BUG]  [BUGGY]  if(value!=  null  ||  value.getType()!=  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  ||  value.getType()!=  Token.FUNCTION)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.getType()!=  Token.FUNCTION)  {	  if(value    ==    null    ||    value.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	57	None	replace
78	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()!=  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()!=  Token.FUNCTION)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()!=  Token.FUNCTION)  {	  if(value    ==    null    ||    value.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	57	None	replace
79	[BUG]  [BUGGY]  if(value  ==  null  &&  value.getType()!=  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  &&  value.getType()!=  Token.FUNCTION)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  &&  value.getType()!=  Token.FUNCTION)  {	  if(value    ==    null    ||    value.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	57	None	replace
80	[BUG]  [BUGGY]  if(value!=  null  ||  value.getType()  >=  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  ||  value.getType()  >=  Token.FUNCTION)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.getType()  >=  Token.FUNCTION)  {	  if(value    ==    null    ||    value.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	57	None	replace
81	[BUG]  [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.VAR  ||  value.hasChildren())  {  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.VAR  ||  value.hasChildren())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.getType()  ==  Token.VAR  ||  value.hasChildren())  {	  if(value!=    null    &&    value.getType()    ==    Token.VAR    ||    value.hasChildren())    {    	non-compiled	[CE]  not  a  statement	41	None	replace
82	[BUG]  [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.VAR  ||  value.hasChildren())  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.VAR  ||  value.hasChildren())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  &&  value.getType()  ==  Token.VAR  ||  value.hasChildren())  {	  if(value!=    null    &&    value.getType()    ==    Token.VAR    ||    value.hasChildren())    {    	non-compiled	[CE]  not  a  statement	41	None	replace
83	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.FUNCTION  ||  value.hasChildren())  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.FUNCTION  ||  value.hasChildren())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.FUNCTION  ||  value.hasChildren())  {	  if(value!=    null    &&    value.getType()    ==    Token.VAR    ||    value.hasChildren())    {    	non-compiled	[CE]  not  a  statement	41	None	replace
84	[BUG]  [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.VAR  ||  value.hasChildren())  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.VAR  ||  value.hasChildren())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  ||  value.getType()  ==  Token.VAR  ||  value.hasChildren())  {	  if(value!=    null    &&    value.getType()    ==    Token.VAR    ||    value.hasChildren())    {    	non-compiled	[CE]  not  a  statement	41	None	replace
85	[BUG]  [BUGGY]  Node  value  =  callTarget.getNext();  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  value  =  callTarget.getNext();  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  value  =  callTarget.getNext();	  Node    value    =    value.getNext();    	non-compiled	[CE]  not  a  statement	24	None	replace
86	[BUG]  [BUGGY]  Node  value  =  n.getNext();  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  value  =  n.getNext();  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  value  =  n.getNext();	  Node    value    =    value.getNext();    	non-compiled	[CE]  not  a  statement	24	None	replace
87	[BUG]  [BUGGY]  Node  value  =  value!=  null?  value.getNext()  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  value  =  value!=  null?  value.getNext()  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  value  =  value!=  null?  value.getNext()  :  INVALID_REGULAR_EXPRESSION_FLAGS;	  Node    value    =    value.getNext();    	non-compiled	[CE]  not  a  statement	24	None	replace
88	[BUG]  [BUGGY]  Node  value  =  value!=  null?  value.getNext()  :  Integer.toString(value.getLastChild());  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  value  =  value!=  null?  value.getNext()  :  Integer.toString(value.getLastChild());  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  value  =  value!=  null?  value.getNext()  :  Integer.toString(value.getLastChild());	  Node    value    =    value.getNext();    	non-compiled	[CE]  not  a  statement	24	None	replace
89	[BUG]  [BUGGY]  Node  value  =  value!=  null?  value.getNext()  :  Integer.toString(value.getLowerCase());  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  value  =  value!=  null?  value.getNext()  :  Integer.toString(value.getLowerCase());  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  value  =  value!=  null?  value.getNext()  :  Integer.toString(value.getLowerCase());	  Node    value    =    value.getNext();    	non-compiled	[CE]  not  a  statement	24	None	replace
90	[BUG]  [BUGGY]  Node  value  =  value!=  null?  value.getNext()  :  DEFAULT_REGULAR_EXPRESSION_FLAGS;  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  value  =  value!=  null?  value.getNext()  :  DEFAULT_REGULAR_EXPRESSION_FLAGS;  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  value  =  value!=  null?  value.getNext()  :  DEFAULT_REGULAR_EXPRESSION_FLAGS;	  Node    value    =    value.getNext();    	non-compiled	[CE]  not  a  statement	24	None	replace
91	[BUG]  [BUGGY]  Node  value  =  value!=  null?  value.getNext()  :  Integer.toString(value.getLineno());  [CE]  not  a  statement  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  value  =  value!=  null?  value.getNext()  :  Integer.toString(value.getLineno());  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  value  =  value!=  null?  value.getNext()  :  Integer.toString(value.getLineno());	  Node    value    =    value.getNext();    	non-compiled	[CE]  not  a  statement	24	None	replace
92	[BUG]  [BUGGY]  if(value  ==  null  ||  value.getType()!=  Token.VAR)  {  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  ||  value.getType()!=  Token.VAR)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  ||  value.getType()!=  Token.VAR)  {	  if(value!=    null    ||    value.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  not  a  statement	15	None	replace
93	[BUG]  [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.GETPROP)  {  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.GETPROP)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  &&  value.getType()  ==  Token.GETPROP)  {	  if(value!=    null    &&    value.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  not  a  statement	6	None	replace
94	[BUG]  [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.GETPROP)  {  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.GETPROP)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  ||  value.getType()  ==  Token.GETPROP)  {	  if(value!=    null    &&    value.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  not  a  statement	6	None	replace
95	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.REGEXP)  {  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.REGEXP)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.REGEXP)  {	  if(value!=    null    &&    value.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  not  a  statement	6	None	replace
96	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.SETPROP)  {  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.SETPROP)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.SETPROP)  {	  if(value!=    null    &&    value.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  not  a  statement	6	None	replace
97	[BUG]  [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.STRING  ||  value.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.STRING  ||  value.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.getType()  ==  Token.STRING  ||  value.getType()  ==  Token.FUNCTION)  {	  if(value!=    null    &&    value.getType()    ==    Token.STRING    ||    value.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	46	None	replace
98	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.STRING  &&  value.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.STRING  &&  value.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.STRING  &&  value.getType()  ==  Token.FUNCTION)  {	  if(value!=    null    &&    value.getType()    ==    Token.STRING    ||    value.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	46	None	replace
99	[BUG]  [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.STRING  ||  value.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.STRING  ||  value.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  ||  value.getType()  ==  Token.STRING  ||  value.getType()  ==  Token.FUNCTION)  {	  if(value!=    null    &&    value.getType()    ==    Token.STRING    ||    value.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	46	None	replace
100	[BUG]  [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.STRING  ||  value.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.STRING  ||  value.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  &&  value.getType()  ==  Token.STRING  ||  value.getType()  ==  Token.FUNCTION)  {	  if(value!=    null    &&    value.getType()    ==    Token.STRING    ||    value.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	46	None	replace
101	[BUG]  [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.STRING  &&  value.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.STRING  &&  value.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  &&  value.getType()  ==  Token.STRING  &&  value.getType()  ==  Token.FUNCTION)  {	  if(value!=    null    &&    value.getType()    ==    Token.STRING    ||    value.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	46	None	replace
102	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.FUNCTION  ||  value.getType()  ==  Token.STRING)  {  [CE]  not  a  statement  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.FUNCTION  ||  value.getType()  ==  Token.STRING)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.FUNCTION  ||  value.getType()  ==  Token.STRING)  {	  if(value!=    null    &&    value.getType()    ==    Token.STRING    ||    value.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	46	None	replace
103	[BUG]  [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.BLOCK)  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  ||  value.getType()  ==  Token.BLOCK)  {	  if(value    ==    null    &&    value.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  not  a  statement	19	None	replace
104	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.STRING  &&  value.hasChildren())  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.STRING  &&  value.hasChildren())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.STRING  &&  value.hasChildren())  {	  if(value!=    null    &&    value.getType()    ==    Token.STRING    ||    value.hasChildren())    {    	non-compiled	[CE]  not  a  statement	45	None	replace
105	[BUG]  [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.STRING  ||  value.hasChildren())  {  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.STRING  ||  value.hasChildren())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.getType()  ==  Token.STRING  ||  value.hasChildren())  {	  if(value!=    null    &&    value.getType()    ==    Token.STRING    ||    value.hasChildren())    {    	non-compiled	[CE]  not  a  statement	45	None	replace
106	[BUG]  [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.STRING  ||  value.hasChildren())  {  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.STRING  ||  value.hasChildren())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  &&  value.getType()  ==  Token.STRING  ||  value.hasChildren())  {	  if(value!=    null    &&    value.getType()    ==    Token.STRING    ||    value.hasChildren())    {    	non-compiled	[CE]  not  a  statement	45	None	replace
107	[BUG]  [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.STRING  &&  value.hasChildren())  {  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.STRING  &&  value.hasChildren())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  &&  value.getType()  ==  Token.STRING  &&  value.hasChildren())  {	  if(value!=    null    &&    value.getType()    ==    Token.STRING    ||    value.hasChildren())    {    	non-compiled	[CE]  not  a  statement	45	None	replace
108	[BUG]  [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.STRING  ||  value.hasChildren())  {  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.STRING  ||  value.hasChildren())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  ||  value.getType()  ==  Token.STRING  ||  value.hasChildren())  {	  if(value!=    null    &&    value.getType()    ==    Token.STRING    ||    value.hasChildren())    {    	non-compiled	[CE]  not  a  statement	45	None	replace
109	[BUG]  [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.FUNCTION)  {	  if(value!=    null    &&    value.getType()    ==    Token.BLOCK    ||    value.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	20	None	replace
110	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.BLOCK  &&  value.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.BLOCK  &&  value.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.BLOCK  &&  value.getType()  ==  Token.FUNCTION)  {	  if(value!=    null    &&    value.getType()    ==    Token.BLOCK    ||    value.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	20	None	replace
111	[BUG]  [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  ||  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.FUNCTION)  {	  if(value!=    null    &&    value.getType()    ==    Token.BLOCK    ||    value.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	20	None	replace
112	[BUG]  [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  &&  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.FUNCTION)  {	  if(value!=    null    &&    value.getType()    ==    Token.BLOCK    ||    value.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	20	None	replace
113	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.FUNCTION  ||  value.getType()  ==  Token.BLOCK)  {  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.FUNCTION  ||  value.getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.FUNCTION  ||  value.getType()  ==  Token.BLOCK)  {	  if(value!=    null    &&    value.getType()    ==    Token.BLOCK    ||    value.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	20	None	replace
114	[BUG]  [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.NAME)  {  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.NAME)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.NAME)  {	  if(value!=    null    &&    value.getType()    ==    Token.BLOCK    ||    value.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  not  a  statement	21	None	replace
115	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.BLOCK  &&  value.getType()  ==  Token.NAME)  {  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.BLOCK  &&  value.getType()  ==  Token.NAME)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.BLOCK  &&  value.getType()  ==  Token.NAME)  {	  if(value!=    null    &&    value.getType()    ==    Token.BLOCK    ||    value.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  not  a  statement	21	None	replace
116	[BUG]  [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.NAME)  {  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.NAME)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  ||  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.NAME)  {	  if(value!=    null    &&    value.getType()    ==    Token.BLOCK    ||    value.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  not  a  statement	21	None	replace
117	[BUG]  [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.NAME)  {  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.NAME)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  &&  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.NAME)  {	  if(value!=    null    &&    value.getType()    ==    Token.BLOCK    ||    value.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  not  a  statement	21	None	replace
118	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.BLOCK)  {  [CE]  not  a  statement  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.BLOCK)  {	  if(value!=    null    &&    value.getType()    ==    Token.BLOCK    ||    value.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  not  a  statement	21	None	replace
119	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.STRING  ||  value.getType()  ==  Token.NAME)  {  [CE]  not  a  statement  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.STRING  ||  value.getType()  ==  Token.NAME)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.STRING  ||  value.getType()  ==  Token.NAME)  {	  if(value!=    null    &&    value.getType()    ==    Token.BLOCK    ||    value.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  not  a  statement	21	None	replace
120	[BUG]  [BUGGY]  if(value!=  null  &&  value.hasChildren()  &&  value.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.hasChildren()  &&  value.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.hasChildren()  &&  value.getType()  ==  Token.FUNCTION)  {	  if(value!=    null    &&    value.hasChildren()    ||    value.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	13	None	replace
121	[BUG]  [BUGGY]  if(value!=  null  ||  value.hasChildren()  ||  value.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  ||  value.hasChildren()  ||  value.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.hasChildren()  ||  value.getType()  ==  Token.FUNCTION)  {	  if(value!=    null    &&    value.hasChildren()    ||    value.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	13	None	replace
122	[BUG]  [BUGGY]  if(value  ==  null  &&  value.hasChildren()  ||  value.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  &&  value.hasChildren()  ||  value.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  &&  value.hasChildren()  ||  value.getType()  ==  Token.FUNCTION)  {	  if(value!=    null    &&    value.hasChildren()    ||    value.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	13	None	replace
123	[BUG]  [BUGGY]  if(value  ==  null  ||  value.hasChildren()  ||  value.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  ||  value.hasChildren()  ||  value.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  ||  value.hasChildren()  ||  value.getType()  ==  Token.FUNCTION)  {	  if(value!=    null    &&    value.hasChildren()    ||    value.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	13	None	replace
124	[BUG]  [BUGGY]  if(value  ==  null  &&  value.hasChildren()  &&  value.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  &&  value.hasChildren()  &&  value.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  &&  value.hasChildren()  &&  value.getType()  ==  Token.FUNCTION)  {	  if(value!=    null    &&    value.hasChildren()    ||    value.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	13	None	replace
125	[BUG]  [BUGGY]  if(value  >=  null  ||  value.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  >=  null  ||  value.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  >=  null  ||  value.getType()  ==  Token.FUNCTION)  {	  if(value    ==    null    ||    value.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	54	None	replace
126	[BUG]  [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.FUNCTION_EXPR_RESULT)  {  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.FUNCTION_EXPR_RESULT)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.getType()  ==  Token.FUNCTION_EXPR_RESULT)  {	  if(value    ==    null    ||    value.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	54	None	replace
127	[BUG]  [BUGGY]  Node  n  =  value.getLastChild();  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  n  =  value.getLastChild();  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  n  =  value.getLastChild();	  Node    n    =    value.getFirstChild();    	non-compiled	[CE]  not  a  statement	32	None	replace
128	[BUG]  [BUGGY]  Node  n  =  callTarget.getFirstChild();  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  n  =  callTarget.getFirstChild();  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  n  =  callTarget.getFirstChild();	  Node    n    =    value.getFirstChild();    	non-compiled	[CE]  not  a  statement	32	None	replace
129	[BUG]  [BUGGY]  Node  n  =  value!=  null?  value.getFirstChild()  :  Integer.toString(value.getLastChild());  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  n  =  value!=  null?  value.getFirstChild()  :  Integer.toString(value.getLastChild());  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  n  =  value!=  null?  value.getFirstChild()  :  Integer.toString(value.getLastChild());	  Node    n    =    value.getFirstChild();    	non-compiled	[CE]  not  a  statement	32	None	replace
130	[BUG]  [BUGGY]  Node  n  =  value!=  null?  value.getFirstChild()  :  Integer.toString(value.getLowerCase());  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  n  =  value!=  null?  value.getFirstChild()  :  Integer.toString(value.getLowerCase());  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  n  =  value!=  null?  value.getFirstChild()  :  Integer.toString(value.getLowerCase());	  Node    n    =    value.getFirstChild();    	non-compiled	[CE]  not  a  statement	32	None	replace
131	[BUG]  [BUGGY]  Node  n  =  value  ==  null?  value.getFirstChild()  :  Integer.toString(value.getLastChild());  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  n  =  value  ==  null?  value.getFirstChild()  :  Integer.toString(value.getLastChild());  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  n  =  value  ==  null?  value.getFirstChild()  :  Integer.toString(value.getLastChild());	  Node    n    =    value.getFirstChild();    	non-compiled	[CE]  not  a  statement	32	None	replace
132	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction());  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction());  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction());	  NodeTraversal.traverse(compiler,    value,    new    FoldArrayAction());    	non-compiled	[CE]  not  a  statement	33	None	replace
133	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  value,  new  FoldArrayAction(),  REGEXP_FLAGS_RE);  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  value,  new  FoldArrayAction(),  REGEXP_FLAGS_RE);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	NodeTraversal.traverse(compiler,  value,  new  FoldArrayAction(),  REGEXP_FLAGS_RE);	  NodeTraversal.traverse(compiler,    value,    new    FoldArrayAction());    	non-compiled	[CE]  not  a  statement	33	None	replace
134	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  value,  new  FoldArrayAction(),  callTarget);  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  value,  new  FoldArrayAction(),  callTarget);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	NodeTraversal.traverse(compiler,  value,  new  FoldArrayAction(),  callTarget);	  NodeTraversal.traverse(compiler,    value,    new    FoldArrayAction());    	non-compiled	[CE]  not  a  statement	33	None	replace
135	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  value,  this.new  FoldArrayAction());  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  value,  this.new  FoldArrayAction());  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	NodeTraversal.traverse(compiler,  value,  this.new  FoldArrayAction());	  NodeTraversal.traverse(compiler,    value,    new    FoldArrayAction());    	non-compiled	[CE]  not  a  statement	33	None	replace
136	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  value,  new  FoldArrayAction(),  n);  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  value,  new  FoldArrayAction(),  n);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	NodeTraversal.traverse(compiler,  value,  new  FoldArrayAction(),  n);	  NodeTraversal.traverse(compiler,    value,    new    FoldArrayAction());    	non-compiled	[CE]  not  a  statement	33	None	replace
137	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  value,  new  FoldArrayAction(),  this);  [CE]  not  a  statement  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  value,  new  FoldArrayAction(),  this);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	NodeTraversal.traverse(compiler,  value,  new  FoldArrayAction(),  this);	  NodeTraversal.traverse(compiler,    value,    new    FoldArrayAction());    	non-compiled	[CE]  not  a  statement	33	None	replace
138	[BUG]  [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.FUNCTION)  {	  if(value!=    null    &&    value.getType()    ==    Token.NAME    ||    value.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	51	None	replace
139	[BUG]  [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  &&  value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.FUNCTION)  {	  if(value!=    null    &&    value.getType()    ==    Token.NAME    ||    value.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	51	None	replace
140	[BUG]  [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  ||  value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.FUNCTION)  {	  if(value!=    null    &&    value.getType()    ==    Token.NAME    ||    value.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	51	None	replace
141	[BUG]  [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.NAME  &&  value.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.NAME  &&  value.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  &&  value.getType()  ==  Token.NAME  &&  value.getType()  ==  Token.FUNCTION)  {	  if(value!=    null    &&    value.getType()    ==    Token.NAME    ||    value.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	51	None	replace
142	[BUG]  [BUGGY]  Node  parent  =  value.getNext();  n.getParent().removeChild(parent);  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  parent  =  value.getNext();  n.getParent().removeChild(parent);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  parent  =  value.getNext();  n.getParent().removeChild(parent);	  Node    parent    =    value.getParent();    n.getParent().removeChild(parent);    	non-compiled	[CE]  not  a  statement	38	None	replace
143	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  n.getParent().removeChild(parent);  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  parent  =  n.getParent();  n.getParent().removeChild(parent);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  parent  =  n.getParent();  n.getParent().removeChild(parent);	  Node    parent    =    value.getParent();    n.getParent().removeChild(parent);    	non-compiled	[CE]  not  a  statement	38	None	replace
144	[BUG]  [BUGGY]  Node  parent  =  value.getParent();  n.getNext().removeChild(parent);  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  parent  =  value.getParent();  n.getNext().removeChild(parent);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  parent  =  value.getParent();  n.getNext().removeChild(parent);	  Node    parent    =    value.getParent();    n.getParent().removeChild(parent);    	non-compiled	[CE]  not  a  statement	38	None	replace
145	[BUG]  [BUGGY]  Node  parent  =  value.getParent();  n.getParent().replaceChild(parent,  value);  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  parent  =  value.getParent();  n.getParent().replaceChild(parent,  value);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  parent  =  value.getParent();  n.getParent().replaceChild(parent,  value);	  Node    parent    =    value.getParent();    n.getParent().removeChild(parent);    	non-compiled	[CE]  not  a  statement	38	None	replace
146	[BUG]  [BUGGY]  Node  parent  =  value.getParent();  n.getParent().replaceChild(n,  parent);  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  parent  =  value.getParent();  n.getParent().replaceChild(n,  parent);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  parent  =  value.getParent();  n.getParent().replaceChild(n,  parent);	  Node    parent    =    value.getParent();    n.getParent().removeChild(parent);    	non-compiled	[CE]  not  a  statement	38	None	replace
147	[BUG]  [BUGGY]  Node  parent  =  node.getParent();  n.getParent().removeChild(parent);  [CE]  not  a  statement  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  parent  =  node.getParent();  n.getParent().removeChild(parent);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  parent  =  node.getParent();  n.getParent().removeChild(parent);	  Node    parent    =    value.getParent();    n.getParent().removeChild(parent);    	non-compiled	[CE]  not  a  statement	38	None	replace
148	[BUG]  [BUGGY]  if(value!=  null  ||  value.detachFromParent()!=  null)  {  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  ||  value.detachFromParent()!=  null)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.detachFromParent()!=  null)  {	  if(value    ==    null    ||    value.detachFromParent()!=    null)    {    	non-compiled	[CE]  not  a  statement	55	None	replace
149	[BUG]  [BUGGY]  if(value!=  null  &&  value.detachFromParent()!=  null)  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.detachFromParent()!=  null)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.detachFromParent()!=  null)  {	  if(value    ==    null    ||    value.detachFromParent()!=    null)    {    	non-compiled	[CE]  not  a  statement	55	None	replace
150	[BUG]  [BUGGY]  if(value  ==  null  &&  value.detachFromParent()!=  null)  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  &&  value.detachFromParent()!=  null)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  &&  value.detachFromParent()!=  null)  {	  if(value    ==    null    ||    value.detachFromParent()!=    null)    {    	non-compiled	[CE]  not  a  statement	55	None	replace
151	[BUG]  [BUGGY]  if(value!=  null  ||  value.detachFromParent()  ==  null)  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  ||  value.detachFromParent()  ==  null)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.detachFromParent()  ==  null)  {	  if(value    ==    null    ||    value.detachFromParent()!=    null)    {    	non-compiled	[CE]  not  a  statement	55	None	replace
152	[BUG]  [BUGGY]  if(value!=  null  ||  value.detachFromNext()!=  null)  {  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  ||  value.detachFromNext()!=  null)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.detachFromNext()!=  null)  {	  if(value    ==    null    ||    value.detachFromParent()!=    null)    {    	non-compiled	[CE]  not  a  statement	55	None	replace
153	[BUG]  [BUGGY]  if(value!=  null  ||  value.detachFromRoot()!=  null)  {  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  ||  value.detachFromRoot()!=  null)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.detachFromRoot()!=  null)  {	  if(value    ==    null    ||    value.detachFromParent()!=    null)    {    	non-compiled	[CE]  not  a  statement	55	None	replace
154	[BUG]  [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.NAME  ||  value.hasChildren())  {  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.NAME  ||  value.hasChildren())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.getType()  ==  Token.NAME  ||  value.hasChildren())  {	  if(value!=    null    &&    value.getType()    ==    Token.NAME    ||    value.hasChildren())    {    	non-compiled	[CE]  not  a  statement	53	None	replace
155	[BUG]  [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.NAME  ||  value.hasChildren())  {  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.NAME  ||  value.hasChildren())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  &&  value.getType()  ==  Token.NAME  ||  value.hasChildren())  {	  if(value!=    null    &&    value.getType()    ==    Token.NAME    ||    value.hasChildren())    {    	non-compiled	[CE]  not  a  statement	53	None	replace
156	[BUG]  [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.NAME  ||  value.hasChildren())  {  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.NAME  ||  value.hasChildren())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  ||  value.getType()  ==  Token.NAME  ||  value.hasChildren())  {	  if(value!=    null    &&    value.getType()    ==    Token.NAME    ||    value.hasChildren())    {    	non-compiled	[CE]  not  a  statement	53	None	replace
157	[BUG]  [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.NAME  &&  value.hasChildren())  {  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.NAME  &&  value.hasChildren())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  &&  value.getType()  ==  Token.NAME  &&  value.hasChildren())  {	  if(value!=    null    &&    value.getType()    ==    Token.NAME    ||    value.hasChildren())    {    	non-compiled	[CE]  not  a  statement	53	None	replace
158	[BUG]  [BUGGY]  Node  value  =  callTarget.removeFirstChild();  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  value  =  callTarget.removeFirstChild();  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  value  =  callTarget.removeFirstChild();	  Node    value    =    value.removeFirstChild();    	non-compiled	[CE]  not  a  statement	34	None	replace
159	[BUG]  [BUGGY]  Node  value  =  n.removeFirstChild();  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  value  =  n.removeFirstChild();  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  value  =  n.removeFirstChild();	  Node    value    =    value.removeFirstChild();    	non-compiled	[CE]  not  a  statement	34	None	replace
160	[BUG]  [BUGGY]  Node  value  =  value.removeLastChild();  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  value  =  value.removeLastChild();  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  value  =  value.removeLastChild();	  Node    value    =    value.removeFirstChild();    	non-compiled	[CE]  not  a  statement	34	None	replace
161	[BUG]  [BUGGY]  Node  value  =  value.getLastChild();  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  value  =  value.getLastChild();  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  value  =  value.getLastChild();	  Node    value    =    value.removeFirstChild();    	non-compiled	[CE]  not  a  statement	34	None	replace
162	[BUG]  [BUGGY]  Node  value  =  n.getFirstChild();  [CE]  not  a  statement  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  value  =  n.getFirstChild();  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  value  =  n.getFirstChild();	  Node    value    =    value.removeFirstChild();    	non-compiled	[CE]  not  a  statement	34	None	replace
163	[BUG]  [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.NAME  &&  value.hasChildren())  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.NAME  &&  value.hasChildren())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.getType()  ==  Token.NAME  &&  value.hasChildren())  {	  if(value!=    null    &&    value.getType()    ==    Token.NAME    &&    value.hasChildren())    {    	non-compiled	[CE]  not  a  statement	11	None	replace
164	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  &&  value.isSimpleName())  {  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  &&  value.isSimpleName())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.NAME  &&  value.isSimpleName())  {	  if(value!=    null    &&    value.getType()    ==    Token.NAME    &&    value.hasChildren())    {    	non-compiled	[CE]  not  a  statement	11	None	replace
165	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  &&  value.isExtern())  {  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  &&  value.isExtern())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.NAME  &&  value.isExtern())  {	  if(value!=    null    &&    value.getType()    ==    Token.NAME    &&    value.hasChildren())    {    	non-compiled	[CE]  not  a  statement	11	None	replace
166	[BUG]  [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.VAR  ||  value.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.VAR  ||  value.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.getType()  ==  Token.VAR  ||  value.getType()  ==  Token.FUNCTION)  {	  if(value!=    null    &&    value.getType()    ==    Token.VAR    ||    value.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	40	None	replace
167	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.VAR  &&  value.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.VAR  &&  value.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.VAR  &&  value.getType()  ==  Token.FUNCTION)  {	  if(value!=    null    &&    value.getType()    ==    Token.VAR    ||    value.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	40	None	replace
168	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.FUNCTION  ||  value.getType()  ==  Token.VAR)  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.FUNCTION  ||  value.getType()  ==  Token.VAR)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.FUNCTION  ||  value.getType()  ==  Token.VAR)  {	  if(value!=    null    &&    value.getType()    ==    Token.VAR    ||    value.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	40	None	replace
169	[BUG]  [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.VAR  ||  value.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.VAR  ||  value.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  ||  value.getType()  ==  Token.VAR  ||  value.getType()  ==  Token.FUNCTION)  {	  if(value!=    null    &&    value.getType()    ==    Token.VAR    ||    value.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	40	None	replace
170	[BUG]  [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.VAR  ||  value.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.VAR  ||  value.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  &&  value.getType()  ==  Token.VAR  ||  value.getType()  ==  Token.FUNCTION)  {	  if(value!=    null    &&    value.getType()    ==    Token.VAR    ||    value.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	40	None	replace
171	[BUG]  [BUGGY]  if(value  >=  null  &&  value.hasChildren())  {  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  >=  null  &&  value.hasChildren())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  >=  null  &&  value.hasChildren())  {	  if(value!=    null    ||    value.hasChildren())    {    	non-compiled	[CE]  not  a  statement	8	None	replace
172	[BUG]  [BUGGY]  if(n!=  null  ||  value.hasChildren())  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(n!=  null  ||  value.hasChildren())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(n!=  null  ||  value.hasChildren())  {	  if(value!=    null    ||    value.hasChildren())    {    	non-compiled	[CE]  not  a  statement	8	None	replace
173	[BUG]  [BUGGY]  if(value  ==  null  ||  value.getType()!=  Token.BLOCK)  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  ||  value.getType()!=  Token.BLOCK)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  ||  value.getType()!=  Token.BLOCK)  {	  if(value!=    null    ||    value.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  not  a  statement	18	None	replace
174	[BUG]  [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.VAR)  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.VAR)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.VAR)  {	  if(value!=    null    &&    value.getType()    ==    Token.NAME    ||    value.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  not  a  statement	50	None	replace
175	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  &&  value.getType()  ==  Token.VAR)  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  &&  value.getType()  ==  Token.VAR)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.NAME  &&  value.getType()  ==  Token.VAR)  {	  if(value!=    null    &&    value.getType()    ==    Token.NAME    ||    value.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  not  a  statement	50	None	replace
176	[BUG]  [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.VAR)  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.VAR)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  &&  value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.VAR)  {	  if(value!=    null    &&    value.getType()    ==    Token.NAME    ||    value.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  not  a  statement	50	None	replace
177	[BUG]  [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.VAR)  {  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.VAR)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  ||  value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.VAR)  {	  if(value!=    null    &&    value.getType()    ==    Token.NAME    ||    value.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  not  a  statement	50	None	replace
178	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.VAR  ||  value.getType()  ==  Token.NAME)  {  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.VAR  ||  value.getType()  ==  Token.NAME)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.VAR  ||  value.getType()  ==  Token.NAME)  {	  if(value!=    null    &&    value.getType()    ==    Token.NAME    ||    value.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  not  a  statement	50	None	replace
179	[BUG]  [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.NAME  &&  value.getType()  ==  Token.VAR)  {  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.NAME  &&  value.getType()  ==  Token.VAR)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  &&  value.getType()  ==  Token.NAME  &&  value.getType()  ==  Token.VAR)  {	  if(value!=    null    &&    value.getType()    ==    Token.NAME    ||    value.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  not  a  statement	50	None	replace
180	[BUG]  [BUGGY]  if(value  ==  null  ||  value.getType()!=  Token.NAME)  {  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  ||  value.getType()!=  Token.NAME)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  ||  value.getType()!=  Token.NAME)  {	  if(value!=    null    ||    value.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  not  a  statement	2	None	replace
181	[BUG]  [BUGGY]  if(value  >=  null  ||  value.getType()  ==  Token.NAME)  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  >=  null  ||  value.getType()  ==  Token.NAME)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  >=  null  ||  value.getType()  ==  Token.NAME)  {	  if(value!=    null    ||    value.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  not  a  statement	2	None	replace
182	[BUG]  [BUGGY]  if(value!=  null  ||  value.getType()  >=  Token.NAME)  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  ||  value.getType()  >=  Token.NAME)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.getType()  >=  Token.NAME)  {	  if(value!=    null    ||    value.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  not  a  statement	2	None	replace
183	[BUG]  [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.SCRIPT)  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.SCRIPT)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.SCRIPT)  {	  if(value!=    null    &&    value.getType()    ==    Token.BLOCK    ||    value.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  not  a  statement	58	None	replace
184	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.BLOCK  &&  value.getType()  ==  Token.SCRIPT)  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.BLOCK  &&  value.getType()  ==  Token.SCRIPT)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.BLOCK  &&  value.getType()  ==  Token.SCRIPT)  {	  if(value!=    null    &&    value.getType()    ==    Token.BLOCK    ||    value.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  not  a  statement	58	None	replace
185	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.SCRIPT  ||  value.getType()  ==  Token.BLOCK)  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.SCRIPT  ||  value.getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.SCRIPT  ||  value.getType()  ==  Token.BLOCK)  {	  if(value!=    null    &&    value.getType()    ==    Token.BLOCK    ||    value.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  not  a  statement	58	None	replace
186	[BUG]  [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.SCRIPT)  {  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.SCRIPT)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  &&  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.SCRIPT)  {	  if(value!=    null    &&    value.getType()    ==    Token.BLOCK    ||    value.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  not  a  statement	58	None	replace
187	[BUG]  [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.SCRIPT)  {  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.SCRIPT)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  ||  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.SCRIPT)  {	  if(value!=    null    &&    value.getType()    ==    Token.BLOCK    ||    value.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  not  a  statement	58	None	replace
188	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.STRING  ||  value.getType()  ==  Token.SCRIPT)  {  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.STRING  ||  value.getType()  ==  Token.SCRIPT)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.STRING  ||  value.getType()  ==  Token.SCRIPT)  {	  if(value!=    null    &&    value.getType()    ==    Token.BLOCK    ||    value.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  not  a  statement	58	None	replace
189	[BUG]  [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.CALL  &&  NodeUtil.isFunctionAnonymous(value))  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.CALL  &&  NodeUtil.isFunctionAnonymous(value))  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.getType()  ==  Token.CALL  &&  NodeUtil.isFunctionAnonymous(value))  {	  if(value!=    null    &&    value.getType()    ==    Token.CALL    &&    NodeUtil.isFunctionAnonymous(value))    {    	non-compiled	[CE]  not  a  statement	47	None	replace
190	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.CALL  &&  NodeUtil.isAnonymous(value))  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.CALL  &&  NodeUtil.isAnonymous(value))  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.CALL  &&  NodeUtil.isAnonymous(value))  {	  if(value!=    null    &&    value.getType()    ==    Token.CALL    &&    NodeUtil.isFunctionAnonymous(value))    {    	non-compiled	[CE]  not  a  statement	47	None	replace
191	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.CALL  ||  NodeUtil.isFunctionAnonymous(value))  {  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.CALL  ||  NodeUtil.isFunctionAnonymous(value))  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.CALL  ||  NodeUtil.isFunctionAnonymous(value))  {	  if(value!=    null    &&    value.getType()    ==    Token.CALL    &&    NodeUtil.isFunctionAnonymous(value))    {    	non-compiled	[CE]  not  a  statement	47	None	replace
192	[BUG]  [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.CALL  &&  NodeUtil.isFunctionAnonymous(value))  {  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.CALL  &&  NodeUtil.isFunctionAnonymous(value))  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  &&  value.getType()  ==  Token.CALL  &&  NodeUtil.isFunctionAnonymous(value))  {	  if(value!=    null    &&    value.getType()    ==    Token.CALL    &&    NodeUtil.isFunctionAnonymous(value))    {    	non-compiled	[CE]  not  a  statement	47	None	replace
193	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.CALL  &&  NodeUtil.isSimpleAnonymous(value))  {  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.CALL  &&  NodeUtil.isSimpleAnonymous(value))  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.CALL  &&  NodeUtil.isSimpleAnonymous(value))  {	  if(value!=    null    &&    value.getType()    ==    Token.CALL    &&    NodeUtil.isFunctionAnonymous(value))    {    	non-compiled	[CE]  not  a  statement	47	None	replace
194	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.CALL  &&  NodeUtil.isStatementAnonymous(value))  {  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.CALL  &&  NodeUtil.isStatementAnonymous(value))  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.CALL  &&  NodeUtil.isStatementAnonymous(value))  {	  if(value!=    null    &&    value.getType()    ==    Token.CALL    &&    NodeUtil.isFunctionAnonymous(value))    {    	non-compiled	[CE]  not  a  statement	47	None	replace
195	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "n ").srcref(callTarget),  value.detachFromParent());  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  addition  =  IR.add(IR.string( "n ").srcref(callTarget),  value.detachFromParent());  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  addition  =  IR.add(IR.string( "n ").srcref(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(    IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	26	None	replace
196	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").srcref(callTarget),  value.detachFromParent());  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").srcref(callTarget),  value.detachFromParent());  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  addition  =  IR.add(IR.string( "A-Z ").srcref(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(    IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	26	None	replace
197	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").src(callTarget),  value.detachFromParent());  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").src(callTarget),  value.detachFromParent());  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  addition  =  IR.add(IR.string( "A-Z ").src(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(    IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	26	None	replace
198	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").srcref(value),  callTarget.detachFromParent());  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").srcref(value),  callTarget.detachFromParent());  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  addition  =  IR.add(IR.string( "   ").srcref(value),  callTarget.detachFromParent());	  Node    addition    =    IR.add(    IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	26	None	replace
199	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").srcref(value),  value.detachFromParent());  [CE]  not  a  statement  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").srcref(value),  value.detachFromParent());  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  addition  =  IR.add(IR.string( "   ").srcref(value),  value.detachFromParent());	  Node    addition    =    IR.add(    IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	26	None	replace
200	[BUG]  [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.ASSIGN)  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.ASSIGN)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.getType()  ==  Token.ASSIGN)  {	  if(value!=    null    &&    value.getType()    ==    Token.ASSIGN)    {    	non-compiled	[CE]  not  a  statement	48	None	replace
201	[BUG]  [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.ASSIGN)  {  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.ASSIGN)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  &&  value.getType()  ==  Token.ASSIGN)  {	  if(value!=    null    &&    value.getType()    ==    Token.ASSIGN)    {    	non-compiled	[CE]  not  a  statement	48	None	replace
202	[BUG]  [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.SCRIPT)  {  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.SCRIPT)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.getType()  ==  Token.SCRIPT)  {	  if(value!=    null    &&    value.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  not  a  statement	7	None	replace
203	[BUG]  [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.SCRIPT)  {  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.SCRIPT)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  &&  value.getType()  ==  Token.SCRIPT)  {	  if(value!=    null    &&    value.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  not  a  statement	7	None	replace
204	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.SCRIPT  ||  value.getType()  ==  Token.NAME)  {  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.SCRIPT  ||  value.getType()  ==  Token.NAME)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.SCRIPT  ||  value.getType()  ==  Token.NAME)  {	  if(value!=    null    &&    value.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  not  a  statement	7	None	replace
205	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.SCRIPT  ||  value.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.SCRIPT  ||  value.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.SCRIPT  ||  value.getType()  ==  Token.FUNCTION)  {	  if(value!=    null    &&    value.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  not  a  statement	7	None	replace
206	[BUG]  [BUGGY]  Node  parent  =  value.getNext();  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  parent  =  value.getNext();  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  parent  =  value.getNext();	  Node    parent    =    value.getParent();    	non-compiled	[CE]  not  a  statement	37	None	replace
207	[BUG]  [BUGGY]  Node  parent  =  value!=  null?  value.getParent()  :  null;  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  parent  =  value!=  null?  value.getParent()  :  null;  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  parent  =  value!=  null?  value.getParent()  :  null;	  Node    parent    =    value.getParent();    	non-compiled	[CE]  not  a  statement	37	None	replace
208	[BUG]  [BUGGY]  Node  parent  =  value!=  null?  value.getParent()  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  parent  =  value!=  null?  value.getParent()  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  parent  =  value!=  null?  value.getParent()  :  INVALID_REGULAR_EXPRESSION_FLAGS;	  Node    parent    =    value.getParent();    	non-compiled	[CE]  not  a  statement	37	None	replace
209	[BUG]  [BUGGY]  Node  parent  =  value  ==  null?  value.getParent()  :  null;  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  parent  =  value  ==  null?  value.getParent()  :  null;  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  parent  =  value  ==  null?  value.getParent()  :  null;	  Node    parent    =    value.getParent();    	non-compiled	[CE]  not  a  statement	37	None	replace
210	[BUG]  [BUGGY]  Node  parent  =  value!=  null?  value.getParent()  :  Integer.toString(value.getString());  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  parent  =  value!=  null?  value.getParent()  :  Integer.toString(value.getString());  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  parent  =  value!=  null?  value.getParent()  :  Integer.toString(value.getString());	  Node    parent    =    value.getParent();    	non-compiled	[CE]  not  a  statement	37	None	replace
211	[BUG]  [BUGGY]  Node  parent  =  value!=  null?  value.getParent()  :  Integer.toString(value.getLastChild());  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  parent  =  value!=  null?  value.getParent()  :  Integer.toString(value.getLastChild());  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  parent  =  value!=  null?  value.getParent()  :  Integer.toString(value.getLastChild());	  Node    parent    =    value.getParent();    	non-compiled	[CE]  not  a  statement	37	None	replace
212	[BUG]  [BUGGY]  if(value!=  null  ||  value.hasChildren()  ||  value.hasChildren())  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  ||  value.hasChildren()  ||  value.hasChildren())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.hasChildren()  ||  value.hasChildren())  {	  if(value!=    null    &&    value.hasChildren()    ||    value.hasChildren())    {    	non-compiled	[CE]  not  a  statement	10	None	replace
213	[BUG]  [BUGGY]  if(value!=  null  &&  value.hasChildren()  &&  value.hasChildren())  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.hasChildren()  &&  value.hasChildren())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.hasChildren()  &&  value.hasChildren())  {	  if(value!=    null    &&    value.hasChildren()    ||    value.hasChildren())    {    	non-compiled	[CE]  not  a  statement	10	None	replace
214	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  &&  value.hasChildren()  ||  value.hasChildren())  {  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  &&  value.hasChildren()  ||  value.hasChildren())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.NAME  &&  value.hasChildren()  ||  value.hasChildren())  {	  if(value!=    null    &&    value.hasChildren()    ||    value.hasChildren())    {    	non-compiled	[CE]  not  a  statement	10	None	replace
215	[BUG]  [BUGGY]  if(value  ==  null  &&  value.hasChildren()  ||  value.hasChildren())  {  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  &&  value.hasChildren()  ||  value.hasChildren())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  &&  value.hasChildren()  ||  value.hasChildren())  {	  if(value!=    null    &&    value.hasChildren()    ||    value.hasChildren())    {    	non-compiled	[CE]  not  a  statement	10	None	replace
216	[BUG]  [BUGGY]  if(value  ==  null  ||  value.hasChildren()  ||  value.hasChildren())  {  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  ||  value.hasChildren()  ||  value.hasChildren())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  ||  value.hasChildren()  ||  value.hasChildren())  {	  if(value!=    null    &&    value.hasChildren()    ||    value.hasChildren())    {    	non-compiled	[CE]  not  a  statement	10	None	replace
217	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.getString().equals( "Object "))  {  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.getString().equals( "Object "))  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.getString().equals( "Object "))  {	  if(value!=    null    &&    value.getType()    ==    Token.NAME    ||    value.getString().equals(   "String   "))    {    	non-compiled	[CE]  not  a  statement	49	None	replace
218	[BUG]  [BUGGY]  Preconditions.checkState(value!=  null  &&  value.getType()  ==  Token.VAR);  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Preconditions.checkState(value!=  null  &&  value.getType()  ==  Token.VAR);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Preconditions.checkState(value!=  null  &&  value.getType()  ==  Token.VAR);	  Preconditions.checkState(value!=    null);    	non-compiled	[CE]  not  a  statement	36	None	replace
219	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.GETELEM)  {  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.GETELEM)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.GETELEM)  {	  if(value!=    null    &&    value.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  not  a  statement	6	None	replace
220	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.BLOCK  ||  value.hasChildren())  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.BLOCK  ||  value.hasChildren())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.BLOCK  ||  value.hasChildren())  {	  if(value!=    null    &&    value.getType()    ==    Token.BLOCK    ||    value.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  not  a  statement	59	None	replace
221	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.CALL  &&  NodeUtil.mayHaveSideEffects(value))  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.CALL  &&  NodeUtil.mayHaveSideEffects(value))  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.CALL  &&  NodeUtil.mayHaveSideEffects(value))  {	  if(value!=    null    &&    value.getType()    ==    Token.CALL    &&    NodeUtil.isFunctionAnonymous(value))    {    	non-compiled	[CE]  not  a  statement	47	None	replace
222	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.CALL  &&  NodeUtil.isName(value))  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.CALL  &&  NodeUtil.isName(value))  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.CALL  &&  NodeUtil.isName(value))  {	  if(value!=    null    &&    value.getType()    ==    Token.CALL    &&    NodeUtil.isFunctionAnonymous(value))    {    	non-compiled	[CE]  not  a  statement	47	None	replace
223	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  &&  NodeUtil.isFunctionAnonymous(value))  {  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  &&  NodeUtil.isFunctionAnonymous(value))  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.NAME  &&  NodeUtil.isFunctionAnonymous(value))  {	  if(value!=    null    &&    value.getType()    ==    Token.CALL    &&    NodeUtil.isFunctionAnonymous(value))    {    	non-compiled	[CE]  not  a  statement	47	None	replace
224	[BUG]  [BUGGY]  Node  parent  =  value!=  null?  value.getParent()  :  value;  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  parent  =  value!=  null?  value.getParent()  :  value;  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  parent  =  value!=  null?  value.getParent()  :  value;	  Node    parent    =    value.getParent();    	non-compiled	[CE]  not  a  statement	37	None	replace
225	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  parent  =  n.getParent();  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  parent  =  n.getParent();	  Node    parent    =    value.getParent();    	non-compiled	[CE]  not  a  statement	37	None	replace
226	[BUG]  [BUGGY]  Node  parent  =  value  ==  null?  value.getParent()  :  value;  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  parent  =  value  ==  null?  value.getParent()  :  value;  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  parent  =  value  ==  null?  value.getParent()  :  value;	  Node    parent    =    value.getParent();    	non-compiled	[CE]  not  a  statement	37	None	replace
227	[BUG]  [BUGGY]  Node  parent  =  value.getParent();  n.getParent().removeChild(parent,  value);  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  parent  =  value.getParent();  n.getParent().removeChild(parent,  value);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  parent  =  value.getParent();  n.getParent().removeChild(parent,  value);	  Node    parent    =    value.getParent();    n.getParent().removeChild(parent);    	non-compiled	[CE]  not  a  statement	38	None	replace
228	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  n.getParent().removeChild(value);  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  parent  =  n.getParent();  n.getParent().removeChild(value);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  parent  =  n.getParent();  n.getParent().removeChild(value);	  Node    parent    =    value.getParent();    n.getParent().removeChild(parent);    	non-compiled	[CE]  not  a  statement	38	None	replace
229	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  &&  value.isEmpty())  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  &&  value.isEmpty())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.NAME  &&  value.isEmpty())  {	  if(value!=    null    &&    value.getType()    ==    Token.NAME    &&    value.hasChildren())    {    	non-compiled	[CE]  not  a  statement	11	None	replace
230	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  &&  value.isSyntheticBlock())  {  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  &&  value.isSyntheticBlock())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.NAME  &&  value.isSyntheticBlock())  {	  if(value!=    null    &&    value.getType()    ==    Token.NAME    &&    value.hasChildren())    {    	non-compiled	[CE]  not  a  statement	11	None	replace
231	[BUG]  [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.STRING  ||  value.getString().equals( "String "))  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.STRING  ||  value.getString().equals( "String "))  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  &&  value.getType()  ==  Token.STRING  ||  value.getString().equals( "String "))  {	  if(value!=    null    &&    value.getType()    ==    Token.STRING    ||    value.getString().equals(   "String   "))    {    	non-compiled	[CE]  not  a  statement	43	None	replace
232	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.STRING  &&  value.getString().equals( "String))  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.STRING  &&  value.getString().equals( "String))  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.STRING  &&  value.getString().equals( "String))  {	  if(value!=    null    &&    value.getType()    ==    Token.STRING    ||    value.getString().equals(   "String   "))    {    	non-compiled	[CE]  not  a  statement	43	None	replace
233	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  value,  new  FoldArrayActionCall(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  value,  new  FoldArrayActionCall(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	NodeTraversal.traverse(compiler,  value,  new  FoldArrayActionCall(),  INVALID_REGULAR_EXPRESSION_FLAGS);	  NodeTraversal.traverse(compiler,    value,    new    FoldArrayActionCall());    	non-compiled	[CE]  not  a  statement	35	None	replace
234	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  value,  new  FoldArrayActionCall(),  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  value,  new  FoldArrayActionCall(),  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	NodeTraversal.traverse(compiler,  value,  new  FoldArrayActionCall(),  STANDARD_OBJECT_CONSTRUCTORS);	  NodeTraversal.traverse(compiler,    value,    new    FoldArrayActionCall());    	non-compiled	[CE]  not  a  statement	35	None	replace
235	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  value,  false);  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  value,  false);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	NodeTraversal.traverse(compiler,  n,  value,  false);	  NodeTraversal.traverse(compiler,    n,    value);    	non-compiled	[CE]  not  a  statement	39	None	replace
236	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  value,  NON_GLOBAL_EXPRESSION_FLAGS);  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  value,  NON_GLOBAL_EXPRESSION_FLAGS);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	NodeTraversal.traverse(compiler,  n,  value,  NON_GLOBAL_EXPRESSION_FLAGS);	  NodeTraversal.traverse(compiler,    n,    value);    	non-compiled	[CE]  not  a  statement	39	None	replace
237	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  value,  READ_OBJECT_CONSTRUCTORS);  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  value,  READ_OBJECT_CONSTRUCTORS);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	NodeTraversal.traverse(compiler,  n,  value,  READ_OBJECT_CONSTRUCTORS);	  NodeTraversal.traverse(compiler,    n,    value);    	non-compiled	[CE]  not  a  statement	39	None	replace
238	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  value,  new  FoldArrayAction());  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  value,  new  FoldArrayAction());  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	NodeTraversal.traverse(compiler,  n,  value,  new  FoldArrayAction());	  NodeTraversal.traverse(compiler,    n,    value);    	non-compiled	[CE]  not  a  statement	39	None	replace
239	[BUG]  [BUGGY]  Node  value  =  value!=  null?  value.getNext()  :  null;  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  value  =  value!=  null?  value.getNext()  :  null;  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  value  =  value!=  null?  value.getNext()  :  null;	  Node    value    =    value.getNext();    	non-compiled	[CE]  not  a  statement	24	None	replace
240	[BUG]  [BUGGY]  Node  value  =  value  ==  null?  value.getNext()  :  null;  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  value  =  value  ==  null?  value.getNext()  :  null;  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  value  =  value  ==  null?  value.getNext()  :  null;	  Node    value    =    value.getNext();    	non-compiled	[CE]  not  a  statement	24	None	replace
241	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.STRING  &&  value.equals( "String))  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.STRING  &&  value.equals( "String))  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.STRING  &&  value.equals( "String))  {	  if(value!=    null    &&    value.getType()    ==    Token.STRING    ||    value.equals(   "String   "))    {    	non-compiled	[CE]  not  a  statement	44	None	replace
242	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.STRING  ||  value.isSimpleName())  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.STRING  ||  value.isSimpleName())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.STRING  ||  value.isSimpleName())  {	  if(value!=    null    &&    value.getType()    ==    Token.STRING    ||    value.equals(   "String   "))    {    	non-compiled	[CE]  not  a  statement	44	None	replace
243	[BUG]  [BUGGY]  if(value  [Delete]  null  &&  value.getType()  ==  Token.NAME)  {  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  [Delete]  null  &&  value.getType()  ==  Token.NAME)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  [Delete]  null  &&  value.getType()  ==  Token.NAME)  {	  if(value!=    null    ||    value.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  not  a  statement	2	None	replace
244	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  value,  new  FoldArrayAction(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  value,  new  FoldArrayAction(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	NodeTraversal.traverse(compiler,  value,  new  FoldArrayAction(),  INVALID_REGULAR_EXPRESSION_FLAGS);	  NodeTraversal.traverse(compiler,    value,    new    FoldArrayAction());    	non-compiled	[CE]  not  a  statement	33	None	replace
245	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callTarget,  new  FoldArrayAction());  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  callTarget,  new  FoldArrayAction());  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	NodeTraversal.traverse(compiler,  callTarget,  new  FoldArrayAction());	  NodeTraversal.traverse(compiler,    value,    new    FoldArrayAction());    	non-compiled	[CE]  not  a  statement	33	None	replace
246	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  value,  new  FoldArrayAction(),  INVALID_REGULAR_FLAGS_RE);  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  value,  new  FoldArrayAction(),  INVALID_REGULAR_FLAGS_RE);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	NodeTraversal.traverse(compiler,  value,  new  FoldArrayAction(),  INVALID_REGULAR_FLAGS_RE);	  NodeTraversal.traverse(compiler,    value,    new    FoldArrayAction());    	non-compiled	[CE]  not  a  statement	33	None	replace
247	[BUG]  [BUGGY]  if(value  ==  null  ||  value.detachFromNext()!=  null)  {  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  ||  value.detachFromNext()!=  null)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  ||  value.detachFromNext()!=  null)  {	  if(value    ==    null    ||    value.detachFromParent()!=    null)    {    	non-compiled	[CE]  not  a  statement	55	None	replace
248	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.CALL  ||  value.getType()  ==  Token.SCRIPT)  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.CALL  ||  value.getType()  ==  Token.SCRIPT)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.CALL  ||  value.getType()  ==  Token.SCRIPT)  {	  if(value!=    null    &&    value.getType()    ==    Token.BLOCK    ||    value.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  not  a  statement	58	None	replace
249	[BUG]  [BUGGY]  if  (value  ==  null  ||  value.getType()!=  Token.STRING)  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if  (value  ==  null  ||  value.getType()!=  Token.STRING)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if  (value  ==  null  ||  value.getType()!=  Token.STRING)  {	  if    (value    ==    null    ||    value.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  not  a  statement	31	None	replace
250	[BUG]  [BUGGY]  Node  next  =  value!=  null?  value.getNext()  :  NON_GLOBAL_EXPRESSION_FLAGS;  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  next  =  value!=  null?  value.getNext()  :  NON_GLOBAL_EXPRESSION_FLAGS;  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  next  =  value!=  null?  value.getNext()  :  NON_GLOBAL_EXPRESSION_FLAGS;	  Node    next    =    value.getNext();    	non-compiled	[CE]  not  a  statement	28	None	replace
251	[BUG]  [BUGGY]  Node  next  =  value!=  null?  value.getNext()  :  null;  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  next  =  value!=  null?  value.getNext()  :  null;  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  next  =  value!=  null?  value.getNext()  :  null;	  Node    next    =    value.getNext();    	non-compiled	[CE]  not  a  statement	28	None	replace
252	[BUG]  [BUGGY]  Node  next  =  value!=  null?  value.getNext()  :  Integer.MAX_VALUE;  [CE]  not  a  statement  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  next  =  value!=  null?  value.getNext()  :  Integer.MAX_VALUE;  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  next  =  value!=  null?  value.getNext()  :  Integer.MAX_VALUE;	  Node    next    =    value.getNext();    	non-compiled	[CE]  not  a  statement	28	None	replace
253	[BUG]  [BUGGY]  Node  next  =  value!=  null?  value.getNext()  :  Integer.toString(value.getFirstChild());  [CE]  not  a  statement  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  next  =  value!=  null?  value.getNext()  :  Integer.toString(value.getFirstChild());  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  next  =  value!=  null?  value.getNext()  :  Integer.toString(value.getFirstChild());	  Node    next    =    value.getNext();    	non-compiled	[CE]  not  a  statement	28	None	replace
254	[BUG]  [BUGGY]  Node  n  =  value!=  null?  value.getNext()  :  NON_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  n  =  value!=  null?  value.getNext()  :  NON_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  n  =  value!=  null?  value.getNext()  :  NON_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL	  Node    n    =    value.getNext();    	non-compiled	[CE]  not  a  statement	25	None	replace
255	[BUG]  [BUGGY]  Node  n  =  value!=  null?  value.getNext()  :  NON_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  n  =  value!=  null?  value.getNext()  :  NON_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  n  =  value!=  null?  value.getNext()  :  NON_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL	  Node    n    =    value.getNext();    	non-compiled	[CE]  not  a  statement	25	None	replace
256	[BUG]  [BUGGY]  Node  n  =  value!=  null?  value.getNext()  :  NON_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  n  =  value!=  null?  value.getNext()  :  NON_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  n  =  value!=  null?  value.getNext()  :  NON_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL	  Node    n    =    value.getNext();    	non-compiled	[CE]  not  a  statement	25	None	replace
257	[BUG]  [BUGGY]  Node  n  =  value!=  null?  value.getNext()  :  NON_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  n  =  value!=  null?  value.getNext()  :  NON_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  n  =  value!=  null?  value.getNext()  :  NON_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL	  Node    n    =    value.getNext();    	non-compiled	[CE]  not  a  statement	25	None	replace
258	[BUG]  [BUGGY]  Node  n  =  value!=  null?  value.getNext()  :  NON_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GL  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  n  =  value!=  null?  value.getNext()  :  NON_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GL  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  n  =  value!=  null?  value.getNext()  :  NON_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GL	  Node    n    =    value.getNext();    	non-compiled	[CE]  not  a  statement	25	None	replace
259	[BUG]  [BUGGY]  Node  n  =  value!=  null?  value.getNext()  :  NON_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL  [CE]  not  a  statement  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  n  =  value!=  null?  value.getNext()  :  NON_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  n  =  value!=  null?  value.getNext()  :  NON_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL_GLOBAL	  Node    n    =    value.getNext();    	non-compiled	[CE]  not  a  statement	25	None	replace
260	[BUG]  [BUGGY]  Node  value  =  value.getFirstChild();  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  value  =  value.getFirstChild();  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  value  =  value.getFirstChild();	  Node    value    =    value.removeFirstChild();    	non-compiled	[CE]  not  a  statement	34	None	replace
261	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( ", ").srcref(value),  value.detachFromParent());  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  addition  =  IR.add(IR.string( ", ").srcref(value),  value.detachFromParent());  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  addition  =  IR.add(IR.string( ", ").srcref(value),  value.detachFromParent());	  Node    addition    =    IR.add(    IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	26	None	replace
262	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( ", ").src(value),  value.detachFromParent());  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  addition  =  IR.add(IR.string( ", ").src(value),  value.detachFromParent());  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  addition  =  IR.add(IR.string( ", ").src(value),  value.detachFromParent());	  Node    addition    =    IR.add(    IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	26	None	replace
263	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").src(value),  value.detachFromParent());  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").src(value),  value.detachFromParent());  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  addition  =  IR.add(IR.string( "   ").src(value),  value.detachFromParent());	  Node    addition    =    IR.add(    IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	26	None	replace
264	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( ", ").src(callTarget),  value.detachFromParent());  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  addition  =  IR.add(IR.string( ", ").src(callTarget),  value.detachFromParent());  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  addition  =  IR.add(IR.string( ", ").src(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(    IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	26	None	replace
265	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "n ").srcref(value),  value.detachFromParent());  [CE]  not  a  statement  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  addition  =  IR.add(IR.string( "n ").srcref(value),  value.detachFromParent());  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  addition  =  IR.add(IR.string( "n ").srcref(value),  value.detachFromParent());	  Node    addition    =    IR.add(    IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	26	None	replace
266	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "  <   ").src(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  value);  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  addition  =  IR.add(IR.string( "  <   ").src(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  value);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  addition  =  IR.add(IR.string( "  <   ").src(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  value);	  Node    addition    =    IR.add(    IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    n.getParent().replaceChild(n,    value);    	non-compiled	[CE]  not  a  statement	27	None	replace
267	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( ", ").src(value),  callTarget.detachFromParent());  n.getParent().replaceChild(n,  value);  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  addition  =  IR.add(IR.string( ", ").src(value),  callTarget.detachFromParent());  n.getParent().replaceChild(n,  value);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  addition  =  IR.add(IR.string( ", ").src(value),  callTarget.detachFromParent());  n.getParent().replaceChild(n,  value);	  Node    addition    =    IR.add(    IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    n.getParent().replaceChild(n,    value);    	non-compiled	[CE]  not  a  statement	27	None	replace
268	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").src(value),  callTarget.detachFromParent());  n.getParent().replaceChild(n,  value);  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").src(value),  callTarget.detachFromParent());  n.getParent().replaceChild(n,  value);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  addition  =  IR.add(IR.string( "   ").src(value),  callTarget.detachFromParent());  n.getParent().replaceChild(n,  value);	  Node    addition    =    IR.add(    IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    n.getParent().replaceChild(n,    value);    	non-compiled	[CE]  not  a  statement	27	None	replace
269	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( ", ").src(value),  callTarget,  value.detachFromParent());  n.getParent().replaceChild(n,  value);  [CE]  not  a  statement  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  addition  =  IR.add(IR.string( ", ").src(value),  callTarget,  value.detachFromParent());  n.getParent().replaceChild(n,  value);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  addition  =  IR.add(IR.string( ", ").src(value),  callTarget,  value.detachFromParent());  n.getParent().replaceChild(n,  value);	  Node    addition    =    IR.add(    IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    n.getParent().replaceChild(n,    value);    	non-compiled	[CE]  not  a  statement	27	None	replace
270	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "n ").src(callTarget),  value.detachFromParent());  [CE]  not  a  statement  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  addition  =  IR.add(IR.string( "n ").src(callTarget),  value.detachFromParent());  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  addition  =  IR.add(IR.string( "n ").src(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(    IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    n.getParent().replaceChild(n,    value);    	non-compiled	[CE]  not  a  statement	27	None	replace
271	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.isSimple())  {  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.isSimple())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.isSimple())  {	  if(value!=    null    &&    value.getType()    ==    Token.NAME    ||    value.hasChildren())    {    	non-compiled	[CE]  not  a  statement	53	None	replace
272	[BUG]  [BUGGY]  Node  n  =  value!=  null?  value.getLastChild()  :  value.getLastChild();  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  n  =  value!=  null?  value.getLastChild()  :  value.getLastChild();  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  n  =  value!=  null?  value.getLastChild()  :  value.getLastChild();	  Node    n    =    value.getFirstChild();    	non-compiled	[CE]  not  a  statement	32	None	replace
273	[BUG]  [BUGGY]  Node  n  =  value  ==  null?  value.getLastChild()  :  value.getLastChild();  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  n  =  value  ==  null?  value.getLastChild()  :  value.getLastChild();  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  n  =  value  ==  null?  value.getLastChild()  :  value.getLastChild();	  Node    n    =    value.getFirstChild();    	non-compiled	[CE]  not  a  statement	32	None	replace
274	[BUG]  [BUGGY]  Node  n  =  value!=  null?  value.getFirstChild()  :  value.getLastChild();  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  n  =  value!=  null?  value.getFirstChild()  :  value.getLastChild();  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  n  =  value!=  null?  value.getFirstChild()  :  value.getLastChild();	  Node    n    =    value.getFirstChild();    	non-compiled	[CE]  not  a  statement	32	None	replace
275	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.VAR  &&  value.getType()  ==  Token.NAME)  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.VAR  &&  value.getType()  ==  Token.NAME)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.VAR  &&  value.getType()  ==  Token.NAME)  {	  if(value!=    null    &&    value.getType()    ==    Token.FUNCTION    &&    value.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
276	[BUG]  [BUGGY]  if(value!=  null  &&  value.hasChildren()  ||  value.getType()  ==  Token.NAME)  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.hasChildren()  ||  value.getType()  ==  Token.NAME)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.hasChildren()  ||  value.getType()  ==  Token.NAME)  {	  if(value!=    null    &&    value.hasChildren()    ||    value.hasChildren())    {    	non-compiled	[CE]  not  a  statement	10	None	replace
277	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.STRING  ||  value.getName().equals( "String "))  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.STRING  ||  value.getName().equals( "String "))  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.STRING  ||  value.getName().equals( "String "))  {	  if(value!=    null    &&    value.getType()    ==    Token.STRING    ||    value.getString().equals(   "String   "))    {    	non-compiled	[CE]  not  a  statement	43	None	replace
278	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.STRING  ||  value.getLineno().equals( "String "))  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.STRING  ||  value.getLineno().equals( "String "))  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.STRING  ||  value.getLineno().equals( "String "))  {	  if(value!=    null    &&    value.getType()    ==    Token.STRING    ||    value.getString().equals(   "String   "))    {    	non-compiled	[CE]  not  a  statement	43	None	replace
279	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  value);  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  value);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  addition  =  IR.add(IR.string( "av ").src(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  value);	  Node    addition    =    IR.add(    IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    n.getParent().replaceChild(n,    value);    	non-compiled	[CE]  not  a  statement	27	None	replace
280	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  value);  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  value);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  addition  =  IR.add(IR.string( "av ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  value);	  Node    addition    =    IR.add(    IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    n.getParent().replaceChild(n,    value);    	non-compiled	[CE]  not  a  statement	27	None	replace
281	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Assignment  of   ").src(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  value);  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  addition  =  IR.add(IR.string( "Assignment  of   ").src(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  value);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  addition  =  IR.add(IR.string( "Assignment  of   ").src(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  value);	  Node    addition    =    IR.add(    IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    n.getParent().replaceChild(n,    value);    	non-compiled	[CE]  not  a  statement	27	None	replace
282	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Assignment  of   ").src(value),  callTarget.detachFromParent());  n.getParent().replaceChild(n,  value);  [CE]  not  a  statement  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  addition  =  IR.add(IR.string( "Assignment  of   ").src(value),  callTarget.detachFromParent());  n.getParent().replaceChild(n,  value);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  addition  =  IR.add(IR.string( "Assignment  of   ").src(value),  callTarget.detachFromParent());  n.getParent().replaceChild(n,  value);	  Node    addition    =    IR.add(    IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    n.getParent().replaceChild(n,    value);    	non-compiled	[CE]  not  a  statement	27	None	replace
283	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( ", ").srcref(value));  n.getParent().replaceChild(n,  value);  [CE]  not  a  statement  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  addition  =  IR.add(IR.string( ", ").srcref(value));  n.getParent().replaceChild(n,  value);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  addition  =  IR.add(IR.string( ", ").srcref(value));  n.getParent().replaceChild(n,  value);	  Node    addition    =    IR.add(    IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    n.getParent().replaceChild(n,    value);    	non-compiled	[CE]  not  a  statement	27	None	replace
284	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( ", ").src(value),  value.detachFromParent());  n.getParent().replaceChild(n,  value);  [CE]  not  a  statement  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  addition  =  IR.add(IR.string( ", ").src(value),  value.detachFromParent());  n.getParent().replaceChild(n,  value);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  addition  =  IR.add(IR.string( ", ").src(value),  value.detachFromParent());  n.getParent().replaceChild(n,  value);	  Node    addition    =    IR.add(    IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    n.getParent().replaceChild(n,    value);    	non-compiled	[CE]  not  a  statement	27	None	replace
285	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  &&  value.isSimple())  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  &&  value.isSimple())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.NAME  &&  value.isSimple())  {	  if(value!=    null    &&    value.getType()    ==    Token.NAME    &&    value.hasChildren())    {    	non-compiled	[CE]  not  a  statement	11	None	replace
286	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  &&  value.equals( "String "))  {  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  &&  value.equals( "String "))  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.NAME  &&  value.equals( "String "))  {	  if(value!=    null    &&    value.getType()    ==    Token.NAME    &&    value.hasChildren())    {    	non-compiled	[CE]  not  a  statement	11	None	replace
287	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.FOR)  {  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.FOR)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.FOR)  {	  if    (value    ==    null    &&    value.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	14	None	replace
288	[BUG]  [BUGGY]  if(n!=  null  &&  value.hasChildren())  {  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(n!=  null  &&  value.hasChildren())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(n!=  null  &&  value.hasChildren())  {	  if(value!=    null    ||    value.hasChildren())    {    	non-compiled	[CE]  not  a  statement	8	None	replace
289	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.getFirstChild().getString().equals( "String "))  {  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.getFirstChild().getString().equals( "String "))  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.getFirstChild().getString().equals( "String "))  {	  if(value!=    null    &&    value.getType()    ==    Token.NAME    ||    value.getString().equals(   "String   "))    {    	non-compiled	[CE]  not  a  statement	49	None	replace
290	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.hasChildren()  &&  value.getString().equals( "String "))  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.hasChildren()  &&  value.getString().equals( "String "))  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.hasChildren()  &&  value.getString().equals( "String "))  {	  if(value!=    null    &&    value.getType()    ==    Token.NAME    ||    value.getString().equals(   "String   "))    {    	non-compiled	[CE]  not  a  statement	49	None	replace
291	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.isSimpleName()  &&  value.getString().equals( "String "))  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.isSimpleName()  &&  value.getString().equals( "String "))  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.isSimpleName()  &&  value.getString().equals( "String "))  {	  if(value!=    null    &&    value.getType()    ==    Token.NAME    ||    value.getString().equals(   "String   "))    {    	non-compiled	[CE]  not  a  statement	49	None	replace
292	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.getName().equals( "String "))  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.getName().equals( "String "))  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.getName().equals( "String "))  {	  if(value!=    null    &&    value.getType()    ==    Token.NAME    ||    value.getString().equals(   "String   "))    {    	non-compiled	[CE]  not  a  statement	49	None	replace
293	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.getLineno().equals( "String "))  {  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.getLineno().equals( "String "))  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.getLineno().equals( "String "))  {	  if(value!=    null    &&    value.getType()    ==    Token.NAME    ||    value.getString().equals(   "String   "))    {    	non-compiled	[CE]  not  a  statement	49	None	replace
294	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.STRING  ||  value.isSimple())  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.STRING  ||  value.isSimple())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.STRING  ||  value.isSimple())  {	  if(value!=    null    &&    value.getType()    ==    Token.STRING    ||    value.hasChildren())    {    	non-compiled	[CE]  not  a  statement	45	None	replace
295	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.STRING  ||  value.isSyntheticBlock())  {  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.STRING  ||  value.isSyntheticBlock())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.STRING  ||  value.isSyntheticBlock())  {	  if(value!=    null    &&    value.getType()    ==    Token.STRING    ||    value.hasChildren())    {    	non-compiled	[CE]  ';'  expected	45	None	replace
296	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.CALL  ||  value.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.CALL  ||  value.getType()  ==  Token.NAME)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.CALL  ||  value.getType()  ==  Token.NAME)  {	  if(value!=    null    &&    value.getType()    ==    Token.BLOCK    ||    value.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	21	None	replace
297	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.VAR  &&  value.isSyntheticBlock())  {  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.VAR  &&  value.isSyntheticBlock())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.VAR  &&  value.isSyntheticBlock())  {	  if(value!=    null    &&    value.getType()    ==    Token.VAR    &&    value.hasChildren())    {    	non-compiled	[CE]  ';'  expected	12	None	replace
298	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.SCRIPT  ||  value.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.SCRIPT  ||  value.getType()  ==  Token.VAR)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.SCRIPT  ||  value.getType()  ==  Token.VAR)  {	  if(value!=    null    &&    value.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  ';'  expected	7	None	replace
299	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.SCRIPT  ||  value.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.SCRIPT  ||  value.getType()  ==  Token.STRING)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.SCRIPT  ||  value.getType()  ==  Token.STRING)  {	  if(value!=    null    &&    value.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  ';'  expected	7	None	replace
300	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.SCRIPT  ||  value.getType()  ==  Token.EXPR_RESULT)  {  [CE]  ';'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.SCRIPT  ||  value.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.SCRIPT  ||  value.getType()  ==  Token.EXPR_RESULT)  {	  if(value!=    null    &&    value.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  ';'  expected	7	None	replace
301	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.STRING)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.STRING)  {	  if(value!=    null    &&    value.getType()    ==    Token.NAME    ||    value.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ';'  expected	52	None	replace
302	[BUG]  [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.BLOCK  &&  value.hasChildren())  {  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.BLOCK  &&  value.hasChildren())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.getType()  ==  Token.BLOCK  &&  value.hasChildren())  {	  if(value!=    null    ||    value.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ';'  expected	18	None	replace
303	[BUG]  [BUGGY]  if(value  >=  null  &&  value.getType()  ==  Token.BLOCK)  {  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  >=  null  &&  value.getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  >=  null  &&  value.getType()  ==  Token.BLOCK)  {	  if(value!=    null    ||    value.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ';'  expected	18	None	replace
304	[BUG]  [BUGGY]  if(key!=  null  &&  value.getType()  ==  Token.BLOCK)  {  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(key!=  null  &&  value.getType()  ==  Token.BLOCK)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(key!=  null  &&  value.getType()  ==  Token.BLOCK)  {	  if(value!=    null    ||    value.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ';'  expected	18	None	replace
305	[BUG]  [BUGGY]  if(value  >=  null  ||  value.hasChildren())  {  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  >=  null  ||  value.hasChildren())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  >=  null  ||  value.hasChildren())  {	  if(value    ==    null    ||    value.hasChildren())    {    	non-compiled	[CE]  ';'  expected	56	None	replace
306	[BUG]  [BUGGY]  if(n  ==  null  ||  value.hasChildren())  {  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(n  ==  null  ||  value.hasChildren())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(n  ==  null  ||  value.hasChildren())  {	  if(value    ==    null    ||    value.hasChildren())    {    	non-compiled	[CE]  ';'  expected	56	None	replace
307	[BUG]  [BUGGY]  if(value  >=  null  &&  value.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  >=  null  &&  value.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  >=  null  &&  value.getType()  ==  Token.FUNCTION)  {	  if(value!=    null    ||    value.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	1	None	replace
308	[BUG]  [BUGGY]  if(key!=  null  &&  value.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(key!=  null  &&  value.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(key!=  null  &&  value.getType()  ==  Token.FUNCTION)  {	  if(value!=    null    ||    value.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	1	None	replace
309	[BUG]  [BUGGY]  if(value!=  null  ||  value.getType()!=  Token.VAR)  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  ||  value.getType()!=  Token.VAR)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.getType()!=  Token.VAR)  {	  if(value    ==    null    ||    value.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	57	None	replace
310	[BUG]  [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.VAR  &&  NodeUtil.isFunctionAnonymous(value))  {  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.VAR  &&  NodeUtil.isFunctionAnonymous(value))  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.getType()  ==  Token.VAR  &&  NodeUtil.isFunctionAnonymous(value))  {	  if(value!=    null    ||    value.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  not  a  statement	15	None	replace
311	[BUG]  [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.VAR  &&  value.getString().equals( "String "))  {  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.VAR  &&  value.getString().equals( "String "))  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.getType()  ==  Token.VAR  &&  value.getString().equals( "String "))  {	  if(value!=    null    ||    value.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  not  a  statement	15	None	replace
312	[BUG]  [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.VAR  &&  NodeUtil.isFunctionDeclaration(value))  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.VAR  &&  NodeUtil.isFunctionDeclaration(value))  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.getType()  ==  Token.VAR  &&  NodeUtil.isFunctionDeclaration(value))  {	  if(value!=    null    ||    value.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  not  a  statement	15	None	replace
313	[BUG]  [BUGGY]  Node  parent  =  value!=  null?  value.getParent()  :  null;  n.getParent().removeChild(parent);  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  parent  =  value!=  null?  value.getParent()  :  null;  n.getParent().removeChild(parent);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  parent  =  value!=  null?  value.getParent()  :  null;  n.getParent().removeChild(parent);	  Node    parent    =    value.getParent();    n.getParent().removeChild(parent);    	non-compiled	[CE]  not  a  statement	38	None	replace
314	[BUG]  [BUGGY]  Node  n  =  value.removeFirstChild();  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  n  =  value.removeFirstChild();  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  n  =  value.removeFirstChild();	  Node    n    =    value.getFirstChild();    	non-compiled	[CE]  not  a  statement	32	None	replace
315	[BUG]  [BUGGY]  Node  n  =  value  ==  null?  value.getFirstChild()  :  value.getLastChild();  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  n  =  value  ==  null?  value.getFirstChild()  :  value.getLastChild();  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  n  =  value  ==  null?  value.getFirstChild()  :  value.getLastChild();	  Node    n    =    value.getFirstChild();    	non-compiled	[CE]  not  a  statement	32	None	replace
316	[BUG]  [BUGGY]  if(value!=  null  &&  value.detachFromParent()  ==  null)  {  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.detachFromParent()  ==  null)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.detachFromParent()  ==  null)  {	  if(value    ==    null    ||    value.detachFromParent()!=    null)    {    	non-compiled	[CE]  not  a  statement	55	None	replace
317	[BUG]  [BUGGY]  if(value  ==  null  ||  value.detachFromParent()  ==  null)  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  ||  value.detachFromParent()  ==  null)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  ||  value.detachFromParent()  ==  null)  {	  if(value    ==    null    ||    value.detachFromParent()!=    null)    {    	non-compiled	[CE]  not  a  statement	55	None	replace
318	[BUG]  [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.VAR  &&  value.hasChildren())  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.VAR  &&  value.hasChildren())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  ||  value.getType()  ==  Token.VAR  &&  value.hasChildren())  {	  if(value    ==    null    ||    value.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  not  a  statement	17	None	replace
319	[BUG]  [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.VAR  &&  NodeUtil.isFunctionAnonymous(value))  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.VAR  &&  NodeUtil.isFunctionAnonymous(value))  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  ||  value.getType()  ==  Token.VAR  &&  NodeUtil.isFunctionAnonymous(value))  {	  if(value    ==    null    ||    value.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  not  a  statement	17	None	replace
320	[BUG]  [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.VAR  &&  value.getString().equals( "Object "))  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.VAR  &&  value.getString().equals( "Object "))  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  ||  value.getType()  ==  Token.VAR  &&  value.getString().equals( "Object "))  {	  if(value    ==    null    ||    value.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  not  a  statement	17	None	replace
321	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.CALL  ||  value.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.CALL  ||  value.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.CALL  ||  value.getType()  ==  Token.FUNCTION)  {	  if(value!=    null    &&    value.getType()    ==    Token.BLOCK    ||    value.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	20	None	replace
322	[BUG]  [BUGGY]  if(value!=  null  &&  value.isSupported()  ||  value.hasChildren())  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.isSupported()  ||  value.hasChildren())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.isSupported()  ||  value.hasChildren())  {	  if(value!=    null    &&    value.hasChildren()    ||    value.hasChildren())    {    	non-compiled	[CE]  not  a  statement	10	None	replace
323	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.GETPROP  &&  value.hasChildren())  {  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.GETPROP  &&  value.hasChildren())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.GETPROP  &&  value.hasChildren())  {	  if(value!=    null    &&    value.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  not  a  statement	6	None	replace
324	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.STRING  ||  value.isEmpty())  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.STRING  ||  value.isEmpty())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.STRING  ||  value.isEmpty())  {	  if(value!=    null    &&    value.getType()    ==    Token.STRING    ||    value.equals(   "String   "))    {    	non-compiled	[CE]  not  a  statement	44	None	replace
325	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.STRING  ||  value.isQuotedString())  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.STRING  ||  value.isQuotedString())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.STRING  ||  value.isQuotedString())  {	  if(value!=    null    &&    value.getType()    ==    Token.STRING    ||    value.equals(   "String   "))    {    	non-compiled	[CE]  not  a  statement	44	None	replace
326	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.STRING  &&  value.isSimpleName())  {  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.STRING  &&  value.isSimpleName())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.STRING  &&  value.isSimpleName())  {	  if(value!=    null    &&    value.getType()    ==    Token.STRING    ||    value.equals(   "String   "))    {    	non-compiled	[CE]  not  a  statement	44	None	replace
327	[BUG]  [BUGGY]  Node  n  =  value!=  null?  value.getNext()  :  null;  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  n  =  value!=  null?  value.getNext()  :  null;  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  n  =  value!=  null?  value.getNext()  :  null;	  Node    n    =    value.getNext();    	non-compiled	[CE]  not  a  statement	25	None	replace
328	[BUG]  [BUGGY]  Node  n  =  value!=  null?  value.getNext()  :  Integer.toString(Integer.MAX_VALUE);  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  n  =  value!=  null?  value.getNext()  :  Integer.toString(Integer.MAX_VALUE);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  n  =  value!=  null?  value.getNext()  :  Integer.toString(Integer.MAX_VALUE);	  Node    n    =    value.getNext();    	non-compiled	[CE]  not  a  statement	25	None	replace
329	[BUG]  [BUGGY]  Node  n  =  value!=  null?  value.getNext()  :  DEFAULT_SPLIT_OVERHEAD;  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  n  =  value!=  null?  value.getNext()  :  DEFAULT_SPLIT_OVERHEAD;  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  n  =  value!=  null?  value.getNext()  :  DEFAULT_SPLIT_OVERHEAD;	  Node    n    =    value.getNext();    	non-compiled	[CE]  not  a  statement	25	None	replace
330	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.CALL  &&  value.getType()  ==  Token.NAME)  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.CALL  &&  value.getType()  ==  Token.NAME)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.CALL  &&  value.getType()  ==  Token.NAME)  {	  if(value!=    null    &&    value.getType()    ==    Token.FUNCTION    &&    value.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
331	[BUG]  [BUGGY]  Node  parent  =  value!=  null?  value.getParent()  :  DEFAULT_POLICY;  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  parent  =  value!=  null?  value.getParent()  :  DEFAULT_POLICY;  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  parent  =  value!=  null?  value.getParent()  :  DEFAULT_POLICY;	  Node    parent    =    value.getParent();    	non-compiled	[CE]  not  a  statement	37	None	replace
332	[BUG]  [BUGGY]  Node  parent  =  value  ==  null?  value.getParent()  :  value.getParent();  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  parent  =  value  ==  null?  value.getParent()  :  value.getParent();  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  parent  =  value  ==  null?  value.getParent()  :  value.getParent();	  Node    parent    =    value.getParent();    	non-compiled	[CE]  not  a  statement	37	None	replace
333	[BUG]  [BUGGY]  Node  parent  =  value!=  null?  value.getParent()  :  DEFAULT_PARAM;  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  parent  =  value!=  null?  value.getParent()  :  DEFAULT_PARAM;  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  parent  =  value!=  null?  value.getParent()  :  DEFAULT_PARAM;	  Node    parent    =    value.getParent();    	non-compiled	[CE]  not  a  statement	37	None	replace
334	[BUG]  [BUGGY]  Node  value  =  value!=  null?  value.getNext()  :  Integer.toString(Integer.toString(Integer.MAX_VALUE));  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  value  =  value!=  null?  value.getNext()  :  Integer.toString(Integer.toString(Integer.MAX_VALUE));  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  value  =  value!=  null?  value.getNext()  :  Integer.toString(Integer.toString(Integer.MAX_VALUE));	  Node    value    =    value.getNext();    	non-compiled	[CE]  not  a  statement	24	None	replace
335	[BUG]  [BUGGY]  Node  value  =  value!=  null?  value.getNext()  :  Integer.toString(Integer.toString(Integer.valueOf(0)));  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  value  =  value!=  null?  value.getNext()  :  Integer.toString(Integer.toString(Integer.valueOf(0)));  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  value  =  value!=  null?  value.getNext()  :  Integer.toString(Integer.toString(Integer.valueOf(0)));	  Node    value    =    value.getNext();    	non-compiled	[CE]  not  a  statement	24	None	replace
336	[BUG]  [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.CALL  &&  NodeUtil.isFunctionObjectCall(value))  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.CALL  &&  NodeUtil.isFunctionObjectCall(value))  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.getType()  ==  Token.CALL  &&  NodeUtil.isFunctionObjectCall(value))  {	  if(value!=    null    ||    value.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  not  a  statement	4	None	replace
337	[BUG]  [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.CALL  &&  value.getString().equals( "String "))  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.CALL  &&  value.getString().equals( "String "))  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.getType()  ==  Token.CALL  &&  value.getString().equals( "String "))  {	  if(value!=    null    ||    value.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  not  a  statement	4	None	replace
338	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  value,  new  FoldArrayActionCall(),  this);  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  value,  new  FoldArrayActionCall(),  this);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	NodeTraversal.traverse(compiler,  value,  new  FoldArrayActionCall(),  this);	  NodeTraversal.traverse(compiler,    value,    new    FoldArrayActionCall());    	non-compiled	[CE]  not  a  statement	35	None	replace
339	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  value,  new  FoldArrayActionCall(),  INVALID_REGULAR_FLAGS);  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  value,  new  FoldArrayActionCall(),  INVALID_REGULAR_FLAGS);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	NodeTraversal.traverse(compiler,  value,  new  FoldArrayActionCall(),  INVALID_REGULAR_FLAGS);	  NodeTraversal.traverse(compiler,    value,    new    FoldArrayActionCall());    	non-compiled	[CE]  not  a  statement	35	None	replace
340	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  value,  Integer.MAX_VALUE);  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  value,  Integer.MAX_VALUE);  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	NodeTraversal.traverse(compiler,  n,  value,  Integer.MAX_VALUE);	  NodeTraversal.traverse(compiler,    n,    value);    	non-compiled	[CE]  not  a  statement	39	None	replace
341	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.VAR  ||  value.isSyntheticBlock())  {  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.VAR  ||  value.isSyntheticBlock())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.VAR  ||  value.isSyntheticBlock())  {	  if(value!=    null    &&    value.getType()    ==    Token.VAR    ||    value.hasChildren())    {    	non-compiled	[CE]  not  a  statement	41	None	replace
342	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.VAR  ||  value.equals( "String "))  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.VAR  ||  value.equals( "String "))  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.VAR  ||  value.equals( "String "))  {	  if(value!=    null    &&    value.getType()    ==    Token.VAR    ||    value.hasChildren())    {    	non-compiled	[CE]  not  a  statement	41	None	replace
343	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.VAR  ||  value.isSimple())  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.VAR  ||  value.isSimple())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.VAR  ||  value.isSimple())  {	  if(value!=    null    &&    value.getType()    ==    Token.VAR    ||    value.hasChildren())    {    	non-compiled	[CE]  not  a  statement	41	None	replace
344	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.isSyntheticBlock())  {  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.isSyntheticBlock())  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.isSyntheticBlock())  {	  if(value!=    null    &&    value.getType()    ==    Token.NAME    ||    value.hasChildren())    {    	non-compiled	[CE]  not  a  statement	53	None	replace
345	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.equals( "String "))  {  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.equals( "String "))  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.equals( "String "))  {	  if(value!=    null    &&    value.getType()    ==    Token.NAME    ||    value.hasChildren())    {    	non-compiled	[CE]  not  a  statement	53	None	replace
346	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.CALL  &&  NodeUtil.isAssignmentOp(value))  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.CALL  &&  NodeUtil.isAssignmentOp(value))  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.CALL  &&  NodeUtil.isAssignmentOp(value))  {	  if(value!=    null    &&    value.getType()    ==    Token.CALL    &&    NodeUtil.isFunctionAnonymous(value))    {    	non-compiled	[CE]  not  a  statement	47	None	replace
347	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.CALL  &&  NodeUtil.isStatementBlock(value))  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.CALL  &&  NodeUtil.isStatementBlock(value))  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.CALL  &&  NodeUtil.isStatementBlock(value))  {	  if(value!=    null    &&    value.getType()    ==    Token.CALL    &&    NodeUtil.isFunctionAnonymous(value))    {    	non-compiled	[CE]  not  a  statement	47	None	replace
348	[BUG]  [BUGGY]  Node  next  =  value!=  null?  value.getNext()  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  next  =  value!=  null?  value.getNext()  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  next  =  value!=  null?  value.getNext()  :  INVALID_REGULAR_EXPRESSION_FLAGS;	  Node    next    =    value.getNext();    	non-compiled	[CE]  not  a  statement	28	None	replace
349	[BUG]  [BUGGY]  Node  next  =  value.removeFirstChild();  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  next  =  value.removeFirstChild();  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  next  =  value.removeFirstChild();	  Node    next    =    value.getNext();    	non-compiled	[CE]  not  a  statement	28	None	replace
350	[BUG]  [BUGGY]  Node  next  =  value  ==  null?  value.getNext()  :  null;  [CE]  not  a  statement  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  next  =  value  ==  null?  value.getNext()  :  null;  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  next  =  value  ==  null?  value.getNext()  :  null;	  Node    next    =    value.getNext();    	non-compiled	[CE]  not  a  statement	28	None	replace
351	[BUG]  [BUGGY]  Node  next  =  value!=  null?  value.getNext()  :  Integer.toString(value.getString());  [CE]  not  a  statement  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  next  =  value!=  null?  value.getNext()  :  Integer.toString(value.getString());  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  next  =  value!=  null?  value.getNext()  :  Integer.toString(value.getString());	  Node    next    =    value.getNext();    	non-compiled	[CE]  not  a  statement	28	None	replace
352	[BUG]  [BUGGY]  if(value  >=  null  &&  value.getType()  ==  Token.NAME)  {  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(value  >=  null  &&  value.getType()  ==  Token.NAME)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  >=  null  &&  value.getType()  ==  Token.NAME)  {	  if(value!=    null    ||    value.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  not  a  statement	2	None	replace
353	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  value!=  null  &&  value.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  value!=  null  &&  value.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(n.getType()  ==  Token.NAME  ||  value!=  null  &&  value.getType()  ==  Token.FUNCTION)  {	  if(value!=    null    ||    value.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  not  a  statement	2	None	replace
354	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  value!=  null  &&  value.getType()  ==  Token.VAR)  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  value!=  null  &&  value.getType()  ==  Token.VAR)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(n.getType()  ==  Token.NAME  ||  value!=  null  &&  value.getType()  ==  Token.VAR)  {	  if(value!=    null    ||    value.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  not  a  statement	2	None	replace
355	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  value!=  null  &&  value.getType()  ==  Token.ASSIGN)  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  value!=  null  &&  value.getType()  ==  Token.ASSIGN)  {  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(n.getType()  ==  Token.NAME  ||  value!=  null  &&  value.getType()  ==  Token.ASSIGN)  {	  if(value!=    null    ||    value.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  not  a  statement	2	None	replace
356	[BUG]  [BUGGY]  Node  value  =  value!=  null?  value.removeFirstChild()  :  n;  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  value  =  value!=  null?  value.removeFirstChild()  :  n;  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  value  =  value!=  null?  value.removeFirstChild()  :  n;	  Node    value    =    value.removeFirstChild();    	non-compiled	[CE]  not  a  statement	34	None	replace
357	[BUG]  [BUGGY]  Node  value  =  value!=  null?  value.removeFirstChild()  :  Integer.toString(value.getLastChild());  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  value  =  value!=  null?  value.removeFirstChild()  :  Integer.toString(value.getLastChild());  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  value  =  value!=  null?  value.removeFirstChild()  :  Integer.toString(value.getLastChild());	  Node    value    =    value.removeFirstChild();    	non-compiled	[CE]  not  a  statement	34	None	replace
358	[BUG]  [BUGGY]  Node  value  =  value!=  null?  value.removeFirstChild()  :  Integer.toString(Integer.toString(Integer.valueOf(value));  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();      [BUGGY]  Node  value  =  value!=  null?  value.removeFirstChild()  :  Integer.toString(Integer.toString(Integer.valueOf(value));  [BUGGY]      Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  value  =  value!=  null?  value.removeFirstChild()  :  Integer.toString(Integer.toString(Integer.valueOf(value));	  Node    value    =    value.removeFirstChild();    	non-compiled	[CE]  not  a  statement	34	None	replace
