bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.FUNCTION)  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.getType()  ==  Token.FUNCTION)  {	  if(value    ==    null)    {    	non-compiled	[CE]  not  a  statement	5	None	replace
2	[BUG]  [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.NAME)  {  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.NAME)  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.getType()  ==  Token.NAME)  {	  if(value    ==    null)    {    	non-compiled	[CE]  not  a  statement	5	None	replace
3	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.FUNCTION  &&  value.getType()  ==  Token.NAME)  {  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.FUNCTION  &&  value.getType()  ==  Token.NAME)  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.FUNCTION  &&  value.getType()  ==  Token.NAME)  {	  if(value    ==    null)    {    	non-compiled	[CE]  not  a  statement	5	None	replace
4	[BUG]  [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.CALL)  {  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.CALL)  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.getType()  ==  Token.CALL)  {	  if(value!=    null    &&    value.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  not  a  statement	9	None	replace
5	[BUG]  [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.CALL)  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.CALL)  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  &&  value.getType()  ==  Token.CALL)  {	  if(value!=    null    &&    value.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  not  a  statement	9	None	replace
6	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.GETPROP)  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.GETPROP)  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.GETPROP)  {	  if(value!=    null    &&    value.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  not  a  statement	9	None	replace
7	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.SCRIPT)  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.SCRIPT)  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.SCRIPT)  {	  if(value!=    null    &&    value.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  not  a  statement	9	None	replace
8	[BUG]  [BUGGY]  if(value!=  null  ||  value.hasChildren())  {  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if(value!=  null  ||  value.hasChildren())  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.hasChildren())  {	  if(value!=    null    &&    value.hasChildren())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
9	[BUG]  [BUGGY]  if(value  ==  null  &&  value.hasChildren())  {  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if(value  ==  null  &&  value.hasChildren())  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  &&  value.hasChildren())  {	  if(value!=    null    &&    value.hasChildren())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
10	[BUG]  [BUGGY]  if(value!=  null  &&  value.hasChildren()  ||  value.hasChildren())  {  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if(value!=  null  &&  value.hasChildren()  ||  value.hasChildren())  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.hasChildren()  ||  value.hasChildren())  {	  if(value!=    null    &&    value.hasChildren())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
11	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  &&  value.hasChildren())  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  &&  value.hasChildren())  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.NAME  &&  value.hasChildren())  {	  if(value!=    null    &&    value.hasChildren())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
12	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.VAR  &&  value.hasChildren())  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.VAR  &&  value.hasChildren())  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.VAR  &&  value.hasChildren())  {	  if(value!=    null    &&    value.hasChildren())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
13	[BUG]  [BUGGY]  if(value!=  null  &&  value.hasChildren()  ||  value.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if(value!=  null  &&  value.hasChildren()  ||  value.getType()  ==  Token.FUNCTION)  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.hasChildren()  ||  value.getType()  ==  Token.FUNCTION)  {	  if(value!=    null    &&    value.hasChildren())    {    	non-compiled	[CE]  ';'  expected	7	None	replace
14	[BUG]  [BUGGY]  if  (value  ==  null  &&  value.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if  (value  ==  null  &&  value.getType()  ==  Token.FUNCTION)  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if  (value  ==  null  &&  value.getType()  ==  Token.FUNCTION)  {	  if    (value!=    null    &&    value.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	1	None	replace
15	[BUG]  [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.VAR)  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.getType()  ==  Token.VAR)  {	  if(value!=    null    &&    value.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
16	[BUG]  [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.VAR)  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  &&  value.getType()  ==  Token.VAR)  {	  if(value!=    null    &&    value.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
17	[BUG]  [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.VAR)  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  ||  value.getType()  ==  Token.VAR)  {	  if(value!=    null    &&    value.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
18	[BUG]  [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.BLOCK)  {  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if(value!=  null  ||  value.getType()  ==  Token.BLOCK)  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  ||  value.getType()  ==  Token.BLOCK)  {	  if(value!=    null    &&    value.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
19	[BUG]  [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.BLOCK)  {  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if(value  ==  null  &&  value.getType()  ==  Token.BLOCK)  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  &&  value.getType()  ==  Token.BLOCK)  {	  if(value!=    null    &&    value.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
20	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.FUNCTION)  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.FUNCTION)  {	  if(value!=    null    &&    value.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
21	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.NAME)  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.NAME)  {	  if(value!=    null    &&    value.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
22	[BUG]  [BUGGY]  if  (value  ==  null  &&  value.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if  (value  ==  null  &&  value.getType()  ==  Token.NAME)  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if  (value  ==  null  &&  value.getType()  ==  Token.NAME)  {	  if    (value!=    null    &&    value.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
23	[BUG]  [BUGGY]  if  (value  ==  null  ||  value.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if  (value  ==  null  ||  value.getType()  ==  Token.NAME)  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if  (value  ==  null  ||  value.getType()  ==  Token.NAME)  {	  if    (value!=    null    &&    value.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
24	[BUG]  [BUGGY]  Node  value  =  value.getNext();  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  Node  value  =  value.getNext();  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  value  =  value.getNext();	      	non-compiled	[CE]  ';'  expected	4	None	replace
25	[BUG]  [BUGGY]  Node  n  =  value.getNext();  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  Node  n  =  value.getNext();  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  n  =  value.getNext();	      	non-compiled	[CE]  not  a  statement	4	None	replace
26	[BUG]  [BUGGY]  Node  addition  =  IR.add(  IR.string( "   ").srcref(callTarget),  value.detachFromParent());  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  Node  addition  =  IR.add(  IR.string( "   ").srcref(callTarget),  value.detachFromParent());  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  addition  =  IR.add(  IR.string( "   ").srcref(callTarget),  value.detachFromParent());	      	non-compiled	[CE]  not  a  statement	4	None	replace
27	[BUG]  [BUGGY]  Node  addition  =  IR.add(  IR.string( "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  value);  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  Node  addition  =  IR.add(  IR.string( "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  value);  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  addition  =  IR.add(  IR.string( "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  value);	      	non-compiled	[CE]  not  a  statement	4	None	replace
28	[BUG]  [BUGGY]  Node  next  =  value.getNext();  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  Node  next  =  value.getNext();  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  next  =  value.getNext();	      	non-compiled	[CE]  not  a  statement	4	None	replace
29	[BUG]  [BUGGY]  if  (value!=  null  ||  value.getType()  ==  Token.STRING)  {  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if  (value!=  null  ||  value.getType()  ==  Token.STRING)  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if  (value!=  null  ||  value.getType()  ==  Token.STRING)  {	  if    (value!=    null    &&    value.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
30	[BUG]  [BUGGY]  if  (value  ==  null  &&  value.getType()  ==  Token.STRING)  {  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if  (value  ==  null  &&  value.getType()  ==  Token.STRING)  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if  (value  ==  null  &&  value.getType()  ==  Token.STRING)  {	  if    (value!=    null    &&    value.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
31	[BUG]  [BUGGY]  if  (value  ==  null  ||  value.getType()  ==  Token.STRING)  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if  (value  ==  null  ||  value.getType()  ==  Token.STRING)  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if  (value  ==  null  ||  value.getType()  ==  Token.STRING)  {	  if    (value!=    null    &&    value.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
32	[BUG]  [BUGGY]  Node  n  =  value.getFirstChild();  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  Node  n  =  value.getFirstChild();  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  n  =  value.getFirstChild();	      	non-compiled	[CE]  not  a  statement	4	None	replace
33	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  value,  new  FoldArrayAction());  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  NodeTraversal.traverse(compiler,  value,  new  FoldArrayAction());  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	NodeTraversal.traverse(compiler,  value,  new  FoldArrayAction());	      	non-compiled	[CE]  not  a  statement	4	None	replace
34	[BUG]  [BUGGY]  Node  value  =  value.removeFirstChild();  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  Node  value  =  value.removeFirstChild();  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  value  =  value.removeFirstChild();	      	non-compiled	[CE]  not  a  statement	4	None	replace
35	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  value,  new  FoldArrayActionCall());  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  NodeTraversal.traverse(compiler,  value,  new  FoldArrayActionCall());  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	NodeTraversal.traverse(compiler,  value,  new  FoldArrayActionCall());	      	non-compiled	[CE]  not  a  statement	4	None	replace
36	[BUG]  [BUGGY]  Preconditions.checkState(value!=  null);  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  Preconditions.checkState(value!=  null);  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Preconditions.checkState(value!=  null);	      	non-compiled	[CE]  not  a  statement	4	None	replace
37	[BUG]  [BUGGY]  Node  parent  =  value.getParent();  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  Node  parent  =  value.getParent();  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  parent  =  value.getParent();	      	non-compiled	[CE]  not  a  statement	4	None	replace
38	[BUG]  [BUGGY]  Node  parent  =  value.getParent();  n.getParent().removeChild(parent);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  Node  parent  =  value.getParent();  n.getParent().removeChild(parent);  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	Node  parent  =  value.getParent();  n.getParent().removeChild(parent);	      	non-compiled	[CE]  not  a  statement	4	None	replace
39	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  value);  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  NodeTraversal.traverse(compiler,  n,  value);  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	NodeTraversal.traverse(compiler,  n,  value);	      	non-compiled	[CE]  not  a  statement	4	None	replace
40	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.VAR  ||  value.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.VAR  ||  value.getType()  ==  Token.FUNCTION)  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.VAR  ||  value.getType()  ==  Token.FUNCTION)  {	  if(value!=    null    &&    value.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  not  a  statement	6	None	replace
41	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.VAR  ||  value.hasChildren())  {  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.VAR  ||  value.hasChildren())  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.VAR  ||  value.hasChildren())  {	  if(value!=    null    &&    value.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  not  a  statement	6	None	replace
42	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.VAR  ||  value.getType()  ==  Token.CALL)  {  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.VAR  ||  value.getType()  ==  Token.CALL)  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.VAR  ||  value.getType()  ==  Token.CALL)  {	  if(value!=    null    &&    value.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  not  a  statement	6	None	replace
43	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.STRING  ||  value.getString().equals( "String "))  {  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.STRING  ||  value.getString().equals( "String "))  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.STRING  ||  value.getString().equals( "String "))  {	  if    (value!=    null    &&    value.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
44	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.STRING  ||  value.equals( "String "))  {  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.STRING  ||  value.equals( "String "))  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.STRING  ||  value.equals( "String "))  {	  if    (value!=    null    &&    value.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
45	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.STRING  ||  value.hasChildren())  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.STRING  ||  value.hasChildren())  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.STRING  ||  value.hasChildren())  {	  if    (value!=    null    &&    value.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
46	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.STRING  ||  value.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.STRING  ||  value.getType()  ==  Token.FUNCTION)  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.STRING  ||  value.getType()  ==  Token.FUNCTION)  {	  if    (value!=    null    &&    value.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
47	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.CALL  &&  NodeUtil.isFunctionAnonymous(value))  {  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.CALL  &&  NodeUtil.isFunctionAnonymous(value))  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.CALL  &&  NodeUtil.isFunctionAnonymous(value))  {	  if(value!=    null    &&    value.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  not  a  statement	9	None	replace
48	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.ASSIGN)  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.ASSIGN)  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.ASSIGN)  {	  if(value!=    null    &&    value.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  not  a  statement	9	None	replace
49	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.getString().equals( "String "))  {  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.getString().equals( "String "))  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.getString().equals( "String "))  {	  if    (value!=    null    &&    value.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  not  a  statement	2	None	replace
50	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.VAR)  {  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.VAR)  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.VAR)  {	  if    (value!=    null    &&    value.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  not  a  statement	2	None	replace
51	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.FUNCTION)  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.FUNCTION)  {	  if    (value!=    null    &&    value.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  not  a  statement	2	None	replace
52	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.CALL)  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.CALL)  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.CALL)  {	  if    (value!=    null    &&    value.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  not  a  statement	2	None	replace
53	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.hasChildren())  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.hasChildren())  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.NAME  ||  value.hasChildren())  {	  if    (value!=    null    &&    value.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  not  a  statement	2	None	replace
54	[BUG]  [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.FUNCTION)  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  ||  value.getType()  ==  Token.FUNCTION)  {	  if(value    ==    null)    {    	non-compiled	[CE]  not  a  statement	5	None	replace
55	[BUG]  [BUGGY]  if(value  ==  null  ||  value.detachFromParent()!=  null)  {  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if(value  ==  null  ||  value.detachFromParent()!=  null)  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  ||  value.detachFromParent()!=  null)  {	  if(value    ==    null)    {    	non-compiled	[CE]  not  a  statement	5	None	replace
56	[BUG]  [BUGGY]  if(value  ==  null  ||  value.hasChildren())  {  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if(value  ==  null  ||  value.hasChildren())  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  ||  value.hasChildren())  {	  if(value    ==    null)    {    	non-compiled	[CE]  not  a  statement	5	None	replace
57	[BUG]  [BUGGY]  if(value  ==  null  ||  value.getType()!=  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if(value  ==  null  ||  value.getType()!=  Token.FUNCTION)  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value  ==  null  ||  value.getType()!=  Token.FUNCTION)  {	  if(value    ==    null)    {    	non-compiled	[CE]  not  a  statement	5	None	replace
58	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.SCRIPT)  {  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.SCRIPT)  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.SCRIPT)  {	  if(value!=    null    &&    value.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  not  a  statement	8	None	replace
59	[BUG]  [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.VAR)  {  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();    [BUGGY]  if(value!=  null  &&  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.VAR)  {  [BUGGY]    Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	220	220	1	replace	if(value!=  null  &&  value.getType()  ==  Token.BLOCK  ||  value.getType()  ==  Token.VAR)  {	  if(value!=    null    &&    value.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  not  a  statement	8	None	replace
