bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  value  =  callTarget.getLastChild();  Node  value  =  callTarget.getLastChild();  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getLastChild();  Node  value  =  callTarget.getLastChild();  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getLastChild();    Node  value  =  callTarget.getLastChild();	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	1	None	add
2	[BUG]  [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(callTarget.getLastChild()!=  null);  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]      AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(callTarget.getLastChild()!=  null);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getLastChild()!=  null);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	1	None	add
3	[BUG]  [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION);  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]        AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	1	None	add
4	[BUG]  [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(callTarget.getLastChild()  ==  null);  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]          AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(callTarget.getLastChild()  ==  null);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getLastChild()  ==  null);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	1	None	add
5	[BUG]  [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(callTarget.getType()  ==  Token.NAME);  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]            AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(callTarget.getType()  ==  Token.NAME);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	1	None	add
6	[BUG]  [BUGGY]  Node  value  =  callTarget.getLastChild();  Node  value  =  callTarget.getFirstChild();  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]              AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getLastChild();  Node  value  =  callTarget.getFirstChild();  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getLastChild();    Node  value  =  callTarget.getFirstChild();	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	1	None	add
7	[BUG]  [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(callTarget.getFirstChild()!=  null);  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]                AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(callTarget.getFirstChild()!=  null);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getFirstChild()!=  null);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	1	None	add
8	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Node  value  =  callTarget.getFirstChild();  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getFirstChild();  Node  value  =  callTarget.getFirstChild();  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getFirstChild();    Node  value  =  callTarget.getFirstChild();	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	10	None	add
9	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Node  value  =  callTarget.getLastChild();  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]      AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getFirstChild();  Node  value  =  callTarget.getLastChild();  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getFirstChild();    Node  value  =  callTarget.getLastChild();	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	10	None	add
10	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION)  {  Node  value  =  callTarget.getFirstChild();  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION)  {  Node  value  =  callTarget.getFirstChild();  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION)  {  Node  value  =  callTarget.getFirstChild();	  	non-compiled	[CE]  ';'  expected	10	None	add
11	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);  Node  value  =  callTarget.getFirstChild();  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]          AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);  Node  value  =  callTarget.getFirstChild();  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);  Node  value  =  callTarget.getFirstChild();	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	10	None	add
12	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.NAME);  Node  value  =  callTarget.getFirstChild();  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]            AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.NAME);  Node  value  =  callTarget.getFirstChild();  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()  ==  Token.NAME);  Node  value  =  callTarget.getFirstChild();	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	10	None	add
13	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);  Node  value  =  callTarget.getFirstChild();  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]              AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);  Node  value  =  callTarget.getFirstChild();  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);  Node  value  =  callTarget.getFirstChild();	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	10	None	add
14	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]                AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	10	None	add
15	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getFirstChild();  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]                  AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getFirstChild();  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getFirstChild();	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	10	None	add
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  n.getFirstChild();  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	add	Node  value  =  n.getFirstChild();	      	compilable	  [FE]  AssertionFailedError  	9	1	replace
17	[BUG]  [BUGGY]  Node  value  =  n.getFirstChild();  [FE]  AssertionFailedError  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  n.getFirstChild();  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getFirstChild();	      	compilable	  [FE]  AssertionFailedError  	9	1	replace
18	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  a=String( "hello "  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  n.getLastChild();  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	add	Node  value  =  n.getLastChild();	      	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  a=String( "hello "  	9	1	replace
19	[BUG]  [BUGGY]  Node  value  =  n.getLastChild();  [FE]  junit.framework.AssertionFailedError:  Expected:  var  a=String( "hello "  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  n.getLastChild();  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getLastChild();	      	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  a=String( "hello "  	9	1	replace
20	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  value  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);	      	non-compiled	[CE]  cannot  find  symbol  value	9	None	replace
21	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  value  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	      	non-compiled	[CE]  cannot  find  symbol  value	9	None	replace
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getParent();  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	add	Node  value  =  callTarget.getParent();	  Node    value    =    n.getNext();    	compilable	  [FE]  AssertionFailedError  	8	1	replace
23	[BUG]  [BUGGY]  Node  value  =  callTarget.getParent();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getParent();  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getParent();	  Node    value    =    n.getNext();    	compilable	  [FE]  AssertionFailedError  	8	1	replace
24	[BUG]  [BUGGY]  Node  value  =  callTarget.getPrevious();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getPrevious();  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getPrevious();	  Node    value    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
25	[BUG]  [BUGGY]  Node  value  =  n.getValue();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  n.getValue();  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getValue();	  Node    value    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.removeFirstChild();  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	add	Node  value  =  callTarget.removeFirstChild();	  Node    value    =    callTarget.getLastChild();    	compilable	  [FE]  AssertionFailedError  	2	1	replace
27	[BUG]  [BUGGY]  Node  value  =  callTarget.removeFirstChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.removeFirstChild();  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.removeFirstChild();	  Node    value    =    callTarget.getLastChild();    	compilable	  [FE]  AssertionFailedError  	2	1	replace
28	[BUG]  [BUGGY]  Node  value  =  n.getString();  [CE]  incompatible  types  [FE]          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  n.getString();  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getString();	  Node    value    =    callTarget.getString();    	non-compiled	[CE]  incompatible  types	3	None	replace
29	[BUG]  [BUGGY]  Node  value  =  callTarget.getString(),  n);  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getString(),  n);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getString(),  n);	  Node    value    =    callTarget.getString();    	non-compiled	[CE]  ';'  expected	3	None	replace
30	[BUG]  [BUGGY]  Node  value  =  callTarget.getString(),  n;  [CE]  incompatible  types  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getString(),  n;  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getString(),  n;	  Node    value    =    callTarget.getString();    	non-compiled	[CE]  incompatible  types	3	None	replace
31	[BUG]  [BUGGY]  Node  value  =  callTarget.getValue(),  n);  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getValue(),  n);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getValue(),  n);	  Node    value    =    callTarget.getValue();    	non-compiled	[CE]  ';'  expected	6	None	replace
32	[BUG]  [BUGGY]  Node  value  =  this.callTarget.getValue();  [CE]  cannot  find  symbol  callTarget  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  this.callTarget.getValue();  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  this.callTarget.getValue();	  Node    value    =    callTarget.getValue();    	non-compiled	[CE]  cannot  find  symbol  callTarget	6	None	replace
33	[BUG]  [BUGGY]  Node  value  =  callTarget.getValue(),  n;  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getValue(),  n;  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getValue(),  n;	  Node    value    =    callTarget.getValue();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
34	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Node  value  =  callTarget.getAncestor(2);  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]    IllegalStateException    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Node  value  =  callTarget.getAncestor(2);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getAncestor(2);    Node  value  =  callTarget.getAncestor(2);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	12	None	add
35	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(2)!=  null);  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]      IllegalStateException    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(2)!=  null);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)!=  null);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	12	None	add
36	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(2)  ==  null);  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]        IllegalStateException    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(2)  ==  null);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)  ==  null);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	12	None	add
37	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Node  value  =  callTarget.getAncestor(3);  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]          IllegalStateException    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Node  value  =  callTarget.getAncestor(3);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getAncestor(2);    Node  value  =  callTarget.getAncestor(3);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	12	None	add
38	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Node  value  =  callTarget.getAncestor(4);  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]            IllegalStateException    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Node  value  =  callTarget.getAncestor(4);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getAncestor(2);    Node  value  =  callTarget.getAncestor(4);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	12	None	add
39	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Node  value  =  callTarget.getAncestor(1);  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]              IllegalStateException    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Node  value  =  callTarget.getAncestor(1);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getAncestor(2);    Node  value  =  callTarget.getAncestor(1);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	12	None	add
40	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(2)  >=  null);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                IllegalStateException    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(2)  >=  null);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)  >=  null);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	12	None	add
41	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getAncestor(1);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	add	Node  value  =  callTarget.getAncestor(1);	  Node    value    =    callTarget.getAncestor(2);    	compilable	  [FE]  AssertionFailedError  	13	1	replace
42	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(1);  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getAncestor(1);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAncestor(1);	  Node    value    =    callTarget.getAncestor(2);    	compilable	  [FE]  AssertionFailedError  	13	1	replace
43	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getAncestor(3);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	add	Node  value  =  callTarget.getAncestor(3);	  Node    value    =    callTarget.getAncestor(2);    	compilable	  [FE]  IllegalStateException  	13	1	replace
44	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(3);  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getAncestor(3);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAncestor(3);	  Node    value    =    callTarget.getAncestor(2);    	compilable	  [FE]  IllegalStateException  	13	1	replace
45	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(2)  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        IllegalStateException    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getAncestor(2)  +  1;  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAncestor(2)  +  1;	  Node    value    =    callTarget.getAncestor(2);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	13	None	replace
46	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          IllegalStateException    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getAncestor(0);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	add	Node  value  =  callTarget.getAncestor(0);	  Node    value    =    callTarget.getAncestor(2);    	compilable	  [FE]  AssertionFailedError  	13	1	replace
47	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(0);  [FE]  AssertionFailedError  [FE]          IllegalStateException    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getAncestor(0);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAncestor(0);	  Node    value    =    callTarget.getAncestor(2);    	compilable	  [FE]  AssertionFailedError  	13	1	replace
48	[BUG]  [BUGGY]  Node  value  =  callTarget.getLocalPart();  [CE]  cannot  find  symbol  [FE]            IllegalStateException    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getLocalPart();  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getLocalPart();	  Node    value    =    callTarget.getAncestor(2);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
49	[BUG]  [BUGGY]  Node  value  =  n.getNext();  Node  value  =  n.getNext();  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  n.getNext();  Node  value  =  n.getNext();  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    n.getNext();    Node  value  =  n.getNext();	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	7	None	add
50	[BUG]  [BUGGY]  Node  value  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  value  =  n.getNext();  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]      AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  value  =  n.getNext();  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    n.getNext();    Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  value  =  n.getNext();	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	7	None	add
51	[BUG]  [BUGGY]  Node  value  =  n.getNext();  Preconditions.checkState(n.getParent()!=  null);  Node  value  =  n.getNext();  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]        AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  n.getNext();  Preconditions.checkState(n.getParent()!=  null);  Node  value  =  n.getNext();  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    n.getNext();    Preconditions.checkState(n.getParent()!=  null);  Node  value  =  n.getNext();	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	7	None	add
52	[BUG]  [BUGGY]  Node  value  =  n.getNext();  Preconditions.checkState(n.isCall());  Node  value  =  n.getNext();  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]          AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  n.getNext();  Preconditions.checkState(n.isCall());  Node  value  =  n.getNext();  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    n.getNext();    Preconditions.checkState(n.isCall());  Node  value  =  n.getNext();	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	7	None	add
53	[BUG]  [BUGGY]  Node  value  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  value  =  n.getNext();  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]            AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  value  =  n.getNext();  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    n.getNext();    Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  value  =  n.getNext();	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	7	None	add
54	[BUG]  [BUGGY]  Node  value  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]              AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    n.getNext();    Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	7	None	add
55	[BUG]  [BUGGY]  Node  value  =  n.getNext();  Preconditions.checkState(n.getParent()  ==  null);  Node  value  =  n.getNext();  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]                AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  n.getNext();  Preconditions.checkState(n.getParent()  ==  null);  Node  value  =  n.getNext();  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    n.getNext();    Preconditions.checkState(n.getParent()  ==  null);  Node  value  =  n.getNext();	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	7	None	add
56	[BUG]  [BUGGY]  Node  value  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]                  AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    n.getNext();    Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	7	None	add
57	[BUG]  [BUGGY]  Node  value  =  n.getAssignedValue();  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  n.getAssignedValue();  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getAssignedValue();	  Node    value    =    callTarget.getAssignedValue();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
58	[BUG]  [BUGGY]  Node  value  =  callTarget.getAssignedValue(),  n);  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getAssignedValue(),  n);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAssignedValue(),  n);	  Node    value    =    callTarget.getAssignedValue();    	non-compiled	[CE]  ';'  expected	5	None	replace
59	[BUG]  [BUGGY]  Node  value  =  this.callTarget.getAssignedValue();  [CE]  cannot  find  symbol  callTarget  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  this.callTarget.getAssignedValue();  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  this.callTarget.getAssignedValue();	  Node    value    =    callTarget.getAssignedValue();    	non-compiled	[CE]  cannot  find  symbol  callTarget	5	None	replace
60	[BUG]  [BUGGY]  Node  value  =  callTarget.getAssignedValue(),  n;  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getAssignedValue(),  n;  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAssignedValue(),  n;	  Node    value    =    callTarget.getAssignedValue();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
61	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	add	Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();	  Node    value    =    callTarget.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	11	1	replace
62	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();	  Node    value    =    callTarget.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	11	1	replace
63	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getType()  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getType()  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget!=  null?  callTarget.getType()  :  INVALID_REGULAR_EXPRESSION_FLAGS;	  Node    value    =    callTarget.getFirstChild();    	non-compiled	[CE]  incompatible  types	11	None	replace
64	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n.getLastChild();  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	add	Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n.getLastChild();	  Node    value    =    callTarget.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	11	1	replace
65	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n.getLastChild();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n.getLastChild();  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n.getLastChild();	  Node    value    =    callTarget.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	11	1	replace
66	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getType()  :  STANDARD_OBJECT_CONSTRUCTORS;  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getType()  :  STANDARD_OBJECT_CONSTRUCTORS;  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget!=  null?  callTarget.getType()  :  STANDARD_OBJECT_CONSTRUCTORS;	  Node    value    =    callTarget.getFirstChild();    	non-compiled	[CE]  incompatible  types	11	None	replace
67	[BUG]  [BUGGY]  Node  value  =  n.getType();  [CE]  incompatible  types  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  n.getType();  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getType();	  Node    value    =    callTarget.getType();    	non-compiled	[CE]  incompatible  types	4	None	replace
68	[BUG]  [BUGGY]  Node  value  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  value  =  n.getNext();  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  value  =  n.getNext();  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    n.getNext();    Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  value  =  n.getNext();	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	7	None	add
69	[BUG]  [BUGGY]  Node  value  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  value  =  n.getNext();  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]      AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  value  =  n.getNext();  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    n.getNext();    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  value  =  n.getNext();	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	7	None	add
70	[BUG]  [BUGGY]  Node  value  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]        AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    n.getNext();    Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	7	None	add
71	[BUG]  [BUGGY]  Node  value  =  callTarget,  n.getAssignedValue();  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget,  n.getAssignedValue();  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget,  n.getAssignedValue();	  Node    value    =    callTarget.getAssignedValue();    	non-compiled	[CE]  ';'  expected	5	None	replace
72	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION);  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	10	None	add
73	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]      AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	10	None	add
74	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.NAME);  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]        AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.NAME);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	10	None	add
75	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]          AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	10	None	add
76	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.VAR);  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]            AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.VAR);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()  ==  Token.VAR);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	10	None	add
77	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.CALL);  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]              AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.CALL);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()  ==  Token.CALL);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	10	None	add
78	[BUG]  [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	1	None	add
79	[BUG]  [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(callTarget.getFirstChild()  ==  null);  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]      AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(callTarget.getFirstChild()  ==  null);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getFirstChild()  ==  null);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	1	None	add
80	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	add	Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild();	  Node    value    =    callTarget.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	11	1	replace
81	[BUG]  [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild();	  Node    value    =    callTarget.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	11	1	replace
82	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n;  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	add	Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n;	  Node    value    =    callTarget.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	11	1	replace
83	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n;  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n;	  Node    value    =    callTarget.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	11	1	replace
84	[BUG]  [BUGGY]  Node  value  =  callTarget.next();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.next();  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.next();	  Node    value    =    callTarget.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
85	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getValue()  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getValue()  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget!=  null?  callTarget.getValue()  :  INVALID_REGULAR_EXPRESSION_FLAGS;	  Node    value    =    callTarget.getValue();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
86	[BUG]  [BUGGY]  Node  value  =  callTarget  instanceof  String?(String)callTarget  :  callTarget.getValue();  [CE]  inconvertible  types  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget  instanceof  String?(String)callTarget  :  callTarget.getValue();  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget  instanceof  String?(String)callTarget  :  callTarget.getValue();	  Node    value    =    callTarget.getValue();    	non-compiled	[CE]  inconvertible  types	6	None	replace
87	[BUG]  [BUGGY]  Node  value  =  callTarget  instanceof  String?((  String)callTarget).getValue()  :  null;  [CE]  inconvertible  types  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget  instanceof  String?((  String)callTarget).getValue()  :  null;  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget  instanceof  String?((  String)callTarget).getValue()  :  null;	  Node    value    =    callTarget.getValue();    	non-compiled	[CE]  inconvertible  types	6	None	replace
88	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getValue()  :  null;  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getValue()  :  null;  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget!=  null?  callTarget.getValue()  :  null;	  Node    value    =    callTarget.getValue();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
89	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(2)  -  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]    IllegalStateException    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getAncestor(2)  -  1;  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAncestor(2)  -  1;	  Node    value    =    callTarget.getAncestor(2);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	13	None	replace
90	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(2)!=  null);  Node  value  =  callTarget.getAncestor(2);  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]    IllegalStateException    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(2)!=  null);  Node  value  =  callTarget.getAncestor(2);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)!=  null);  Node  value  =  callTarget.getAncestor(2);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	12	None	add
91	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(2)  ==  null);  Node  value  =  callTarget.getAncestor(2);  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]      IllegalStateException    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(2)  ==  null);  Node  value  =  callTarget.getAncestor(2);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)  ==  null);  Node  value  =  callTarget.getAncestor(2);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	12	None	add
92	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(2)!=  null  &&  NodeUtil.isName(callTarget.getString()));  [CE]  cannot  find  symbol  [FE]        IllegalStateException    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(2)!=  null  &&  NodeUtil.isName(callTarget.getString()));  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)!=  null  &&  NodeUtil.isName(callTarget.getString()));	  	non-compiled	[CE]  cannot  find  symbol	12	None	add
93	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(2)!=  null);  n  =  callTarget.getAncestor(2);  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]          IllegalStateException    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(2)!=  null);  n  =  callTarget.getAncestor(2);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)!=  null);  n  =  callTarget.getAncestor(2);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	12	None	add
94	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(2)!=  null  &&  callTarget.getType()  ==  Token.FUNCTION);  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]            IllegalStateException    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(2)!=  null  &&  callTarget.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)!=  null  &&  callTarget.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	12	None	add
95	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.BLOCK);  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.BLOCK);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()  ==  Token.BLOCK);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	10	None	add
96	[BUG]  [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(callTarget.getType()  ==  Token.VAR);  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(callTarget.getType()  ==  Token.VAR);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getType()  ==  Token.VAR);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	1	None	add
97	[BUG]  [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(callTarget.getType()  ==  Token.BLOCK);  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]      AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(callTarget.getType()  ==  Token.BLOCK);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getType()  ==  Token.BLOCK);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	1	None	add
98	[BUG]  [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(callTarget.getType()  ==  Token.CALL);  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]        AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(callTarget.getType()  ==  Token.CALL);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getType()  ==  Token.CALL);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	1	None	add
99	[BUG]  [BUGGY]  Node  value  =  callTarget.trim();  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.trim();  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.trim();	  Node    value    =    callTarget.getValue();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
100	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  null;  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	add	Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  null;	  Node    value    =    callTarget.getLastChild();    	compilable	  [FE]  AssertionFailedError  	2	1	replace
101	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  null;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  null;  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  null;	  Node    value    =    callTarget.getLastChild();    	compilable	  [FE]  AssertionFailedError  	2	1	replace
102	[BUG]  [BUGGY]  Node  value  =  n.getNext();  Preconditions.checkState(n.getNext()!=  null);  Node  value  =  n.getNext();  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  n.getNext();  Preconditions.checkState(n.getNext()!=  null);  Node  value  =  n.getNext();  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    n.getNext();    Preconditions.checkState(n.getNext()!=  null);  Node  value  =  n.getNext();	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	7	None	add
103	[BUG]  [BUGGY]  Node  value  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().removeChild(n);  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]      AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().removeChild(n);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    n.getNext();    Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().removeChild(n);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	7	None	add
104	[BUG]  [BUGGY]  Node  value  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().removeChild(callTarget);  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]        AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().removeChild(callTarget);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    n.getNext();    Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().removeChild(callTarget);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	7	None	add
105	[BUG]  [BUGGY]  Node  value  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().replaceChild(n,  value);  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]          AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().replaceChild(n,  value);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    n.getNext();    Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().replaceChild(n,  value);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	7	None	add
106	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  n;  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	add	Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  n;	  Node    value    =    callTarget.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	11	1	replace
107	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  n;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  n;  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  n;	  Node    value    =    callTarget.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	11	1	replace
108	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  n;  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	add	Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  n;	  Node    value    =    callTarget.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	11	1	replace
109	[BUG]  [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  n;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  n;  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  n;	  Node    value    =    callTarget.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	11	1	replace
110	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(3)!=  null);  [CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)  [FE]    IllegalStateException    [CONTEXT]    Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {          [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(3)!=  null);  [BUGGY]    if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(3)!=  null);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  tryFoldSimpleFunctionCall(Node)	12	None	add
