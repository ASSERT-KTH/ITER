bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(3)+  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(3)+  1;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAncestor(3)+  1;	  Node    value    =    callTarget.getAncestor(2)    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	45	None	replace
2	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(1)  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(1)  +  1;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAncestor(1)  +  1;	  Node    value    =    callTarget.getAncestor(2)    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	45	None	replace
3	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(4)+  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(4)+  1;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAncestor(4)+  1;	  Node    value    =    callTarget.getAncestor(2)    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	45	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  n.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	add	Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  n.getLastChild();	  Node    value    =    callTarget!=    null?    callTarget.getLastChild()    :    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	65	1	replace
5	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  n.getLastChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  n.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  n.getLastChild();	  Node    value    =    callTarget!=    null?    callTarget.getLastChild()    :    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	65	1	replace
6	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  a=String( "hello "  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getFirstChild()  :  n.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	add	Node  value  =  callTarget  ==  null?  callTarget.getFirstChild()  :  n.getLastChild();	  Node    value    =    callTarget!=    null?    callTarget.getLastChild()    :    n.getLastChild();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  a=String( "hello "  	65	1	replace
7	[BUG]  [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getFirstChild()  :  n.getLastChild();  [FE]  junit.framework.AssertionFailedError:  Expected:  var  a=String( "hello "  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getFirstChild()  :  n.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget  ==  null?  callTarget.getFirstChild()  :  n.getLastChild();	  Node    value    =    callTarget!=    null?    callTarget.getLastChild()    :    n.getLastChild();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  a=String( "hello "  	65	1	replace
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n!=  null?  callTarget.getLastChild()  :  n.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	add	Node  value  =  n!=  null?  callTarget.getLastChild()  :  n.getLastChild();	  Node    value    =    callTarget!=    null?    callTarget.getLastChild()    :    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	65	1	replace
9	[BUG]  [BUGGY]  Node  value  =  n!=  null?  callTarget.getLastChild()  :  n.getLastChild();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n!=  null?  callTarget.getLastChild()  :  n.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n!=  null?  callTarget.getLastChild()  :  n.getLastChild();	  Node    value    =    callTarget!=    null?    callTarget.getLastChild()    :    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	65	1	replace
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n!=  null?  callTarget.getFirstChild()  :  n.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	add	Node  value  =  n!=  null?  callTarget.getFirstChild()  :  n.getLastChild();	  Node    value    =    callTarget!=    null?    callTarget.getLastChild()    :    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	65	1	replace
11	[BUG]  [BUGGY]  Node  value  =  n!=  null?  callTarget.getFirstChild()  :  n.getLastChild();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n!=  null?  callTarget.getFirstChild()  :  n.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n!=  null?  callTarget.getFirstChild()  :  n.getLastChild();	  Node    value    =    callTarget!=    null?    callTarget.getLastChild()    :    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	65	1	replace
12	[BUG]  [BUGGY]  Node  value  =  INVALID_REGULAR_EXPRESSION_FLAGS!=  null?  callTarget.getValue()  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  INVALID_REGULAR_EXPRESSION_FLAGS!=  null?  callTarget.getValue()  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  INVALID_REGULAR_EXPRESSION_FLAGS!=  null?  callTarget.getValue()  :  INVALID_REGULAR_EXPRESSION_FLAGS;	  Node    value    =    callTarget!=    null?    callTarget.getValue()    :    INVALID_REGULAR_EXPRESSION_FLAGS;    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
13	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  INVALID_REGULAR_EXPRESSION_FLAGS.getValue()  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  INVALID_REGULAR_EXPRESSION_FLAGS.getValue()  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget!=  null?  INVALID_REGULAR_EXPRESSION_FLAGS.getValue()  :  INVALID_REGULAR_EXPRESSION_FLAGS;	  Node    value    =    callTarget!=    null?    callTarget.getValue()    :    INVALID_REGULAR_EXPRESSION_FLAGS;    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
14	[BUG]  [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getValue()  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getValue()  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget  ==  null?  callTarget.getValue()  :  INVALID_REGULAR_EXPRESSION_FLAGS;	  Node    value    =    callTarget!=    null?    callTarget.getValue()    :    INVALID_REGULAR_EXPRESSION_FLAGS;    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
15	[BUG]  [BUGGY]  Node  value  =  callTarget  instanceof  String?(String)callTarget  :  callTarget.getLastChild();  [CE]  inconvertible  types  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget  instanceof  String?(String)callTarget  :  callTarget.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget  instanceof  String?(String)callTarget  :  callTarget.getLastChild();	  Node    value    =    callTarget    instanceof    String?(String)callTarget    :    callTarget.getValue();    	non-compiled	[CE]  inconvertible  types	86	None	replace
16	[BUG]  [BUGGY]  Node  value  =(callTarget  instanceof  String)?(String)callTarget  :  callTarget.getValue();  [CE]  inconvertible  types  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =(callTarget  instanceof  String)?(String)callTarget  :  callTarget.getValue();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =(callTarget  instanceof  String)?(String)callTarget  :  callTarget.getValue();	  Node    value    =    callTarget    instanceof    String?(String)callTarget    :    callTarget.getValue();    	non-compiled	[CE]  inconvertible  types	86	None	replace
17	[BUG]  [BUGGY]  Node  value  =  callTarget  instanceof  String?(String)callTarget  :  callTarget.getKey();  [CE]  inconvertible  types  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget  instanceof  String?(String)callTarget  :  callTarget.getKey();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget  instanceof  String?(String)callTarget  :  callTarget.getKey();	  Node    value    =    callTarget    instanceof    String?(String)callTarget    :    callTarget.getValue();    	non-compiled	[CE]  inconvertible  types	86	None	replace
18	[BUG]  [BUGGY]  Node  value  =  callTarget  instanceof  String?(String)callTarget  :  callTarget.getLocalName();  [CE]  inconvertible  types  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget  instanceof  String?(String)callTarget  :  callTarget.getLocalName();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget  instanceof  String?(String)callTarget  :  callTarget.getLocalName();	  Node    value    =    callTarget    instanceof    String?(String)callTarget    :    callTarget.getValue();    	non-compiled	[CE]  inconvertible  types	86	None	replace
19	[BUG]  [BUGGY]  Node  value  =  callTarget  instanceof  String?(String)callTarget  :  callTarget.getString();  [CE]  inconvertible  types  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget  instanceof  String?(String)callTarget  :  callTarget.getString();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget  instanceof  String?(String)callTarget  :  callTarget.getString();	  Node    value    =    callTarget    instanceof    String?(String)callTarget    :    callTarget.getValue();    	non-compiled	[CE]  inconvertible  types	86	None	replace
20	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	add	Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.NAME);    	compilable	  [FE]  IllegalStateException  	74	1	replace
21	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  IllegalStateException  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.NAME);    	compilable	  [FE]  IllegalStateException  	74	1	replace
22	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	add	Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.NAME);    	compilable	  [FE]  IllegalStateException  	74	1	replace
23	[BUG]  [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  IllegalStateException  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.NAME);    	compilable	  [FE]  IllegalStateException  	74	1	replace
24	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(value.getType()  ==  Token.NAME);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	add	Node  value  =  callTarget.getLastChild();  Preconditions.checkState(value.getType()  ==  Token.NAME);	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.NAME);    	compilable	  [FE]  NullPointerException  	74	1	replace
25	[BUG]  [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(value.getType()  ==  Token.NAME);  [FE]  NullPointerException  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(value.getType()  ==  Token.NAME);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getLastChild();  Preconditions.checkState(value.getType()  ==  Token.NAME);	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.NAME);    	compilable	  [FE]  NullPointerException  	74	1	replace
26	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  value  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.NAME);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getType()  ==  Token.NAME);	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  value	74	None	replace
27	[BUG]  [BUGGY]  Node  value  =  callTarget.removeLastChild();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.removeLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.removeLastChild();	  Node    value    =    callTarget.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
28	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.removeFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	add	Node  value  =  n.removeFirstChild();	  Node    value    =    callTarget.removeFirstChild();    	compilable	  [FE]  IllegalStateException  	27	1	replace
29	[BUG]  [BUGGY]  Node  value  =  n.removeFirstChild();  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.removeFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.removeFirstChild();	  Node    value    =    callTarget.removeFirstChild();    	compilable	  [FE]  IllegalStateException  	27	1	replace
30	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getAncestor(2)!=  null);  [CE]  cannot  find  symbol  value  [FE]                    IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getAncestor(2)!=  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getAncestor(2)!=  null);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)    >=    null);    	non-compiled	[CE]  cannot  find  symbol  value	40	None	replace
31	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(1);  Preconditions.checkState(callTarget.getAncestor(2)!=  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	add	Node  value  =  callTarget.getAncestor(1);  Preconditions.checkState(callTarget.getAncestor(2)!=  null);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)    >=    null);    	compilable	  [FE]  AssertionFailedError  	40	1	replace
32	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(1);  Preconditions.checkState(callTarget.getAncestor(2)!=  null);  [FE]  AssertionFailedError  [FE]                      IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(1);  Preconditions.checkState(callTarget.getAncestor(2)!=  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAncestor(1);  Preconditions.checkState(callTarget.getAncestor(2)!=  null);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)    >=    null);    	compilable	  [FE]  AssertionFailedError  	40	1	replace
33	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                        IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(3);  Preconditions.checkState(callTarget.getAncestor(2)!=  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	add	Node  value  =  callTarget.getAncestor(3);  Preconditions.checkState(callTarget.getAncestor(2)!=  null);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)    >=    null);    	compilable	  [FE]  IllegalStateException  	40	1	replace
34	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(3);  Preconditions.checkState(callTarget.getAncestor(2)!=  null);  [FE]  IllegalStateException  [FE]                        IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(3);  Preconditions.checkState(callTarget.getAncestor(2)!=  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAncestor(3);  Preconditions.checkState(callTarget.getAncestor(2)!=  null);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)    >=    null);    	compilable	  [FE]  IllegalStateException  	40	1	replace
35	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                          IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(1)!=  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	add	Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(1)!=  null);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)    >=    null);    	compilable	  [FE]  IllegalStateException  	40	1	replace
36	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(1)!=  null);  [FE]  IllegalStateException  [FE]                          IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(1)!=  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(1)!=  null);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)    >=    null);    	compilable	  [FE]  IllegalStateException  	40	1	replace
37	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                  IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getAncestor(2);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	add	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getAncestor(2);	  Node    value    =    callTarget.getAncestor(2);    Node    value    =    callTarget.getAncestor(1);    	compilable	  [FE]  IllegalStateException  	39	1	replace
38	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getAncestor(2);  [FE]  IllegalStateException  [FE]                  IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getAncestor(2);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getAncestor(2);	  Node    value    =    callTarget.getAncestor(2);    Node    value    =    callTarget.getAncestor(1);    	compilable	  [FE]  IllegalStateException  	39	1	replace
39	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                    IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  value  =  callTarget.getAncestor(2);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  value  =  callTarget.getAncestor(2);	  Node    value    =    callTarget.getAncestor(2);    Node    value    =    callTarget.getAncestor(1);    	compilable	  [FE]  IllegalStateException  	39	1	replace
40	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  value  =  callTarget.getAncestor(2);  [FE]  IllegalStateException  [FE]                    IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  value  =  callTarget.getAncestor(2);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  value  =  callTarget.getAncestor(2);	  Node    value    =    callTarget.getAncestor(2);    Node    value    =    callTarget.getAncestor(1);    	compilable	  [FE]  IllegalStateException  	39	1	replace
41	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                      IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  value  =  callTarget.getAncestor(2);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	add	Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  value  =  callTarget.getAncestor(2);	  Node    value    =    callTarget.getAncestor(2);    Node    value    =    callTarget.getAncestor(1);    	compilable	  [FE]  IllegalStateException  	39	1	replace
42	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  value  =  callTarget.getAncestor(2);  [FE]  IllegalStateException  [FE]                      IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  value  =  callTarget.getAncestor(2);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  value  =  callTarget.getAncestor(2);	  Node    value    =    callTarget.getAncestor(2);    Node    value    =    callTarget.getAncestor(1);    	compilable	  [FE]  IllegalStateException  	39	1	replace
43	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                        IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  value  =  callTarget.getAncestor(2);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	add	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  value  =  callTarget.getAncestor(2);	  Node    value    =    callTarget.getAncestor(2);    Node    value    =    callTarget.getAncestor(1);    	compilable	  [FE]  IllegalStateException  	39	1	replace
44	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  value  =  callTarget.getAncestor(2);  [FE]  IllegalStateException  [FE]                        IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  value  =  callTarget.getAncestor(2);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  value  =  callTarget.getAncestor(2);	  Node    value    =    callTarget.getAncestor(2);    Node    value    =    callTarget.getAncestor(1);    	compilable	  [FE]  IllegalStateException  	39	1	replace
45	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  value  =  n.getNext();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	add	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  value  =  n.getNext();	  Node    value    =    n.getNext();    Node    value    =    n.getNext();    	compilable	  [FE]  IllegalStateException  	49	1	replace
46	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  value  =  n.getNext();  [FE]  IllegalStateException  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  value  =  n.getNext();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  value  =  n.getNext();	  Node    value    =    n.getNext();    Node    value    =    n.getNext();    	compilable	  [FE]  IllegalStateException  	49	1	replace
47	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  value  =  n.getNext();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  value  =  n.getNext();	  Node    value    =    n.getNext();    Node    value    =    n.getNext();    	compilable	  [FE]  IllegalStateException  	49	1	replace
48	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  value  =  n.getNext();  [FE]  IllegalStateException  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  value  =  n.getNext();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  value  =  n.getNext();	  Node    value    =    n.getNext();    Node    value    =    n.getNext();    	compilable	  [FE]  IllegalStateException  	49	1	replace
49	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  value  =  n.getNext();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	add	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  value  =  n.getNext();	  Node    value    =    n.getNext();    Node    value    =    n.getNext();    	compilable	  [FE]  IllegalStateException  	49	1	replace
50	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  value  =  n.getNext();  [FE]  IllegalStateException  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  value  =  n.getNext();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  value  =  n.getNext();	  Node    value    =    n.getNext();    Node    value    =    n.getNext();    	compilable	  [FE]  IllegalStateException  	49	1	replace
51	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  value  =  n.getNext();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	add	Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  value  =  n.getNext();	  Node    value    =    n.getNext();    Node    value    =    n.getNext();    	compilable	  [FE]  IllegalStateException  	49	1	replace
52	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  value  =  n.getNext();  [FE]  IllegalStateException  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  value  =  n.getNext();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  value  =  n.getNext();	  Node    value    =    n.getNext();    Node    value    =    n.getNext();    	compilable	  [FE]  IllegalStateException  	49	1	replace
53	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  value  =  n.getNext();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	add	Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  value  =  n.getNext();	  Node    value    =    n.getNext();    Node    value    =    n.getNext();    	compilable	  [FE]  IllegalStateException  	49	1	replace
54	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  value  =  n.getNext();  [FE]  IllegalStateException  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  value  =  n.getNext();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  value  =  n.getNext();	  Node    value    =    n.getNext();    Node    value    =    n.getNext();    	compilable	  [FE]  IllegalStateException  	49	1	replace
55	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	add	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getLastChild();	  Node    value    =    callTarget.getFirstChild();    Node    value    =    callTarget.getLastChild();    	compilable	  [FE]  IllegalStateException  	9	1	replace
56	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getLastChild();  [FE]  IllegalStateException  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getLastChild();	  Node    value    =    callTarget.getFirstChild();    Node    value    =    callTarget.getLastChild();    	compilable	  [FE]  IllegalStateException  	9	1	replace
57	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  value  =  callTarget.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  value  =  callTarget.getLastChild();	  Node    value    =    callTarget.getFirstChild();    Node    value    =    callTarget.getLastChild();    	compilable	  [FE]  IllegalStateException  	9	1	replace
58	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  value  =  callTarget.getLastChild();  [FE]  IllegalStateException  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  value  =  callTarget.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  value  =  callTarget.getLastChild();	  Node    value    =    callTarget.getFirstChild();    Node    value    =    callTarget.getLastChild();    	compilable	  [FE]  IllegalStateException  	9	1	replace
59	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	add	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getFirstChild();	  Node    value    =    callTarget.getFirstChild();    Node    value    =    callTarget.getLastChild();    	compilable	  [FE]  IllegalStateException  	9	1	replace
60	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getFirstChild();  [FE]  IllegalStateException  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getFirstChild();	  Node    value    =    callTarget.getFirstChild();    Node    value    =    callTarget.getLastChild();    	compilable	  [FE]  IllegalStateException  	9	1	replace
61	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(2)/  1;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]        IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(2)/  1;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAncestor(2)/  1;	  Node    value    =    callTarget.getAncestor(2)    -    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	89	None	replace
62	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(2)-  2;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]          IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(2)-  2;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAncestor(2)-  2;	  Node    value    =    callTarget.getAncestor(2)    -    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	89	None	replace
63	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getFirstChild()  ==  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	add	Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getFirstChild()  ==  null);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getFirstChild()    ==    null);    	compilable	  [FE]  AssertionFailedError  	79	1	replace
64	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getFirstChild()  ==  null);  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getFirstChild()  ==  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getFirstChild()  ==  null);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getFirstChild()    ==    null);    	compilable	  [FE]  AssertionFailedError  	79	1	replace
65	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getFirstChild()  ==  null);  [CE]  cannot  find  symbol  value  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getFirstChild()  ==  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getFirstChild()  ==  null);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getFirstChild()    ==    null);    	non-compiled	[CE]  cannot  find  symbol  value	79	None	replace
66	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getFirstChild()!=  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	add	Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getFirstChild()!=  null);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getFirstChild()    ==    null);    	compilable	  [FE]  IllegalStateException  	79	1	replace
67	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getFirstChild()!=  null);  [FE]  IllegalStateException  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getFirstChild()!=  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getFirstChild()!=  null);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getFirstChild()    ==    null);    	compilable	  [FE]  IllegalStateException  	79	1	replace
68	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getFirstChild()  ==  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	add	Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getFirstChild()  ==  null);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getFirstChild()    ==    null);    	compilable	  [FE]  IllegalStateException  	79	1	replace
69	[BUG]  [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getFirstChild()  ==  null);  [FE]  IllegalStateException  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getFirstChild()  ==  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getFirstChild()  ==  null);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getFirstChild()    ==    null);    	compilable	  [FE]  IllegalStateException  	79	1	replace
70	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getFirstChild()  ==  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	add	Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getFirstChild()  ==  null);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getFirstChild()    ==    null);    	compilable	  [FE]  IllegalStateException  	79	1	replace
71	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getFirstChild()  ==  null);  [FE]  IllegalStateException  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getFirstChild()  ==  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getFirstChild()  ==  null);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getFirstChild()    ==    null);    	compilable	  [FE]  IllegalStateException  	79	1	replace
72	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	add	Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  IllegalStateException  	3	1	replace
73	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [FE]  IllegalStateException  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  IllegalStateException  	3	1	replace
74	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
75	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(value.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(value.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(value.getType()  ==  Token.FUNCTION);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
76	[BUG]  [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getLastChild();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
77	[BUG]  [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
78	[BUG]  [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget    ==    null?    callTarget.getLastChild()    :    callTarget.getLastChild();    Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	80	None	add
79	[BUG]  [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget    ==    null?    callTarget.getLastChild()    :    callTarget.getLastChild();    Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	80	None	add
80	[BUG]  [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  Node  value  =  callTarget  ==  null?  callTarget.getFirstChild()  :  callTarget.getLastChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  Node  value  =  callTarget  ==  null?  callTarget.getFirstChild()  :  callTarget.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget    ==    null?    callTarget.getLastChild()    :    callTarget.getLastChild();    Node  value  =  callTarget  ==  null?  callTarget.getFirstChild()  :  callTarget.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	80	None	add
81	[BUG]  [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  callTarget.getLastChild();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  callTarget.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget    ==    null?    callTarget.getLastChild()    :    callTarget.getLastChild();    Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  callTarget.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	80	None	add
82	[BUG]  [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  Node  value  =  callTarget  >=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  Node  value  =  callTarget  >=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget    ==    null?    callTarget.getLastChild()    :    callTarget.getLastChild();    Node  value  =  callTarget  >=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	80	None	add
83	[BUG]  [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  Node  value  =  callTarget  >>  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  Node  value  =  callTarget  >>  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget    ==    null?    callTarget.getLastChild()    :    callTarget.getLastChild();    Node  value  =  callTarget  >>  null?  callTarget.getLastChild()  :  callTarget.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	80	None	add
84	[BUG]  [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild());  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget    ==    null?    callTarget.getLastChild()    :    callTarget.getLastChild();    Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild());	  	non-compiled	[CE]  cannot  find  symbol	80	None	add
85	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  value  =  callTarget.getFirstChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  value  =  callTarget.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  value  =  callTarget.getFirstChild();	  Node    value    =    callTarget.getFirstChild();    Node    value    =    callTarget.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
86	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  value  =  callTarget.getFirstChild();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  value  =  callTarget.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  value  =  callTarget.getFirstChild();	  Node    value    =    callTarget.getFirstChild();    Node    value    =    callTarget.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
87	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  value  =  callTarget.getFirstChild();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  value  =  callTarget.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  value  =  callTarget.getFirstChild();	  Node    value    =    callTarget.getFirstChild();    Node    value    =    callTarget.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
88	[BUG]  [BUGGY]  Node  value  =  n.next();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.next();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.next();	  Node    value    =    callTarget.next();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
89	[BUG]  [BUGGY]  Node  value  =  callTarget.value();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.value();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.value();	  Node    value    =    callTarget.next();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
90	[BUG]  [BUGGY]  Node  value  =  callTarget.getString(1);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getString(1);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getString(1);	  Node    value    =    callTarget.getAncestor(1);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
91	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
92	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.BLOCK);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.BLOCK);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getType()  ==  Token.BLOCK);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
93	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.BLOCK);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
94	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(value.getType()  ==  Token.BLOCK);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(value.getType()  ==  Token.BLOCK);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(value.getType()  ==  Token.BLOCK);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
95	[BUG]  [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(callTarget.getType()  ==  Token.BLOCK);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(callTarget.getType()  ==  Token.BLOCK);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getLastChild();  Preconditions.checkState(callTarget.getType()  ==  Token.BLOCK);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
96	[BUG]  [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.BLOCK);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
97	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getAncestor(2)!=  null  &&  callTarget.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getAncestor(2)!=  null  &&  callTarget.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getAncestor(2)!=  null  &&  callTarget.getType()  ==  Token.FUNCTION);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)!=    null    &&    callTarget.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
98	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(1);  Preconditions.checkState(callTarget.getAncestor(2)!=  null  &&  callTarget.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(1);  Preconditions.checkState(callTarget.getAncestor(2)!=  null  &&  callTarget.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAncestor(1);  Preconditions.checkState(callTarget.getAncestor(2)!=  null  &&  callTarget.getType()  ==  Token.FUNCTION);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)!=    null    &&    callTarget.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
99	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(3)!=  null  &&  callTarget.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(3)!=  null  &&  callTarget.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(3)!=  null  &&  callTarget.getType()  ==  Token.FUNCTION);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)!=    null    &&    callTarget.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
100	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getAncestor(1)!=  null  &&  callTarget.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getAncestor(1)!=  null  &&  callTarget.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getAncestor(1)!=  null  &&  callTarget.getType()  ==  Token.FUNCTION);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)!=    null    &&    callTarget.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
101	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(1)!=  null  &&  callTarget.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(1)!=  null  &&  callTarget.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(1)!=  null  &&  callTarget.getType()  ==  Token.FUNCTION);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)!=    null    &&    callTarget.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
102	[BUG]  [BUGGY]  Preconditions.checkState(n.getAncestor(2)!=  null  &&  callTarget.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getAncestor(2)!=  null  &&  callTarget.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getAncestor(2)!=  null  &&  callTarget.getType()  ==  Token.FUNCTION);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)!=    null    &&    callTarget.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
103	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString());  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString());  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString());	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
104	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  STANDARD_OBJECT_CONSTRUCTORS);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
105	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());  [CE]  cannot  find  symbol  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
106	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  callTarget.getString());  [CE]  cannot  find  symbol  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  callTarget.getString());  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  callTarget.getString());	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
107	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [CE]  cannot  find  symbol  [FE]                                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
108	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.CALL);	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.CALL);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
109	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.CALL);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.CALL);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.CALL);	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.CALL);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
110	[BUG]  [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.CALL);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.CALL);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.CALL);	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.CALL);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
111	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.CALL);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.CALL);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getType()  ==  Token.CALL);	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.CALL);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
112	[BUG]  [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(value.getType()  ==  Token.CALL);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(value.getType()  ==  Token.CALL);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getLastChild();  Preconditions.checkState(value.getType()  ==  Token.CALL);	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.CALL);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
113	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(value.getType()  ==  Token.CALL);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(value.getType()  ==  Token.CALL);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(value.getType()  ==  Token.CALL);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getType()    ==    Token.CALL);    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
114	[BUG]  [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(callTarget.getType()  ==  Token.CALL);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(callTarget.getType()  ==  Token.CALL);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getLastChild();  Preconditions.checkState(callTarget.getType()  ==  Token.CALL);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getType()    ==    Token.CALL);    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
115	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
116	[BUG]  [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getLastChild();  Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
117	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
118	[BUG]  [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
119	[BUG]  [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(value.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(value.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getLastChild();  Preconditions.checkState(value.getType()  ==  Token.EXPR_RESULT);	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
120	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
121	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getString()  :  n;  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getString()  :  n;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget!=  null?  callTarget.getString()  :  n;	  Node    value    =    callTarget!=    null?    callTarget.getFirstChild()    :    n;    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
122	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getType()  :  n;  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getType()  :  n;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget!=  null?  callTarget.getType()  :  n;	  Node    value    =    callTarget!=    null?    callTarget.getFirstChild()    :    n;    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
123	[BUG]  [BUGGY]  Node  value  =  n!=  null?  callTarget.getFirstChild()  :  n;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n!=  null?  callTarget.getFirstChild()  :  n;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n!=  null?  callTarget.getFirstChild()  :  n;	  Node    value    =    callTarget!=    null?    callTarget.getFirstChild()    :    n;    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
124	[BUG]  [BUGGY]  Node  value  =  calltarget.getLastChild();  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  calltarget.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  calltarget.getLastChild();	  Node    value    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
125	[BUG]  [BUGGY]  Node  value  =  callTarget.getPreviousChild();  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getPreviousChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getPreviousChild();	  Node    value    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
126	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION)  {  Node  value  =  callTarget.getFirstChild();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION)  {  Node  value  =  callTarget.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION)  {  Node  value  =  callTarget.getFirstChild();	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.FUNCTION)    {    Node    value    =    callTarget.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
127	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  Node  value  =  callTarget.getFirstChild();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  Node  value  =  callTarget.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  Node  value  =  callTarget.getFirstChild();	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.FUNCTION)    {    Node    value    =    callTarget.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
128	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  null;  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  null;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  null;	  Node    value    =    callTarget!=    null?    callTarget.getFirstChild()    :    null;    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
129	[BUG]  [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  null;  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  null;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  null;	  Node    value    =    callTarget!=    null?    callTarget.getFirstChild()    :    null;    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
130	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getString()  :  null;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getString()  :  null;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget!=  null?  callTarget.getString()  :  null;	  Node    value    =    callTarget!=    null?    callTarget.getFirstChild()    :    null;    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
131	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLocalPart()  :  null;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLocalPart()  :  null;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget!=  null?  callTarget.getLocalPart()  :  null;	  Node    value    =    callTarget!=    null?    callTarget.getFirstChild()    :    null;    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
132	[BUG]  [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(value.getType()  ==  Token.BLOCK);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(value.getType()  ==  Token.BLOCK);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getLastChild();  Preconditions.checkState(value.getType()  ==  Token.BLOCK);	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
133	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n;  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n;  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n;  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget!=    null?    callTarget.getLastChild()    :    n;    Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n;	  	non-compiled	[CE]  cannot  find  symbol	82	None	add
134	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n;  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  n;  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n;  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  n;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget!=    null?    callTarget.getLastChild()    :    n;    Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  n;	  	non-compiled	[CE]  cannot  find  symbol	82	None	add
135	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n;  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n;  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget!=    null?    callTarget.getLastChild()    :    n;    Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n);	  	non-compiled	[CE]  cannot  find  symbol	82	None	add
136	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n;  Node  value  =  callTarget  >=  null?  callTarget.getLastChild()  :  n;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n;  Node  value  =  callTarget  >=  null?  callTarget.getLastChild()  :  n;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget!=    null?    callTarget.getLastChild()    :    n;    Node  value  =  callTarget  >=  null?  callTarget.getLastChild()  :  n;	  	non-compiled	[CE]  cannot  find  symbol	82	None	add
137	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n;  Node  value  =  callTarget  >>  null?  callTarget.getLastChild()  :  n;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n;  Node  value  =  callTarget  >>  null?  callTarget.getLastChild()  :  n;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget!=    null?    callTarget.getLastChild()    :    n;    Node  value  =  callTarget  >>  null?  callTarget.getLastChild()  :  n;	  	non-compiled	[CE]  cannot  find  symbol	82	None	add
138	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n;  Node  value  =  callTarget  [Delete]  null?  callTarget.getLastChild()  :  n;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n;  Node  value  =  callTarget  [Delete]  null?  callTarget.getLastChild()  :  n;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget!=    null?    callTarget.getLastChild()    :    n;    Node  value  =  callTarget  [Delete]  null?  callTarget.getLastChild()  :  n;	  	non-compiled	[CE]  cannot  find  symbol	82	None	add
139	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n;  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  n;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n;  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  n;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget!=    null?    callTarget.getLastChild()    :    n;    Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  n;	  	non-compiled	[CE]  cannot  find  symbol	82	None	add
140	[BUG]  [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  n;  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  n;  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  n;  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  n;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget    ==    null?    callTarget.getLastChild()    :    n;    Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  n;	  	non-compiled	[CE]  cannot  find  symbol	108	None	add
141	[BUG]  [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  n;  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n;  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  n;  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget    ==    null?    callTarget.getLastChild()    :    n;    Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n;	  	non-compiled	[CE]  cannot  find  symbol	108	None	add
142	[BUG]  [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  n;  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  n);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  n;  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  n);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget    ==    null?    callTarget.getLastChild()    :    n;    Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  n);	  	non-compiled	[CE]  cannot  find  symbol	108	None	add
143	[BUG]  [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  n;  Node  value  =  callTarget  >=  null?  callTarget.getLastChild()  :  n;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  n;  Node  value  =  callTarget  >=  null?  callTarget.getLastChild()  :  n;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget    ==    null?    callTarget.getLastChild()    :    n;    Node  value  =  callTarget  >=  null?  callTarget.getLastChild()  :  n;	  	non-compiled	[CE]  cannot  find  symbol	108	None	add
144	[BUG]  [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  n;  Node  value  =  callTarget  >>  null?  callTarget.getLastChild()  :  n;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  n;  Node  value  =  callTarget  >>  null?  callTarget.getLastChild()  :  n;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget    ==    null?    callTarget.getLastChild()    :    n;    Node  value  =  callTarget  >>  null?  callTarget.getLastChild()  :  n;	  	non-compiled	[CE]  cannot  find  symbol	108	None	add
145	[BUG]  [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  n;  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  n;  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget    ==    null?    callTarget.getLastChild()    :    n;    Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n);	  	non-compiled	[CE]  cannot  find  symbol	108	None	add
146	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n.getLastChild();  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n.getLastChild();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n.getLastChild();  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget!=    null?    callTarget.getLastChild()    :    n.getLastChild();    Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	64	None	add
147	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n.getLastChild();  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  n.getLastChild();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n.getLastChild();  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  n.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget!=    null?    callTarget.getLastChild()    :    n.getLastChild();    Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  n.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	64	None	add
148	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n.getLastChild();  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  n.getLastChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n.getLastChild();  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  n.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget!=    null?    callTarget.getLastChild()    :    n.getLastChild();    Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  n.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	64	None	add
149	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n.getLastChild();  Node  value  =  callTarget  >=  null?  callTarget.getLastChild()  :  n.getLastChild();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n.getLastChild();  Node  value  =  callTarget  >=  null?  callTarget.getLastChild()  :  n.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget!=    null?    callTarget.getLastChild()    :    n.getLastChild();    Node  value  =  callTarget  >=  null?  callTarget.getLastChild()  :  n.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	64	None	add
150	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n.getLastChild();  Node  value  =  callTarget  >>  null?  callTarget.getLastChild()  :  n.getLastChild();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n.getLastChild();  Node  value  =  callTarget  >>  null?  callTarget.getLastChild()  :  n.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget!=    null?    callTarget.getLastChild()    :    n.getLastChild();    Node  value  =  callTarget  >>  null?  callTarget.getLastChild()  :  n.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	64	None	add
151	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n.getLastChild();  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n.getLastChild();  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget!=    null?    callTarget.getLastChild()    :    n.getLastChild();    Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol	64	None	add
152	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n.getLastChild();  Node  value  =  callTarget  [Delete]  null?  callTarget.getLastChild()  :  n.getLastChild();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n.getLastChild();  Node  value  =  callTarget  [Delete]  null?  callTarget.getLastChild()  :  n.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget!=    null?    callTarget.getLastChild()    :    n.getLastChild();    Node  value  =  callTarget  [Delete]  null?  callTarget.getLastChild()  :  n.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	64	None	add
153	[BUG]  [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getType()  :  STANDARD_OBJECT_CONSTRUCTORS;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getType()  :  STANDARD_OBJECT_CONSTRUCTORS;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget  ==  null?  callTarget.getType()  :  STANDARD_OBJECT_CONSTRUCTORS;	  Node    value    =    callTarget!=    null?    callTarget.getType()    :    STANDARD_OBJECT_CONSTRUCTORS;    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
154	[BUG]  [BUGGY]  Node  value  =  STANDARD_OBJECT_CONSTRUCTORS!=  null?  callTarget.getType()  :  STANDARD_OBJECT_CONSTRUCTORS;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  STANDARD_OBJECT_CONSTRUCTORS!=  null?  callTarget.getType()  :  STANDARD_OBJECT_CONSTRUCTORS;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  STANDARD_OBJECT_CONSTRUCTORS!=  null?  callTarget.getType()  :  STANDARD_OBJECT_CONSTRUCTORS;	  Node    value    =    callTarget!=    null?    callTarget.getType()    :    STANDARD_OBJECT_CONSTRUCTORS;    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
155	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getType()  :  STANDARD_OBJECT_CONSTRUCTORS,  INVALID_REGULAR_EXPRESSION_FLAGS;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getType()  :  STANDARD_OBJECT_CONSTRUCTORS,  INVALID_REGULAR_EXPRESSION_FLAGS;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget!=  null?  callTarget.getType()  :  STANDARD_OBJECT_CONSTRUCTORS,  INVALID_REGULAR_EXPRESSION_FLAGS;	  Node    value    =    callTarget!=    null?    callTarget.getType()    :    STANDARD_OBJECT_CONSTRUCTORS;    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
156	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getType()  :  STANDARD_OBJECT_CONSTRUCTORS  +  1;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getType()  :  STANDARD_OBJECT_CONSTRUCTORS  +  1;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget!=  null?  callTarget.getType()  :  STANDARD_OBJECT_CONSTRUCTORS  +  1;	  Node    value    =    callTarget!=    null?    callTarget.getType()    :    STANDARD_OBJECT_CONSTRUCTORS;    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
157	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(4);  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(4);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAncestor(4);	  Node    value    =    callTarget.getAncestor(2);    Node    value    =    callTarget.getAncestor(4);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
158	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(6);  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(6);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAncestor(6);	  Node    value    =    callTarget.getAncestor(2);    Node    value    =    callTarget.getAncestor(4);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
159	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(5);  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(5);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAncestor(5);	  Node    value    =    callTarget.getAncestor(2);    Node    value    =    callTarget.getAncestor(4);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
160	[BUG]  [BUGGY]  Node  value  =  n.getString(),  callTarget;  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getString(),  callTarget;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getString(),  callTarget;	  Node    value    =    callTarget.getString(),    n;    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
161	[BUG]  [BUGGY]  Node  value  =  callTarget.getString(),  n,  INVALID_REGULAR_EXPRESSION_FLAGS;  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getString(),  n,  INVALID_REGULAR_EXPRESSION_FLAGS;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getString(),  n,  INVALID_REGULAR_EXPRESSION_FLAGS;	  Node    value    =    callTarget.getString(),    n;    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
162	[BUG]  [BUGGY]  Node  value  =  callTarget.getString(),  n,  STANDARD_OBJECT_CONSTRUCTORS;  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getString(),  n,  STANDARD_OBJECT_CONSTRUCTORS;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getString(),  n,  STANDARD_OBJECT_CONSTRUCTORS;	  Node    value    =    callTarget.getString(),    n;    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
163	[BUG]  [BUGGY]  Node  value  =  callTarget.getString(),  n,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getString(),  n,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getString(),  n,  STANDARD_OBJECT_CONSTRUCTORS);	  Node    value    =    callTarget.getString(),    n;    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
164	[BUG]  [BUGGY]  Node  value  =  callTarget.getString(),  n,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getString(),  n,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getString(),  n,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Node    value    =    callTarget.getString(),    n;    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
165	[BUG]  [BUGGY]  Node  value  =  callTarget.getString(),  n,  NON_GLOBAL_EXPRESSION_FLAGS;  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getString(),  n,  NON_GLOBAL_EXPRESSION_FLAGS;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getString(),  n,  NON_GLOBAL_EXPRESSION_FLAGS;	  Node    value    =    callTarget.getString(),    n;    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
166	[BUG]  [BUGGY]  Node  value  =  callTarget.getString(),  n,  a;  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getString(),  n,  a;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getString(),  n,  a;	  Node    value    =    callTarget.getString(),    n;    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
167	[BUG]  [BUGGY]  Node  value  =  n.getAssignedValue(),  callTarget;  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getAssignedValue(),  callTarget;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getAssignedValue(),  callTarget;	  Node    value    =    callTarget.getAssignedValue(),    n;    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
168	[BUG]  [BUGGY]  Node  value  =  n.getAssignedValue(),  callTarget);  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getAssignedValue(),  callTarget);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getAssignedValue(),  callTarget);	  Node    value    =    callTarget.getAssignedValue(),    n;    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
169	[BUG]  [BUGGY]  Node  value  =  callTarget.getAssignedValue(),  n,  INVALID_REGULAR_EXPRESSION_FLAGS;  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAssignedValue(),  n,  INVALID_REGULAR_EXPRESSION_FLAGS;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAssignedValue(),  n,  INVALID_REGULAR_EXPRESSION_FLAGS;	  Node    value    =    callTarget.getAssignedValue(),    n;    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
170	[BUG]  [BUGGY]  Node  value  =  callTarget.getAssignedValue(),  n,  STANDARD_OBJECT_CONSTRUCTORS;  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAssignedValue(),  n,  STANDARD_OBJECT_CONSTRUCTORS;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAssignedValue(),  n,  STANDARD_OBJECT_CONSTRUCTORS;	  Node    value    =    callTarget.getAssignedValue(),    n;    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
171	[BUG]  [BUGGY]  Node  value  =  callTarget.getAssignedValue(),  n,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  cannot  find  symbol  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAssignedValue(),  n,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAssignedValue(),  n,  STANDARD_OBJECT_CONSTRUCTORS);	  Node    value    =    callTarget.getAssignedValue(),    n;    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
172	[BUG]  [BUGGY]  Node  value  =  callTarget.getAssignedValue(),  n,  null);  [CE]  cannot  find  symbol  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAssignedValue(),  n,  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAssignedValue(),  n,  null);	  Node    value    =    callTarget.getAssignedValue(),    n;    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
173	[BUG]  [BUGGY]  Node  value  =  callTarget.getNext();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getNext();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getNext();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    callTarget.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
174	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    callTarget.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
175	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    callTarget.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
176	[BUG]  [BUGGY]  Node  value  =  callTarget.getNext();  Preconditions.checkState(value.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getNext();  Preconditions.checkState(value.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getNext();  Preconditions.checkState(value.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    callTarget.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
177	[BUG]  [BUGGY]  Node  value  =  n.getNext();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getNext();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getNext();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    callTarget.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
178	[BUG]  [BUGGY]  Node  value  =  n.getNext();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getNext();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getNext();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    callTarget.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
179	[BUG]  [BUGGY]  Node  value  =  callTarget.getNext();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getNext();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getNext();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    callTarget.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
180	[BUG]  [BUGGY]  Preconditions.checkState(n.getParent()  ==  null);  Node  value  =  n.getNext();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getParent()  ==  null);  Node  value  =  n.getNext();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getParent()  ==  null);  Node  value  =  n.getNext();	  Node    value    =    n.getNext();    Preconditions.checkState(n.getParent()    ==    null);    Node    value    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
181	[BUG]  [BUGGY]  Preconditions.checkState(n.getParent()!=  null);  Node  value  =  n.getNext();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getParent()!=  null);  Node  value  =  n.getNext();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getParent()!=  null);  Node  value  =  n.getNext();	  Node    value    =    n.getNext();    Preconditions.checkState(n.getParent()    ==    null);    Node    value    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
182	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getParent()  ==  null);  Node  value  =  n.getNext();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getParent()  ==  null);  Node  value  =  n.getNext();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getParent()  ==  null);  Node  value  =  n.getNext();	  Node    value    =    n.getNext();    Preconditions.checkState(n.getParent()    ==    null);    Node    value    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
183	[BUG]  [BUGGY]  Preconditions.checkState(n.getNext()  ==  null);  Node  value  =  n.getNext();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getNext()  ==  null);  Node  value  =  n.getNext();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getNext()  ==  null);  Node  value  =  n.getNext();	  Node    value    =    n.getNext();    Preconditions.checkState(n.getParent()    ==    null);    Node    value    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
184	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(n.getAncestor(2)!=  null  &&  NodeUtil.isName(callTarget.getString()));  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(n.getAncestor(2)!=  null  &&  NodeUtil.isName(callTarget.getString()));  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(n.getAncestor(2)!=  null  &&  NodeUtil.isName(callTarget.getString()));	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)!=    null    &&    NodeUtil.isName(callTarget.getString()));    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
185	[BUG]  [BUGGY]  Preconditions.checkState(n.getAncestor(2)!=  null  &&  NodeUtil.isName(callTarget.getString()));  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getAncestor(2)!=  null  &&  NodeUtil.isName(callTarget.getString()));  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getAncestor(2)!=  null  &&  NodeUtil.isName(callTarget.getString()));	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)!=    null    &&    NodeUtil.isName(callTarget.getString()));    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
186	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getAncestor(2)!=  null  &&  NodeUtil.isName(callTarget.getString()));  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getAncestor(2)!=  null  &&  NodeUtil.isName(callTarget.getString()));  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getAncestor(2)!=  null  &&  NodeUtil.isName(callTarget.getString()));	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)!=    null    &&    NodeUtil.isName(callTarget.getString()));    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
187	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(1);  Preconditions.checkState(callTarget.getAncestor(2)!=  null  &&  NodeUtil.isName(callTarget.getString()));  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(1);  Preconditions.checkState(callTarget.getAncestor(2)!=  null  &&  NodeUtil.isName(callTarget.getString()));  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAncestor(1);  Preconditions.checkState(callTarget.getAncestor(2)!=  null  &&  NodeUtil.isName(callTarget.getString()));	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)!=    null    &&    NodeUtil.isName(callTarget.getString()));    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
188	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(3)!=  null  &&  NodeUtil.isName(callTarget.getString()));  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(3)!=  null  &&  NodeUtil.isName(callTarget.getString()));  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(3)!=  null  &&  NodeUtil.isName(callTarget.getString()));	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)!=    null    &&    NodeUtil.isName(callTarget.getString()));    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
189	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(value.getAncestor(2)!=  null  &&  NodeUtil.isName(callTarget.getString()));  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(value.getAncestor(2)!=  null  &&  NodeUtil.isName(callTarget.getString()));  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(value.getAncestor(2)!=  null  &&  NodeUtil.isName(callTarget.getString()));	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)!=    null    &&    NodeUtil.isName(callTarget.getString()));    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
190	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  value  =  callTarget.getLastChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  value  =  callTarget.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  value  =  callTarget.getLastChild();	  Node    value    =    callTarget.getLastChild();    Node    value    =    callTarget.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
191	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  Node  value  =  callTarget.getLastChild();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  Node  value  =  callTarget.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.CALL);  Node  value  =  callTarget.getLastChild();	  Node    value    =    callTarget.getLastChild();    Node    value    =    callTarget.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
192	[BUG]  [BUGGY]  Node  value  =  n.getValue(),  callTarget;  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getValue(),  callTarget;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getValue(),  callTarget;	  Node    value    =    callTarget.getValue(),    n;    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
193	[BUG]  [BUGGY]  Node  value  =  callTarget.getValue(),  n,  INVALID_REGULAR_EXPRESSION_FLAGS;  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getValue(),  n,  INVALID_REGULAR_EXPRESSION_FLAGS;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getValue(),  n,  INVALID_REGULAR_EXPRESSION_FLAGS;	  Node    value    =    callTarget.getValue(),    n;    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
194	[BUG]  [BUGGY]  Node  value  =  callTarget.getValue(),  n,  STANDARD_OBJECT_CONSTRUCTORS;  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getValue(),  n,  STANDARD_OBJECT_CONSTRUCTORS;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getValue(),  n,  STANDARD_OBJECT_CONSTRUCTORS;	  Node    value    =    callTarget.getValue(),    n;    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
195	[BUG]  [BUGGY]  Node  value  =  n.getValue(),  callTarget);  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getValue(),  callTarget);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getValue(),  callTarget);	  Node    value    =    callTarget.getValue(),    n;    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
196	[BUG]  [BUGGY]  Node  value  =  callTarget.getValue(),  n,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  cannot  find  symbol  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getValue(),  n,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getValue(),  n,  STANDARD_OBJECT_CONSTRUCTORS);	  Node    value    =    callTarget.getValue(),    n;    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
197	[BUG]  [BUGGY]  Node  value  =  callTarget.getValue(),  n,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  cannot  find  symbol  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getValue(),  n,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getValue(),  n,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Node    value    =    callTarget.getValue(),    n;    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
198	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
199	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.VAR);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getType()  ==  Token.VAR);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
200	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
201	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(value.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(value.getType()  ==  Token.VAR);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(value.getType()  ==  Token.VAR);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
202	[BUG]  [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(callTarget.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(callTarget.getType()  ==  Token.VAR);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getLastChild();  Preconditions.checkState(callTarget.getType()  ==  Token.VAR);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
203	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getAncestor(2)  ==  null);  Node  value  =  callTarget.getAncestor(2);  [CE]  cannot  find  symbol  [FE]          IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getAncestor(2)  ==  null);  Node  value  =  callTarget.getAncestor(2);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getAncestor(2)  ==  null);  Node  value  =  callTarget.getAncestor(2);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)    ==    null);    Node    value    =    callTarget.getAncestor(2);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
204	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getAncestor(2)!=  null);  Node  value  =  callTarget.getAncestor(2);  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getAncestor(2)!=  null);  Node  value  =  callTarget.getAncestor(2);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getAncestor(2)!=  null);  Node  value  =  callTarget.getAncestor(2);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)    ==    null);    Node    value    =    callTarget.getAncestor(2);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
205	[BUG]  [BUGGY]  Preconditions.checkState(n.getAncestor(2)  ==  null);  Node  value  =  callTarget.getAncestor(2);  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getAncestor(2)  ==  null);  Node  value  =  callTarget.getAncestor(2);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getAncestor(2)  ==  null);  Node  value  =  callTarget.getAncestor(2);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)    ==    null);    Node    value    =    callTarget.getAncestor(2);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
206	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getAncestor(3)  ==  null);  Node  value  =  callTarget.getAncestor(2);  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getAncestor(3)  ==  null);  Node  value  =  callTarget.getAncestor(2);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getAncestor(3)  ==  null);  Node  value  =  callTarget.getAncestor(2);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)    ==    null);    Node    value    =    callTarget.getAncestor(2);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
207	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getAncestor(1)  ==  null);  Node  value  =  callTarget.getAncestor(2);  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getAncestor(1)  ==  null);  Node  value  =  callTarget.getAncestor(2);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getAncestor(1)  ==  null);  Node  value  =  callTarget.getAncestor(2);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)    ==    null);    Node    value    =    callTarget.getAncestor(2);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
208	[BUG]  [BUGGY]  Preconditions.checkState(n.getAncestor()  ==  null);  Node  value  =  callTarget.getAncestor(2);  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getAncestor()  ==  null);  Node  value  =  callTarget.getAncestor(2);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getAncestor()  ==  null);  Node  value  =  callTarget.getAncestor(2);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)    ==    null);    Node    value    =    callTarget.getAncestor(2);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
209	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
210	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.GETPROP);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
211	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
212	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(value.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(value.getType()  ==  Token.GETPROP);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(value.getType()  ==  Token.GETPROP);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
213	[BUG]  [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getLastChild();  Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
214	[BUG]  [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.GETPROP);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
215	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getAncestor(3);  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getAncestor(3);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getAncestor(3);	  Node    value    =    callTarget.getAncestor(2);    Node    value    =    callTarget.getAncestor(3);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
216	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  value  =  callTarget.getAncestor(3);  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  value  =  callTarget.getAncestor(3);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  value  =  callTarget.getAncestor(3);	  Node    value    =    callTarget.getAncestor(2);    Node    value    =    callTarget.getAncestor(3);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
217	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION);  Node  value  =  n.getNext();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION);  Node  value  =  n.getNext();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION);  Node  value  =  n.getNext();	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Node    value    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
218	[BUG]  [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  value  =  n.getNext();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  value  =  n.getNext();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  value  =  n.getNext();	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Node    value    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
219	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getNext();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getNext();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getNext();	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Node    value    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
220	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getNext();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getNext();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getNext();	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Node    value    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
221	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
222	[BUG]  [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
223	[BUG]  [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
224	[BUG]  [BUGGY]  Node  value  =  calltarget.getString();  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  calltarget.getString();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  calltarget.getString();	  Node    value    =    n.getString();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
225	[BUG]  [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getFirstChild()  :  n;  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getFirstChild()  :  n;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget  ==  null?  callTarget.getFirstChild()  :  n;	  Node    value    =    callTarget!=    null?    callTarget.getLastChild()    :    n;    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
226	[BUG]  [BUGGY]  Node  value  =  n!=  null?  callTarget.getLastChild()  :  n;  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n!=  null?  callTarget.getLastChild()  :  n;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n!=  null?  callTarget.getLastChild()  :  n;	  Node    value    =    callTarget!=    null?    callTarget.getLastChild()    :    n;    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
227	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
228	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
229	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
230	[BUG]  [BUGGY]  Node  value  =  callTarget.getString(3);  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getString(3);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getString(3);	  Node    value    =    callTarget.getAncestor(3);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
231	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  callTarget.getLastChild();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  callTarget.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  callTarget.getLastChild();	  Node    value    =    callTarget    ==    null?    callTarget.getLastChild()    :    callTarget.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
232	[BUG]  [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getFirstChild()  :  callTarget.getLastChild();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getFirstChild()  :  callTarget.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget  ==  null?  callTarget.getFirstChild()  :  callTarget.getLastChild();	  Node    value    =    callTarget    ==    null?    callTarget.getLastChild()    :    callTarget.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
233	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getString()  :  callTarget.getLastChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getString()  :  callTarget.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget!=  null?  callTarget.getString()  :  callTarget.getLastChild();	  Node    value    =    callTarget    ==    null?    callTarget.getLastChild()    :    callTarget.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
234	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getAncestor(3)!=  null);  [CE]  cannot  find  symbol  [FE]        IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getAncestor(3)!=  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getAncestor(3)!=  null);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(3)!=    null);    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
235	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(3);  Preconditions.checkState(callTarget.getAncestor(3)!=  null);  [CE]  cannot  find  symbol  [FE]          IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(3);  Preconditions.checkState(callTarget.getAncestor(3)!=  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAncestor(3);  Preconditions.checkState(callTarget.getAncestor(3)!=  null);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(3)!=    null);    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
236	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(1);  Preconditions.checkState(callTarget.getAncestor(3)!=  null);  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(1);  Preconditions.checkState(callTarget.getAncestor(3)!=  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAncestor(1);  Preconditions.checkState(callTarget.getAncestor(3)!=  null);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(3)!=    null);    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
237	[BUG]  [BUGGY]  Preconditions.checkState(n.getAncestor(3)!=  null);  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getAncestor(3)!=  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getAncestor(3)!=  null);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(3)!=    null);    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
238	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(3)  ==  null);  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(3)  ==  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(3)  ==  null);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(3)!=    null);    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
239	[BUG]  [BUGGY]  Node  value  =(callTarget  instanceof  String)?((  String)callTarget).getValue()  :  null;  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =(callTarget  instanceof  String)?((  String)callTarget).getValue()  :  null;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =(callTarget  instanceof  String)?((  String)callTarget).getValue()  :  null;	  Node    value    =    callTarget    instanceof    String?((    String)callTarget).getValue()    :    null;    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
240	[BUG]  [BUGGY]  Node  value  =  callTarget  instanceof  String?((  String)callTarget).getValue()  :  Integer.toString(value);  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget  instanceof  String?((  String)callTarget).getValue()  :  Integer.toString(value);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget  instanceof  String?((  String)callTarget).getValue()  :  Integer.toString(value);	  Node    value    =    callTarget    instanceof    String?((    String)callTarget).getValue()    :    null;    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
241	[BUG]  [BUGGY]  Node  value  =  this.callTarget  instanceof  String?((  String)callTarget).getValue()  :  null;  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  this.callTarget  instanceof  String?((  String)callTarget).getValue()  :  null;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  this.callTarget  instanceof  String?((  String)callTarget).getValue()  :  null;	  Node    value    =    callTarget    instanceof    String?((    String)callTarget).getValue()    :    null;    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
242	[BUG]  [BUGGY]  Node  value  =(n  instanceof  String)?((  String)callTarget).getValue()  :  null;  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =(n  instanceof  String)?((  String)callTarget).getValue()  :  null;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =(n  instanceof  String)?((  String)callTarget).getValue()  :  null;	  Node    value    =    callTarget    instanceof    String?((    String)callTarget).getValue()    :    null;    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
243	[BUG]  [BUGGY]  Node  value  =  n  instanceof  String?((  String)callTarget).getValue()  :  null;  [CE]  cannot  find  symbol  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n  instanceof  String?((  String)callTarget).getValue()  :  null;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n  instanceof  String?((  String)callTarget).getValue()  :  null;	  Node    value    =    callTarget    instanceof    String?((    String)callTarget).getValue()    :    null;    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
244	[BUG]  [BUGGY]  Node  value  =  callTarget.getNext();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getNext();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getNext();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
245	[BUG]  [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
246	[BUG]  [BUGGY]  Node  value  =  callTarget.getNext();  Preconditions.checkState(value.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getNext();  Preconditions.checkState(value.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getNext();  Preconditions.checkState(value.getType()  ==  Token.EXPR_RESULT);	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
247	[BUG]  [BUGGY]  Node  value  =  n.getNext();  Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getNext();  Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getNext();  Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
248	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  value  =  callTarget.getFirstChild();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  value  =  callTarget.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  value  =  callTarget.getFirstChild();	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.EXPR_RESULT);    Node    value    =    callTarget.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
249	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);  Node  value  =  callTarget.getFirstChild();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);  Node  value  =  callTarget.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);  Node  value  =  callTarget.getFirstChild();	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.EXPR_RESULT);    Node    value    =    callTarget.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
250	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(value.getType()  ==  Token.EXPR_RESULT);  Node  value  =  callTarget.getFirstChild();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(value.getType()  ==  Token.EXPR_RESULT);  Node  value  =  callTarget.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(value.getType()  ==  Token.EXPR_RESULT);  Node  value  =  callTarget.getFirstChild();	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.EXPR_RESULT);    Node    value    =    callTarget.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
251	[BUG]  [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  value  =  callTarget.getFirstChild();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  value  =  callTarget.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  value  =  callTarget.getFirstChild();	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.EXPR_RESULT);    Node    value    =    callTarget.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
252	[BUG]  [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getType()  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getType()  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget  ==  null?  callTarget.getType()  :  INVALID_REGULAR_EXPRESSION_FLAGS;	  Node    value    =    callTarget!=    null?    callTarget.getType()    :    INVALID_REGULAR_EXPRESSION_FLAGS;    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
253	[BUG]  [BUGGY]  Node  value  =  INVALID_REGULAR_EXPRESSION_FLAGS!=  null?  callTarget.getType()  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  INVALID_REGULAR_EXPRESSION_FLAGS!=  null?  callTarget.getType()  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  INVALID_REGULAR_EXPRESSION_FLAGS!=  null?  callTarget.getType()  :  INVALID_REGULAR_EXPRESSION_FLAGS;	  Node    value    =    callTarget!=    null?    callTarget.getType()    :    INVALID_REGULAR_EXPRESSION_FLAGS;    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
254	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  INVALID_REGULAR_EXPRESSION_FLAGS.getType()  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  INVALID_REGULAR_EXPRESSION_FLAGS.getType()  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget!=  null?  INVALID_REGULAR_EXPRESSION_FLAGS.getType()  :  INVALID_REGULAR_EXPRESSION_FLAGS;	  Node    value    =    callTarget!=    null?    callTarget.getType()    :    INVALID_REGULAR_EXPRESSION_FLAGS;    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
255	[BUG]  [BUGGY]  Node  value  =  INVALID_REGULAR_EXPRESSION_FLAGS  ==  null?  callTarget.getType()  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  INVALID_REGULAR_EXPRESSION_FLAGS  ==  null?  callTarget.getType()  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  INVALID_REGULAR_EXPRESSION_FLAGS  ==  null?  callTarget.getType()  :  INVALID_REGULAR_EXPRESSION_FLAGS;	  Node    value    =    callTarget!=    null?    callTarget.getType()    :    INVALID_REGULAR_EXPRESSION_FLAGS;    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
256	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getType()  :  INVALID_REGULAR_EXPRESSION_FLAGS  +  1;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getType()  :  INVALID_REGULAR_EXPRESSION_FLAGS  +  1;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget!=  null?  callTarget.getType()  :  INVALID_REGULAR_EXPRESSION_FLAGS  +  1;	  Node    value    =    callTarget!=    null?    callTarget.getType()    :    INVALID_REGULAR_EXPRESSION_FLAGS;    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
257	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getLastChild()!=  null);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getLastChild()!=  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getLastChild()!=  null);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getLastChild()!=    null);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
258	[BUG]  [BUGGY]  Preconditions.checkState(n.getLastChild()!=  null);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getLastChild()!=  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getLastChild()!=  null);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getLastChild()!=    null);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
259	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getLastChild()!=  null);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getLastChild()!=  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getLastChild()!=  null);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getLastChild()!=    null);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
260	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getLastChild()!=  null);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getLastChild()!=  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getLastChild()!=  null);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getLastChild()!=    null);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
261	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getLastChild()  ==  null);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getLastChild()  ==  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getLastChild()  ==  null);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getLastChild()!=    null);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
262	[BUG]  [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getLastChild()!=  null);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getLastChild()!=  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getLastChild()!=  null);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getLastChild()!=    null);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
263	[BUG]  [BUGGY]  Node  value  =  n  ==  null?  callTarget.getLastChild()  :  n;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n  ==  null?  callTarget.getLastChild()  :  n;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n  ==  null?  callTarget.getLastChild()  :  n;	  Node    value    =    callTarget    ==    null?    callTarget.getLastChild()    :    n;    	non-compiled	[CE]  not  a  statement	109	None	replace
264	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.NAME);  Node  value  =  n.getNext();  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.NAME);  Node  value  =  n.getNext();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getType()  ==  Token.NAME);  Node  value  =  n.getNext();	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    value    =    n.getNext();    	non-compiled	[CE]  not  a  statement	50	None	replace
265	[BUG]  [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  value  =  n.getNext();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  value  =  n.getNext();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  value  =  n.getNext();	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    value    =    n.getNext();    	non-compiled	[CE]  not  a  statement	50	None	replace
266	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  callTarget.getString());  Node  value  =  n.getNext();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  callTarget.getString());  Node  value  =  n.getNext();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  callTarget.getString());  Node  value  =  n.getNext();	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    value    =    n.getNext();    	non-compiled	[CE]  not  a  statement	50	None	replace
267	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString());  Node  value  =  n.getNext();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString());  Node  value  =  n.getNext();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString());  Node  value  =  n.getNext();	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    value    =    n.getNext();    	non-compiled	[CE]  not  a  statement	50	None	replace
268	[BUG]  [BUGGY]  Node  value  =  callTarget.getNext();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().removeChild(callTarget);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getNext();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().removeChild(callTarget);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getNext();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().removeChild(callTarget);	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    n.getParent().removeChild(callTarget);    	non-compiled	[CE]  not  a  statement	104	None	replace
269	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().removeChild(callTarget);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().removeChild(callTarget);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().removeChild(callTarget);	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    n.getParent().removeChild(callTarget);    	non-compiled	[CE]  not  a  statement	104	None	replace
270	[BUG]  [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().removeChild(callTarget);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().removeChild(callTarget);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().removeChild(callTarget);	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    n.getParent().removeChild(callTarget);    	non-compiled	[CE]  not  a  statement	104	None	replace
271	[BUG]  [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().removeChild(callTarget);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().removeChild(callTarget);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().removeChild(callTarget);	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    n.getParent().removeChild(callTarget);    	non-compiled	[CE]  not  a  statement	104	None	replace
272	[BUG]  [BUGGY]  Node  value  =  callTarget.getNext();  Preconditions.checkState(value.getType()  ==  Token.EXPR_RESULT);  n.getParent().removeChild(callTarget);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getNext();  Preconditions.checkState(value.getType()  ==  Token.EXPR_RESULT);  n.getParent().removeChild(callTarget);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getNext();  Preconditions.checkState(value.getType()  ==  Token.EXPR_RESULT);  n.getParent().removeChild(callTarget);	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    n.getParent().removeChild(callTarget);    	non-compiled	[CE]  not  a  statement	104	None	replace
273	[BUG]  [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(value.getType()  ==  Token.GETPROP);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(value.getType()  ==  Token.GETPROP);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getLastChild();  Preconditions.checkState(value.getType()  ==  Token.GETPROP);	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  not  a  statement	75	None	replace
274	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(0);  Node  value  =  callTarget.getAncestor(1);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(0);  Node  value  =  callTarget.getAncestor(1);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getAncestor(0);    Node  value  =  callTarget.getAncestor(1);	  	non-compiled	[CE]  not  a  statement	46	None	add
275	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(0);  Node  value  =  callTarget.getAncestor(0);  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(0);  Node  value  =  callTarget.getAncestor(0);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getAncestor(0);    Node  value  =  callTarget.getAncestor(0);	  	non-compiled	[CE]  not  a  statement	46	None	add
276	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(0);  Node  value  =  callTarget.getAncestor(2);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(0);  Node  value  =  callTarget.getAncestor(2);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getAncestor(0);    Node  value  =  callTarget.getAncestor(2);	  	non-compiled	[CE]  not  a  statement	46	None	add
277	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(0);  Preconditions.checkState(callTarget.getAncestor(1)!=  null);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(0);  Preconditions.checkState(callTarget.getAncestor(1)!=  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getAncestor(0);    Preconditions.checkState(callTarget.getAncestor(1)!=  null);	  	non-compiled	[CE]  not  a  statement	46	None	add
278	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(0);  Preconditions.checkState(callTarget.getAncestor(1)  ==  null);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(0);  Preconditions.checkState(callTarget.getAncestor(1)  ==  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getAncestor(0);    Preconditions.checkState(callTarget.getAncestor(1)  ==  null);	  	non-compiled	[CE]  not  a  statement	46	None	add
279	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(3);  Node  value  =  callTarget.getAncestor(3);  [CE]  not  a  statement  [FE]    IllegalStateException    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(3);  Node  value  =  callTarget.getAncestor(3);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getAncestor(3);    Node  value  =  callTarget.getAncestor(3);	  	non-compiled	[CE]  not  a  statement	43	None	add
280	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(3);  Preconditions.checkState(callTarget.getAncestor(3)  ==  null);  [CE]  not  a  statement  [FE]      IllegalStateException    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(3);  Preconditions.checkState(callTarget.getAncestor(3)  ==  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getAncestor(3);    Preconditions.checkState(callTarget.getAncestor(3)  ==  null);	  	non-compiled	[CE]  not  a  statement	43	None	add
281	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(3);  Node  value  =  callTarget.getAncestor(2);  [CE]  not  a  statement  [FE]        IllegalStateException    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(3);  Node  value  =  callTarget.getAncestor(2);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getAncestor(3);    Node  value  =  callTarget.getAncestor(2);	  	non-compiled	[CE]  not  a  statement	43	None	add
282	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(3);  Node  value  =  callTarget.getAncestor(4);  [CE]  not  a  statement  [FE]          IllegalStateException    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(3);  Node  value  =  callTarget.getAncestor(4);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getAncestor(3);    Node  value  =  callTarget.getAncestor(4);	  	non-compiled	[CE]  not  a  statement	43	None	add
283	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(3);  Preconditions.checkState(callTarget.getAncestor(3)  >=  null);  [CE]  not  a  statement  [FE]            IllegalStateException    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(3);  Preconditions.checkState(callTarget.getAncestor(3)  >=  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getAncestor(3);    Preconditions.checkState(callTarget.getAncestor(3)  >=  null);	  	non-compiled	[CE]  not  a  statement	43	None	add
284	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(3);  Preconditions.checkState(callTarget.getAncestor(2)  ==  null);  [CE]  not  a  statement  [FE]              IllegalStateException    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(3);  Preconditions.checkState(callTarget.getAncestor(2)  ==  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getAncestor(3);    Preconditions.checkState(callTarget.getAncestor(2)  ==  null);	  	non-compiled	[CE]  not  a  statement	43	None	add
285	[BUG]  [BUGGY]  Node  value  =  calltarget.getValue();  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  calltarget.getValue();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  calltarget.getValue();	  Node    value    =    this.callTarget.getValue();    	non-compiled	[CE]  not  a  statement	32	None	replace
286	[BUG]  [BUGGY]  Node  value  =  call.getValue();  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  call.getValue();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  call.getValue();	  Node    value    =    this.callTarget.getValue();    	non-compiled	[CE]  not  a  statement	32	None	replace
287	[BUG]  [BUGGY]  Node  value  =  null.getValue();  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  null.getValue();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  null.getValue();	  Node    value    =    this.callTarget.getValue();    	non-compiled	[CE]  not  a  statement	32	None	replace
288	[BUG]  [BUGGY]  Node  value  =  node.getValue();  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  node.getValue();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  node.getValue();	  Node    value    =    this.callTarget.getValue();    	non-compiled	[CE]  not  a  statement	32	None	replace
289	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);  Node  value  =  n.getNext();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);  Node  value  =  n.getNext();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);  Node  value  =  n.getNext();	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.GETPROP);    Node    value    =    n.getNext();    	non-compiled	[CE]  not  a  statement	53	None	replace
290	[BUG]  [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  value  =  n.getNext();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  value  =  n.getNext();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  value  =  n.getNext();	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.GETPROP);    Node    value    =    n.getNext();    	non-compiled	[CE]  not  a  statement	53	None	replace
291	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getString());  Node  value  =  n.getNext();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getString());  Node  value  =  n.getNext();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getString());  Node  value  =  n.getNext();	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.GETPROP);    Node    value    =    n.getNext();    	non-compiled	[CE]  not  a  statement	53	None	replace
292	[BUG]  [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.VAR);    	non-compiled	[CE]  not  a  statement	76	None	replace
293	[BUG]  [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(value.getType()  ==  Token.VAR);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(value.getType()  ==  Token.VAR);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getLastChild();  Preconditions.checkState(value.getType()  ==  Token.VAR);	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.VAR);    	non-compiled	[CE]  not  a  statement	76	None	replace
294	[BUG]  [BUGGY]  Node  value  =  n.getPrevious();  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getPrevious();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getPrevious();	  Node    value    =    callTarget.getPrevious();    	non-compiled	[CE]  not  a  statement	24	None	replace
295	[BUG]  [BUGGY]  Node  value  =  this.callTarget.getPrevious();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  this.callTarget.getPrevious();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  this.callTarget.getPrevious();	  Node    value    =    callTarget.getPrevious();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
296	[BUG]  [BUGGY]  Node  value  =  next.getPrevious();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  next.getPrevious();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  next.getPrevious();	  Node    value    =    callTarget.getPrevious();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
297	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getAncestor(2)  ==  null);  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getAncestor(2)  ==  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getAncestor(2)  ==  null);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)    ==    null);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
298	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(1);  Preconditions.checkState(callTarget.getAncestor(2)  ==  null);  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(1);  Preconditions.checkState(callTarget.getAncestor(2)  ==  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAncestor(1);  Preconditions.checkState(callTarget.getAncestor(2)  ==  null);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)    ==    null);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
299	[BUG]  [BUGGY]  Preconditions.checkState(n.getAncestor(2)  ==  null);  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getAncestor(2)  ==  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getAncestor(2)  ==  null);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)    ==    null);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
300	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().replaceChild(n,  callTarget);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().replaceChild(n,  callTarget);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().replaceChild(n,  callTarget);	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    n.getParent().replaceChild(n,    value);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
301	[BUG]  [BUGGY]  Node  value  =  callTarget.getNext();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().replaceChild(n,  value);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getNext();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().replaceChild(n,  value);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getNext();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().replaceChild(n,  value);	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    n.getParent().replaceChild(n,    value);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
302	[BUG]  [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().replaceChild(n,  value);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().replaceChild(n,  value);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().replaceChild(n,  value);	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    n.getParent().replaceChild(n,    value);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
303	[BUG]  [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().replaceChild(n,  value);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().replaceChild(n,  value);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().replaceChild(n,  value);	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    n.getParent().replaceChild(n,    value);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
304	[BUG]  [BUGGY]  Node  value  =  callTarget.getNext();  Preconditions.checkState(value.getType()  ==  Token.EXPR_RESULT);  n.getParent().replaceChild(n,  value);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getNext();  Preconditions.checkState(value.getType()  ==  Token.EXPR_RESULT);  n.getParent().replaceChild(n,  value);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getNext();  Preconditions.checkState(value.getType()  ==  Token.EXPR_RESULT);  n.getParent().replaceChild(n,  value);	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    n.getParent().replaceChild(n,    value);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
305	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);  n.getParent().replaceChild(n,  value);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);  n.getParent().replaceChild(n,  value);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);  n.getParent().replaceChild(n,  value);	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    n.getParent().replaceChild(n,    value);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
306	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  null;  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  null;  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  null;  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  null;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget!=    null?    callTarget.getFirstChild()    :    null;    Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  null;	  	non-compiled	[CE]  cannot  find  symbol	100	None	add
307	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  null;  Node  value  =  callTarget  ==  null?  callTarget.getFirstChild()  :  null;  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  null;  Node  value  =  callTarget  ==  null?  callTarget.getFirstChild()  :  null;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget!=    null?    callTarget.getFirstChild()    :    null;    Node  value  =  callTarget  ==  null?  callTarget.getFirstChild()  :  null;	  	non-compiled	[CE]  cannot  find  symbol	100	None	add
308	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  null;  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  null;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  null;  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  null;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget!=    null?    callTarget.getFirstChild()    :    null;    Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  null;	  	non-compiled	[CE]  cannot  find  symbol	100	None	add
309	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  null;  Node  value  =  callTarget  >>  null?  callTarget.getFirstChild()  :  null;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  null;  Node  value  =  callTarget  >>  null?  callTarget.getFirstChild()  :  null;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget!=    null?    callTarget.getFirstChild()    :    null;    Node  value  =  callTarget  >>  null?  callTarget.getFirstChild()  :  null;	  	non-compiled	[CE]  cannot  find  symbol	100	None	add
310	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  null;  Node  value  =  callTarget  >=  null?  callTarget.getFirstChild()  :  null;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  null;  Node  value  =  callTarget  >=  null?  callTarget.getFirstChild()  :  null;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget!=    null?    callTarget.getFirstChild()    :    null;    Node  value  =  callTarget  >=  null?  callTarget.getFirstChild()  :  null;	  	non-compiled	[CE]  cannot  find  symbol	100	None	add
311	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  null;  Preconditions.checkState(callTarget!=  null?  callTarget.getFirstChild()  :  null;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  null;  Preconditions.checkState(callTarget!=  null?  callTarget.getFirstChild()  :  null;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget!=    null?    callTarget.getFirstChild()    :    null;    Preconditions.checkState(callTarget!=  null?  callTarget.getFirstChild()  :  null;	  	non-compiled	[CE]  cannot  find  symbol	100	None	add
312	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  null;  Preconditions.checkState(callTarget!=  null?  callTarget.getFirstChild()  :  null);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  null;  Preconditions.checkState(callTarget!=  null?  callTarget.getFirstChild()  :  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget!=    null?    callTarget.getFirstChild()    :    null;    Preconditions.checkState(callTarget!=  null?  callTarget.getFirstChild()  :  null);	  	non-compiled	[CE]  cannot  find  symbol	100	None	add
313	[BUG]  [BUGGY]  Preconditions.checkState(n.getAncestor(2)!=  null);  Node  value  =  callTarget.getAncestor(2);  [CE]  cannot  find  symbol  [FE]        IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getAncestor(2)!=  null);  Node  value  =  callTarget.getAncestor(2);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getAncestor(2)!=  null);  Node  value  =  callTarget.getAncestor(2);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)!=    null);    Node    value    =    callTarget.getAncestor(2);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
314	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getAncestor(1)!=  null);  Node  value  =  callTarget.getAncestor(2);  [CE]  cannot  find  symbol  [FE]          IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getAncestor(1)!=  null);  Node  value  =  callTarget.getAncestor(2);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getAncestor(1)!=  null);  Node  value  =  callTarget.getAncestor(2);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)!=    null);    Node    value    =    callTarget.getAncestor(2);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
315	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getAncestor(3)!=  null);  Node  value  =  callTarget.getAncestor(2);  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getAncestor(3)!=  null);  Node  value  =  callTarget.getAncestor(2);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getAncestor(3)!=  null);  Node  value  =  callTarget.getAncestor(2);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)!=    null);    Node    value    =    callTarget.getAncestor(2);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
316	[BUG]  [BUGGY]  Preconditions.checkState(n.getAncestor()!=  null);  Node  value  =  callTarget.getAncestor(2);  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getAncestor()!=  null);  Node  value  =  callTarget.getAncestor(2);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getAncestor()!=  null);  Node  value  =  callTarget.getAncestor(2);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)!=    null);    Node    value    =    callTarget.getAncestor(2);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
317	[BUG]  [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(value.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(value.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getLastChild();  Preconditions.checkState(value.getType()  ==  Token.FUNCTION);	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
318	[BUG]  [BUGGY]  Node  value  =  callTarget.removeFirstChild();  Node  value  =  callTarget.removeFirstChild();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.removeFirstChild();  Node  value  =  callTarget.removeFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.removeFirstChild();    Node  value  =  callTarget.removeFirstChild();	  	non-compiled	[CE]  cannot  find  symbol	26	None	add
319	[BUG]  [BUGGY]  Node  value  =  callTarget.removeFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);  Node  value  =  callTarget.removeFirstChild();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.removeFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);  Node  value  =  callTarget.removeFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.removeFirstChild();    Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);  Node  value  =  callTarget.removeFirstChild();	  	non-compiled	[CE]  cannot  find  symbol	26	None	add
320	[BUG]  [BUGGY]  Node  value  =  callTarget.removeFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION)  {  Node  value  =  callTarget.removeFirstChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.removeFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION)  {  Node  value  =  callTarget.removeFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.removeFirstChild();    Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION)  {  Node  value  =  callTarget.removeFirstChild();	  	non-compiled	[CE]  cannot  find  symbol	26	None	add
321	[BUG]  [BUGGY]  Node  value  =  callTarget.removeFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.NAME);  Node  value  =  callTarget.removeFirstChild();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.removeFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.NAME);  Node  value  =  callTarget.removeFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.removeFirstChild();    Preconditions.checkState(callTarget.getType()  ==  Token.NAME);  Node  value  =  callTarget.removeFirstChild();	  	non-compiled	[CE]  cannot  find  symbol	26	None	add
322	[BUG]  [BUGGY]  Node  value  =  callTarget.removeFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);  Node  value  =  callTarget.removeFirstChild();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.removeFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);  Node  value  =  callTarget.removeFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.removeFirstChild();    Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);  Node  value  =  callTarget.removeFirstChild();	  	non-compiled	[CE]  cannot  find  symbol	26	None	add
323	[BUG]  [BUGGY]  Node  value  =  callTarget.removeFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.removeFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.removeFirstChild();    Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol	26	None	add
324	[BUG]  [BUGGY]  Node  value  =  callTarget.removeFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT  ||  callTarget.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.removeFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT  ||  callTarget.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.removeFirstChild();    Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT  ||  callTarget.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol	26	None	add
325	[BUG]  [BUGGY]  Node  value  =  callTarget.removeFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT  ||  callTarget.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.removeFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT  ||  callTarget.getType()  ==  Token.NAME);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.removeFirstChild();    Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT  ||  callTarget.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol	26	None	add
326	[BUG]  [BUGGY]  Node  value  =  callTarget.getLastChild(),  n);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getLastChild(),  n);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getLastChild(),  n);	  Node    value    =    callTarget.getAssignedValue(),    n);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
327	[BUG]  [BUGGY]  Node  value  =  callTarget.getAssignedValue(),  n  +  1);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAssignedValue(),  n  +  1);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAssignedValue(),  n  +  1);	  Node    value    =    callTarget.getAssignedValue(),    n);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
328	[BUG]  [BUGGY]  Node  value  =  callTarget.getAssignedValue(),  n,  a);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAssignedValue(),  n,  a);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAssignedValue(),  n,  a);	  Node    value    =    callTarget.getAssignedValue(),    n);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
329	[BUG]  [BUGGY]  Node  value  =  callTarget.getAssignedValue(),  n,  false);  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAssignedValue(),  n,  false);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAssignedValue(),  n,  false);	  Node    value    =    callTarget.getAssignedValue(),    n);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
330	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getFirstChild();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getFirstChild();	  Node    value    =    callTarget!=    null?    callTarget.getLastChild()    :    callTarget.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
331	[BUG]  [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getValue()  :  null;  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getValue()  :  null;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget  ==  null?  callTarget.getValue()  :  null;	  Node    value    =    callTarget!=    null?    callTarget.getValue()    :    null;    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
332	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getValue()  :  NON_OBJECT_CONSTRUCTORS;  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getValue()  :  NON_OBJECT_CONSTRUCTORS;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget!=  null?  callTarget.getValue()  :  NON_OBJECT_CONSTRUCTORS;	  Node    value    =    callTarget!=    null?    callTarget.getValue()    :    null;    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
333	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getValue()  :  NON_GLOBAL_EXPRESSION_FLAGS;  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getValue()  :  NON_GLOBAL_EXPRESSION_FLAGS;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget!=  null?  callTarget.getValue()  :  NON_GLOBAL_EXPRESSION_FLAGS;	  Node    value    =    callTarget!=    null?    callTarget.getValue()    :    null;    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
334	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getValue()  :  Integer.toString(value);  [CE]  cannot  find  symbol  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getValue()  :  Integer.toString(value);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget!=  null?  callTarget.getValue()  :  Integer.toString(value);	  Node    value    =    callTarget!=    null?    callTarget.getValue()    :    null;    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
335	[BUG]  [BUGGY]  Node  value  =  n.getLocalPart();  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getLocalPart();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getLocalPart();	  Node    value    =    callTarget.getLocalPart();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
336	[BUG]  [BUGGY]  Node  value  =  callTarget.getNodeValue();  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getNodeValue();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getNodeValue();	  Node    value    =    callTarget.getLocalPart();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
337	[BUG]  [BUGGY]  Node  value  =  callTarget.getName();  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getName();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getName();	  Node    value    =    callTarget.getLocalPart();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
338	[BUG]  [BUGGY]  Node  value  =  callTarget.getNode();  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getNode();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getNode();	  Node    value    =    callTarget.getLocalPart();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
339	[BUG]  [BUGGY]  Node  value  =  n.getFirstChild();  Node  value  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getFirstChild();  Node  value  =  n.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    n.getFirstChild();    Node  value  =  n.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
340	[BUG]  [BUGGY]  Node  value  =  n.getFirstChild();  Node  value  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getFirstChild();  Node  value  =  n.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    n.getFirstChild();    Node  value  =  n.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
341	[BUG]  [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(n.isCall());  Node  value  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(n.isCall());  Node  value  =  n.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    n.getFirstChild();    Preconditions.checkState(n.isCall());  Node  value  =  n.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
342	[BUG]  [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  value  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  value  =  n.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    n.getFirstChild();    Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  value  =  n.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
343	[BUG]  [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  value  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  value  =  n.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    n.getFirstChild();    Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  value  =  n.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
344	[BUG]  [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  value  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  value  =  n.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    n.getFirstChild();    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  value  =  n.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
345	[BUG]  [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  value  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  value  =  n.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    n.getFirstChild();    Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  value  =  n.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
346	[BUG]  [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    n.getFirstChild();    Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
347	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getAncestor(2)!=  null);  n  =  callTarget.getAncestor(2);  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getAncestor(2)!=  null);  n  =  callTarget.getAncestor(2);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getAncestor(2)!=  null);  n  =  callTarget.getAncestor(2);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)!=    null);    n    =    callTarget.getAncestor(2);    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
348	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(1);  Preconditions.checkState(callTarget.getAncestor(2)!=  null);  n  =  callTarget.getAncestor(2);  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(1);  Preconditions.checkState(callTarget.getAncestor(2)!=  null);  n  =  callTarget.getAncestor(2);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAncestor(1);  Preconditions.checkState(callTarget.getAncestor(2)!=  null);  n  =  callTarget.getAncestor(2);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)!=    null);    n    =    callTarget.getAncestor(2);    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
349	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(n.getAncestor(2)!=  null);  n  =  callTarget.getAncestor(2);  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(n.getAncestor(2)!=  null);  n  =  callTarget.getAncestor(2);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(n.getAncestor(2)!=  null);  n  =  callTarget.getAncestor(2);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)!=    null);    n    =    callTarget.getAncestor(2);    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
350	[BUG]  [BUGGY]  Preconditions.checkState(n.getAncestor(2)!=  null);  n  =  callTarget.getAncestor(2);  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getAncestor(2)!=  null);  n  =  callTarget.getAncestor(2);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getAncestor(2)!=  null);  n  =  callTarget.getAncestor(2);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)!=    null);    n    =    callTarget.getAncestor(2);    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
351	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(3);  Preconditions.checkState(callTarget.getAncestor(2)!=  null);  n  =  callTarget.getAncestor(2);  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(3);  Preconditions.checkState(callTarget.getAncestor(2)!=  null);  n  =  callTarget.getAncestor(2);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAncestor(3);  Preconditions.checkState(callTarget.getAncestor(2)!=  null);  n  =  callTarget.getAncestor(2);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)!=    null);    n    =    callTarget.getAncestor(2);    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
352	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(2)  ==  null);  n  =  callTarget.getAncestor(2);  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(2)  ==  null);  n  =  callTarget.getAncestor(2);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(2)  ==  null);  n  =  callTarget.getAncestor(2);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)!=    null);    n    =    callTarget.getAncestor(2);    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
353	[BUG]  [BUGGY]  Node  value  =  n.getLastChild();  Node  value  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getLastChild();  Node  value  =  n.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    n.getLastChild();    Node  value  =  n.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	18	None	add
354	[BUG]  [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(n.isCall());  Node  value  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(n.isCall());  Node  value  =  n.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    n.getLastChild();    Preconditions.checkState(n.isCall());  Node  value  =  n.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	18	None	add
355	[BUG]  [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  value  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  value  =  n.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    n.getLastChild();    Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  value  =  n.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	18	None	add
356	[BUG]  [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  value  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  value  =  n.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    n.getLastChild();    Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  value  =  n.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	18	None	add
357	[BUG]  [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  value  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  value  =  n.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    n.getLastChild();    Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  value  =  n.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	18	None	add
358	[BUG]  [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  value  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  value  =  n.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    n.getLastChild();    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  value  =  n.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	18	None	add
359	[BUG]  [BUGGY]  Node  value  =  n.getLastChild();  n  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getLastChild();  n  =  n.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    n.getLastChild();    n  =  n.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	18	None	add
360	[BUG]  [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  value  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  value  =  n.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    n.getLastChild();    Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  value  =  n.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	18	None	add
361	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(value.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(value.getType()  ==  Token.NAME);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(value.getType()  ==  Token.NAME);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
362	[BUG]  [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(callTarget.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(callTarget.getType()  ==  Token.NAME);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getLastChild();  Preconditions.checkState(callTarget.getType()  ==  Token.NAME);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
363	[BUG]  [BUGGY]  Node  value  =  this.n.getValue();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  this.n.getValue();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  this.n.getValue();	  Node    value    =    n.getValue();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
364	[BUG]  [BUGGY]  Node  value  =  n.getValue()  +  1;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getValue()  +  1;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getValue()  +  1;	  Node    value    =    n.getValue();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
365	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(1);  Node  value  =  callTarget.getAncestor(1);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(1);  Node  value  =  callTarget.getAncestor(1);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getAncestor(1);    Node  value  =  callTarget.getAncestor(1);	  	non-compiled	[CE]  cannot  find  symbol	41	None	add
366	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(1);  Node  value  =  callTarget.getAncestor(2);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(1);  Node  value  =  callTarget.getAncestor(2);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getAncestor(1);    Node  value  =  callTarget.getAncestor(2);	  	non-compiled	[CE]  cannot  find  symbol	41	None	add
367	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(1);  Node  value  =  callTarget.getAncestor(3);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(1);  Node  value  =  callTarget.getAncestor(3);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getAncestor(1);    Node  value  =  callTarget.getAncestor(3);	  	non-compiled	[CE]  cannot  find  symbol	41	None	add
368	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(1);  Preconditions.checkState(callTarget.getAncestor(1)!=  null);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(1);  Preconditions.checkState(callTarget.getAncestor(1)!=  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getAncestor(1);    Preconditions.checkState(callTarget.getAncestor(1)!=  null);	  	non-compiled	[CE]  cannot  find  symbol	41	None	add
369	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(1);  Preconditions.checkState(callTarget.getAncestor(1)  ==  null);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(1);  Preconditions.checkState(callTarget.getAncestor(1)  ==  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getAncestor(1);    Preconditions.checkState(callTarget.getAncestor(1)  ==  null);	  	non-compiled	[CE]  cannot  find  symbol	41	None	add
370	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(1);  Node  value  =  callTarget.getAncestor(4);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(1);  Node  value  =  callTarget.getAncestor(4);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getAncestor(1);    Node  value  =  callTarget.getAncestor(4);	  	non-compiled	[CE]  cannot  find  symbol	41	None	add
371	[BUG]  [BUGGY]  Preconditions.checkState(n.isCall());  Node  value  =  n.getNext();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.isCall());  Node  value  =  n.getNext();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.isCall());  Node  value  =  n.getNext();	  Node    value    =    n.getNext();    Preconditions.checkState(n.isCall());    Node    value    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
372	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.isCall());  Node  value  =  n.getNext();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.isCall());  Node  value  =  n.getNext();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.isCall());  Node  value  =  n.getNext();	  Node    value    =    n.getNext();    Preconditions.checkState(n.isCall());    Node    value    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
373	[BUG]  [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(n.isCall());  Node  value  =  n.getNext();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(n.isCall());  Node  value  =  n.getNext();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getFirstChild();  Preconditions.checkState(n.isCall());  Node  value  =  n.getNext();	  Node    value    =    n.getNext();    Preconditions.checkState(n.isCall());    Node    value    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
374	[BUG]  [BUGGY]  Node  value  =  callTarget.getType(),  n);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getType(),  n);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getType(),  n);	  Node    value    =    callTarget.getValue(),    n);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
375	[BUG]  [BUGGY]  Node  value  =  callTarget.getValue(),  n  +  1);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getValue(),  n  +  1);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getValue(),  n  +  1);	  Node    value    =    callTarget.getValue(),    n);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
376	[BUG]  [BUGGY]  Node  value  =  n.trim();  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.trim();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.trim();	  Node    value    =    callTarget.trim();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
377	[BUG]  [BUGGY]  Node  value  =  callTarget.restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.restrictByNotNullOrUndefined();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.restrictByNotNullOrUndefined();	  Node    value    =    callTarget.trim();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
378	[BUG]  [BUGGY]  Node  value  =  callTarget.trim()  :  null;  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.trim()  :  null;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.trim()  :  null;	  Node    value    =    callTarget.trim();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
379	[BUG]  [BUGGY]  Node  value  =  callTarget.trim(),  n;  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.trim(),  n;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.trim(),  n;	  Node    value    =    callTarget.trim();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
380	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getFirstChild()!=  null);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getFirstChild()!=  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getFirstChild()!=  null);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getFirstChild()!=    null);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
381	[BUG]  [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getFirstChild()!=  null);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getFirstChild()!=  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getFirstChild()!=  null);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getFirstChild()!=    null);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
382	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getFirstChild()!=  null);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getFirstChild()!=  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getFirstChild()!=  null);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getFirstChild()!=    null);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
383	[BUG]  [BUGGY]  Node  value  =  n.getString(),  callTarget);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getString(),  callTarget);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getString(),  callTarget);	  Node    value    =    callTarget.getString(),    n);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
384	[BUG]  [BUGGY]  Node  value  =  callTarget.getString(),  n.getLastChild());  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getString(),  n.getLastChild());  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getString(),  n.getLastChild());	  Node    value    =    callTarget.getString(),    n);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
385	[BUG]  [BUGGY]  Node  value  =  callTarget.getString(),  n.getFirstChild());  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getString(),  n.getFirstChild());  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getString(),  n.getFirstChild());	  Node    value    =    callTarget.getString(),    n);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
386	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild(),  n);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getFirstChild(),  n);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getFirstChild(),  n);	  Node    value    =    callTarget.getString(),    n);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
387	[BUG]  [BUGGY]  Node  value  =  callTarget.getString(),  n.getNext());  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getString(),  n.getNext());  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getString(),  n.getNext());	  Node    value    =    callTarget.getString(),    n);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
388	[BUG]  [BUGGY]  Node  value  =  callTarget.getString(),  n  +  1);  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getString(),  n  +  1);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getString(),  n  +  1);	  Node    value    =    callTarget.getString(),    n);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
389	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);  Node  value  =  callTarget.getFirstChild();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);  Node  value  =  callTarget.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);  Node  value  =  callTarget.getFirstChild();	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.GETPROP);    Node    value    =    callTarget.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
390	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  value  =  callTarget.getFirstChild();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  value  =  callTarget.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  value  =  callTarget.getFirstChild();	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.GETPROP);    Node    value    =    callTarget.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
391	[BUG]  [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);  Node  value  =  callTarget.getFirstChild();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);  Node  value  =  callTarget.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getLastChild();  Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);  Node  value  =  callTarget.getFirstChild();	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.GETPROP);    Node    value    =    callTarget.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
392	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);  Node  value  =  n.getNext();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);  Node  value  =  n.getNext();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);  Node  value  =  n.getNext();	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    Node    value    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
393	[BUG]  [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  value  =  n.getNext();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  value  =  n.getNext();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  value  =  n.getNext();	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    Node    value    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
394	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  value  =  callTarget.getNext();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  value  =  callTarget.getNext();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  Node  value  =  callTarget.getNext();	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    Node    value    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
395	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT);  Node  value  =  n.getNext();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT);  Node  value  =  n.getNext();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT);  Node  value  =  n.getNext();	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    Node    value    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
396	[BUG]  [BUGGY]  Node  value  =  callTarget.getParent();  Node  value  =  callTarget.getParent();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getParent();  Node  value  =  callTarget.getParent();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getParent();    Node  value  =  callTarget.getParent();	  	non-compiled	[CE]  cannot  find  symbol	22	None	add
397	[BUG]  [BUGGY]  Node  value  =  callTarget.getParent();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getParent();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getParent();    Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol	22	None	add
398	[BUG]  [BUGGY]  Node  value  =  callTarget.getParent();  Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);  Node  value  =  callTarget.getParent();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getParent();  Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);  Node  value  =  callTarget.getParent();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getParent();    Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);  Node  value  =  callTarget.getParent();	  	non-compiled	[CE]  cannot  find  symbol	22	None	add
399	[BUG]  [BUGGY]  Node  value  =  callTarget.getParent();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION)  {  Node  value  =  callTarget.getParent();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getParent();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION)  {  Node  value  =  callTarget.getParent();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getParent();    Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION)  {  Node  value  =  callTarget.getParent();	  	non-compiled	[CE]  cannot  find  symbol	22	None	add
400	[BUG]  [BUGGY]  Node  value  =  callTarget.getParent();  Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT  ||  callTarget.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getParent();  Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT  ||  callTarget.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getParent();    Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT  ||  callTarget.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol	22	None	add
401	[BUG]  [BUGGY]  Node  value  =  callTarget.getParent();  Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT  ||  callTarget.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getParent();  Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT  ||  callTarget.getType()  ==  Token.NAME);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getParent();    Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT  ||  callTarget.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol	22	None	add
402	[BUG]  [BUGGY]  Node  value  =  callTarget.getParent();  Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getParent();  Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getParent();    Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  cannot  find  symbol	22	None	add
403	[BUG]  [BUGGY]  Node  value  =  callTarget.getParent();  Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);  Node  value  =  callTarget.getParent();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getParent();  Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);  Node  value  =  callTarget.getParent();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getParent();    Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);  Node  value  =  callTarget.getParent();	  	non-compiled	[CE]  cannot  find  symbol	22	None	add
404	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getParent()!=  null);  Node  value  =  n.getNext();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getParent()!=  null);  Node  value  =  n.getNext();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getParent()!=  null);  Node  value  =  n.getNext();	  Node    value    =    n.getNext();    Preconditions.checkState(n.getParent()!=    null);    Node    value    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
405	[BUG]  [BUGGY]  Preconditions.checkState(n.getNext()!=  null);  Node  value  =  n.getNext();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getNext()!=  null);  Node  value  =  n.getNext();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getNext()!=  null);  Node  value  =  n.getNext();	  Node    value    =    n.getNext();    Preconditions.checkState(n.getParent()!=    null);    Node    value    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
406	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget!=    null?    callTarget.getLastChild()    :    callTarget.getLastChild();    Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	61	None	add
407	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget!=    null?    callTarget.getLastChild()    :    callTarget.getLastChild();    Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	61	None	add
408	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  callTarget.getLastChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  callTarget.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget!=    null?    callTarget.getLastChild()    :    callTarget.getLastChild();    Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  callTarget.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	61	None	add
409	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  Node  value  =  callTarget  >=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  Node  value  =  callTarget  >=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget!=    null?    callTarget.getLastChild()    :    callTarget.getLastChild();    Node  value  =  callTarget  >=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	61	None	add
410	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  Node  value  =  callTarget  >>  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  Node  value  =  callTarget  >>  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget!=    null?    callTarget.getLastChild()    :    callTarget.getLastChild();    Node  value  =  callTarget  >>  null?  callTarget.getLastChild()  :  callTarget.getLastChild();	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	add
411	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild());  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild());  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget!=    null?    callTarget.getLastChild()    :    callTarget.getLastChild();    Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild());	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	add
412	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  Node  value  =  callTarget  [Delete]  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  Node  value  =  callTarget  [Delete]  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget!=    null?    callTarget.getLastChild()    :    callTarget.getLastChild();    Node  value  =  callTarget  [Delete]  null?  callTarget.getLastChild()  :  callTarget.getLastChild();	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	add
413	[BUG]  [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getLastChild();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.FUNCTION    ||    callTarget.getType()    ==    Token.NAME);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
414	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.FUNCTION    ||    callTarget.getType()    ==    Token.NAME);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
415	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.FUNCTION    ||    callTarget.getType()    ==    Token.NAME);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
416	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(value.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(value.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(value.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.FUNCTION    ||    callTarget.getType()    ==    Token.NAME);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
417	[BUG]  [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.FUNCTION    ||    callTarget.getType()    ==    Token.NAME);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
418	[BUG]  [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(value.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);  [CE]  invalid  method  declaration;  return  type  required  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(value.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getLastChild();  Preconditions.checkState(value.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.FUNCTION    ||    callTarget.getType()    ==    Token.NAME);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
419	[BUG]  [BUGGY]  Node  value  =  calltarget.getAssignedValue();  [CE]  invalid  method  declaration;  return  type  required  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  calltarget.getAssignedValue();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  calltarget.getAssignedValue();	  Node    value    =    this.callTarget.getAssignedValue();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	59	None	replace
420	[BUG]  [BUGGY]  Node  value  =  call.getAssignedValue();  [CE]  invalid  method  declaration;  return  type  required  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  call.getAssignedValue();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  call.getAssignedValue();	  Node    value    =    this.callTarget.getAssignedValue();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	59	None	replace
421	[BUG]  [BUGGY]  Node  value  =  node.getAssignedValue();  [CE]  invalid  method  declaration;  return  type  required  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  node.getAssignedValue();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  node.getAssignedValue();	  Node    value    =    this.callTarget.getAssignedValue();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	59	None	replace
422	[BUG]  [BUGGY]  Node  value  =  null.getAssignedValue();  [CE]  invalid  method  declaration;  return  type  required  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  null.getAssignedValue();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  null.getAssignedValue();	  Node    value    =    this.callTarget.getAssignedValue();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	59	None	replace
423	[BUG]  [BUGGY]  Preconditions.checkState(n.getLastChild()  ==  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getLastChild()  ==  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getLastChild()  ==  null);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getLastChild()    ==    null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
424	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getLastChild()  ==  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getLastChild()  ==  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getLastChild()  ==  null);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getLastChild()    ==    null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
425	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getLastChild()  ==  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getLastChild()  ==  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getLastChild()  ==  null);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getLastChild()    ==    null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
426	[BUG]  [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getLastChild()  ==  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getLastChild()  ==  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getLastChild()  ==  null);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getLastChild()    ==    null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
427	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getNext()!=  null);  Node  value  =  n.getNext();  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getNext()!=  null);  Node  value  =  n.getNext();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getNext()!=  null);  Node  value  =  n.getNext();	  Node    value    =    n.getNext();    Preconditions.checkState(n.getNext()!=    null);    Node    value    =    n.getNext();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	102	None	replace
428	[BUG]  [BUGGY]  Node  value  =  calltarget.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  calltarget.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  calltarget.getFirstChild();	  Node    value    =    n.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
429	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getFirstChild();	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.FUNCTION);    Node    value    =    callTarget.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
430	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getFirstChild();	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.FUNCTION);    Node    value    =    callTarget.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
431	[BUG]  [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getLastChild();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getFirstChild();	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.FUNCTION);    Node    value    =    callTarget.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
432	[BUG]  [BUGGY]  Node  value  =  n.getParent();  [CE]  invalid  method  declaration;  return  type  required  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getParent();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getParent();	  Node    value    =    callTarget.getParent();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
433	[BUG]  [BUGGY]  Preconditions.checkState(n.getAncestor(2)!=  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]          IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getAncestor(2)!=  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getAncestor(2)!=  null);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)!=    null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
434	[BUG]  [BUGGY]  Node  value  =  n.getAssignedValue()  +  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getAssignedValue()  +  1;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getAssignedValue()  +  1;	  Node    value    =    n.getAssignedValue();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	57	None	replace
435	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  value  =  callTarget.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  value  =  callTarget.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  value  =  callTarget.getFirstChild();	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.NAME);    Node    value    =    callTarget.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
436	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.NAME);  Node  value  =  callTarget.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.NAME);  Node  value  =  callTarget.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getType()  ==  Token.NAME);  Node  value  =  callTarget.getFirstChild();	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.NAME);    Node    value    =    callTarget.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
437	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(value.getType()  ==  Token.NAME);  Node  value  =  callTarget.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(value.getType()  ==  Token.NAME);  Node  value  =  callTarget.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(value.getType()  ==  Token.NAME);  Node  value  =  callTarget.getFirstChild();	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.NAME);    Node    value    =    callTarget.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
438	[BUG]  [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  value  =  callTarget.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  value  =  callTarget.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  value  =  callTarget.getFirstChild();	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.NAME);    Node    value    =    callTarget.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
439	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  n;  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  n;  [CE]  invalid  method  declaration;  return  type  required  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  n;  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  n;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget!=    null?    callTarget.getFirstChild()    :    n;    Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  n;	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	106	None	add
440	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  n;  Node  value  =  callTarget  ==  null?  callTarget.getFirstChild()  :  n;  [CE]  invalid  method  declaration;  return  type  required  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  n;  Node  value  =  callTarget  ==  null?  callTarget.getFirstChild()  :  n;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget!=    null?    callTarget.getFirstChild()    :    n;    Node  value  =  callTarget  ==  null?  callTarget.getFirstChild()  :  n;	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	106	None	add
441	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  n;  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n;  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  n;  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget!=    null?    callTarget.getFirstChild()    :    n;    Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n;	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	106	None	add
442	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  n;  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  n;  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  n);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget!=    null?    callTarget.getFirstChild()    :    n;    Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  n);	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	106	None	add
443	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  n;  Node  value  =  callTarget  >=  null?  callTarget.getFirstChild()  :  n;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  n;  Node  value  =  callTarget  >=  null?  callTarget.getFirstChild()  :  n;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget!=    null?    callTarget.getFirstChild()    :    n;    Node  value  =  callTarget  >=  null?  callTarget.getFirstChild()  :  n;	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	106	None	add
444	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  n;  Node  value  =  callTarget  >>  null?  callTarget.getFirstChild()  :  n;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  n;  Node  value  =  callTarget  >>  null?  callTarget.getFirstChild()  :  n;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget!=    null?    callTarget.getFirstChild()    :    n;    Node  value  =  callTarget  >>  null?  callTarget.getFirstChild()  :  n;	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	106	None	add
445	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  n;  Node  value  =  callTarget  [Delete]  null?  callTarget.getFirstChild()  :  n;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  n;  Node  value  =  callTarget  [Delete]  null?  callTarget.getFirstChild()  :  n;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget!=    null?    callTarget.getFirstChild()    :    n;    Node  value  =  callTarget  [Delete]  null?  callTarget.getFirstChild()  :  n;	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	106	None	add
446	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().removeChild(n);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().removeChild(n);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().removeChild(n);	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    n.getParent().removeChild(n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	103	None	replace
447	[BUG]  [BUGGY]  Node  value  =  callTarget.getNext();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().removeChild(n);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getNext();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().removeChild(n);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getNext();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().removeChild(n);	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    n.getParent().removeChild(n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	103	None	replace
448	[BUG]  [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().removeChild(n);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().removeChild(n);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().removeChild(n);	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    n.getParent().removeChild(n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	103	None	replace
449	[BUG]  [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().removeChild(n);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().removeChild(n);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().removeChild(n);	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    n.getParent().removeChild(n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	103	None	replace
450	[BUG]  [BUGGY]  Node  value  =  callTarget.getNext();  Preconditions.checkState(value.getType()  ==  Token.EXPR_RESULT);  n.getParent().removeChild(n);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getNext();  Preconditions.checkState(value.getType()  ==  Token.EXPR_RESULT);  n.getParent().removeChild(n);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getNext();  Preconditions.checkState(value.getType()  ==  Token.EXPR_RESULT);  n.getParent().removeChild(n);	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    n.getParent().removeChild(n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	103	None	replace
451	[BUG]  [BUGGY]  Node  value  =  n,  callTarget.getAssignedValue();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n,  callTarget.getAssignedValue();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n,  callTarget.getAssignedValue();	  Node    value    =    callTarget,    n.getAssignedValue();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	71	None	replace
452	[BUG]  [BUGGY]  Node  value  =  callTarget,  n.getLastChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget,  n.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget,  n.getLastChild();	  Node    value    =    callTarget,    n.getAssignedValue();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	71	None	replace
453	[BUG]  [BUGGY]  Node  value  =  callTarget,  n.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget,  n.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget,  n.getFirstChild();	  Node    value    =    callTarget,    n.getAssignedValue();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	71	None	replace
454	[BUG]  [BUGGY]  Node  value  =  callTarget,  n.getAssignedValue()  +  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget,  n.getAssignedValue()  +  1;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget,  n.getAssignedValue()  +  1;	  Node    value    =    callTarget,    n.getAssignedValue();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	71	None	replace
455	[BUG]  [BUGGY]  Node  value  =  callTarget,  n.getValue();  [CE]  invalid  method  declaration;  return  type  required  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget,  n.getValue();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget,  n.getValue();	  Node    value    =    callTarget,    n.getAssignedValue();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	71	None	replace
456	[BUG]  [BUGGY]  Node  value  =  n.getNext();  Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);  n.getParent().replaceChild(n,  value);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getNext();  Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);  n.getParent().replaceChild(n,  value);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getNext();  Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);  n.getParent().replaceChild(n,  value);	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    n.getParent().replaceChild(n,    value);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	105	None	replace
457	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);  n.getParent().replaceChild(n,  callTarget);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);  n.getParent().replaceChild(n,  callTarget);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);  n.getParent().replaceChild(n,  callTarget);	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    n.getParent().replaceChild(n,    value);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	105	None	replace
458	[BUG]  [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(callTarget.getLastChild()!=  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(callTarget.getLastChild()!=  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getLastChild();  Preconditions.checkState(callTarget.getLastChild()!=  null);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getLastChild()!=    null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
459	[BUG]  [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(callTarget.getString()!=  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(callTarget.getString()!=  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getLastChild();  Preconditions.checkState(callTarget.getString()!=  null);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getLastChild()!=    null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
460	[BUG]  [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(callTarget.getFirstChild()!=  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(callTarget.getFirstChild()!=  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getLastChild();  Preconditions.checkState(callTarget.getFirstChild()!=  null);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getLastChild()!=    null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
461	[BUG]  [BUGGY]  Node  value  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().removeChild(value);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().removeChild(value);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getNext();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().removeChild(value);	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    n.getParent().removeChild(n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	103	None	replace
462	[BUG]  [BUGGY]  Node  value  =  getValue(callTarget.getValue());  [CE]  invalid  method  declaration;  return  type  required  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  getValue(callTarget.getValue());  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  getValue(callTarget.getValue());	  Node    value    =    this.callTarget.getValue();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
463	[BUG]  [BUGGY]  Node  value  =  this.callTarget.getLastChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  this.callTarget.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  this.callTarget.getLastChild();	  Node    value    =    this.callTarget.getValue();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
464	[BUG]  [BUGGY]  Node  value  =  callTarget.getNext();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().removeChild(value);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getNext();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().removeChild(value);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getNext();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().removeChild(value);	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    n.getParent().removeChild(callTarget);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	104	None	replace
465	[BUG]  [BUGGY]  Node  value  =  callTarget.removeFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);  [CE]  invalid  method  declaration;  return  type  required  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.removeFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.removeFirstChild();    Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	add
466	[BUG]  [BUGGY]  Node  value  =  callTarget.removeFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION);  [CE]  invalid  method  declaration;  return  type  required  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.removeFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.removeFirstChild();    Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	add
467	[BUG]  [BUGGY]  Node  value  =  callTarget.removeFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.NAME);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.removeFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.NAME);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.removeFirstChild();    Preconditions.checkState(callTarget.getType()  ==  Token.NAME);	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	add
468	[BUG]  [BUGGY]  Node  value  =  callTarget.removeFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.VAR);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.removeFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.VAR);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.removeFirstChild();    Preconditions.checkState(callTarget.getType()  ==  Token.VAR);	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	add
469	[BUG]  [BUGGY]  Node  value  =  callTarget.removeFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.removeFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.removeFirstChild();    Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	add
470	[BUG]  [BUGGY]  Node  value  =  callTarget.removeFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.CALL);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.removeFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.CALL);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.removeFirstChild();    Preconditions.checkState(callTarget.getType()  ==  Token.CALL);	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	add
471	[BUG]  [BUGGY]  Node  value  =  callTarget.removeFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.STRING);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.removeFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.STRING);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.removeFirstChild();    Preconditions.checkState(callTarget.getType()  ==  Token.STRING);	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	add
472	[BUG]  [BUGGY]  Node  value  =  callTarget.getAssignedValue(),  n,  NON_GLOBAL_EXPRESSION_FLAGS;  [CE]  invalid  method  declaration;  return  type  required  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAssignedValue(),  n,  NON_GLOBAL_EXPRESSION_FLAGS;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAssignedValue(),  n,  NON_GLOBAL_EXPRESSION_FLAGS;	  Node    value    =    callTarget.getAssignedValue(),    n;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
473	[BUG]  [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION);	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
474	[BUG]  [BUGGY]  Node  value  =  callTarget.getString(),  n  +  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getString(),  n  +  1;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getString(),  n  +  1;	  Node    value    =    callTarget.getString(),    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
475	[BUG]  [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.CALL);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.CALL);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.CALL);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getType()    ==    Token.CALL);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	98	None	replace
476	[BUG]  [BUGGY]  Node  value  =  name.getAssignedValue();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  name.getAssignedValue();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  name.getAssignedValue();	  Node    value    =    n.getAssignedValue();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	57	None	replace
477	[BUG]  [BUGGY]  Node  value  =  n.getAssignmentValue();  [CE]  invalid  method  declaration;  return  type  required  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getAssignmentValue();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getAssignmentValue();	  Node    value    =    n.getAssignedValue();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	57	None	replace
478	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(1)!=  null  &&  NodeUtil.isName(callTarget.getString()));  [CE]  invalid  method  declaration;  return  type  required  [FE]            IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(1)!=  null  &&  NodeUtil.isName(callTarget.getString()));  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(1)!=  null  &&  NodeUtil.isName(callTarget.getString()));	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)!=    null    &&    NodeUtil.isName(callTarget.getString()));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	92	None	replace
479	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NEW);  Node  value  =  n.getNext();  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NEW);  Node  value  =  n.getNext();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.NEW);  Node  value  =  n.getNext();	  Node    value    =    n.getNext();    Node    value    =    n.getNext();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
480	[BUG]  [BUGGY]  Node  value  =  callTarget.getValue(1);  [CE]  invalid  method  declaration;  return  type  required  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getValue(1);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getValue(1);	  Node    value    =    callTarget.getAncestor(1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
481	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getType()  :  INVALID_REGULAR_EXPRESSION_FLAGS,  REGEXP_FLAGS_RE);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getType()  :  INVALID_REGULAR_EXPRESSION_FLAGS,  REGEXP_FLAGS_RE);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget!=  null?  callTarget.getType()  :  INVALID_REGULAR_EXPRESSION_FLAGS,  REGEXP_FLAGS_RE);	  Node    value    =    callTarget!=    null?    callTarget.getType()    :    INVALID_REGULAR_EXPRESSION_FLAGS;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	63	None	replace
482	[BUG]  [BUGGY]  Preconditions.checkState(n.isCall()  &&  n.getType()  ==  Token.FUNCTION)  {  Node  value  =  callTarget.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.isCall()  &&  n.getType()  ==  Token.FUNCTION)  {  Node  value  =  callTarget.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.isCall()  &&  n.getType()  ==  Token.FUNCTION)  {  Node  value  =  callTarget.getFirstChild();	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.FUNCTION)    {    Node    value    =    callTarget.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
483	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(3);  Preconditions.checkState(callTarget.getAncestor(2)!=  null  &&  callTarget.getType()  ==  Token.FUNCTION);  [CE]  invalid  method  declaration;  return  type  required  [FE]                IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(3);  Preconditions.checkState(callTarget.getAncestor(2)!=  null  &&  callTarget.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAncestor(3);  Preconditions.checkState(callTarget.getAncestor(2)!=  null  &&  callTarget.getType()  ==  Token.FUNCTION);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)!=    null    &&    callTarget.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	94	None	replace
484	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(3);  Preconditions.checkArgument(callTarget.getAncestor(3)!=  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]    IllegalStateException    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(3);  Preconditions.checkArgument(callTarget.getAncestor(3)!=  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getAncestor(3);    Preconditions.checkArgument(callTarget.getAncestor(3)!=  null);	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	add
485	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(3);  Preconditions.checkArgument(callTarget.getAncestor(3)  ==  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]      IllegalStateException    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(3);  Preconditions.checkArgument(callTarget.getAncestor(3)  ==  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getAncestor(3);    Preconditions.checkArgument(callTarget.getAncestor(3)  ==  null);	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	add
486	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  STANDARD_OBJECT_CONSTRUCTORS.getType()  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  STANDARD_OBJECT_CONSTRUCTORS.getType()  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget!=  null?  STANDARD_OBJECT_CONSTRUCTORS.getType()  :  INVALID_REGULAR_EXPRESSION_FLAGS;	  Node    value    =    callTarget!=    null?    callTarget.getType()    :    STANDARD_OBJECT_CONSTRUCTORS;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
487	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getType()  :  STANDARD_OBJECT_CONSTRUCTORS  |  INVALID_REGULAR_EXPRESSION_FLAGS;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getType()  :  STANDARD_OBJECT_CONSTRUCTORS  |  INVALID_REGULAR_EXPRESSION_FLAGS;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget!=  null?  callTarget.getType()  :  STANDARD_OBJECT_CONSTRUCTORS  |  INVALID_REGULAR_EXPRESSION_FLAGS;	  Node    value    =    callTarget!=    null?    callTarget.getType()    :    STANDARD_OBJECT_CONSTRUCTORS;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
488	[BUG]  [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	78	None	replace
489	[BUG]  [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(value.getType()  ==  Token.GETPROP);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(value.getType()  ==  Token.GETPROP);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getLastChild();  Preconditions.checkState(value.getType()  ==  Token.GETPROP);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	78	None	replace
490	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n;  Preconditions.checkState(callTarget!=  null?  callTarget.getLastChild()  :  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n;  Preconditions.checkState(callTarget!=  null?  callTarget.getLastChild()  :  n);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget!=    null?    callTarget.getLastChild()    :    n;    Preconditions.checkState(callTarget!=  null?  callTarget.getLastChild()  :  n);	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	82	None	add
491	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n.getLastChild();  Preconditions.checkState(callTarget!=  null?  callTarget.getLastChild()  :  n.getLastChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n.getLastChild();  Preconditions.checkState(callTarget!=  null?  callTarget.getLastChild()  :  n.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget!=    null?    callTarget.getLastChild()    :    n.getLastChild();    Preconditions.checkState(callTarget!=  null?  callTarget.getLastChild()  :  n.getLastChild();	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	add
492	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n.getLastChild();  Preconditions.checkState(callTarget!=  null?  callTarget.getLastChild()  :  n.getLastChild());  [CE]  invalid  method  declaration;  return  type  required  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n.getLastChild();  Preconditions.checkState(callTarget!=  null?  callTarget.getLastChild()  :  n.getLastChild());  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget!=    null?    callTarget.getLastChild()    :    n.getLastChild();    Preconditions.checkState(callTarget!=  null?  callTarget.getLastChild()  :  n.getLastChild());	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	add
493	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n.getLastChild();  Node  name  =  callTarget!=  null?  callTarget.getLastChild()  :  n.getLastChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n.getLastChild();  Node  name  =  callTarget!=  null?  callTarget.getLastChild()  :  n.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget!=    null?    callTarget.getLastChild()    :    n.getLastChild();    Node  name  =  callTarget!=  null?  callTarget.getLastChild()  :  n.getLastChild();	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	add
494	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getAncestor(3);  [CE]  invalid  method  declaration;  return  type  required  [FE]              IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getAncestor(3);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getAncestor(3);	  Node    value    =    callTarget.getAncestor(2);    Node    value    =    callTarget.getAncestor(3);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
495	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.NAME);  Node  value  =  callTarget.getAncestor(3);  [CE]  invalid  method  declaration;  return  type  required  [FE]                IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.NAME);  Node  value  =  callTarget.getAncestor(3);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getType()  ==  Token.NAME);  Node  value  =  callTarget.getAncestor(3);	  Node    value    =    callTarget.getAncestor(2);    Node    value    =    callTarget.getAncestor(3);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
496	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);  Node  value  =  callTarget.getAncestor(3);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);  Node  value  =  callTarget.getAncestor(3);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);  Node  value  =  callTarget.getAncestor(3);	  Node    value    =    callTarget.getAncestor(2);    Node    value    =    callTarget.getAncestor(3);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
497	[BUG]  [BUGGY]  Node  value  =  callTarget.substring(1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.substring(1);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.substring(1);	  Node    value    =    callTarget.trim();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	99	None	replace
498	[BUG]  [BUGGY]  Node  value  =  callTarget.str();  [CE]  invalid  method  declaration;  return  type  required  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.str();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.str();	  Node    value    =    callTarget.trim();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	99	None	replace
499	[BUG]  [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  Node  name  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  Node  name  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget    ==    null?    callTarget.getLastChild()    :    callTarget.getLastChild();    Node  name  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild();	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	add
500	[BUG]  [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  Preconditions.checkState(callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  Preconditions.checkState(callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget    ==    null?    callTarget.getLastChild()    :    callTarget.getLastChild();    Preconditions.checkState(callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	add
501	[BUG]  [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  Preconditions.checkState(callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  Preconditions.checkState(callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget    ==    null?    callTarget.getLastChild()    :    callTarget.getLastChild();    Preconditions.checkState(callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild();	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	add
502	[BUG]  [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NEW);  Node  value  =  n.getLastChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]    junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NEW);  Node  value  =  n.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    n.getLastChild();    Preconditions.checkState(n.getType()  ==  Token.NEW);  Node  value  =  n.getLastChild();	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	add
503	[BUG]  [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getFirstChild()!=  null);  Node  value  =  n.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getFirstChild()!=  null);  Node  value  =  n.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    n.getFirstChild();    Preconditions.checkState(n.getFirstChild()!=  null);  Node  value  =  n.getFirstChild();	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	add
504	[BUG]  [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getFirstChild()  ==  null);  Node  value  =  n.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getFirstChild()  ==  null);  Node  value  =  n.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    n.getFirstChild();    Preconditions.checkState(n.getFirstChild()  ==  null);  Node  value  =  n.getFirstChild();	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	add
505	[BUG]  [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  value  =  n.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  value  =  n.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    n.getFirstChild();    Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  value  =  n.getFirstChild();	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	add
506	[BUG]  [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.BLOCK);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.BLOCK);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.BLOCK);	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	95	None	replace
507	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(2)  +  2;  [CE]  illegal  start  of  type  [FE]            IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(2)  +  2;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAncestor(2)  +  2;	  Node    value    =    callTarget.getAncestor(2)    +    1;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
508	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(2)  +  3;  [CE]  invalid  method  declaration;  return  type  required  [FE]              IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(2)  +  3;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAncestor(2)  +  3;	  Node    value    =    callTarget.getAncestor(2)    +    1;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
509	[BUG]  [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);  Node  value  =  callTarget.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);  Node  value  =  callTarget.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);  Node  value  =  callTarget.getFirstChild();	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.GETPROP);    Node    value    =    callTarget.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
510	[BUG]  [BUGGY]  Node  value  =  callTarget.getNext();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getNext();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getNext();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    callTarget.getType()    ==    Token.NAME);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
511	[BUG]  [BUGGY]  Node  value  =  callTarget.getNext();  Preconditions.checkState(value.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getNext();  Preconditions.checkState(value.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getNext();  Preconditions.checkState(value.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    callTarget.getType()    ==    Token.NAME);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
512	[BUG]  [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(callTarget.getFirstChild()  ==  null);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(callTarget.getFirstChild()  ==  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getLastChild();  Preconditions.checkState(callTarget.getFirstChild()  ==  null);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getFirstChild()    ==    null);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
513	[BUG]  [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(callTarget.getLastChild()  ==  null);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(callTarget.getLastChild()  ==  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getLastChild();  Preconditions.checkState(callTarget.getLastChild()  ==  null);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getLastChild()    ==    null);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
514	[BUG]  [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(callTarget.getString()  ==  null);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getLastChild();  Preconditions.checkState(callTarget.getString()  ==  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getLastChild();  Preconditions.checkState(callTarget.getString()  ==  null);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getLastChild()    ==    null);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
515	[BUG]  [BUGGY]  Node  value  =  null?((  String)callTarget).getValue()  :  callTarget;  [CE]  illegal  start  of  type  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  null?((  String)callTarget).getValue()  :  callTarget;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  null?((  String)callTarget).getValue()  :  callTarget;	  Node    value    =    callTarget    instanceof    String?((    String)callTarget).getValue()    :    null;    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
516	[BUG]  [BUGGY]  Node  value  =  callTarget  instanceof  String?((  String)callTarget).getString()  :  null;  [CE]  illegal  start  of  type  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget  instanceof  String?((  String)callTarget).getString()  :  null;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget  instanceof  String?((  String)callTarget).getString()  :  null;	  Node    value    =    callTarget    instanceof    String?((    String)callTarget).getValue()    :    null;    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
517	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  INVALID_REGULAR_EXPRESSION_FLAGS.getValue()  :  callTarget;  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  INVALID_REGULAR_EXPRESSION_FLAGS.getValue()  :  callTarget;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget!=  null?  INVALID_REGULAR_EXPRESSION_FLAGS.getValue()  :  callTarget;	  Node    value    =    callTarget!=    null?    callTarget.getValue()    :    INVALID_REGULAR_EXPRESSION_FLAGS;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
518	[BUG]  [BUGGY]  Node  value  =  INVALID_REGULAR_EXPRESSION_FLAGS  ==  null?  callTarget.getValue()  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  INVALID_REGULAR_EXPRESSION_FLAGS  ==  null?  callTarget.getValue()  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  INVALID_REGULAR_EXPRESSION_FLAGS  ==  null?  callTarget.getValue()  :  INVALID_REGULAR_EXPRESSION_FLAGS;	  Node    value    =    callTarget!=    null?    callTarget.getValue()    :    INVALID_REGULAR_EXPRESSION_FLAGS;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
519	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  value  =  callTarget.getFirstChild();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  value  =  callTarget.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  value  =  callTarget.getFirstChild();	  Node    value    =    callTarget.getFirstChild();    Node    value    =    callTarget.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
520	[BUG]  [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.VAR);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.VAR);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.VAR);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
521	[BUG]  [BUGGY]  Node  value  =  n!=  null?  callTarget.getLastChild()  :  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n!=  null?  callTarget.getLastChild()  :  n.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n!=  null?  callTarget.getLastChild()  :  n.getFirstChild();	  Node    value    =    callTarget!=    null?    callTarget.getLastChild()    :    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
522	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n.getFirstChild();	  Node    value    =    callTarget!=    null?    callTarget.getLastChild()    :    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
523	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  n;  Preconditions.checkState(callTarget!=  null?  callTarget.getFirstChild()  :  n);  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getFirstChild()  :  n;  Preconditions.checkState(callTarget!=  null?  callTarget.getFirstChild()  :  n);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget!=    null?    callTarget.getFirstChild()    :    n;    Preconditions.checkState(callTarget!=  null?  callTarget.getFirstChild()  :  n);	  	non-compiled	[CE]  illegal  start  of  type	106	None	add
524	[BUG]  [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.NAME);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.NAME);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
525	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  illegal  start  of  type  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  STANDARD_OBJECT_CONSTRUCTORS);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
526	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  type  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.GETPROP);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
527	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.isCall());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.isCall());  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.isCall());	  Node    value    =    n.getNext();    Preconditions.checkState(n.isCall());    Node    value    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
528	[BUG]  [BUGGY]  Preconditions.checkState(n.isCall());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.isCall());  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.isCall());	  Node    value    =    n.getNext();    Preconditions.checkState(n.isCall());    Node    value    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
529	[BUG]  [BUGGY]  Node  value  =  getValue(n.getValue());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  getValue(n.getValue());  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  getValue(n.getValue());	  Node    value    =    n.getValue();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
530	[BUG]  [BUGGY]  Node  value  =  name.getValue();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  name.getValue();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  name.getValue();	  Node    value    =    n.getValue();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
531	[BUG]  [BUGGY]  Node  value  =  callTarget  instanceof  String?(String)callTarget  :  callTarget.getType();  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget  instanceof  String?(String)callTarget  :  callTarget.getType();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget  instanceof  String?(String)callTarget  :  callTarget.getType();	  Node    value    =    callTarget    instanceof    String?(String)callTarget    :    callTarget.getValue();    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
532	[BUG]  [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getFirstChild()  :  null;  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getFirstChild()  :  null;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget  ==  null?  callTarget.getFirstChild()  :  null;	  Node    value    =    callTarget!=    null?    callTarget.getFirstChild()    :    null;    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
533	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(3)!=  null);  n  =  callTarget.getAncestor(2);  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(3)!=  null);  n  =  callTarget.getAncestor(2);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(3)!=  null);  n  =  callTarget.getAncestor(2);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)!=    null);    n    =    callTarget.getAncestor(2);    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
534	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(1)!=  null);  n  =  callTarget.getAncestor(2);  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(1)!=  null);  n  =  callTarget.getAncestor(2);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(1)!=  null);  n  =  callTarget.getAncestor(2);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)!=    null);    n    =    callTarget.getAncestor(2);    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
535	[BUG]  [BUGGY]  Node  value  =  this.callTarget.next();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  this.callTarget.next();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  this.callTarget.next();	  Node    value    =    callTarget.next();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
536	[BUG]  [BUGGY]  Node  value  =  nextTarget.next();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  nextTarget.next();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  nextTarget.next();	  Node    value    =    callTarget.next();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
537	[BUG]  [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getFirstChild();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getFirstChild();	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.FUNCTION);    Node    value    =    callTarget.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
538	[BUG]  [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(value.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getFirstChild();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(value.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getFirstChild();  Preconditions.checkState(value.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getFirstChild();	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.FUNCTION);    Node    value    =    callTarget.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
539	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  value  =  callTarget.getNext();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  value  =  callTarget.getNext();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  value  =  callTarget.getNext();	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.GETPROP);    Node    value    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
540	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(0);  Preconditions.checkState(callTarget.getAncestor(2)!=  null);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(0);  Preconditions.checkState(callTarget.getAncestor(2)!=  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getAncestor(0);    Preconditions.checkState(callTarget.getAncestor(2)!=  null);	  	non-compiled	[CE]  cannot  find  symbol	46	None	add
541	[BUG]  [BUGGY]  Node  value  =  callTarget.getValue(),  n,  REGEXP_FLAGS_EXPRESSION_FLAGS;  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getValue(),  n,  REGEXP_FLAGS_EXPRESSION_FLAGS;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getValue(),  n,  REGEXP_FLAGS_EXPRESSION_FLAGS;	  Node    value    =    callTarget.getValue(),    n;    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
542	[BUG]  [BUGGY]  Node  value  =  callTarget.getfirstChild();  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getfirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getfirstChild();	  Node    value    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
543	[BUG]  [BUGGY]  Node  value  =  callTarget.getValue(),  n  +  1;  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getValue(),  n  +  1;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getValue(),  n  +  1;	  Node    value    =    callTarget.getValue(),    n);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
544	[BUG]  [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
545	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
546	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  INVALID_REGULAR_FLAGS);  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  INVALID_REGULAR_FLAGS);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  INVALID_REGULAR_FLAGS);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
547	[BUG]  [BUGGY]  Node  value  =  CallTarget.getAssignedValue();  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  CallTarget.getAssignedValue();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  CallTarget.getAssignedValue();	  Node    value    =    this.callTarget.getAssignedValue();    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
548	[BUG]  [BUGGY]  Node  value  =  getAssignedValue();  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  getAssignedValue();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  getAssignedValue();	  Node    value    =    this.callTarget.getAssignedValue();    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
549	[BUG]  [BUGGY]  Node  value  =  n.getLastChild();  Node  value  =  callTarget.getFirstChild();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getLastChild();  Node  value  =  callTarget.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getLastChild();  Node  value  =  callTarget.getFirstChild();	  Node    value    =    callTarget.getLastChild();    Node    value    =    callTarget.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
550	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  Preconditions.checkState(callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  Preconditions.checkState(callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget!=    null?    callTarget.getLastChild()    :    callTarget.getLastChild();    Preconditions.checkState(callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	61	None	add
551	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  Node  name  =  callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  Node  name  =  callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget!=    null?    callTarget.getLastChild()    :    callTarget.getLastChild();    Node  name  =  callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	61	None	add
552	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  Preconditions.checkState(callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  Preconditions.checkState(callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild());  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget!=    null?    callTarget.getLastChild()    :    callTarget.getLastChild();    Preconditions.checkState(callTarget!=  null?  callTarget.getLastChild()  :  callTarget.getLastChild());	  	non-compiled	[CE]  cannot  find  symbol	61	None	add
553	[BUG]  [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  n;  Preconditions.checkState(callTarget!=  null?  callTarget.getLastChild()  :  n);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  n;  Preconditions.checkState(callTarget!=  null?  callTarget.getLastChild()  :  n);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget    ==    null?    callTarget.getLastChild()    :    n;    Preconditions.checkState(callTarget!=  null?  callTarget.getLastChild()  :  n);	  	non-compiled	[CE]  cannot  find  symbol	108	None	add
554	[BUG]  [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  n;  Node  value  =  callTarget  ==  null?  callTarget.getFirstChild()  :  n;  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  n;  Node  value  =  callTarget  ==  null?  callTarget.getFirstChild()  :  n;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget    ==    null?    callTarget.getLastChild()    :    n;    Node  value  =  callTarget  ==  null?  callTarget.getFirstChild()  :  n;	  	non-compiled	[CE]  cannot  find  symbol	108	None	add
555	[BUG]  [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  n;  Node  name  =  callTarget  ==  null?  callTarget.getLastChild()  :  n;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  n;  Node  name  =  callTarget  ==  null?  callTarget.getLastChild()  :  n;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget    ==    null?    callTarget.getLastChild()    :    n;    Node  name  =  callTarget  ==  null?  callTarget.getLastChild()  :  n;	  	non-compiled	[CE]  cannot  find  symbol	108	None	add
556	[BUG]  [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.FUNCTION    ||    callTarget.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
557	[BUG]  [BUGGY]  Node  value  =  callTarget.getString(),  n,  REGEXP_FLAGS_EXPRESSION_FLAGS;  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getString(),  n,  REGEXP_FLAGS_EXPRESSION_FLAGS;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getString(),  n,  REGEXP_FLAGS_EXPRESSION_FLAGS;	  Node    value    =    callTarget.getString(),    n;    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
558	[BUG]  [BUGGY]  Node  value  =  callTarget.getString(),  n,  null;  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getString(),  n,  null;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getString(),  n,  null;	  Node    value    =    callTarget.getString(),    n;    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
559	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(1)-  1;  [CE]  cannot  find  symbol  [FE]        IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(1)-  1;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAncestor(1)-  1;	  Node    value    =    callTarget.getAncestor(2)    -    1;    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
560	[BUG]  [BUGGY]  Node  value  =  callTarget.getParent();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getParent();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getParent();    Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol	22	None	add
561	[BUG]  [BUGGY]  Node  value  =  callTarget.getParent();  Preconditions.checkState(callTarget.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getParent();  Preconditions.checkState(callTarget.getType()  ==  Token.NAME);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getParent();    Preconditions.checkState(callTarget.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol	22	None	add
562	[BUG]  [BUGGY]  Node  value  =  callTarget.getParent();  Preconditions.checkState(callTarget.getType()  ==  Token.VAR);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getParent();  Preconditions.checkState(callTarget.getType()  ==  Token.VAR);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getParent();    Preconditions.checkState(callTarget.getType()  ==  Token.VAR);	  	non-compiled	[CE]  ';'  expected	22	None	add
563	[BUG]  [BUGGY]  Node  value  =  callTarget.getParent();  Preconditions.checkArgument(callTarget.getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getParent();  Preconditions.checkArgument(callTarget.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getParent();    Preconditions.checkArgument(callTarget.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  ';'  expected	22	None	add
564	[BUG]  [BUGGY]  Node  value  =  callTarget.getParent();  Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getParent();  Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getParent();    Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  ';'  expected	22	None	add
565	[BUG]  [BUGGY]  Node  value  =  callTarget.getParent();  Preconditions.checkState(callTarget.getType()  ==  Token.CALL);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getParent();  Preconditions.checkState(callTarget.getType()  ==  Token.CALL);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getParent();    Preconditions.checkState(callTarget.getType()  ==  Token.CALL);	  	non-compiled	[CE]  ';'  expected	22	None	add
566	[BUG]  [BUGGY]  Node  value  =  callTarget.getParent();  Preconditions.checkArgument(callTarget.getType()  ==  Token.NAME);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getParent();  Preconditions.checkArgument(callTarget.getType()  ==  Token.NAME);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getParent();    Preconditions.checkArgument(callTarget.getType()  ==  Token.NAME);	  	non-compiled	[CE]  ';'  expected	22	None	add
567	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getAncestor(2);  [CE]  ';'  expected  [FE]        IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getAncestor(2);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION);  Node  value  =  callTarget.getAncestor(2);	  Node    value    =    callTarget.getAncestor(2);    Node    value    =    callTarget.getAncestor(2);    	non-compiled	[CE]  ';'  expected	34	None	replace
568	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.NAME);  Node  value  =  callTarget.getAncestor(2);  [CE]  ';'  expected  [FE]          IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.NAME);  Node  value  =  callTarget.getAncestor(2);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getType()  ==  Token.NAME);  Node  value  =  callTarget.getAncestor(2);	  Node    value    =    callTarget.getAncestor(2);    Node    value    =    callTarget.getAncestor(2);    	non-compiled	[CE]  ';'  expected	34	None	replace
569	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);  Node  value  =  callTarget.getAncestor(2);  [CE]  ';'  expected  [FE]            IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);  Node  value  =  callTarget.getAncestor(2);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP);  Node  value  =  callTarget.getAncestor(2);	  Node    value    =    callTarget.getAncestor(2);    Node    value    =    callTarget.getAncestor(2);    	non-compiled	[CE]  ';'  expected	34	None	replace
570	[BUG]  [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.NAME);  Node  value  =  callTarget.getFirstChild();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.NAME);  Node  value  =  callTarget.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.NAME);  Node  value  =  callTarget.getFirstChild();	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.NAME);    Node    value    =    callTarget.getFirstChild();    	non-compiled	[CE]  ';'  expected	12	None	replace
571	[BUG]  [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(value.getType()  ==  Token.NAME);  Node  value  =  callTarget.getFirstChild();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(value.getType()  ==  Token.NAME);  Node  value  =  callTarget.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getFirstChild();  Preconditions.checkState(value.getType()  ==  Token.NAME);  Node  value  =  callTarget.getFirstChild();	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.NAME);    Node    value    =    callTarget.getFirstChild();    	non-compiled	[CE]  ';'  expected	12	None	replace
572	[BUG]  [BUGGY]  Node  value  =  parent.getPrevious();  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  parent.getPrevious();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  parent.getPrevious();	  Node    value    =    callTarget.getPrevious();    	non-compiled	[CE]  ';'  expected	24	None	replace
573	[BUG]  [BUGGY]  Node  value  =  predicate.getPrevious();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  predicate.getPrevious();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  predicate.getPrevious();	  Node    value    =    callTarget.getPrevious();    	non-compiled	[CE]  ';'  expected	24	None	replace
574	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLocalPart()  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [CE]  ';'  expected  [FE]                IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLocalPart()  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget!=  null?  callTarget.getLocalPart()  :  INVALID_REGULAR_EXPRESSION_FLAGS;	  Node    value    =    callTarget.getLocalPart();    	non-compiled	[CE]  ';'  expected	48	None	replace
575	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLocalPart()  :  STANDARD_OBJECT_CONSTRUCTORS;  [CE]  ';'  expected  [FE]                  IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLocalPart()  :  STANDARD_OBJECT_CONSTRUCTORS;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget!=  null?  callTarget.getLocalPart()  :  STANDARD_OBJECT_CONSTRUCTORS;	  Node    value    =    callTarget.getLocalPart();    	non-compiled	[CE]  ';'  expected	48	None	replace
576	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLocalPart()  :  DEFAULT_OBJECT_CONSTRUCTORS;  [CE]  ';'  expected  [FE]                    IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLocalPart()  :  DEFAULT_OBJECT_CONSTRUCTORS;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget!=  null?  callTarget.getLocalPart()  :  DEFAULT_OBJECT_CONSTRUCTORS;	  Node    value    =    callTarget.getLocalPart();    	non-compiled	[CE]  ';'  expected	48	None	replace
577	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLocalPart()  :  NON_GLOBAL_EXPRESSION_FLAGS;  [CE]  ';'  expected  [FE]                      IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLocalPart()  :  NON_GLOBAL_EXPRESSION_FLAGS;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget!=  null?  callTarget.getLocalPart()  :  NON_GLOBAL_EXPRESSION_FLAGS;	  Node    value    =    callTarget.getLocalPart();    	non-compiled	[CE]  ';'  expected	48	None	replace
578	[BUG]  [BUGGY]  Node  value  =  callTarget.getAssignedValue(),  n  +  1;  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAssignedValue(),  n  +  1;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAssignedValue(),  n  +  1;	  Node    value    =    callTarget.getAssignedValue(),    n);    	non-compiled	[CE]  ';'  expected	58	None	replace
579	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  value  =  callTarget.getNext();  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  value  =  callTarget.getNext();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  value  =  callTarget.getNext();	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    value    =    n.getNext();    	non-compiled	[CE]  ';'  expected	50	None	replace
580	[BUG]  [BUGGY]  Node  value  =  callTarget.getValue(0);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getValue(0);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getValue(0);	  Node    value    =    callTarget.getAncestor(0);    	non-compiled	[CE]  ';'  expected	47	None	replace
581	[BUG]  [BUGGY]  Node  value  =  n.getAncestor(1);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getAncestor(1);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getAncestor(1);	  Node    value    =    callTarget.getAncestor(0);    	non-compiled	[CE]  ';'  expected	47	None	replace
582	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getValue()  :  Integer.MAX_VALUE;  [CE]  ';'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getValue()  :  Integer.MAX_VALUE;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget!=  null?  callTarget.getValue()  :  Integer.MAX_VALUE;	  Node    value    =    callTarget!=    null?    callTarget.getValue()    :    null;    	non-compiled	[CE]  ';'  expected	88	None	replace
583	[BUG]  [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);  Node  value  =  callTarget.getFirstChild();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);  Node  value  =  callTarget.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.EXPR_RESULT);  Node  value  =  callTarget.getFirstChild();	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.EXPR_RESULT);    Node    value    =    callTarget.getFirstChild();    	non-compiled	[CE]  ';'  expected	11	None	replace
584	[BUG]  [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(value.getType()  ==  Token.EXPR_RESULT);  Node  value  =  callTarget.getFirstChild();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(value.getType()  ==  Token.EXPR_RESULT);  Node  value  =  callTarget.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getFirstChild();  Preconditions.checkState(value.getType()  ==  Token.EXPR_RESULT);  Node  value  =  callTarget.getFirstChild();	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.EXPR_RESULT);    Node    value    =    callTarget.getFirstChild();    	non-compiled	[CE]  ';'  expected	11	None	replace
585	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(2)/  2  +  1;  [CE]  ';'  expected  [FE]            IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(2)/  2  +  1;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAncestor(2)/  2  +  1;	  Node    value    =    callTarget.getAncestor(2)    +    1;    	non-compiled	[CE]  ';'  expected	45	None	replace
586	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getParent()  :  null;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getParent()  :  null;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget!=  null?  callTarget.getParent()  :  null;	  Node    value    =    callTarget.getParent();    	non-compiled	[CE]  ';'  expected	23	None	replace
587	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getNext()  :  null;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getNext()  :  null;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget!=  null?  callTarget.getNext()  :  null;	  Node    value    =    callTarget.getParent();    	non-compiled	[CE]  ';'  expected	23	None	replace
588	[BUG]  [BUGGY]  Node  value  =  callTarget.getString(),  n.getFirstChild();  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getString(),  n.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getString(),  n.getFirstChild();	  Node    value    =    callTarget.getString(),    n;    	non-compiled	[CE]  ';'  expected	30	None	replace
589	[BUG]  [BUGGY]  Node  value  =  callTarget.getString(),  n.removeChild(callTarget);  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getString(),  n.removeChild(callTarget);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getString(),  n.removeChild(callTarget);	  Node    value    =    callTarget.getString(),    n;    	non-compiled	[CE]  ';'  expected	30	None	replace
590	[BUG]  [BUGGY]  Node  value  =  callTarget.getString(),  n.cloneTree();  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getString(),  n.cloneTree();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getString(),  n.cloneTree();	  Node    value    =    callTarget.getString(),    n;    	non-compiled	[CE]  ';'  expected	30	None	replace
591	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  callTarget);  Node  value  =  n.getNext();  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  callTarget);  Node  value  =  n.getNext();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  callTarget);  Node  value  =  n.getNext();	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    value    =    n.getNext();    	non-compiled	[CE]  ';'  expected	50	None	replace
592	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getType()  :  Token.VAR;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getType()  :  Token.VAR;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget!=  null?  callTarget.getType()  :  Token.VAR;	  Node    value    =    callTarget!=    null?    callTarget.getFirstChild()    :    null;    	non-compiled	[CE]  ';'  expected	101	None	replace
593	[BUG]  [BUGGY]  n  =  callTarget.getAncestor(2);  [CE]  ';'  expected  [FE]              IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  n  =  callTarget.getAncestor(2);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	n  =  callTarget.getAncestor(2);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)!=    null);    n    =    callTarget.getAncestor(2);    	non-compiled	[CE]  ';'  expected	93	None	replace
594	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getAncestor(3)  ==  null);  [CE]  ';'  expected  [FE]        IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getAncestor(3)  ==  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getAncestor(3)  ==  null);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(3)!=    null);    	non-compiled	[CE]  ';'  expected	110	None	replace
595	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(4)!=  null);  [CE]  ';'  expected  [FE]          IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(4)!=  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(4)!=  null);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(3)!=    null);    	non-compiled	[CE]  ';'  expected	110	None	replace
596	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  INVALID_REGULAR_EXPRESSION_FLAGS  :  callTarget.getValue();  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  INVALID_REGULAR_EXPRESSION_FLAGS  :  callTarget.getValue();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget!=  null?  INVALID_REGULAR_EXPRESSION_FLAGS  :  callTarget.getValue();	  Node    value    =    callTarget!=    null?    callTarget.getValue()    :    INVALID_REGULAR_EXPRESSION_FLAGS;    	non-compiled	[CE]  ';'  expected	85	None	replace
597	[BUG]  [BUGGY]  Node  value  =  this.callTarget.getAncestor(2);  [CE]  ';'  expected  [FE]                  IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  this.callTarget.getAncestor(2);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  this.callTarget.getAncestor(2);	  Node    value    =    callTarget.getAncestor(2);    Node    value    =    callTarget.getAncestor(1);    	non-compiled	[CE]  ';'  expected	39	None	replace
598	[BUG]  [BUGGY]  Node  value  =  n.getAncestor(2);  [CE]  ';'  expected  [FE]                    IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getAncestor(2);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getAncestor(2);	  Node    value    =    callTarget.getAncestor(2);    Node    value    =    callTarget.getAncestor(1);    	non-compiled	[CE]  ';'  expected	39	None	replace
599	[BUG]  [BUGGY]  Node  value  =  this.node.getValue();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  this.node.getValue();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  this.node.getValue();	  Node    value    =    n.getValue();    	non-compiled	[CE]  ';'  expected	25	None	replace
600	[BUG]  [BUGGY]  Node  value  =  callTarget  instanceof  String?(String)callTarget  :  callTarget.toString();  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget  instanceof  String?(String)callTarget  :  callTarget.toString();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget  instanceof  String?(String)callTarget  :  callTarget.toString();	  Node    value    =    callTarget    instanceof    String?(String)callTarget    :    callTarget.getValue();    	non-compiled	[CE]  ';'  expected	86	None	replace
601	[BUG]  [BUGGY]  Node  value  =  callTarget  instanceof  String?(String)callTarget  :  callTarget.getParent();  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget  instanceof  String?(String)callTarget  :  callTarget.getParent();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget  instanceof  String?(String)callTarget  :  callTarget.getParent();	  Node    value    =    callTarget    instanceof    String?(String)callTarget    :    callTarget.getValue();    	non-compiled	[CE]  ';'  expected	86	None	replace
602	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.isName());  Node  value  =  n.getNext();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.isName());  Node  value  =  n.getNext();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.isName());  Node  value  =  n.getNext();	  Node    value    =    n.getNext();    Preconditions.checkState(n.isCall());    Node    value    =    n.getNext();    	non-compiled	[CE]  ';'  expected	52	None	replace
603	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION)  {  Node  value  =  callTarget.getLastChild();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION)  {  Node  value  =  callTarget.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION)  {  Node  value  =  callTarget.getLastChild();	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.FUNCTION)    {    Node    value    =    callTarget.getFirstChild();    	non-compiled	[CE]  ';'  expected	10	None	replace
604	[BUG]  [BUGGY]  Node  value  =  this.callTarget.getAncestor(3);  [CE]  ';'  expected  [FE]              IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  this.callTarget.getAncestor(3);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  this.callTarget.getAncestor(3);	  Node    value    =    callTarget.getAncestor(2);    Node    value    =    callTarget.getAncestor(3);    	non-compiled	[CE]  ';'  expected	37	None	replace
605	[BUG]  [BUGGY]  Node  value  =  n.getAncestor(3);  [CE]  ';'  expected  [FE]                IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getAncestor(3);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getAncestor(3);	  Node    value    =    callTarget.getAncestor(2);    Node    value    =    callTarget.getAncestor(3);    	non-compiled	[CE]  ';'  expected	37	None	replace
606	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(value.getType()  ==  Token.EXPR_RESULT);  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(value.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(value.getType()  ==  Token.EXPR_RESULT);	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ';'  expected	73	None	replace
607	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getFirstChild()  ==  null);	  Node    value    =    callTarget.getLastChild();    Preconditions.checkState(callTarget.getLastChild()    ==    null);    	non-compiled	[CE]  ';'  expected	4	None	replace
608	[BUG]  [BUGGY]  Node  value  =  callTarget.firstChild();  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.firstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.firstChild();	  Node    value    =    callTarget.next();    	non-compiled	[CE]  ';'  expected	84	None	replace
609	[BUG]  [BUGGY]  Node  value  =  callTarget.removeFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.BLOCK);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.removeFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.BLOCK);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.removeFirstChild();    Preconditions.checkState(callTarget.getType()  ==  Token.BLOCK);	  	non-compiled	[CE]  ';'  expected	26	None	add
610	[BUG]  [BUGGY]  Node  value  =  callTarget.removeFirstChild();  Preconditions.checkState(callTarget.hasChildren());  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.removeFirstChild();  Preconditions.checkState(callTarget.hasChildren());  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.removeFirstChild();    Preconditions.checkState(callTarget.hasChildren());	  	non-compiled	[CE]  ';'  expected	26	None	add
611	[BUG]  [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(n.getFirstChild()  ==  null);  Node  value  =  n.getLastChild();  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(n.getFirstChild()  ==  null);  Node  value  =  n.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    n.getLastChild();    Preconditions.checkState(n.getFirstChild()  ==  null);  Node  value  =  n.getLastChild();	  	non-compiled	[CE]  ';'  expected	18	None	add
612	[BUG]  [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(n.getFirstChild()!=  null);  Node  value  =  n.getLastChild();  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getLastChild();  Preconditions.checkState(n.getFirstChild()!=  null);  Node  value  =  n.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    n.getLastChild();    Preconditions.checkState(n.getFirstChild()!=  null);  Node  value  =  n.getLastChild();	  	non-compiled	[CE]  ';'  expected	18	None	add
613	[BUG]  [BUGGY]  Node  value  =  callTarget.getAssignedValue(),  n,  STANDARD_OBJECT_CONSTRUCTORS_REGEXP;  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAssignedValue(),  n,  STANDARD_OBJECT_CONSTRUCTORS_REGEXP;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAssignedValue(),  n,  STANDARD_OBJECT_CONSTRUCTORS_REGEXP;	  Node    value    =    callTarget.getAssignedValue(),    n;    	non-compiled	[CE]  ';'  expected	60	None	replace
614	[BUG]  [BUGGY]  Node  value  =  callTarget.getAssignedValue(),  n.getFirstChild();  [CE]  ';'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAssignedValue(),  n.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAssignedValue(),  n.getFirstChild();	  Node    value    =    callTarget.getAssignedValue(),    n;    	non-compiled	[CE]  ';'  expected	60	None	replace
615	[BUG]  [BUGGY]  Node  value  =  callTarget.getAssignedValue(),  n.getParent();  [CE]  ';'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAssignedValue(),  n.getParent();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAssignedValue(),  n.getParent();	  Node    value    =    callTarget.getAssignedValue(),    n;    	non-compiled	[CE]  ';'  expected	60	None	replace
616	[BUG]  [BUGGY]  Node  value  =  callTarget.getNext();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getNext();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getNext();  Preconditions.checkState(callTarget.getType()  ==  Token.FUNCTION  ||  callTarget.getType()  ==  Token.NAME);	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    callTarget.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	54	None	replace
617	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  Node  value  =  callTarget.getFirstChild();  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  Node  value  =  callTarget.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.CALL);  Node  value  =  callTarget.getFirstChild();	  Node    value    =    callTarget.getFirstChild();    Node    value    =    callTarget.getFirstChild();    	non-compiled	[CE]  ';'  expected	8	None	replace
618	[BUG]  [BUGGY]  Node  value  =  n.getNext();  Preconditions.checkState(value.getType()  ==  Token.EXPR_RESULT);  n.getParent().replaceChild(n,  value);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getNext();  Preconditions.checkState(value.getType()  ==  Token.EXPR_RESULT);  n.getParent().replaceChild(n,  value);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getNext();  Preconditions.checkState(value.getType()  ==  Token.EXPR_RESULT);  n.getParent().replaceChild(n,  value);	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    n.getParent().replaceChild(n,    value);    	non-compiled	[CE]  ';'  expected	105	None	replace
619	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  callTarget);  Node  value  =  n.getNext();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  callTarget);  Node  value  =  n.getNext();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP,  callTarget);  Node  value  =  n.getNext();	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.GETPROP);    Node    value    =    n.getNext();    	non-compiled	[CE]  ';'  expected	53	None	replace
620	[BUG]  [BUGGY]  Node  value  =  callTarget.getNext(),  n);  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getNext(),  n);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getNext(),  n);	  Node    value    =    callTarget.getString(),    n);    	non-compiled	[CE]  ';'  expected	29	None	replace
621	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount());  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount());  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount());	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	20	None	replace
622	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [CE]  not  a  statement  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	20	None	replace
623	[BUG]  [BUGGY]  Node  value  =  INVALID_REGULAR_EXPRESSION_FLAGS,  callTarget.getType()  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  INVALID_REGULAR_EXPRESSION_FLAGS,  callTarget.getType()  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  INVALID_REGULAR_EXPRESSION_FLAGS,  callTarget.getType()  :  INVALID_REGULAR_EXPRESSION_FLAGS;	  Node    value    =    callTarget!=    null?    callTarget.getType()    :    INVALID_REGULAR_EXPRESSION_FLAGS;    	non-compiled	[CE]  not  a  statement	63	None	replace
624	[BUG]  [BUGGY]  Node  value  =  INVALID_REGULAR_EXPRESSION_FLAGS  }?  callTarget.getType()  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  INVALID_REGULAR_EXPRESSION_FLAGS  }?  callTarget.getType()  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  INVALID_REGULAR_EXPRESSION_FLAGS  }?  callTarget.getType()  :  INVALID_REGULAR_EXPRESSION_FLAGS;	  Node    value    =    callTarget!=    null?    callTarget.getType()    :    INVALID_REGULAR_EXPRESSION_FLAGS;    	non-compiled	[CE]  not  a  statement	63	None	replace
625	[BUG]  [BUGGY]  Node  value  =  INVALID_REGULAR_EXPRESSION_FLAGS.getType()  :  callTarget;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  INVALID_REGULAR_EXPRESSION_FLAGS.getType()  :  callTarget;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  INVALID_REGULAR_EXPRESSION_FLAGS.getType()  :  callTarget;	  Node    value    =    callTarget!=    null?    callTarget.getType()    :    INVALID_REGULAR_EXPRESSION_FLAGS;    	non-compiled	[CE]  not  a  statement	63	None	replace
626	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  value  =  callTarget.getLastChild();  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  value  =  callTarget.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  value  =  callTarget.getLastChild();	  Node    value    =    callTarget.getFirstChild();    Node    value    =    callTarget.getLastChild();    	non-compiled	[CE]  not  a  statement	9	None	replace
627	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP,  n);  Node  value  =  callTarget.getFirstChild();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP,  n);  Node  value  =  callTarget.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP,  n);  Node  value  =  callTarget.getFirstChild();	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.GETPROP);    Node    value    =    callTarget.getFirstChild();    	non-compiled	[CE]  not  a  statement	13	None	replace
628	[BUG]  [BUGGY]  Node  value  =  callTarget  instanceof  String?((  String)callTarget).toString()  :  null;  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget  instanceof  String?((  String)callTarget).toString()  :  null;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget  instanceof  String?((  String)callTarget).toString()  :  null;	  Node    value    =    callTarget    instanceof    String?((    String)callTarget).getValue()    :    null;    	non-compiled	[CE]  not  a  statement	87	None	replace
629	[BUG]  [BUGGY]  Node  value  =  null  instanceof  String?((  String)callTarget).getValue()  :  callTarget;  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  null  instanceof  String?((  String)callTarget).getValue()  :  callTarget;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  null  instanceof  String?((  String)callTarget).getValue()  :  callTarget;	  Node    value    =    callTarget    instanceof    String?((    String)callTarget).getValue()    :    null;    	non-compiled	[CE]  not  a  statement	87	None	replace
630	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(8);  [CE]  not  a  statement  [FE]                IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(8);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAncestor(8);	  Node    value    =    callTarget.getAncestor(2);    Node    value    =    callTarget.getAncestor(4);    	non-compiled	[CE]  not  a  statement	38	None	replace
631	[BUG]  [BUGGY]  Node  value  =(n.getValue()  ==  null)?  callTarget.getValue()  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =(n.getValue()  ==  null)?  callTarget.getValue()  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =(n.getValue()  ==  null)?  callTarget.getValue()  :  INVALID_REGULAR_EXPRESSION_FLAGS;	  Node    value    =    this.callTarget.getValue();    	non-compiled	[CE]  not  a  statement	32	None	replace
632	[BUG]  [BUGGY]  Node  value  =(n.getValue()!=  null)?  callTarget.getValue()  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =(n.getValue()!=  null)?  callTarget.getValue()  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =(n.getValue()!=  null)?  callTarget.getValue()  :  INVALID_REGULAR_EXPRESSION_FLAGS;	  Node    value    =    this.callTarget.getValue();    	non-compiled	[CE]  not  a  statement	32	None	replace
633	[BUG]  [BUGGY]  Node  value  =(n.getValue()  ==  null)?  callTarget.getType()  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =(n.getValue()  ==  null)?  callTarget.getType()  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =(n.getValue()  ==  null)?  callTarget.getType()  :  INVALID_REGULAR_EXPRESSION_FLAGS;	  Node    value    =    this.callTarget.getValue();    	non-compiled	[CE]  not  a  statement	32	None	replace
634	[BUG]  [BUGGY]  Node  value  =(n.getValue()  ==  null)?  callTarget.getValue()  :  null;  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =(n.getValue()  ==  null)?  callTarget.getValue()  :  null;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =(n.getValue()  ==  null)?  callTarget.getValue()  :  null;	  Node    value    =    this.callTarget.getValue();    	non-compiled	[CE]  not  a  statement	32	None	replace
635	[BUG]  [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getFirstChild();  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getFirstChild();	  Node    value    =    callTarget!=    null?    callTarget.getLastChild()    :    callTarget.getLastChild();    	non-compiled	[CE]  not  a  statement	62	None	replace
636	[BUG]  [BUGGY]  Node  value  =  callTarget.getParent();  Preconditions.checkState(callTarget.getType()  ==  Token.BLOCK);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getParent();  Preconditions.checkState(callTarget.getType()  ==  Token.BLOCK);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getParent();    Preconditions.checkState(callTarget.getType()  ==  Token.BLOCK);	  	non-compiled	[CE]  not  a  statement	22	None	add
637	[BUG]  [BUGGY]  Node  value  =  callTarget.getParent();  Preconditions.checkArgument(callTarget.getType()  ==  Token.VAR);  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getParent();  Preconditions.checkArgument(callTarget.getType()  ==  Token.VAR);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getParent();    Preconditions.checkArgument(callTarget.getType()  ==  Token.VAR);	  	non-compiled	[CE]  not  a  statement	22	None	add
638	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getType()  :  DEFAULT_OBJECT_CONSTRUCTORS;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getType()  :  DEFAULT_OBJECT_CONSTRUCTORS;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget!=  null?  callTarget.getType()  :  DEFAULT_OBJECT_CONSTRUCTORS;	  Node    value    =    callTarget!=    null?    callTarget.getType()    :    STANDARD_OBJECT_CONSTRUCTORS;    	non-compiled	[CE]  not  a  statement	66	None	replace
639	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getType()  :  ENVALID_REGULAR_EXPRESSION_FLAGS;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getType()  :  ENVALID_REGULAR_EXPRESSION_FLAGS;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget!=  null?  callTarget.getType()  :  ENVALID_REGULAR_EXPRESSION_FLAGS;	  Node    value    =    callTarget!=    null?    callTarget.getType()    :    STANDARD_OBJECT_CONSTRUCTORS;    	non-compiled	[CE]  not  a  statement	66	None	replace
640	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getType()  :  STANDARD_OBJECT_CONSTRUCTORS,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getType()  :  STANDARD_OBJECT_CONSTRUCTORS,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget!=  null?  callTarget.getType()  :  STANDARD_OBJECT_CONSTRUCTORS,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Node    value    =    callTarget!=    null?    callTarget.getType()    :    STANDARD_OBJECT_CONSTRUCTORS;    	non-compiled	[CE]  not  a  statement	66	None	replace
641	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(0);  Node  value  =  callTarget.getAncestor(3);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(0);  Node  value  =  callTarget.getAncestor(3);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getAncestor(0);    Node  value  =  callTarget.getAncestor(3);	  	non-compiled	[CE]  not  a  statement	46	None	add
642	[BUG]  [BUGGY]  Node  value  =  callTarget.getValue(),  n.getFirstChild();  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getValue(),  n.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getValue(),  n.getFirstChild();	  Node    value    =    callTarget.getValue(),    n;    	non-compiled	[CE]  not  a  statement	33	None	replace
643	[BUG]  [BUGGY]  Node  value  =  callTarget.getValue(),  n,  STANDARD_OBJECT_CONSTRUCTORS_REGEXP;  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getValue(),  n,  STANDARD_OBJECT_CONSTRUCTORS_REGEXP;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getValue(),  n,  STANDARD_OBJECT_CONSTRUCTORS_REGEXP;	  Node    value    =    callTarget.getValue(),    n;    	non-compiled	[CE]  not  a  statement	33	None	replace
644	[BUG]  [BUGGY]  Node  value  =  callTarget.getValue(),  n.getParent();  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getValue(),  n.getParent();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getValue(),  n.getParent();	  Node    value    =    callTarget.getValue(),    n;    	non-compiled	[CE]  not  a  statement	33	None	replace
645	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(1);  Preconditions.checkArgument(callTarget.getAncestor(2)!=  null);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(1);  Preconditions.checkArgument(callTarget.getAncestor(2)!=  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getAncestor(1);    Preconditions.checkArgument(callTarget.getAncestor(2)!=  null);	  	non-compiled	[CE]  not  a  statement	41	None	add
646	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(1);  Preconditions.checkArgument(callTarget.getAncestor(2)  ==  null);  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(1);  Preconditions.checkArgument(callTarget.getAncestor(2)  ==  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget.getAncestor(1);    Preconditions.checkArgument(callTarget.getAncestor(2)  ==  null);	  	non-compiled	[CE]  not  a  statement	41	None	add
647	[BUG]  [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  n;  Node  value  =  callTarget  ==  null?  CallTarget.getLastChild()  :  n;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  n;  Node  value  =  callTarget  ==  null?  CallTarget.getLastChild()  :  n;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget    ==    null?    callTarget.getLastChild()    :    n;    Node  value  =  callTarget  ==  null?  CallTarget.getLastChild()  :  n;	  	non-compiled	[CE]  not  a  statement	108	None	add
648	[BUG]  [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Node  value  =  n.getFirstChild();  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Node  value  =  n.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    n.getFirstChild();    Preconditions.checkState(n.getType()  ==  Token.BLOCK);  Node  value  =  n.getFirstChild();	  	non-compiled	[CE]  not  a  statement	16	None	add
649	[BUG]  [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.CALL);  Node  value  =  n.getFirstChild();  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.CALL);  Node  value  =  n.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    n.getFirstChild();    Preconditions.checkState(n.getType()  ==  Token.CALL);  Node  value  =  n.getFirstChild();	  	non-compiled	[CE]  not  a  statement	16	None	add
650	[BUG]  [BUGGY]  Node  value  =  nextNode(callTarget.getPrevious());  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  nextNode(callTarget.getPrevious());  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  nextNode(callTarget.getPrevious());	  Node    value    =    callTarget.getPrevious();    	non-compiled	[CE]  not  a  statement	24	None	replace
651	[BUG]  [BUGGY]  Node  value  =  nextNode(callTarget,  n.getPrevious());  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  nextNode(callTarget,  n.getPrevious());  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  nextNode(callTarget,  n.getPrevious());	  Node    value    =    callTarget.getPrevious();    	non-compiled	[CE]  not  a  statement	24	None	replace
652	[BUG]  [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().removeChild(value);  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().removeChild(value);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  n.getParent().removeChild(value);	  Node    value    =    n.getNext();    Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    n.getParent().removeChild(n);    	non-compiled	[CE]  not  a  statement	103	None	replace
653	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP,  value);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP,  value);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getType()  ==  Token.GETPROP,  value);	  Node    value    =    callTarget.getFirstChild();    Preconditions.checkState(callTarget.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  not  a  statement	75	None	replace
654	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(n.getAncestor(2)!=  null);  [CE]  not  a  statement  [FE]                    IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(n.getAncestor(2)!=  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(n.getAncestor(2)!=  null);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)    >=    null);    	non-compiled	[CE]  not  a  statement	40	None	replace
655	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(2)/  2  -  1;  [CE]  not  a  statement  [FE]        IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(2)/  2  -  1;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAncestor(2)/  2  -  1;	  Node    value    =    callTarget.getAncestor(2)    -    1;    	non-compiled	[CE]  not  a  statement	89	None	replace
656	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(parent.getAncestor(2)!=  null  &&  NodeUtil.isName(callTarget.getString()));  [CE]  not  a  statement  [FE]            IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(parent.getAncestor(2)!=  null  &&  NodeUtil.isName(callTarget.getString()));  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(parent.getAncestor(2)!=  null  &&  NodeUtil.isName(callTarget.getString()));	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)!=    null    &&    NodeUtil.isName(callTarget.getString()));    	non-compiled	[CE]  not  a  statement	92	None	replace
657	[BUG]  [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(2)  ==  null  &&  NodeUtil.isName(callTarget.getString()));  [CE]  not  a  statement  [FE]              IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(2)  ==  null  &&  NodeUtil.isName(callTarget.getString()));  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAncestor(2);  Preconditions.checkState(callTarget.getAncestor(2)  ==  null  &&  NodeUtil.isName(callTarget.getString()));	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)!=    null    &&    NodeUtil.isName(callTarget.getString()));    	non-compiled	[CE]  not  a  statement	92	None	replace
658	[BUG]  [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getAncestor(2)!=  null  &&  callTarget.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]                IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getAncestor(2)!=  null  &&  callTarget.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getFirstChild();  Preconditions.checkState(callTarget.getAncestor(2)!=  null  &&  callTarget.getType()  ==  Token.FUNCTION);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)!=    null    &&    callTarget.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	94	None	replace
659	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getAncestor(2)  ==  null  &&  callTarget.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]                  IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getAncestor(2)  ==  null  &&  callTarget.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getAncestor(2)  ==  null  &&  callTarget.getType()  ==  Token.FUNCTION);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)!=    null    &&    callTarget.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	94	None	replace
660	[BUG]  [BUGGY]  Preconditions.checkState(callTarget.getAncestor(3)!=  null  &&  callTarget.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]                    IllegalStateException      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(callTarget.getAncestor(3)!=  null  &&  callTarget.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(callTarget.getAncestor(3)!=  null  &&  callTarget.getType()  ==  Token.FUNCTION);	  Node    value    =    callTarget.getAncestor(2);    Preconditions.checkState(callTarget.getAncestor(2)!=    null    &&    callTarget.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	94	None	replace
661	[BUG]  [BUGGY]  Node  value  =  n  ==  null?  callTarget.getFirstChild()  :  n;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  n  ==  null?  callTarget.getFirstChild()  :  n;  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  n  ==  null?  callTarget.getFirstChild()  :  n;	  Node    value    =    callTarget    ==    null?    callTarget.getLastChild()    :    n;    	non-compiled	[CE]  not  a  statement	109	None	replace
662	[BUG]  [BUGGY]  Node  value  =  callTarget.getAssignedValue(),  n,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.getAssignedValue(),  n,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.getAssignedValue(),  n,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Node    value    =    callTarget.getAssignedValue(),    n);    	non-compiled	[CE]  not  a  statement	58	None	replace
663	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  not  a  statement  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	21	None	replace
664	[BUG]  [BUGGY]  Node  value  =  CallTarget.getFirstChild();  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  CallTarget.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  CallTarget.getFirstChild();	  Node    value    =    n.getLastChild();    	non-compiled	[CE]  not  a  statement	19	None	replace
665	[BUG]  [BUGGY]  Node  value  =  node.getFirstChild();  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  node.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  node.getFirstChild();	  Node    value    =    n.getLastChild();    	non-compiled	[CE]  not  a  statement	19	None	replace
666	[BUG]  [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  n.getFirstChild();  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  n.getFirstChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  n.getFirstChild();	  Node    value    =    callTarget!=    null?    callTarget.getLastChild()    :    n.getLastChild();    	non-compiled	[CE]  not  a  statement	65	None	replace
667	[BUG]  [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  n.getLastChild();  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  n.getLastChild();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  n.getLastChild();	  Node    value    =    callTarget!=    null?    callTarget.getLastChild()    :    n.getLastChild();    	non-compiled	[CE]  not  a  statement	65	None	replace
668	[BUG]  [BUGGY]  Node  value  =  callTarget.trim(),  n);  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget.trim(),  n);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  callTarget.trim(),  n);	  Node    value    =    callTarget.trim();    	non-compiled	[CE]  not  a  statement	99	None	replace
669	[BUG]  [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild()  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild()  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget    ==    null?    callTarget.getLastChild()    :    callTarget.getLastChild();    Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild()	  	non-compiled	[CE]  not  a  statement	80	None	add
670	[BUG]  [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  Preconditions.checkState(callTarget!=  null?  callTarget.getFirstChild()  :  callTarget.getLastChild());  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget  ==  null?  callTarget.getLastChild()  :  callTarget.getLastChild();  Preconditions.checkState(callTarget!=  null?  callTarget.getFirstChild()  :  callTarget.getLastChild());  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget    ==    null?    callTarget.getLastChild()    :    callTarget.getLastChild();    Preconditions.checkState(callTarget!=  null?  callTarget.getFirstChild()  :  callTarget.getLastChild());	  	non-compiled	[CE]  not  a  statement	80	None	add
671	[BUG]  [BUGGY]  Node  value  =  type.getAssignedValue();  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  type.getAssignedValue();  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node  value  =  type.getAssignedValue();	  Node    value    =    this.callTarget.getAssignedValue();    	non-compiled	[CE]  not  a  statement	59	None	replace
672	[BUG]  [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n.getLastChild();  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n.getLastChild());  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n.getLastChild();  Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n.getLastChild());  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Node    value    =    callTarget!=    null?    callTarget.getLastChild()    :    n.getLastChild();    Node  value  =  callTarget!=  null?  callTarget.getLastChild()  :  n.getLastChild());	  	non-compiled	[CE]  not  a  statement	64	None	add
673	[BUG]  [BUGGY]  Preconditions.checkState(n.getNext()!=  null);  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      Preconditions.checkState(n.isCall());  Node  callTarget  =  n.getFirstChild();  if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {            [BUGGY]  Preconditions.checkState(n.getNext()!=  null);  [BUGGY]      if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	219	219	1	replace	Preconditions.checkState(n.getNext()!=  null);	  Node    value    =    n.getNext();    Preconditions.checkState(n.getNext()!=    null);    Node    value    =    n.getNext();    	non-compiled	[CE]  not  a  statement	102	None	replace
