bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Preconditions.checkState(addition.getType()  ==  Token.FUNCTION);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(addition.getType()  ==  Token.FUNCTION);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(addition.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(value.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	30	None	replace
2	[BUG]  [BUGGY]  Preconditions.checkState(value.getType()!=  Token.FUNCTION);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(value.getType()!=  Token.FUNCTION);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(value.getType()!=  Token.FUNCTION);	  Preconditions.checkState(value.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	30	None	replace
3	[BUG]  [BUGGY]  Preconditions.checkState(value.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(value.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(value.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(value.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	30	None	replace
4	[BUG]  [BUGGY]  Reporter.error( "Failed  to  add  a  FoldArrayActionCall. ");  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Reporter.error( "Failed  to  add  a  FoldArrayActionCall. ");  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Reporter.error( "Failed  to  add  a  FoldArrayActionCall. ");	  reportError(   "Failed    to    add    a    FoldArrayActionCall.   ");    	non-compiled	[CE]  ')'  expected	46	None	replace
5	[BUG]  [BUGGY]  reportError( "Failed  to  add  a  FoldArrayActionCall.  Expected: ");  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError( "Failed  to  add  a  FoldArrayActionCall.  Expected: ");  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Failed  to  add  a  FoldArrayActionCall.  Expected: ");	  reportError(   "Failed    to    add    a    FoldArrayActionCall.   ");    	non-compiled	[CE]  ')'  expected	46	None	replace
6	[BUG]  [BUGGY]  reportError( "Failed  to  add  a  FoldArrayActionCall.  Expected: "  +  n.getString());  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError( "Failed  to  add  a  FoldArrayActionCall.  Expected: "  +  n.getString());  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Failed  to  add  a  FoldArrayActionCall.  Expected: "  +  n.getString());	  reportError(   "Failed    to    add    a    FoldArrayActionCall.   ");    	non-compiled	[CE]  ')'  expected	46	None	replace
7	[BUG]  [BUGGY]  reportError( "Failed  to  add  a  FoldArrayActionCall.   "  +  addition);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError( "Failed  to  add  a  FoldArrayActionCall.   "  +  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Failed  to  add  a  FoldArrayActionCall.   "  +  addition);	  reportError(   "Failed    to    add    a    FoldArrayActionCall.   ");    	non-compiled	[CE]  ')'  expected	46	None	replace
8	[BUG]  [BUGGY]  reportError( "Failed  to  add  a  FoldArrayActionCall.  Expected: "  +  addition);  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError( "Failed  to  add  a  FoldArrayActionCall.  Expected: "  +  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Failed  to  add  a  FoldArrayActionCall.  Expected: "  +  addition);	  reportError(   "Failed    to    add    a    FoldArrayActionCall.   ");    	non-compiled	[CE]  ')'  expected	46	None	replace
9	[BUG]  [BUGGY]  Node  addition  =  value.getNext().removeChild(n);  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  value.getNext().removeChild(n);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  value.getNext().removeChild(n);	  Node    addition    =    n.getNext().removeChild(value);    	non-compiled	[CE]  ')'  expected	40	None	replace
10	[BUG]  [BUGGY]  Node  addition  =  n.getNext().replaceChild(n,  addition);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  n.getNext().replaceChild(n,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  n.getNext().replaceChild(n,  addition);	  Node    addition    =    n.getNext().removeChild(value);    	non-compiled	[CE]  ')'  expected	40	None	replace
11	[BUG]  [BUGGY]  Node  addition  =  n.getNext().removeChild(a);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  n.getNext().removeChild(a);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  n.getNext().removeChild(a);	  Node    addition    =    n.getNext().removeChild(value);    	non-compiled	[CE]  ')'  expected	40	None	replace
12	[BUG]  [BUGGY]  Node  addition  =  n.getFirstChild().removeChild(value);  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  n.getFirstChild().removeChild(value);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  n.getFirstChild().removeChild(value);	  Node    addition    =    n.getNext().removeChild(value);    	non-compiled	[CE]  ')'  expected	40	None	replace
13	[BUG]  [BUGGY]  Node  addition  =  n.getNext().removeChild(addition);  [CE]  ')'  expected  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  n.getNext().removeChild(addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  n.getNext().removeChild(addition);	  Node    addition    =    n.getNext().removeChild(value);    	non-compiled	[CE]  ')'  expected	40	None	replace
14	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  &&  addition.getType()  ==  Token.NAME);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  &&  addition.getType()  ==  Token.NAME);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(a.getType()  ==  Token.FUNCTION  &&  addition.getType()  ==  Token.NAME);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION    ||    addition.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	15	None	replace
15	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()!=  Token.NAME);  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()!=  Token.NAME);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()!=  Token.NAME);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION    ||    addition.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	15	None	replace
16	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()!=  Token.FUNCTION  ||  addition.getType()  ==  Token.NAME);  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(a.getType()!=  Token.FUNCTION  ||  addition.getType()  ==  Token.NAME);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(a.getType()!=  Token.FUNCTION  ||  addition.getType()  ==  Token.NAME);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION    ||    addition.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	15	None	replace
17	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.NAME  ||  addition.getType()  ==  Token.FUNCTION);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.NAME  ||  addition.getType()  ==  Token.FUNCTION);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(a.getType()  ==  Token.NAME  ||  addition.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION    ||    addition.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	15	None	replace
18	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.NAME,  n);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.NAME,  n);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.NAME,  n);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION    ||    addition.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	15	None	replace
19	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION    ||    addition.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	15	None	replace
20	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.EXPR_RESULT,  addition);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.EXPR_RESULT,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(a.getType()  ==  Token.EXPR_RESULT,  addition);	  Preconditions.checkState(a.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	31	None	replace
21	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()!=  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(a.getType()!=  Token.EXPR_RESULT);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(a.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(a.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	31	None	replace
22	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(a.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	31	None	replace
23	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.EXPR_RESULT  ||  addition.getType()  ==  Token.FUNCTION);  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.EXPR_RESULT  ||  addition.getType()  ==  Token.FUNCTION);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(a.getType()  ==  Token.EXPR_RESULT  ||  addition.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(a.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	31	None	replace
24	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.EXPR_RESULT  ||  addition.getType()  ==  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.EXPR_RESULT  ||  addition.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(a.getType()  ==  Token.EXPR_RESULT  ||  addition.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(a.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	31	None	replace
25	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.EXPR_RESULT  ||  addition.getType()  ==  Token.NAME);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.EXPR_RESULT  ||  addition.getType()  ==  Token.NAME);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(a.getType()  ==  Token.EXPR_RESULT  ||  addition.getType()  ==  Token.NAME);	  Preconditions.checkState(a.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	31	None	replace
26	[BUG]  [BUGGY]  if(addition!=  null  ||  addition.getType()  ==  Token.NAME)  {  reportCodeChange();  }  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  if(addition!=  null  ||  addition.getType()  ==  Token.NAME)  {  reportCodeChange();  }  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	if(addition!=  null  ||  addition.getType()  ==  Token.NAME)  {  reportCodeChange();  }	  if(addition!=    null    &&    addition.getType()    ==    Token.NAME)    {    reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	50	None	replace
27	[BUG]  [BUGGY]  parent.replaceChild(n,  addition  -  1);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  parent.replaceChild(n,  addition  -  1);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	parent.replaceChild(n,  addition  -  1);	  parent.replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	23	None	replace
28	[BUG]  [BUGGY]  parents.replaceChild(n,  addition);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  parents.replaceChild(n,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	parents.replaceChild(n,  addition);	  parent.replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	23	None	replace
29	[BUG]  [BUGGY]  parent.replaceChild(n,  add);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  parent.replaceChild(n,  add);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	parent.replaceChild(n,  add);	  parent.replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	23	None	replace
30	[BUG]  [BUGGY]  n.getNext().replaceChild(callTarget,  addition);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  n.getNext().replaceChild(callTarget,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.getNext().replaceChild(callTarget,  addition);	  n.getNext().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	4	None	replace
31	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").src(value),  callTarget.detachFromParent());  n.getParent().replaceChild(n,  addition);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").src(value),  callTarget.detachFromParent());  n.getParent().replaceChild(n,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( "   ").src(value),  callTarget.detachFromParent());  n.getParent().replaceChild(n,  addition);	  Node    addition    =    IR.add(IR.string(   "       ").src(callTarget),    addition.detachFromParent());    n.getParent().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	57	None	replace
32	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "n ").src(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  IR.add(IR.string( "n ").src(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( "n ").src(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);	  Node    addition    =    IR.add(IR.string(   "       ").src(callTarget),    addition.detachFromParent());    n.getParent().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	57	None	replace
33	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).src(callTarget),  callTarget.detachFromParent());  n.getParent().replaceChild(n,  addition);  [CE]  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).src(callTarget),  callTarget.detachFromParent());  n.getParent().replaceChild(n,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( "* ")).src(callTarget),  callTarget.detachFromParent());  n.getParent().replaceChild(n,  addition);	  Node    addition    =    IR.add(IR.string(   "       ").src(callTarget),    addition.detachFromParent());    n.getParent().replaceChild(n,    addition);    	non-compiled	[CE]  	57	None	replace
34	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").src(value),  callTarget.detachFromParent());  [CE]  ')'  expected  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").src(value),  callTarget.detachFromParent());  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( "   ").src(value),  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "       ").src(callTarget),    addition.detachFromParent());    n.getParent().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	57	None	replace
35	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Answer ")).src(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  [CE]  [FE]                                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  IR.add(IR.string( "Answer ")).src(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( "Answer ")).src(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);	  Node    addition    =    IR.add(IR.string(   "       ").src(callTarget),    addition.detachFromParent());    n.getParent().replaceChild(n,    addition);    	non-compiled	[CE]  	57	None	replace
36	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").src(value),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").src(value),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( "   ").src(value),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);	  Node    addition    =    IR.add(IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    n.getParent().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	54	None	replace
37	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "n ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  IR.add(IR.string( "n ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( "n ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);	  Node    addition    =    IR.add(IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    n.getParent().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	54	None	replace
38	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").srcref(value),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").srcref(value),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( "   ").srcref(value),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);	  Node    addition    =    IR.add(IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    n.getParent().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	54	None	replace
39	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").srcref(value),  callTarget.detachFromParent());  n.getParent().replaceChild(n,  addition);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").srcref(value),  callTarget.detachFromParent());  n.getParent().replaceChild(n,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( "   ").srcref(value),  callTarget.detachFromParent());  n.getParent().replaceChild(n,  addition);	  Node    addition    =    IR.add(IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    n.getParent().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	54	None	replace
40	[BUG]  [BUGGY]  n.getParent().removeChild(addr);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  n.getParent().removeChild(addr);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.getParent().removeChild(addr);	  n.removeChild(addr);    	non-compiled	[CE]  ')'  expected	10	None	replace
41	[BUG]  [BUGGY]  if(addition!=  null  ||  addition.getType()  ==  Token.VAR)  {  reportCodeChange();  }  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  if(addition!=  null  ||  addition.getType()  ==  Token.VAR)  {  reportCodeChange();  }  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	if(addition!=  null  ||  addition.getType()  ==  Token.VAR)  {  reportCodeChange();  }	  if(addition!=    null    &&    addition.getType()    ==    Token.VAR)    {    reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	51	None	replace
42	[BUG]  [BUGGY]  n.getName().replaceChild(n,  addition);  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  n.getName().replaceChild(n,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.getName().replaceChild(n,  addition);	  n.getName().removeChild(value);    	non-compiled	[CE]  ')'  expected	32	None	replace
43	[BUG]  [BUGGY]  n.getName().addChildToFront(value);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  n.getName().addChildToFront(value);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.getName().addChildToFront(value);	  n.getName().removeChild(value);    	non-compiled	[CE]  ')'  expected	32	None	replace
44	[BUG]  [BUGGY]  n.getName().replaceChild(callTarget,  addition);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  n.getName().replaceChild(callTarget,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.getName().replaceChild(callTarget,  addition);	  n.getName().removeChild(value);    	non-compiled	[CE]  ')'  expected	32	None	replace
45	[BUG]  [BUGGY]  if(addition!=  null  ||  addition.hasChildren())  {  reportCodeChange();  }  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  if(addition!=  null  ||  addition.hasChildren())  {  reportCodeChange();  }  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	if(addition!=  null  ||  addition.hasChildren())  {  reportCodeChange();  }	  if(addition!=    null    &&    addition.hasChildren())    {    reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	49	None	replace
46	[BUG]  [BUGGY]  if(addition!=  null  ||  addition.getType()  ==  Token.FUNCTION)  {  reportCodeChange();  }  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  if(addition!=  null  ||  addition.getType()  ==  Token.FUNCTION)  {  reportCodeChange();  }  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	if(addition!=  null  ||  addition.getType()  ==  Token.FUNCTION)  {  reportCodeChange();  }	  if(addition!=    null    &&    addition.getType()    ==    Token.FUNCTION)    {    reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	47	None	replace
47	[BUG]  [BUGGY]  n.addChildToBack(addition);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  n.addChildToBack(addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.addChildToBack(addition);	  n.addChildToFront(addition);    	non-compiled	[CE]  ')'  expected	25	None	replace
48	[BUG]  [BUGGY]  n.addChildToFront(new  FoldArrayAction(value,  addition));  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  n.addChildToFront(new  FoldArrayAction(value,  addition));  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.addChildToFront(new  FoldArrayAction(value,  addition));	  n.addChildToFront(addition);    	non-compiled	[CE]  ')'  expected	25	None	replace
49	[BUG]  [BUGGY]  reportError( "Failed  to  add  n: "  +  value);  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError( "Failed  to  add  n: "  +  value);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Failed  to  add  n: "  +  value);	  reportError(   "Failed    to    add    n:   "    +    addition);    	non-compiled	[CE]  ')'  expected	38	None	replace
50	[BUG]  [BUGGY]  Reporter.error( "Failed  to  add  n: "  +  addition);  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Reporter.error( "Failed  to  add  n: "  +  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Reporter.error( "Failed  to  add  n: "  +  addition);	  reportError(   "Failed    to    add    n:   "    +    addition);    	non-compiled	[CE]  ')'  expected	38	None	replace
51	[BUG]  [BUGGY]  reportError( "Failed  to  add  value: "  +  addition);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError( "Failed  to  add  value: "  +  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Failed  to  add  value: "  +  addition);	  reportError(   "Failed    to    add    n:   "    +    addition);    	non-compiled	[CE]  ')'  expected	38	None	replace
52	[BUG]  [BUGGY]  reportError( "Failed  to  add  n: "  +  addition,  value);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError( "Failed  to  add  n: "  +  addition,  value);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Failed  to  add  n: "  +  addition,  value);	  reportError(   "Failed    to    add    n:   "    +    addition);    	non-compiled	[CE]  ')'  expected	38	None	replace
53	[BUG]  [BUGGY]  reportError( "Failed  to  add  n: "  +  addition.getString());  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError( "Failed  to  add  n: "  +  addition.getString());  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Failed  to  add  n: "  +  addition.getString());	  reportError(   "Failed    to    add    n:   "    +    addition);    	non-compiled	[CE]  ')'  expected	38	None	replace
54	[BUG]  [BUGGY]  reportError( "Failed  to  add  n: "  +  addition.toString());  [CE]  ')'  expected  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError( "Failed  to  add  n: "  +  addition.toString());  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Failed  to  add  n: "  +  addition.toString());	  reportError(   "Failed    to    add    n:   "    +    addition);    	non-compiled	[CE]  ')'  expected	38	None	replace
55	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").srcref(value),  value.detachFromParent());  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").srcref(value),  value.detachFromParent());  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( "   ").srcref(value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	58	None	replace
56	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").srcref(value),  callTarget.detachFromParent());  [CE]  ')'  expected  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").srcref(value),  callTarget.detachFromParent());  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( "   ").srcref(value),  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	58	None	replace
57	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "n ").srcref(callTarget),  value.detachFromParent());  [CE]  ')'  expected  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  IR.add(IR.string( "n ").srcref(callTarget),  value.detachFromParent());  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( "n ").srcref(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	58	None	replace
58	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").srcref(callTarget),  value.detachFromParent());  [CE]  ')'  expected  [FE]                                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").srcref(callTarget),  value.detachFromParent());  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( "A-Z ").srcref(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	58	None	replace
59	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").src(callTarget),  value.detachFromParent());  [CE]  ')'  expected  [FE]                                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").src(callTarget),  value.detachFromParent());  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( "   ").src(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	58	None	replace
60	[BUG]  [BUGGY]  n.removeChild(value,  addition);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  n.removeChild(value,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.removeChild(value,  addition);	  n.replaceChild(callTarget,    addition);    	non-compiled	[CE]  ')'  expected	11	None	replace
61	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(value,  addition);  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  aughtExceptionHandler.handleMissingName(value,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	aughtExceptionHandler.handleMissingName(value,  addition);	  aughtExceptionHandler.handleMissingName(n,    addition);    	non-compiled	[CE]  ')'  expected	33	None	replace
62	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(n,  addition,  value);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  aughtExceptionHandler.handleMissingName(n,  addition,  value);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	aughtExceptionHandler.handleMissingName(n,  addition,  value);	  aughtExceptionHandler.handleMissingName(n,    addition);    	non-compiled	[CE]  ')'  expected	33	None	replace
63	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(n,  value);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  aughtExceptionHandler.handleMissingName(n,  value);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	aughtExceptionHandler.handleMissingName(n,  value);	  aughtExceptionHandler.handleMissingName(n,    addition);    	non-compiled	[CE]  ')'  expected	33	None	replace
64	[BUG]  [BUGGY]  parent  ==  null  &&  addition!=  null)  {  reportError();  }  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  parent  ==  null  &&  addition!=  null)  {  reportError();  }  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	parent  ==  null  &&  addition!=  null)  {  reportError();  }	  if(added!=    null)    {    reportError();    }    	non-compiled	[CE]  not  a  statement	43	None	replace
65	[BUG]  [BUGGY]  parent!=  null  &&  addition.getType()  ==  Token.FUNCTION)  {  reportError();  }  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  parent!=  null  &&  addition.getType()  ==  Token.FUNCTION)  {  reportError();  }  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	parent!=  null  &&  addition.getType()  ==  Token.FUNCTION)  {  reportError();  }	  if(added!=    null)    {    reportError();    }    	non-compiled	[CE]  not  a  statement	43	None	replace
66	[BUG]  [BUGGY]  Parchet.checkState(added!=  null);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Parchet.checkState(added!=  null);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Parchet.checkState(added!=  null);	  if(added!=    null)    {    reportError();    }    	non-compiled	[CE]  ')'  expected	43	None	replace
67	[BUG]  [BUGGY]  parent  ==  null)  {  reportError();  }  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  parent  ==  null)  {  reportError();  }  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	parent  ==  null)  {  reportError();  }	  if(added!=    null)    {    reportError();    }    	non-compiled	[CE]  not  a  statement	43	None	replace
68	[BUG]  [BUGGY]  parent!=  null)  {  reportError();  }  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  parent!=  null)  {  reportError();  }  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	parent!=  null)  {  reportError();  }	  if(added!=    null)    {    reportError();    }    	non-compiled	[CE]  not  a  statement	43	None	replace
69	[BUG]  [BUGGY]  aughtExceptionHandler.throwAssertionFailedError( "msg.bad.assertion.expected ",  addition);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  aughtExceptionHandler.throwAssertionFailedError( "msg.bad.assertion.expected ",  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	aughtExceptionHandler.throwAssertionFailedError( "msg.bad.assertion.expected ",  addition);	  if(added!=    null)    {    reportError();    }    	non-compiled	[CE]  ')'  expected	43	None	replace
70	[BUG]  [BUGGY]  Node  addition  =  value.getParent().removeChild(n);  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  value.getParent().removeChild(n);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  value.getParent().removeChild(n);	  Node    addition    =    n.getParent().removeChild(value);    	non-compiled	[CE]  ')'  expected	39	None	replace
71	[BUG]  [BUGGY]  Node  addition  =  value.getParent().removeChild(value);  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  value.getParent().removeChild(value);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  value.getParent().removeChild(value);	  Node    addition    =    n.getParent().removeChild(value);    	non-compiled	[CE]  ')'  expected	39	None	replace
72	[BUG]  [BUGGY]  Node  addition  =  n.getParent().replaceChild(n,  addition);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  n.getParent().replaceChild(n,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  n.getParent().replaceChild(n,  addition);	  Node    addition    =    n.getParent().removeChild(value);    	non-compiled	[CE]  ')'  expected	39	None	replace
73	[BUG]  [BUGGY]  Node  addition  =  n.getLastChild().removeChild(value);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  n.getLastChild().removeChild(value);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  n.getLastChild().removeChild(value);	  Node    addition    =    n.getParent().removeChild(value);    	non-compiled	[CE]  ')'  expected	39	None	replace
74	[BUG]  [BUGGY]  n.removeChild(callTarget);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  n.removeChild(callTarget);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.removeChild(callTarget);	  n.replaceChild(value,    addition);    	non-compiled	[CE]  ')'  expected	26	None	replace
75	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  &&  addition.getType()  ==  Token.VAR);  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  &&  addition.getType()  ==  Token.VAR);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(a.getType()  ==  Token.FUNCTION  &&  addition.getType()  ==  Token.VAR);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION    ||    addition.getType()    ==    Token.VAR);    	non-compiled	[CE]  ')'  expected	17	None	replace
76	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()!=  Token.VAR);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()!=  Token.VAR);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()!=  Token.VAR);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION    ||    addition.getType()    ==    Token.VAR);    	non-compiled	[CE]  ')'  expected	17	None	replace
77	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()!=  Token.FUNCTION  ||  addition.getType()  ==  Token.VAR);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(a.getType()!=  Token.FUNCTION  ||  addition.getType()  ==  Token.VAR);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(a.getType()!=  Token.FUNCTION  ||  addition.getType()  ==  Token.VAR);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION    ||    addition.getType()    ==    Token.VAR);    	non-compiled	[CE]  ')'  expected	17	None	replace
78	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.VAR  ||  addition.getType()  ==  Token.FUNCTION);  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.VAR  ||  addition.getType()  ==  Token.FUNCTION);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(a.getType()  ==  Token.VAR  ||  addition.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION    ||    addition.getType()    ==    Token.VAR);    	non-compiled	[CE]  ')'  expected	17	None	replace
79	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  ')'  expected  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION    ||    addition.getType()    ==    Token.VAR);    	non-compiled	[CE]  ')'  expected	17	None	replace
80	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.VAR);  [CE]  ')'  expected  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.VAR);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.VAR);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION    ||    addition.getType()    ==    Token.VAR);    	non-compiled	[CE]  ')'  expected	17	None	replace
81	[BUG]  [BUGGY]  reportError( "Failed  to  add  a  FoldArrayAction.  Expected: ");  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError( "Failed  to  add  a  FoldArrayAction.  Expected: ");  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Failed  to  add  a  FoldArrayAction.  Expected: ");	  reportError(   "Failed    to    add    a    FoldArrayAction.   ");    	non-compiled	[CE]  ')'  expected	45	None	replace
82	[BUG]  [BUGGY]  reportError( "Failed  to  add  a  FoldArrayAction.  Expected: "  +  n.getString());  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError( "Failed  to  add  a  FoldArrayAction.  Expected: "  +  n.getString());  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Failed  to  add  a  FoldArrayAction.  Expected: "  +  n.getString());	  reportError(   "Failed    to    add    a    FoldArrayAction.   ");    	non-compiled	[CE]  ')'  expected	45	None	replace
83	[BUG]  [BUGGY]  reportError( "Failed  to  add  a  FoldArrayAction.  Expected: "  +  addition);  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError( "Failed  to  add  a  FoldArrayAction.  Expected: "  +  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Failed  to  add  a  FoldArrayAction.  Expected: "  +  addition);	  reportError(   "Failed    to    add    a    FoldArrayAction.   ");    	non-compiled	[CE]  ')'  expected	45	None	replace
84	[BUG]  [BUGGY]  reportError( "Failed  to  add  a  FoldArrayAction.  Expected: "  +  n.getLastChild());  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError( "Failed  to  add  a  FoldArrayAction.  Expected: "  +  n.getLastChild());  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Failed  to  add  a  FoldArrayAction.  Expected: "  +  n.getLastChild());	  reportError(   "Failed    to    add    a    FoldArrayAction.   ");    	non-compiled	[CE]  ')'  expected	45	None	replace
85	[BUG]  [BUGGY]  reportError( "Failed  to  add  a  FoldArrayAction.  Expected: "  +  n);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError( "Failed  to  add  a  FoldArrayAction.  Expected: "  +  n);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Failed  to  add  a  FoldArrayAction.  Expected: "  +  n);	  reportError(   "Failed    to    add    a    FoldArrayAction.   ");    	non-compiled	[CE]  ')'  expected	45	None	replace
86	[BUG]  [BUGGY]  if(addition!=  null  ||  addition.getType()  ==  Token.EXPR_RESULT)  {  reportCodeChange();  }  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  if(addition!=  null  ||  addition.getType()  ==  Token.EXPR_RESULT)  {  reportCodeChange();  }  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	if(addition!=  null  ||  addition.getType()  ==  Token.EXPR_RESULT)  {  reportCodeChange();  }	  if(addition!=    null    &&    addition.getType()    ==    Token.EXPR_RESULT)    {    reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	48	None	replace
87	[BUG]  [BUGGY]  n.getType().replaceChild(value,  addition);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  n.getType().replaceChild(value,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.getType().replaceChild(value,  addition);	  n.getName().replaceChild(value,    addition);    	non-compiled	[CE]  ')'  expected	42	None	replace
88	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  &&  addition.getType()  ==  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  &&  addition.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(a.getType()  ==  Token.FUNCTION  &&  addition.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION    ||    addition.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	14	None	replace
89	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()!=  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()!=  Token.EXPR_RESULT);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION    ||    addition.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	14	None	replace
90	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()!=  Token.FUNCTION  ||  addition.getType()  ==  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(a.getType()!=  Token.FUNCTION  ||  addition.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(a.getType()!=  Token.FUNCTION  ||  addition.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION    ||    addition.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	14	None	replace
91	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION    ||    addition.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	14	None	replace
92	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION    ||    addition.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	14	None	replace
93	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION,  addition.getFirstChild());  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION,  addition.getFirstChild());  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(a.getType()  ==  Token.FUNCTION,  addition.getFirstChild());	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION,    addition);    	non-compiled	[CE]  ')'  expected	16	None	replace
94	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION,  addition.cloneTree());  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION,  addition.cloneTree());  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(a.getType()  ==  Token.FUNCTION,  addition.cloneTree());	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION,    addition);    	non-compiled	[CE]  ')'  expected	16	None	replace
95	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.FUNCTION);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.FUNCTION);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION,    addition);    	non-compiled	[CE]  ')'  expected	16	None	replace
96	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION,  addition.getString());  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION,  addition.getString());  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(a.getType()  ==  Token.FUNCTION,  addition.getString());	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION,    addition);    	non-compiled	[CE]  ')'  expected	16	None	replace
97	[BUG]  [BUGGY]  n.getNext().removeChild(a);  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  n.getNext().removeChild(a);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.getNext().removeChild(a);	  n.getNext().removeChild(value);    	non-compiled	[CE]  ')'  expected	3	None	replace
98	[BUG]  [BUGGY]  if(addition!=  null  ||  addition.size()  >  0)  {  reportCodeChange();  }  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  if(addition!=  null  ||  addition.size()  >  0)  {  reportCodeChange();  }  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	if(addition!=  null  ||  addition.size()  >  0)  {  reportCodeChange();  }	  if(addition!=    null    &&    addition.size()    >    0)    {    reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	52	None	replace
99	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	13	None	replace
100	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  addition);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  addition);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	13	None	replace
101	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.NAME);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.NAME);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	13	None	replace
102	[BUG]  [BUGGY]  n.getLastChild().replaceChild(value,  addition);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  n.getLastChild().replaceChild(value,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.getLastChild().replaceChild(value,  addition);	  n.getParent().replaceChild(parent,    addition);    	non-compiled	[CE]  ')'  expected	5	None	replace
103	[BUG]  [BUGGY]  if(a.getType()  ==  Token.FUNCTION)  {  reportError(a);  }  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  if(a.getType()  ==  Token.FUNCTION)  {  reportError(a);  }  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	if(a.getType()  ==  Token.FUNCTION)  {  reportError(a);  }	  reportError(a);    	non-compiled	[CE]  ')'  expected	35	None	replace
104	[BUG]  [BUGGY]  if(a.getType()  ==  Token.NAME)  {  reportError(a);  }  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  if(a.getType()  ==  Token.NAME)  {  reportError(a);  }  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	if(a.getType()  ==  Token.NAME)  {  reportError(a);  }	  reportError(a);    	non-compiled	[CE]  ')'  expected	35	None	replace
105	[BUG]  [BUGGY]  reportError(n);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError(n);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError(n);	  reportError(a);    	non-compiled	[CE]  ')'  expected	35	None	replace
106	[BUG]  [BUGGY]  if(a.getType()  ==  Token.VAR)  {  reportError(a);  }  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  if(a.getType()  ==  Token.VAR)  {  reportError(a);  }  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	if(a.getType()  ==  Token.VAR)  {  reportError(a);  }	  reportError(a);    	non-compiled	[CE]  ')'  expected	35	None	replace
107	[BUG]  [BUGGY]  reportError(a,  addition);  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError(a,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError(a,  addition);	  reportError(a);    	non-compiled	[CE]  ')'  expected	35	None	replace
108	[BUG]  [BUGGY]  Node  addition  =  value.getNext().getNext();  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  value.getNext().getNext();  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  value.getNext().getNext();	  Node    addition    =    n.getNext().getNext();    	non-compiled	[CE]  ')'  expected	20	None	replace
109	[BUG]  [BUGGY]  Node  addition  =  n.getParent().getNext();  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  n.getParent().getNext();  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  n.getParent().getNext();	  Node    addition    =    n.getNext().getNext();    	non-compiled	[CE]  ')'  expected	20	None	replace
110	[BUG]  [BUGGY]  Node  addition  =  n.getLastChild().getNext();  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  n.getLastChild().getNext();  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  n.getLastChild().getNext();	  Node    addition    =    n.getNext().getNext();    	non-compiled	[CE]  ')'  expected	20	None	replace
111	[BUG]  [BUGGY]  Node  addition  =  n.getNext().removeFirstChild();  [CE]  ')'  expected  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  n.getNext().removeFirstChild();  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  n.getNext().removeFirstChild();	  Node    addition    =    n.getNext().getNext();    	non-compiled	[CE]  ')'  expected	20	None	replace
112	[BUG]  [BUGGY]  n.addChildToFront(a);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  n.addChildToFront(a);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.addChildToFront(a);	  n.addChildToFront(value);    	non-compiled	[CE]  ')'  expected	24	None	replace
113	[BUG]  [BUGGY]  Node  addition  =  n.getFirstChild();  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  n.getFirstChild();  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  n.getFirstChild();	  Node    addition    =    n.getLastChild();    	non-compiled	[CE]  ')'  expected	19	None	replace
114	[BUG]  [BUGGY]  Node  addition  =  value.getLastChild();  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  value.getLastChild();  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  value.getLastChild();	  Node    addition    =    n.getLastChild();    	non-compiled	[CE]  ')'  expected	19	None	replace
115	[BUG]  [BUGGY]  Node  addition  =  value.getFirstChild();  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  value.getFirstChild();  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  value.getFirstChild();	  Node    addition    =    n.getLastChild();    	non-compiled	[CE]  ')'  expected	19	None	replace
116	[BUG]  [BUGGY]  Node  addition  =  callTarget.getLastChild();  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  callTarget.getLastChild();  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  callTarget.getLastChild();	  Node    addition    =    n.getLastChild();    	non-compiled	[CE]  ')'  expected	19	None	replace
117	[BUG]  [BUGGY]  Node  addition  =  callTarget.getFirstChild();  [CE]  ')'  expected  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  callTarget.getFirstChild();  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  callTarget.getFirstChild();	  Node    addition    =    n.getLastChild();    	non-compiled	[CE]  ')'  expected	19	None	replace
118	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).srcref(callTarget),  callTarget.detachFromParent());  n.getParent().replaceChild(n,  addition);  [CE]  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).srcref(callTarget),  callTarget.detachFromParent());  n.getParent().replaceChild(n,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( "* ")).srcref(callTarget),  callTarget.detachFromParent());  n.getParent().replaceChild(n,  addition);	  Node    addition    =    IR.add(IR.string(   "       ").srcref(callTarget),    addition.detachFromParent());    n.getParent().replaceChild(n,    addition);    	non-compiled	[CE]  	56	None	replace
119	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Assertion ")).srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  [CE]  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  IR.add(IR.string( "Assertion ")).srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( "Assertion ")).srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);	  Node    addition    =    IR.add(IR.string(   "       ").srcref(callTarget),    addition.detachFromParent());    n.getParent().replaceChild(n,    addition);    	non-compiled	[CE]  	56	None	replace
120	[BUG]  [BUGGY]  n.getParent().replaceChild(addition,  value);  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  n.getParent().replaceChild(addition,  value);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.getParent().replaceChild(addition,  value);	  n.getParent().replaceChild(value,    addition);    	non-compiled	[CE]  ')'  expected	2	None	replace
121	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(a.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	59	None	replace
122	[BUG]  [BUGGY]  Preconditions.checkArgument(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkArgument(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkArgument(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(a.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	59	None	replace
123	[BUG]  [BUGGY]  Preconditions.checkArgument(a.getType()  ==  Token.FUNCTION,  addition);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkArgument(a.getType()  ==  Token.FUNCTION,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkArgument(a.getType()  ==  Token.FUNCTION,  addition);	  Preconditions.checkArgument(a.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	59	None	replace
124	[BUG]  [BUGGY]  Preconditions.checkArgument(a.getType()!=  Token.FUNCTION);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkArgument(a.getType()!=  Token.FUNCTION);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkArgument(a.getType()!=  Token.FUNCTION);	  Preconditions.checkArgument(a.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	59	None	replace
125	[BUG]  [BUGGY]  Preconditions.checkArgument(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.NAME);  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkArgument(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.NAME);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkArgument(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.NAME);	  Preconditions.checkArgument(a.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	59	None	replace
126	[BUG]  [BUGGY]  n.getParent().removeChild(addive);  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  n.getParent().removeChild(addive);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.getParent().removeChild(addive);	  n.removeChild(addive);    	non-compiled	[CE]  ')'  expected	28	None	replace
127	[BUG]  [BUGGY]  n.removeChild(addive.cloneTree());  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  n.removeChild(addive.cloneTree());  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.removeChild(addive.cloneTree());	  n.removeChild(addive);    	non-compiled	[CE]  ')'  expected	28	None	replace
128	[BUG]  [BUGGY]  reportError( "Unexpected  error: "  +  n);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError( "Unexpected  error: "  +  n);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Unexpected  error: "  +  n);	  reportError(   "Unexpected    error:   "    +    a);    	non-compiled	[CE]  ')'  expected	44	None	replace
129	[BUG]  [BUGGY]  reportError( "Unexpected  error: "  +  a.toString());  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError( "Unexpected  error: "  +  a.toString());  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Unexpected  error: "  +  a.toString());	  reportError(   "Unexpected    error:   "    +    a);    	non-compiled	[CE]  ')'  expected	44	None	replace
130	[BUG]  [BUGGY]  reportError( "Unexpected  error: "  +  value);  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError( "Unexpected  error: "  +  value);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Unexpected  error: "  +  value);	  reportError(   "Unexpected    error:   "    +    a);    	non-compiled	[CE]  ')'  expected	44	None	replace
131	[BUG]  [BUGGY]  reportError( "Unexpected  error: "  +  a.getMessage());  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError( "Unexpected  error: "  +  a.getMessage());  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Unexpected  error: "  +  a.getMessage());	  reportError(   "Unexpected    error:   "    +    a);    	non-compiled	[CE]  ')'  expected	44	None	replace
132	[BUG]  [BUGGY]  reportError( "Unexpected  error: "  +  a.getString());  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError( "Unexpected  error: "  +  a.getString());  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Unexpected  error: "  +  a.getString());	  reportError(   "Unexpected    error:   "    +    a);    	non-compiled	[CE]  ')'  expected	44	None	replace
133	[BUG]  [BUGGY]  Reporter.error( "Unexpected  error: "  +  a);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Reporter.error( "Unexpected  error: "  +  a);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Reporter.error( "Unexpected  error: "  +  a);	  reportError(   "Unexpected    error:   "    +    a);    	non-compiled	[CE]  ')'  expected	44	None	replace
134	[BUG]  [BUGGY]  n.getParent().replaceChild(addition,  addition);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  n.getParent().replaceChild(addition,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.getParent().replaceChild(addition,  addition);	  n.getParent().replaceChild(callTarget,    addition);    	non-compiled	[CE]  ')'  expected	1	None	replace
135	[BUG]  [BUGGY]  Node  addition  =  value.getFirstChild().getNext();  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  value.getFirstChild().getNext();  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  value.getFirstChild().getNext();	  Node    addition    =    n.getFirstChild().getNext();    	non-compiled	[CE]  ')'  expected	18	None	replace
136	[BUG]  [BUGGY]  Node  addition  =  callTarget.getFirstChild().getNext();  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  callTarget.getFirstChild().getNext();  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  callTarget.getFirstChild().getNext();	  Node    addition    =    n.getFirstChild().getNext();    	non-compiled	[CE]  ')'  expected	18	None	replace
137	[BUG]  [BUGGY]  Node  addition  =  n.getFirstChild().getParent();  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  n.getFirstChild().getParent();  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  n.getFirstChild().getParent();	  Node    addition    =    n.getFirstChild().getNext();    	non-compiled	[CE]  ')'  expected	18	None	replace
138	[BUG]  [BUGGY]  Node  addition  =  n.getFirstChild().removeFirstChild();  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  n.getFirstChild().removeFirstChild();  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  n.getFirstChild().removeFirstChild();	  Node    addition    =    n.getFirstChild().getNext();    	non-compiled	[CE]  ')'  expected	18	None	replace
139	[BUG]  [BUGGY]  Node  addition  =  n.getFirstChild().getString();  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  n.getFirstChild().getString();  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  n.getFirstChild().getString();	  Node    addition    =    n.getFirstChild().getNext();    	non-compiled	[CE]  ')'  expected	18	None	replace
140	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).src(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  [CE]  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).src(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( "* ")).src(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);	  Node    addition    =    IR.add(IR.string(   "       ").src(callTarget),    value.detachFromParent());    n.getParent().replaceChild(n,    addition);    	non-compiled	[CE]  	55	None	replace
141	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").src(value,  callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").src(value,  callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( "   ").src(value,  callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);	  Node    addition    =    IR.add(IR.string(   "       ").src(callTarget),    value.detachFromParent());    n.getParent().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	55	None	replace
142	[BUG]  [BUGGY]  reportError( "Failed  to  add  a  value.  If(n.getType()  ==  Token.FUNCTION)  {  reportError( "Failed  to  add  a  value. ");  }  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError( "Failed  to  add  a  value.  If(n.getType()  ==  Token.FUNCTION)  {  reportError( "Failed  to  add  a  value. ");  }  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Failed  to  add  a  value.  If(n.getType()  ==  Token.FUNCTION)  {  reportError( "Failed  to  add  a  value. ");  }	  reportError(   "Failed    to    add    a    value.   ");    	non-compiled	[CE]  	36	None	replace
143	[BUG]  [BUGGY]  reportError( "Failed  to  add  a  value: "  +  addition);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError( "Failed  to  add  a  value: "  +  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Failed  to  add  a  value: "  +  addition);	  reportError(   "Failed    to    add    a    value.   ");    	non-compiled	[CE]  ')'  expected	36	None	replace
144	[BUG]  [BUGGY]  reportError( "Failed  to  add  a  value.  Expected: "  +  addition);  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError( "Failed  to  add  a  value.  Expected: "  +  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Failed  to  add  a  value.  Expected: "  +  addition);	  reportError(   "Failed    to    add    a    value.   ");    	non-compiled	[CE]  ')'  expected	36	None	replace
145	[BUG]  [BUGGY]  reportError( "Failed  to  add  a  value.  If(n.getType()  ==  Token.NAME)  {  reportError( "Failed  to  add  a  value. ");  }  [CE]  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError( "Failed  to  add  a  value.  If(n.getType()  ==  Token.NAME)  {  reportError( "Failed  to  add  a  value. ");  }  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Failed  to  add  a  value.  If(n.getType()  ==  Token.NAME)  {  reportError( "Failed  to  add  a  value. ");  }	  reportError(   "Failed    to    add    a    value.   ");    	non-compiled	[CE]  	36	None	replace
146	[BUG]  [BUGGY]  reportError( "Failed  to  add  a  value.  Expected: ");  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError( "Failed  to  add  a  value.  Expected: ");  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Failed  to  add  a  value.  Expected: ");	  reportError(   "Failed    to    add    a    value.   ");    	non-compiled	[CE]  ')'  expected	36	None	replace
147	[BUG]  [BUGGY]  reportError( "Failed  to  add  a  value.  If(n.getType()  ==  Token.FUNCTION)  {  reportError( "Failed  to  add  a  value. ");  [CE]  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError( "Failed  to  add  a  value.  If(n.getType()  ==  Token.FUNCTION)  {  reportError( "Failed  to  add  a  value. ");  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Failed  to  add  a  value.  If(n.getType()  ==  Token.FUNCTION)  {  reportError( "Failed  to  add  a  value. ");	  reportError(   "Failed    to    add    a    value.   ");    	non-compiled	[CE]  	36	None	replace
148	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  >=  Token.FUNCTION);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(a.getType()  >=  Token.FUNCTION);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(a.getType()  >=  Token.FUNCTION);	  Preconditions.checkState(a.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	12	None	replace
149	[BUG]  [BUGGY]  reportError( "Unexpected  error: "  +  addition);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError( "Unexpected  error: "  +  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Unexpected  error: "  +  addition);	  reportError(   "Unexpected    error:   "    +    a);    	non-compiled	[CE]  ')'  expected	44	None	replace
150	[BUG]  [BUGGY]  Preconditions.checkArgument(value.getType()  ==  Token.FUNCTION);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkArgument(value.getType()  ==  Token.FUNCTION);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkArgument(value.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(a.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	59	None	replace
151	[BUG]  [BUGGY]  Preconditions.checkArgument(addition.getType()  ==  Token.FUNCTION);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkArgument(addition.getType()  ==  Token.FUNCTION);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkArgument(addition.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(a.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	59	None	replace
152	[BUG]  [BUGGY]  Preconditions.checkArgument(a.getType()  ==  Token.FUNCTION  ||  addition.hasChildren());  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkArgument(a.getType()  ==  Token.FUNCTION  ||  addition.hasChildren());  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkArgument(a.getType()  ==  Token.FUNCTION  ||  addition.hasChildren());	  Preconditions.checkArgument(a.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	59	None	replace
153	[BUG]  [BUGGY]  n.getNext().replaceChild(value);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  n.getNext().replaceChild(value);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.getNext().replaceChild(value);	  n.getParent().replaceChild(value);    	non-compiled	[CE]  ')'  expected	29	None	replace
154	[BUG]  [BUGGY]  Preconditions.checkState(value.getType()  ==  Token.FUNCTION,  addition);  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(value.getType()  ==  Token.FUNCTION,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(value.getType()  ==  Token.FUNCTION,  addition);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION,    addition);    	non-compiled	[CE]  ')'  expected	16	None	replace
155	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition!=  null);  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition!=  null);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition!=  null);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION,    addition);    	non-compiled	[CE]  ')'  expected	16	None	replace
156	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()!=  Token.FUNCTION,  addition);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(a.getType()!=  Token.FUNCTION,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(a.getType()!=  Token.FUNCTION,  addition);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION,    addition);    	non-compiled	[CE]  ')'  expected	16	None	replace
157	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION,  n);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION,  n);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(a.getType()  ==  Token.FUNCTION,  n);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION,    addition);    	non-compiled	[CE]  ')'  expected	16	None	replace
158	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION,  addition  +  1);  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION,  addition  +  1);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(a.getType()  ==  Token.FUNCTION,  addition  +  1);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION,    addition);    	non-compiled	[CE]  ')'  expected	16	None	replace
159	[BUG]  [BUGGY]  ReportError( "Failed  to  add  n: "  +  addition);  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  ReportError( "Failed  to  add  n: "  +  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	ReportError( "Failed  to  add  n: "  +  addition);	  reportError(   "Failed    to    add    n:   "    +    addition);    	non-compiled	[CE]  ')'  expected	38	None	replace
160	[BUG]  [BUGGY]  reportError(n,  addition);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError(n,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError(n,  addition);	  reportError(a);    	non-compiled	[CE]  ')'  expected	35	None	replace
161	[BUG]  [BUGGY]  reportError(a.getMessage());  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError(a.getMessage());  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError(a.getMessage());	  reportError(a);    	non-compiled	[CE]  ')'  expected	35	None	replace
162	[BUG]  [BUGGY]  reportError(a.toString());  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError(a.toString());  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError(a.toString());	  reportError(a);    	non-compiled	[CE]  ')'  expected	35	None	replace
163	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( "av ").src(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);	  Node    addition    =    IR.add(IR.string(   "       ").srcref(callTarget),    addition.detachFromParent());    n.getParent().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	56	None	replace
164	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( ", ").src(value),  callTarget.detachFromParent());  n.getParent().replaceChild(n,  addition);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  IR.add(IR.string( ", ").src(value),  callTarget.detachFromParent());  n.getParent().replaceChild(n,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( ", ").src(value),  callTarget.detachFromParent());  n.getParent().replaceChild(n,  addition);	  Node    addition    =    IR.add(IR.string(   "       ").srcref(callTarget),    addition.detachFromParent());    n.getParent().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	56	None	replace
165	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "  <   ").src(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  IR.add(IR.string( "  <   ").src(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( "  <   ").src(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);	  Node    addition    =    IR.add(IR.string(   "       ").srcref(callTarget),    addition.detachFromParent());    n.getParent().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	56	None	replace
166	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "n ").srcref(value),  callTarget.detachFromParent());  n.getParent().replaceChild(n,  addition);  [CE]  ')'  expected  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  IR.add(IR.string( "n ").srcref(value),  callTarget.detachFromParent());  n.getParent().replaceChild(n,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( "n ").srcref(value),  callTarget.detachFromParent());  n.getParent().replaceChild(n,  addition);	  Node    addition    =    IR.add(IR.string(   "       ").srcref(callTarget),    addition.detachFromParent());    n.getParent().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	56	None	replace
167	[BUG]  [BUGGY]  n.setType(Token.NAME)  {  reportCodeChange();  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  n.setType(Token.NAME)  {  reportCodeChange();  }  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.setType(Token.NAME)  {  reportCodeChange();  }	  if(addition!=    null    &&    addition.getType()    ==    Token.NAME)    {    reportCodeChange();    }    	non-compiled	[CE]  ';'  expected	50	None	replace
168	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( ", ").src(value),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  IR.add(IR.string( ", ").src(value),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( ", ").src(value),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);	  Node    addition    =    IR.add(IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    n.getParent().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	54	None	replace
169	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "> "),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  IR.add(IR.string( "> "),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( "> "),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);	  Node    addition    =    IR.add(IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    n.getParent().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	54	None	replace
170	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(value),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(value),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( "av ").srcref(value),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);	  Node    addition    =    IR.add(IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    n.getParent().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	54	None	replace
171	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "n ").srcref(value));  n.getParent().replaceChild(n,  addition);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  IR.add(IR.string( "n ").srcref(value));  n.getParent().replaceChild(n,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( "n ").srcref(value));  n.getParent().replaceChild(n,  addition);	  Node    addition    =    IR.add(IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    n.getParent().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	54	None	replace
172	[BUG]  [BUGGY]  n.getLastChild().replaceChild(n,  addition);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  n.getLastChild().replaceChild(n,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.getLastChild().replaceChild(n,  addition);	  n.getNext().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	4	None	replace
173	[BUG]  [BUGGY]  n.getPrevious().replaceChild(value,  addition);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  n.getPrevious().replaceChild(value,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.getPrevious().replaceChild(value,  addition);	  n.getNext().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	4	None	replace
174	[BUG]  [BUGGY]  Preconditions.checkState(value.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.VAR);  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(value.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.VAR);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(value.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.VAR);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION    ||    addition.getType()    ==    Token.VAR);    	non-compiled	[CE]  ')'  expected	17	None	replace
175	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.VAR,  value);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.VAR,  value);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.VAR,  value);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION    ||    addition.getType()    ==    Token.VAR);    	non-compiled	[CE]  ')'  expected	17	None	replace
176	[BUG]  [BUGGY]  n.setType(Token.EXPR_RESULT)  {  reportCodeChange();  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  n.setType(Token.EXPR_RESULT)  {  reportCodeChange();  }  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.setType(Token.EXPR_RESULT)  {  reportCodeChange();  }	  if(addition!=    null    &&    addition.getType()    ==    Token.EXPR_RESULT)    {    reportCodeChange();    }    	non-compiled	[CE]  ';'  expected	48	None	replace
177	[BUG]  [BUGGY]  n.setType(Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  n.setType(Token.EXPR_RESULT);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.setType(Token.EXPR_RESULT);	  if(addition!=    null    &&    addition.getType()    ==    Token.EXPR_RESULT)    {    reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	48	None	replace
178	[BUG]  [BUGGY]  Preconditions.checkState(address.getType()  ==  Token.FUNCTION);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(address.getType()  ==  Token.FUNCTION);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(address.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(value.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	30	None	replace
179	[BUG]  [BUGGY]  Preconditions.checkState(adder.getType()  ==  Token.FUNCTION);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(adder.getType()  ==  Token.FUNCTION);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(adder.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(value.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	30	None	replace
180	[BUG]  [BUGGY]  Preconditions.checkState(addr.getType()  ==  Token.FUNCTION);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(addr.getType()  ==  Token.FUNCTION);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(addr.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(value.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	30	None	replace
181	[BUG]  [BUGGY]  parent.replaceChild(n,  value);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  parent.replaceChild(n,  value);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	parent.replaceChild(n,  value);	  parent.replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	23	None	replace
182	[BUG]  [BUGGY]  parent.replaceChild(value,  addition);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  parent.replaceChild(value,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	parent.replaceChild(value,  addition);	  parent.replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	23	None	replace
183	[BUG]  [BUGGY]  if(addition!=  null)  {  aughtExceptionHandler.handleMissingName(n,  addition);  }  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  if(addition!=  null)  {  aughtExceptionHandler.handleMissingName(n,  addition);  }  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	if(addition!=  null)  {  aughtExceptionHandler.handleMissingName(n,  addition);  }	  aughtExceptionHandler.handleMissingName(n,    addition);    	non-compiled	[CE]  ')'  expected	33	None	replace
184	[BUG]  [BUGGY]  aughtExceptionHandler.handleError(n,  addition);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  aughtExceptionHandler.handleError(n,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	aughtExceptionHandler.handleError(n,  addition);	  aughtExceptionHandler.handleMissingName(n,    addition);    	non-compiled	[CE]  ')'  expected	33	None	replace
185	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "n ").src(value),  callTarget.detachFromParent());  n.getParent().replaceChild(n,  addition);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  IR.add(IR.string( "n ").src(value),  callTarget.detachFromParent());  n.getParent().replaceChild(n,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( "n ").src(value),  callTarget.detachFromParent());  n.getParent().replaceChild(n,  addition);	  Node    addition    =    IR.add(IR.string(   "       ").src(callTarget),    addition.detachFromParent());    n.getParent().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	57	None	replace
186	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "] ").src(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  IR.add(IR.string( "] ").src(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( "] ").src(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);	  Node    addition    =    IR.add(IR.string(   "       ").src(callTarget),    addition.detachFromParent());    n.getParent().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	57	None	replace
187	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.EXPR_RESULT,  value);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.EXPR_RESULT,  value);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.EXPR_RESULT,  value);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION    ||    addition.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	14	None	replace
188	[BUG]  [BUGGY]  n.getGrandparent().replaceChild(value,  addition);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  n.getGrandparent().replaceChild(value,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.getGrandparent().replaceChild(value,  addition);	  n.getParent().replaceChild(callTarget,    addition);    	non-compiled	[CE]  ')'  expected	1	None	replace
189	[BUG]  [BUGGY]  n.getNext().removeChild(addition);  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  n.getNext().removeChild(addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.getNext().removeChild(addition);	  n.getNext().removeChild(value);    	non-compiled	[CE]  ')'  expected	3	None	replace
190	[BUG]  [BUGGY]  n.getFirstChild().removeChild(value);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  n.getFirstChild().removeChild(value);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.getFirstChild().removeChild(value);	  n.getNext().removeChild(value);    	non-compiled	[CE]  ')'  expected	3	None	replace
191	[BUG]  [BUGGY]  if(addition  ==  null  &&  addition.size()  >  0)  {  reportCodeChange();  }  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  if(addition  ==  null  &&  addition.size()  >  0)  {  reportCodeChange();  }  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	if(addition  ==  null  &&  addition.size()  >  0)  {  reportCodeChange();  }	  if(addition!=    null    &&    addition.size()    >    0)    {    reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	52	None	replace
192	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "n ").src(value),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  IR.add(IR.string( "n ").src(value),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( "n ").src(value),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);	  Node    addition    =    IR.add(IR.string(   "       ").src(callTarget),    value.detachFromParent());    n.getParent().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	55	None	replace
193	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").src(value));  n.getParent().replaceChild(n,  addition);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").src(value));  n.getParent().replaceChild(n,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( "   ").src(value));  n.getParent().replaceChild(n,  addition);	  Node    addition    =    IR.add(IR.string(   "       ").src(callTarget),    value.detachFromParent());    n.getParent().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	55	None	replace
194	[BUG]  [BUGGY]  Node  addition  =  n.removeFirstChild();  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  n.removeFirstChild();  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  n.removeFirstChild();	  Node    addition    =    n.getLastChild();    	non-compiled	[CE]  ')'  expected	19	None	replace
195	[BUG]  [BUGGY]  n.addChildToFront(addr);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  n.addChildToFront(addr);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.addChildToFront(addr);	  n.removeChild(addr);    	non-compiled	[CE]  ')'  expected	10	None	replace
196	[BUG]  [BUGGY]  n.addChildToFront(addive);  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  n.addChildToFront(addive);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.addChildToFront(addive);	  n.removeChild(addive);    	non-compiled	[CE]  ')'  expected	28	None	replace
197	[BUG]  [BUGGY]  if(addition  ==  null  &&  addition.getType()  ==  Token.FUNCTION)  {  reportCodeChange();  }  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  if(addition  ==  null  &&  addition.getType()  ==  Token.FUNCTION)  {  reportCodeChange();  }  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	if(addition  ==  null  &&  addition.getType()  ==  Token.FUNCTION)  {  reportCodeChange();  }	  if(addition!=    null    &&    addition.getType()    ==    Token.FUNCTION)    {    reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	47	None	replace
198	[BUG]  [BUGGY]  n.setType(Token.FUNCTION)  {  reportCodeChange();  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  n.setType(Token.FUNCTION)  {  reportCodeChange();  }  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.setType(Token.FUNCTION)  {  reportCodeChange();  }	  if(addition!=    null    &&    addition.getType()    ==    Token.FUNCTION)    {    reportCodeChange();    }    	non-compiled	[CE]  ';'  expected	47	None	replace
199	[BUG]  [BUGGY]  if(addition  ==  null  &&  addition.hasChildren())  {  reportCodeChange();  }  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  if(addition  ==  null  &&  addition.hasChildren())  {  reportCodeChange();  }  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	if(addition  ==  null  &&  addition.hasChildren())  {  reportCodeChange();  }	  if(addition!=    null    &&    addition.hasChildren())    {    reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	49	None	replace
200	[BUG]  [BUGGY]  reportError( "Failed  to  add  a  FoldArrayActionCall.  Did  you  know? ");  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError( "Failed  to  add  a  FoldArrayActionCall.  Did  you  know? ");  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Failed  to  add  a  FoldArrayActionCall.  Did  you  know? ");	  reportError(   "Failed    to    add    a    FoldArrayActionCall.   ");    	non-compiled	[CE]  ')'  expected	46	None	replace
201	[BUG]  [BUGGY]  reportError( "Failed  to  add  a  FoldArrayActionCall. "  +  value);  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError( "Failed  to  add  a  FoldArrayActionCall. "  +  value);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Failed  to  add  a  FoldArrayActionCall. "  +  value);	  reportError(   "Failed    to    add    a    FoldArrayActionCall.   ");    	non-compiled	[CE]  ')'  expected	46	None	replace
202	[BUG]  [BUGGY]  n.getName().removeChild(value,  addition);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  n.getName().removeChild(value,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.getName().removeChild(value,  addition);	  n.getName().replaceChild(value,    addition);    	non-compiled	[CE]  ')'  expected	42	None	replace
203	[BUG]  [BUGGY]  Preconditions.checkState(value.getType()  ==  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(value.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(value.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(a.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	31	None	replace
204	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.EXPR_RESULT  &&  addition.hasChildren());  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.EXPR_RESULT  &&  addition.hasChildren());  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(a.getType()  ==  Token.EXPR_RESULT  &&  addition.hasChildren());	  Preconditions.checkState(a.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	31	None	replace
205	[BUG]  [BUGGY]  reportError( "Failed  to  add  a  FoldArrayAction.  Did  you  know? ");  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError( "Failed  to  add  a  FoldArrayAction.  Did  you  know? ");  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Failed  to  add  a  FoldArrayAction.  Did  you  know? ");	  reportError(   "Failed    to    add    a    FoldArrayAction.   ");    	non-compiled	[CE]  ')'  expected	45	None	replace
206	[BUG]  [BUGGY]  reportError( "Failed  to  add  a  FoldArrayAction.  Expected: "+a.getString());  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError( "Failed  to  add  a  FoldArrayAction.  Expected: "+a.getString());  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Failed  to  add  a  FoldArrayAction.  Expected: "+a.getString());	  reportError(   "Failed    to    add    a    FoldArrayAction.   ");    	non-compiled	[CE]  ')'  expected	45	None	replace
207	[BUG]  [BUGGY]  reportError( "Failed  to  add  a  FoldArrayAction.  Any  of  the   "  +  addition);  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError( "Failed  to  add  a  FoldArrayAction.  Any  of  the   "  +  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Failed  to  add  a  FoldArrayAction.  Any  of  the   "  +  addition);	  reportError(   "Failed    to    add    a    FoldArrayAction.   ");    	non-compiled	[CE]  ')'  expected	45	None	replace
208	[BUG]  [BUGGY]  reportError( "Failed  to  add  a  FoldArrayAction.  Expected: "+a.toString());  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError( "Failed  to  add  a  FoldArrayAction.  Expected: "+a.toString());  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Failed  to  add  a  FoldArrayAction.  Expected: "+a.toString());	  reportError(   "Failed    to    add    a    FoldArrayAction.   ");    	non-compiled	[CE]  ')'  expected	45	None	replace
209	[BUG]  [BUGGY]  Node  addition  =  n.getFirstChild().getLastChild();  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  n.getFirstChild().getLastChild();  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  n.getFirstChild().getLastChild();	  Node    addition    =    n.getFirstChild().getNext();    	non-compiled	[CE]  ')'  expected	18	None	replace
210	[BUG]  [BUGGY]  n.getName().removeChild(addition);  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  n.getName().removeChild(addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.getName().removeChild(addition);	  n.getName().removeChild(value);    	non-compiled	[CE]  ')'  expected	32	None	replace
211	[BUG]  [BUGGY]  n.getName().addChildToFront(addition);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  n.getName().addChildToFront(addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.getName().addChildToFront(addition);	  n.getName().removeChild(value);    	non-compiled	[CE]  ')'  expected	32	None	replace
212	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").src(value),  value.detachFromParent());  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").src(value),  value.detachFromParent());  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( "   ").src(value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	58	None	replace
213	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( ", ").srcref(value),  value.detachFromParent());  [CE]  ')'  expected  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  IR.add(IR.string( ", ").srcref(value),  value.detachFromParent());  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( ", ").srcref(value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	58	None	replace
214	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( ", ").src(callTarget),  value.detachFromParent());  [CE]  ')'  expected  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  IR.add(IR.string( ", ").src(callTarget),  value.detachFromParent());  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( ", ").src(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	58	None	replace
215	[BUG]  [BUGGY]  Node  addition  =  n.getNext().removeChild(add);  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  n.getNext().removeChild(add);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  n.getNext().removeChild(add);	  Node    addition    =    n.getNext().removeChild(value);    	non-compiled	[CE]  ')'  expected	40	None	replace
216	[BUG]  [BUGGY]  Node  addition  =  value.getNext().removeChild(value);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  value.getNext().removeChild(value);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  value.getNext().removeChild(value);	  Node    addition    =    n.getNext().removeChild(value);    	non-compiled	[CE]  ')'  expected	40	None	replace
217	[BUG]  [BUGGY]  reportError( "Failed  to  add  a  value.   "  +  addition);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError( "Failed  to  add  a  value.   "  +  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Failed  to  add  a  value.   "  +  addition);	  reportError(   "Failed    to    add    a    value.   ");    	non-compiled	[CE]  ')'  expected	36	None	replace
218	[BUG]  [BUGGY]  reportError( "Failed  to  add  a  value.  Did  you  know? ");  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError( "Failed  to  add  a  value.  Did  you  know? ");  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Failed  to  add  a  value.  Did  you  know? ");	  reportError(   "Failed    to    add    a    value.   ");    	non-compiled	[CE]  ')'  expected	36	None	replace
219	[BUG]  [BUGGY]  reportError( "Failed  to  add  a  value.  Please  check  that  the  addition  has  been  added. ");  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError( "Failed  to  add  a  value.  Please  check  that  the  addition  has  been  added. ");  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Failed  to  add  a  value.  Please  check  that  the  addition  has  been  added. ");	  reportError(   "Failed    to    add    a    value.   ");    	non-compiled	[CE]  ')'  expected	36	None	replace
220	[BUG]  [BUGGY]  parent!=  null  &&  addition!=  null)  {  reportError();  }  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  parent!=  null  &&  addition!=  null)  {  reportError();  }  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	parent!=  null  &&  addition!=  null)  {  reportError();  }	  if(added!=    null)    {    reportError();    }    	non-compiled	[CE]  not  a  statement	43	None	replace
221	[BUG]  [BUGGY]  aught(NodeUtil.mayHaveSideEffects(value));  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  aught(NodeUtil.mayHaveSideEffects(value));  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	aught(NodeUtil.mayHaveSideEffects(value));	  if(added!=    null)    {    reportError();    }    	non-compiled	[CE]  ')'  expected	43	None	replace
222	[BUG]  [BUGGY]  aught(NodeUtil.mayHaveSideEffects(n));  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  aught(NodeUtil.mayHaveSideEffects(n));  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	aught(NodeUtil.mayHaveSideEffects(n));	  if(added!=    null)    {    reportError();    }    	non-compiled	[CE]  ')'  expected	43	None	replace
223	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(value,  addition);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  n.getFirstChild().replaceChild(value,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.getFirstChild().replaceChild(value,  addition);	  n.getNext().replaceChild(value,    addition);    	non-compiled	[CE]  ')'  expected	41	None	replace
224	[BUG]  [BUGGY]  n.removeLastChild(value);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  n.removeLastChild(value);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.removeLastChild(value);	  n.replaceChild(callTarget,    addition);    	non-compiled	[CE]  ')'  expected	11	None	replace
225	[BUG]  [BUGGY]  n.addChildToBack(value);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  n.addChildToBack(value);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.addChildToBack(value);	  n.addChildToFront(addition);    	non-compiled	[CE]  ')'  expected	25	None	replace
226	[BUG]  [BUGGY]  wires.add(addition);  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  wires.add(addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	wires.add(addition);	  if(addition    ==    null)    {    reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	22	None	replace
227	[BUG]  [BUGGY]  Preconditions.checkState(value.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.NAME);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(value.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.NAME);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(value.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.NAME);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION    ||    addition.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	15	None	replace
228	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.NAME,  value);  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.NAME,  value);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.NAME,  value);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION    ||    addition.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	15	None	replace
229	[BUG]  [BUGGY]  Node  addition  =  n.getParent().removeChild(addition);  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  n.getParent().removeChild(addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  n.getParent().removeChild(addition);	  Node    addition    =    n.getParent().removeChild(value);    	non-compiled	[CE]  ')'  expected	39	None	replace
230	[BUG]  [BUGGY]  Node  addition  =  n.getParent().removeChild(add);  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  n.getParent().removeChild(add);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  n.getParent().removeChild(add);	  Node    addition    =    n.getParent().removeChild(value);    	non-compiled	[CE]  ')'  expected	39	None	replace
231	[BUG]  [BUGGY]  if(addition  ==  null  &&  addition.getType()  ==  Token.VAR)  {  reportCodeChange();  }  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  if(addition  ==  null  &&  addition.getType()  ==  Token.VAR)  {  reportCodeChange();  }  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	if(addition  ==  null  &&  addition.getType()  ==  Token.VAR)  {  reportCodeChange();  }	  if(addition!=    null    &&    addition.getType()    ==    Token.VAR)    {    reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	51	None	replace
232	[BUG]  [BUGGY]  if(addition!=  null  &&  addition.getType()  ==  Token.EMPTY)  {  reportCodeChange();  }  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  if(addition!=  null  &&  addition.getType()  ==  Token.EMPTY)  {  reportCodeChange();  }  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	if(addition!=  null  &&  addition.getType()  ==  Token.EMPTY)  {  reportCodeChange();  }	  if(addition!=    null    &&    addition.getType()    ==    Token.FUNCTION)    {    reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	47	None	replace
233	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( "av ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);	  Node    addition    =    IR.add(IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    n.getParent().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	54	None	replace
234	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( ", ").src(value));  n.getParent().replaceChild(n,  addition);  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  IR.add(IR.string( ", ").src(value));  n.getParent().replaceChild(n,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( ", ").src(value));  n.getParent().replaceChild(n,  addition);	  Node    addition    =    IR.add(IR.string(   "       ").src(callTarget),    value.detachFromParent());    n.getParent().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	55	None	replace
235	[BUG]  [BUGGY]  if(addition  ==  null  &&  addition.getType()  ==  Token.EXPR_RESULT)  {  reportCodeChange();  }  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  if(addition  ==  null  &&  addition.getType()  ==  Token.EXPR_RESULT)  {  reportCodeChange();  }  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	if(addition  ==  null  &&  addition.getType()  ==  Token.EXPR_RESULT)  {  reportCodeChange();  }	  if(addition!=    null    &&    addition.getType()    ==    Token.EXPR_RESULT)    {    reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	48	None	replace
236	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(callTarget),  value.detachFromParent());  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(callTarget),  value.detachFromParent());  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( "av ").srcref(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	58	None	replace
237	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "- ").srcref(callTarget),  value.detachFromParent());  [CE]  ')'  expected  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  IR.add(IR.string( "- ").srcref(callTarget),  value.detachFromParent());  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( "- ").srcref(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "       ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	58	None	replace
238	[BUG]  [BUGGY]  if(added!=  null)  {  aughtExceptionHandler.handleMissingName(n,  addition);  }  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  if(added!=  null)  {  aughtExceptionHandler.handleMissingName(n,  addition);  }  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	if(added!=  null)  {  aughtExceptionHandler.handleMissingName(n,  addition);  }	  aughtExceptionHandler.handleMissingName(n,    addition);    	non-compiled	[CE]  ')'  expected	33	None	replace
239	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getFirstChild()  ==  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getFirstChild()  ==  Token.EXPR_RESULT);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getFirstChild()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION    ||    addition.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	14	None	replace
240	[BUG]  [BUGGY]  reportError( "Failed  to  add  value: "  +  value);  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError( "Failed  to  add  value: "  +  value);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Failed  to  add  value: "  +  value);	  reportError(   "Failed    to    add    n:   "    +    addition);    	non-compiled	[CE]  ')'  expected	38	None	replace
241	[BUG]  [BUGGY]  Reporter.error( "Failed  to  add  n: "  +  value);  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Reporter.error( "Failed  to  add  n: "  +  value);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Reporter.error( "Failed  to  add  n: "  +  value);	  reportError(   "Failed    to    add    n:   "    +    addition);    	non-compiled	[CE]  ')'  expected	38	None	replace
242	[BUG]  [BUGGY]  Reporter.warning( "Failed  to  add  n: "  +  addition);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Reporter.warning( "Failed  to  add  n: "  +  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Reporter.warning( "Failed  to  add  n: "  +  addition);	  reportError(   "Failed    to    add    n:   "    +    addition);    	non-compiled	[CE]  ')'  expected	38	None	replace
243	[BUG]  [BUGGY]  reportWarning( "Failed  to  add  n: "  +  addition);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportWarning( "Failed  to  add  n: "  +  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportWarning( "Failed  to  add  n: "  +  addition);	  reportError(   "Failed    to    add    n:   "    +    addition);    	non-compiled	[CE]  ')'  expected	38	None	replace
244	[BUG]  [BUGGY]  n.removeLastChild();  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  n.removeLastChild();  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.removeLastChild();	  n.replaceChild(callTarget,    addition);    	non-compiled	[CE]  ')'  expected	11	None	replace
245	[BUG]  [BUGGY]  n.addChildToFront(value,  addition);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  n.addChildToFront(value,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.addChildToFront(value,  addition);	  n.replaceChild(callTarget,    addition);    	non-compiled	[CE]  ')'  expected	11	None	replace
246	[BUG]  [BUGGY]  Preconditions.checkState(value.getType()  ==  Token.NAME);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(value.getType()  ==  Token.NAME);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(value.getType()  ==  Token.NAME);	  parent.replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	23	None	replace
247	[BUG]  [BUGGY]  if(added!=  null  &&  addition.getType()  ==  Token.FUNCTION)  {  reportError();  }  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  if(added!=  null  &&  addition.getType()  ==  Token.FUNCTION)  {  reportError();  }  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	if(added!=  null  &&  addition.getType()  ==  Token.FUNCTION)  {  reportError();  }	  if(added!=    null)    {    reportError();    }    	non-compiled	[CE]  ')'  expected	43	None	replace
248	[BUG]  [BUGGY]  if(added!=  null  &&  addition.getType()  ==  Token.EXPR_RESULT)  {  reportError();  }  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  if(added!=  null  &&  addition.getType()  ==  Token.EXPR_RESULT)  {  reportError();  }  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	if(added!=  null  &&  addition.getType()  ==  Token.EXPR_RESULT)  {  reportError();  }	  if(added!=    null)    {    reportError();    }    	non-compiled	[CE]  ')'  expected	43	None	replace
249	[BUG]  [BUGGY]  if(added!=  null  &&  addition.hasChildren())  {  reportError();  }  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  if(added!=  null  &&  addition.hasChildren())  {  reportError();  }  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	if(added!=  null  &&  addition.hasChildren())  {  reportError();  }	  if(added!=    null)    {    reportError();    }    	non-compiled	[CE]  ')'  expected	43	None	replace
250	[BUG]  [BUGGY]  if(added!=  null  &&  addition.getType()  ==  Token.VAR)  {  reportError();  }  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  if(added!=  null  &&  addition.getType()  ==  Token.VAR)  {  reportError();  }  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	if(added!=  null  &&  addition.getType()  ==  Token.VAR)  {  reportError();  }	  if(added!=    null)    {    reportError();    }    	non-compiled	[CE]  ')'  expected	43	None	replace
251	[BUG]  [BUGGY]  if(added!=  null  &&  addition.getType()  ==  Token.NAME)  {  reportError();  }  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  if(added!=  null  &&  addition.getType()  ==  Token.NAME)  {  reportError();  }  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	if(added!=  null  &&  addition.getType()  ==  Token.NAME)  {  reportError();  }	  if(added!=    null)    {    reportError();    }    	non-compiled	[CE]  ')'  expected	43	None	replace
252	[BUG]  [BUGGY]  if(added!=  null  &&  addition.getType()  ==  Token.RETURN)  {  reportError();  }  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  if(added!=  null  &&  addition.getType()  ==  Token.RETURN)  {  reportError();  }  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	if(added!=  null  &&  addition.getType()  ==  Token.RETURN)  {  reportError();  }	  if(added!=    null)    {    reportError();    }    	non-compiled	[CE]  ')'  expected	43	None	replace
253	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getFirstChild()  ==  Token.VAR);  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getFirstChild()  ==  Token.VAR);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getFirstChild()  ==  Token.VAR);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION    ||    addition.getType()    ==    Token.VAR);    	non-compiled	[CE]  ')'  expected	17	None	replace
254	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").src(value),  addition.detachFromParent());  n.getParent().replaceChild(n,  addition);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").src(value),  addition.detachFromParent());  n.getParent().replaceChild(n,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( "   ").src(value),  addition.detachFromParent());  n.getParent().replaceChild(n,  addition);	  Node    addition    =    IR.add(IR.string(   "       ").src(callTarget),    addition.detachFromParent());    n.getParent().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	57	None	replace
255	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( ", ").src(value),  addition.detachFromParent());  n.getParent().replaceChild(n,  addition);  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  IR.add(IR.string( ", ").src(value),  addition.detachFromParent());  n.getParent().replaceChild(n,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( ", ").src(value),  addition.detachFromParent());  n.getParent().replaceChild(n,  addition);	  Node    addition    =    IR.add(IR.string(   "       ").src(callTarget),    addition.detachFromParent());    n.getParent().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	57	None	replace
256	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").src(value),  exception.detachFromParent());  n.getParent().replaceChild(n,  addition);  [CE]  ')'  expected  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").src(value),  exception.detachFromParent());  n.getParent().replaceChild(n,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( "   ").src(value),  exception.detachFromParent());  n.getParent().replaceChild(n,  addition);	  Node    addition    =    IR.add(IR.string(   "       ").src(callTarget),    addition.detachFromParent());    n.getParent().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	57	None	replace
257	[BUG]  [BUGGY]  reportError( "Failed  to  add  a  FoldArrayAction.  Expected: "  +  value);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError( "Failed  to  add  a  FoldArrayAction.  Expected: "  +  value);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Failed  to  add  a  FoldArrayAction.  Expected: "  +  value);	  reportError(   "Failed    to    add    a    FoldArrayAction.   ");    	non-compiled	[CE]  ')'  expected	45	None	replace
258	[BUG]  [BUGGY]  reportError( "Failed  to  add  a  FoldArrayAction.  Expected  value. ");  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError( "Failed  to  add  a  FoldArrayAction.  Expected  value. ");  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Failed  to  add  a  FoldArrayAction.  Expected  value. ");	  reportError(   "Failed    to    add    a    FoldArrayAction.   ");    	non-compiled	[CE]  ')'  expected	45	None	replace
259	[BUG]  [BUGGY]  reportError( "Failed  to  add  a  FoldArrayAction.  Expected  item. ");  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError( "Failed  to  add  a  FoldArrayAction.  Expected  item. ");  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Failed  to  add  a  FoldArrayAction.  Expected  item. ");	  reportError(   "Failed    to    add    a    FoldArrayAction.   ");    	non-compiled	[CE]  ')'  expected	45	None	replace
260	[BUG]  [BUGGY]  n.getName().addChildToFront(value,  addition);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  n.getName().addChildToFront(value,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.getName().addChildToFront(value,  addition);	  n.getName().replaceChild(value,    addition);    	non-compiled	[CE]  ')'  expected	42	None	replace
261	[BUG]  [BUGGY]  reportError( "Failed  to  add  a  FoldArrayActionCall.  Expected: "  +  value);  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError( "Failed  to  add  a  FoldArrayActionCall.  Expected: "  +  value);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Failed  to  add  a  FoldArrayActionCall.  Expected: "  +  value);	  reportError(   "Failed    to    add    a    FoldArrayActionCall.   ");    	non-compiled	[CE]  ')'  expected	46	None	replace
262	[BUG]  [BUGGY]  reportError( "Failed  to  add  a  FoldArrayAction  action. ");  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError( "Failed  to  add  a  FoldArrayAction  action. ");  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Failed  to  add  a  FoldArrayAction  action. ");	  reportError(   "Failed    to    add    a    FoldArrayActionCall.   ");    	non-compiled	[CE]  ')'  expected	46	None	replace
263	[BUG]  [BUGGY]  Node  addition  =  value.removeFirstChild();  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  value.removeFirstChild();  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  value.removeFirstChild();	  Node    addition    =    n.getLastChild();    	non-compiled	[CE]  ')'  expected	19	None	replace
264	[BUG]  [BUGGY]  Node  addition  =  value.replaceChild(n,  addition);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  value.replaceChild(n,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  value.replaceChild(n,  addition);	  Node    addition    =    n.getLastChild();    	non-compiled	[CE]  ')'  expected	19	None	replace
265	[BUG]  [BUGGY]  Node  addition  =  value.getNext();  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  value.getNext();  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  value.getNext();	  Node    addition    =    n.getLastChild();    	non-compiled	[CE]  ')'  expected	19	None	replace
266	[BUG]  [BUGGY]  if(addition!=  null  &&  addition.size()  >  4)  {  reportCodeChange();  }  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  if(addition!=  null  &&  addition.size()  >  4)  {  reportCodeChange();  }  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	if(addition!=  null  &&  addition.size()  >  4)  {  reportCodeChange();  }	  if(addition!=    null    &&    addition.size()    >    0)    {    reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	52	None	replace
267	[BUG]  [BUGGY]  if(addition!=  null  &&  addition.size()  >  3)  {  reportCodeChange();  }  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  if(addition!=  null  &&  addition.size()  >  3)  {  reportCodeChange();  }  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	if(addition!=  null  &&  addition.size()  >  3)  {  reportCodeChange();  }	  if(addition!=    null    &&    addition.size()    >    0)    {    reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	52	None	replace
268	[BUG]  [BUGGY]  if(addition!=  null  &&  addition.size()  >  1)  {  reportCodeChange();  }  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  if(addition!=  null  &&  addition.size()  >  1)  {  reportCodeChange();  }  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	if(addition!=  null  &&  addition.size()  >  1)  {  reportCodeChange();  }	  if(addition!=    null    &&    addition.size()    >    0)    {    reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	52	None	replace
269	[BUG]  [BUGGY]  Preconditions.checkArgument(a.getType()  ==  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkArgument(a.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkArgument(a.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(a.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	31	None	replace
270	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(value),  callTarget.detachFromParent());  n.getParent().replaceChild(n,  addition);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(value),  callTarget.detachFromParent());  n.getParent().replaceChild(n,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( "av ").srcref(value),  callTarget.detachFromParent());  n.getParent().replaceChild(n,  addition);	  Node    addition    =    IR.add(IR.string(   "       ").srcref(callTarget),    addition.detachFromParent());    n.getParent().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	56	None	replace
271	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( ", ").srcref(value),  callTarget.detachFromParent());  n.getParent().replaceChild(n,  addition);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  IR.add(IR.string( ", ").srcref(value),  callTarget.detachFromParent());  n.getParent().replaceChild(n,  addition);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( ", ").srcref(value),  callTarget.detachFromParent());  n.getParent().replaceChild(n,  addition);	  Node    addition    =    IR.add(IR.string(   "       ").srcref(callTarget),    addition.detachFromParent());    n.getParent().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	56	None	replace
272	[BUG]  [BUGGY]  n.removeFirstChild();  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  n.removeFirstChild();  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.removeFirstChild();	  n.detachFromParent();    	non-compiled	[CE]  ')'  expected	27	None	replace
273	[BUG]  [BUGGY]  Preconditions.checkState(value.getType()  ==  Token.FUNCTION  ||  value.getType()  ==  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(value.getType()  ==  Token.FUNCTION  ||  value.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(value.getType()  ==  Token.FUNCTION  ||  value.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(value.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	30	None	replace
274	[BUG]  [BUGGY]  Preconditions.checkState(value.getType()  ==  Token.FUNCTION  ||  value.getType()  ==  Token.VAR);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(value.getType()  ==  Token.FUNCTION  ||  value.getType()  ==  Token.VAR);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(value.getType()  ==  Token.FUNCTION  ||  value.getType()  ==  Token.VAR);	  Preconditions.checkState(value.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	30	None	replace
275	[BUG]  [BUGGY]  Node  addition  =  value.removeFirstChild().getNext();  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Node  addition  =  value.removeFirstChild().getNext();  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  value.removeFirstChild().getNext();	  Node    addition    =    n.getFirstChild().getNext();    	non-compiled	[CE]  ')'  expected	18	None	replace
276	[BUG]  [BUGGY]  reportError( "Failed  to  add  a  value: "  +  value);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError( "Failed  to  add  a  value: "  +  value);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Failed  to  add  a  value: "  +  value);	  reportError(   "Failed    to    add    a    value.   ");    	non-compiled	[CE]  ')'  expected	36	None	replace
277	[BUG]  [BUGGY]  Reporter.error( "Failed  to  add  a  value. ");  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Reporter.error( "Failed  to  add  a  value. ");  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Reporter.error( "Failed  to  add  a  value. ");	  reportError(   "Failed    to    add    a    value.   ");    	non-compiled	[CE]  ')'  expected	36	None	replace
278	[BUG]  [BUGGY]  reportError( "Failed  to  add  a  value.  Expected: "  +  value);  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  reportError( "Failed  to  add  a  value.  Expected: "  +  value);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Failed  to  add  a  value.  Expected: "  +  value);	  reportError(   "Failed    to    add    a    value.   ");    	non-compiled	[CE]  ')'  expected	36	None	replace
279	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSyntaxException( " ");  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  aughtExceptionHandler.throwAsSyntaxException( " ");  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	aughtExceptionHandler.throwAsSyntaxException( " ");	  if(addition    ==    null)    {    reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	22	None	replace
280	[BUG]  [BUGGY]  aughtExceptionHandler.throwAssertionFailedError( "msg.bad.assertion.expected ",  value);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  aughtExceptionHandler.throwAssertionFailedError( "msg.bad.assertion.expected ",  value);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	aughtExceptionHandler.throwAssertionFailedError( "msg.bad.assertion.expected ",  value);	  if(addition    ==    null)    {    reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	22	None	replace
281	[BUG]  [BUGGY]  aughtExceptionHandler.throwAssertionFailedError( "msg.bad.assertion.expected ");  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  aughtExceptionHandler.throwAssertionFailedError( "msg.bad.assertion.expected ");  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	aughtExceptionHandler.throwAssertionFailedError( "msg.bad.assertion.expected ");	  if(addition    ==    null)    {    reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	22	None	replace
282	[BUG]  [BUGGY]  Preconditions.checkArgument(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.VAR);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkArgument(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.VAR);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkArgument(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.VAR);	  Preconditions.checkArgument(a.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	59	None	replace
283	[BUG]  [BUGGY]  Preconditions.checkArgument(value.getType()!=  Token.FUNCTION);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkArgument(value.getType()!=  Token.FUNCTION);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkArgument(value.getType()!=  Token.FUNCTION);	  Preconditions.checkArgument(a.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	59	None	replace
284	[BUG]  [BUGGY]  if(addition!=  null  &&  addition.getType()  ==  Token.NAME  ||  addition.getType()  ==  Token.FUNCTION)  {  reportCodeChange();  }  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  if(addition!=  null  &&  addition.getType()  ==  Token.NAME  ||  addition.getType()  ==  Token.FUNCTION)  {  reportCodeChange();  }  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	if(addition!=  null  &&  addition.getType()  ==  Token.NAME  ||  addition.getType()  ==  Token.FUNCTION)  {  reportCodeChange();  }	  if(addition!=    null    &&    addition.getType()    ==    Token.NAME)    {    reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	50	None	replace
285	[BUG]  [BUGGY]  if(addition!=  null  &&  addition.getType()  ==  Token.NAME  ||  addition.getType()  ==  Token.VAR)  {  reportCodeChange();  }  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  if(addition!=  null  &&  addition.getType()  ==  Token.NAME  ||  addition.getType()  ==  Token.VAR)  {  reportCodeChange();  }  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	if(addition!=  null  &&  addition.getType()  ==  Token.NAME  ||  addition.getType()  ==  Token.VAR)  {  reportCodeChange();  }	  if(addition!=    null    &&    addition.getType()    ==    Token.NAME)    {    reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	50	None	replace
286	[BUG]  [BUGGY]  if(addition!=  null  &&  addition.getType()  ==  Token.NAME  ||  addition.getType()  ==  Token.CALL)  {  reportCodeChange();  }  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  if(addition!=  null  &&  addition.getType()  ==  Token.NAME  ||  addition.getType()  ==  Token.CALL)  {  reportCodeChange();  }  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	if(addition!=  null  &&  addition.getType()  ==  Token.NAME  ||  addition.getType()  ==  Token.CALL)  {  reportCodeChange();  }	  if(addition!=    null    &&    addition.getType()    ==    Token.NAME)    {    reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	50	None	replace
287	[BUG]  [BUGGY]  if(addition!=  null  &&  addition.getType()  ==  Token.NAME  ||  addition.getType()  ==  Token.SCRIPT)  {  reportCodeChange();  }  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  if(addition!=  null  &&  addition.getType()  ==  Token.NAME  ||  addition.getType()  ==  Token.SCRIPT)  {  reportCodeChange();  }  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	if(addition!=  null  &&  addition.getType()  ==  Token.NAME  ||  addition.getType()  ==  Token.SCRIPT)  {  reportCodeChange();  }	  if(addition!=    null    &&    addition.getType()    ==    Token.NAME)    {    reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	50	None	replace
288	[BUG]  [BUGGY]  n.setType(Token.VAR);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  n.setType(Token.VAR);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.setType(Token.VAR);	  if(addition!=    null    &&    addition.getType()    ==    Token.VAR)    {    reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	51	None	replace
289	[BUG]  [BUGGY]  if(addition!=  null  &&  addition.hasChildren()  ||  addition.hasChildren())  {  reportCodeChange();  }  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  if(addition!=  null  &&  addition.hasChildren()  ||  addition.hasChildren())  {  reportCodeChange();  }  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	if(addition!=  null  &&  addition.hasChildren()  ||  addition.hasChildren())  {  reportCodeChange();  }	  if(addition!=    null    &&    addition.hasChildren())    {    reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	49	None	replace
290	[BUG]  [BUGGY]  Reporter.warning( "Unexpected  error: "  +  a);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Reporter.warning( "Unexpected  error: "  +  a);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Reporter.warning( "Unexpected  error: "  +  a);	  reportError(   "Unexpected    error:   "    +    a);    	non-compiled	[CE]  ')'  expected	44	None	replace
291	[BUG]  [BUGGY]  Preconditions.checkState(value.getType()  ==  Token.FUNCTION  ||  addition!=  null);  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);      [BUGGY]  Preconditions.checkState(value.getType()  ==  Token.FUNCTION  ||  addition!=  null);  [BUGGY]      return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(value.getType()  ==  Token.FUNCTION  ||  addition!=  null);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION,    addition);    	non-compiled	[CE]  ')'  expected	16	None	replace
