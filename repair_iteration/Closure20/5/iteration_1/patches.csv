bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  n.getParent().replaceChild(callTarget,  addition);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  n.getParent().replaceChild(callTarget,  addition);  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.getParent().replaceChild(callTarget,  addition);	  n.getParent().removeChild(address);    	non-compiled	[CE]  ')'  expected	5	None	replace
2	[BUG]  [BUGGY]  n.getParent().replaceChild(value,  addition);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  n.getParent().replaceChild(value,  addition);  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.getParent().replaceChild(value,  addition);	  n.getParent().removeChild(address);    	non-compiled	[CE]  ')'  expected	5	None	replace
3	[BUG]  [BUGGY]  n.getNext().removeChild(value);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  n.getNext().removeChild(value);  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.getNext().removeChild(value);	  n.getParent().removeChild(address);    	non-compiled	[CE]  ')'  expected	5	None	replace
4	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  addition);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  n.getNext().replaceChild(n,  addition);  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.getNext().replaceChild(n,  addition);	  n.getParent().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	4	None	replace
5	[BUG]  [BUGGY]  n.getParent().replaceChild(parent,  addition);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  n.getParent().replaceChild(parent,  addition);  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.getParent().replaceChild(parent,  addition);	  n.getParent().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	4	None	replace
6	[BUG]  [BUGGY]  n.getParent().removeChild(a);  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  n.getParent().removeChild(a);  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.getParent().removeChild(a);	  n.getParent().removeChild(value);    	non-compiled	[CE]  ')'  expected	3	None	replace
7	[BUG]  [BUGGY]  n.getParent().removeChild(parent);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  n.getParent().removeChild(parent);  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.getParent().removeChild(parent);	  n.getParent().removeChild(value);    	non-compiled	[CE]  ')'  expected	3	None	replace
8	[BUG]  [BUGGY]  n.removeChild(a);  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  n.removeChild(a);  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.removeChild(a);	  n.removeChild(value);    	non-compiled	[CE]  ')'  expected	11	None	replace
9	[BUG]  [BUGGY]  n.removeChild(add);  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  n.removeChild(add);  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.removeChild(add);	  n.removeChild(value);    	non-compiled	[CE]  ')'  expected	11	None	replace
10	[BUG]  [BUGGY]  n.removeChild(addr);  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  n.removeChild(addr);  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.removeChild(addr);	  n.removeChild(value);    	non-compiled	[CE]  ')'  expected	11	None	replace
11	[BUG]  [BUGGY]  n.replaceChild(callTarget,  addition);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  n.replaceChild(callTarget,  addition);  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.replaceChild(callTarget,  addition);	  n.removeChild(address);    	non-compiled	[CE]  ')'  expected	10	None	replace
12	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()!=  Token.FUNCTION);  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  Preconditions.checkState(a.getType()!=  Token.FUNCTION);  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(a.getType()!=  Token.FUNCTION);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	8	None	replace
13	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	8	None	replace
14	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	8	None	replace
15	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.NAME);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.NAME);  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.NAME);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	8	None	replace
16	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION,  addition);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION,  addition);  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(a.getType()  ==  Token.FUNCTION,  addition);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	8	None	replace
17	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.VAR);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.VAR);  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.VAR);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	8	None	replace
18	[BUG]  [BUGGY]  Node  addition  =  n.getFirstChild().getNext();  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  Node  addition  =  n.getFirstChild().getNext();  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  n.getFirstChild().getNext();	      	non-compiled	[CE]  ')'  expected	6	None	replace
19	[BUG]  [BUGGY]  Node  addition  =  n.getLastChild();  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  Node  addition  =  n.getLastChild();  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  n.getLastChild();	      	non-compiled	[CE]  ')'  expected	6	None	replace
20	[BUG]  [BUGGY]  Node  addition  =  n.getNext().getNext();  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  Node  addition  =  n.getNext().getNext();  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  n.getNext().getNext();	      	non-compiled	[CE]  ')'  expected	6	None	replace
21	[BUG]  [BUGGY]  n.getParent().removeChild(addment);  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  n.getParent().removeChild(addment);  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.getParent().removeChild(addment);	  reportError();    	non-compiled	[CE]  ')'  expected	9	None	replace
22	[BUG]  [BUGGY]  if(addition  ==  null)  {  reportCodeChange();  }  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  if(addition  ==  null)  {  reportCodeChange();  }  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	if(addition  ==  null)  {  reportCodeChange();  }	  if(addition!=    null)    {    reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	7	None	replace
23	[BUG]  [BUGGY]  parent.replaceChild(n,  addition);  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  parent.replaceChild(n,  addition);  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	parent.replaceChild(n,  addition);	  if(addition!=    null)    {    reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	7	None	replace
24	[BUG]  [BUGGY]  n.addChildToFront(value);  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  n.addChildToFront(value);  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.addChildToFront(value);	  n.removeChild(addition);    	non-compiled	[CE]  ')'  expected	2	None	replace
25	[BUG]  [BUGGY]  n.addChildToFront(addition);  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  n.addChildToFront(addition);  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.addChildToFront(addition);	  n.removeChild(addition);    	non-compiled	[CE]  ')'  expected	2	None	replace
26	[BUG]  [BUGGY]  n.replaceChild(value,  addition);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  n.replaceChild(value,  addition);  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.replaceChild(value,  addition);	  n.removeChild(address);    	non-compiled	[CE]  ')'  expected	10	None	replace
27	[BUG]  [BUGGY]  n.detachFromParent();  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  n.detachFromParent();  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.detachFromParent();	  n.removeChild(address);    	non-compiled	[CE]  ')'  expected	10	None	replace
28	[BUG]  [BUGGY]  n.removeChild(addive);  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  n.removeChild(addive);  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.removeChild(addive);	  n.removeChild(value);    	non-compiled	[CE]  ')'  expected	11	None	replace
29	[BUG]  [BUGGY]  n.getParent().replaceChild(value);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  n.getParent().replaceChild(value);  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.getParent().replaceChild(value);	  n.getParent().removeChild(address);    	non-compiled	[CE]  ')'  expected	5	None	replace
30	[BUG]  [BUGGY]  Preconditions.checkState(value.getType()  ==  Token.FUNCTION);  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  Preconditions.checkState(value.getType()  ==  Token.FUNCTION);  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(value.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	8	None	replace
31	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkState(a.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	8	None	replace
32	[BUG]  [BUGGY]  n.getName().removeChild(value);  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  n.getName().removeChild(value);  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.getName().removeChild(value);	  n.getParent().removeChild(addition);    	non-compiled	[CE]  ')'  expected	1	None	replace
33	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(n,  addition);  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  aughtExceptionHandler.handleMissingName(n,  addition);  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	aughtExceptionHandler.handleMissingName(n,  addition);	  if(addition!=    null)    {    reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	7	None	replace
34	[BUG]  [BUGGY]  n.getParent().removeChild(add);  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  n.getParent().removeChild(add);  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.getParent().removeChild(add);	  n.getParent().removeChild(value);    	non-compiled	[CE]  ')'  expected	3	None	replace
35	[BUG]  [BUGGY]  reportError(a);  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  reportError(a);  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError(a);	  reportError();    	non-compiled	[CE]  ')'  expected	9	None	replace
36	[BUG]  [BUGGY]  reportError( "Failed  to  add  a  value. ");  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  reportError( "Failed  to  add  a  value. ");  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Failed  to  add  a  value. ");	  reportError();    	non-compiled	[CE]  ')'  expected	9	None	replace
37	[BUG]  [BUGGY]  n.removeChild(addment);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  n.removeChild(addment);  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.removeChild(addment);	  reportError();    	non-compiled	[CE]  ')'  expected	9	None	replace
38	[BUG]  [BUGGY]  reportError( "Failed  to  add  n: "  +  addition);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  reportError( "Failed  to  add  n: "  +  addition);  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Failed  to  add  n: "  +  addition);	  reportError();    	non-compiled	[CE]  ')'  expected	9	None	replace
39	[BUG]  [BUGGY]  Node  addition  =  n.getParent().removeChild(value);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  Node  addition  =  n.getParent().removeChild(value);  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  n.getParent().removeChild(value);	      	non-compiled	[CE]  ')'  expected	6	None	replace
40	[BUG]  [BUGGY]  Node  addition  =  n.getNext().removeChild(value);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  Node  addition  =  n.getNext().removeChild(value);  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  n.getNext().removeChild(value);	      	non-compiled	[CE]  ')'  expected	6	None	replace
41	[BUG]  [BUGGY]  n.getNext().replaceChild(value,  addition);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  n.getNext().replaceChild(value,  addition);  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.getNext().replaceChild(value,  addition);	  n.getParent().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	4	None	replace
42	[BUG]  [BUGGY]  n.getName().replaceChild(value,  addition);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  n.getName().replaceChild(value,  addition);  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.getName().replaceChild(value,  addition);	  n.getParent().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	4	None	replace
43	[BUG]  [BUGGY]  if(added!=  null)  {  reportError();  }  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  if(added!=  null)  {  reportError();  }  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	if(added!=  null)  {  reportError();  }	  reportError();    	non-compiled	[CE]  ')'  expected	9	None	replace
44	[BUG]  [BUGGY]  reportError( "Unexpected  error: "  +  a);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  reportError( "Unexpected  error: "  +  a);  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Unexpected  error: "  +  a);	  reportError();    	non-compiled	[CE]  ')'  expected	9	None	replace
45	[BUG]  [BUGGY]  reportError( "Failed  to  add  a  FoldArrayAction. ");  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  reportError( "Failed  to  add  a  FoldArrayAction. ");  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Failed  to  add  a  FoldArrayAction. ");	  reportError();    	non-compiled	[CE]  ')'  expected	9	None	replace
46	[BUG]  [BUGGY]  reportError( "Failed  to  add  a  FoldArrayActionCall. ");  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  reportError( "Failed  to  add  a  FoldArrayActionCall. ");  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	reportError( "Failed  to  add  a  FoldArrayActionCall. ");	  reportError();    	non-compiled	[CE]  ')'  expected	9	None	replace
47	[BUG]  [BUGGY]  if(addition!=  null  &&  addition.getType()  ==  Token.FUNCTION)  {  reportCodeChange();  }  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  if(addition!=  null  &&  addition.getType()  ==  Token.FUNCTION)  {  reportCodeChange();  }  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	if(addition!=  null  &&  addition.getType()  ==  Token.FUNCTION)  {  reportCodeChange();  }	  if(addition!=    null)    {    reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	7	None	replace
48	[BUG]  [BUGGY]  if(addition!=  null  &&  addition.getType()  ==  Token.EXPR_RESULT)  {  reportCodeChange();  }  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  if(addition!=  null  &&  addition.getType()  ==  Token.EXPR_RESULT)  {  reportCodeChange();  }  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	if(addition!=  null  &&  addition.getType()  ==  Token.EXPR_RESULT)  {  reportCodeChange();  }	  if(addition!=    null)    {    reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	7	None	replace
49	[BUG]  [BUGGY]  if(addition!=  null  &&  addition.hasChildren())  {  reportCodeChange();  }  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  if(addition!=  null  &&  addition.hasChildren())  {  reportCodeChange();  }  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	if(addition!=  null  &&  addition.hasChildren())  {  reportCodeChange();  }	  if(addition!=    null)    {    reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	7	None	replace
50	[BUG]  [BUGGY]  if(addition!=  null  &&  addition.getType()  ==  Token.NAME)  {  reportCodeChange();  }  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  if(addition!=  null  &&  addition.getType()  ==  Token.NAME)  {  reportCodeChange();  }  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	if(addition!=  null  &&  addition.getType()  ==  Token.NAME)  {  reportCodeChange();  }	  if(addition!=    null)    {    reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	7	None	replace
51	[BUG]  [BUGGY]  if(addition!=  null  &&  addition.getType()  ==  Token.VAR)  {  reportCodeChange();  }  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  if(addition!=  null  &&  addition.getType()  ==  Token.VAR)  {  reportCodeChange();  }  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	if(addition!=  null  &&  addition.getType()  ==  Token.VAR)  {  reportCodeChange();  }	  if(addition!=    null)    {    reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	7	None	replace
52	[BUG]  [BUGGY]  if(addition!=  null  &&  addition.size()  >  0)  {  reportCodeChange();  }  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  if(addition!=  null  &&  addition.size()  >  0)  {  reportCodeChange();  }  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	if(addition!=  null  &&  addition.size()  >  0)  {  reportCodeChange();  }	  if(addition!=    null)    {    reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	7	None	replace
53	[BUG]  [BUGGY]  n.getParent().replaceChild(param,  addition);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  n.getParent().replaceChild(param,  addition);  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	n.getParent().replaceChild(param,  addition);	  n.getParent().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	4	None	replace
54	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);	      	non-compiled	[CE]  ')'  expected	6	None	replace
55	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").src(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").src(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( "   ").src(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);	      	non-compiled	[CE]  ')'  expected	6	None	replace
56	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").srcref(callTarget),  addition.detachFromParent());  n.getParent().replaceChild(n,  addition);  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").srcref(callTarget),  addition.detachFromParent());  n.getParent().replaceChild(n,  addition);  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( "   ").srcref(callTarget),  addition.detachFromParent());  n.getParent().replaceChild(n,  addition);	      	non-compiled	[CE]  ')'  expected	6	None	replace
57	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").src(callTarget),  addition.detachFromParent());  n.getParent().replaceChild(n,  addition);  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").src(callTarget),  addition.detachFromParent());  n.getParent().replaceChild(n,  addition);  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( "   ").src(callTarget),  addition.detachFromParent());  n.getParent().replaceChild(n,  addition);	      	non-compiled	[CE]  ')'  expected	6	None	replace
58	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").srcref(callTarget),  value.detachFromParent());  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").srcref(callTarget),  value.detachFromParent());  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Node  addition  =  IR.add(IR.string( "   ").srcref(callTarget),  value.detachFromParent());	      	non-compiled	[CE]  ')'  expected	6	None	replace
59	[BUG]  [BUGGY]  Preconditions.checkArgument(a.getType()  ==  Token.FUNCTION);  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);    [BUGGY]  Preconditions.checkArgument(a.getType()  ==  Token.FUNCTION);  [BUGGY]    return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	225	225	1	replace	Preconditions.checkArgument(a.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	8	None	replace
