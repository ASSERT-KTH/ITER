bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  addition  =  n.next();  [CE]  ')'  expected  [FE]                                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Node  addition  =  n.next();  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Node  addition  =  n.next();	  Node    addition    =    addition.next();    	non-compiled	[CE]  ')'  expected	13	None	replace
2	[BUG]  [BUGGY]  Node  addition  =  addition.removeFirst();  [CE]  ')'  expected  [FE]                                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Node  addition  =  addition.removeFirst();  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Node  addition  =  addition.removeFirst();	  Node    addition    =    addition.next();    	non-compiled	[CE]  ')'  expected	13	None	replace
3	[BUG]  [BUGGY]  Node  addition  =  addition.next(),  value.getType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]                                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Node  addition  =  addition.next(),  value.getType()  ==  Token.FUNCTION;  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Node  addition  =  addition.next(),  value.getType()  ==  Token.FUNCTION;	  Node    addition    =    addition.next();    	non-compiled	[CE]  ';'  expected	13	None	replace
4	[BUG]  [BUGGY]  Node  addition  =  addition.next(),  value.getLastChild());  [CE]  ';'  expected  [FE]                                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Node  addition  =  addition.next(),  value.getLastChild());  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Node  addition  =  addition.next(),  value.getLastChild());	  Node    addition    =    addition.next();    	non-compiled	[CE]  ';'  expected	13	None	replace
5	[BUG]  [BUGGY]  Node  addition  =  addition.removeFirstChild();  [CE]  ')'  expected  [FE]                                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Node  addition  =  addition.removeFirstChild();  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Node  addition  =  addition.removeFirstChild();	  Node    addition    =    addition.next();    	non-compiled	[CE]  ')'  expected	13	None	replace
6	[BUG]  [BUGGY]  n.removeChild(value);  addition  =  addition;  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.removeChild(value);  addition  =  addition;  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.removeChild(value);  addition  =  addition;	  n.removeChild(addition);    addition    =    addition;    	non-compiled	[CE]  ')'  expected	37	None	replace
7	[BUG]  [BUGGY]  n.addChildToFront(value);  addition  =  addition;  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.addChildToFront(value);  addition  =  addition;  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.addChildToFront(value);  addition  =  addition;	  n.removeChild(addition);    addition    =    addition;    	non-compiled	[CE]  ')'  expected	37	None	replace
8	[BUG]  [BUGGY]  node.removeChild(value);  addition  =  addition;  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  node.removeChild(value);  addition  =  addition;  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	node.removeChild(value);  addition  =  addition;	  n.removeChild(addition);    addition    =    addition;    	non-compiled	[CE]  ')'  expected	37	None	replace
9	[BUG]  [BUGGY]  n.removeChild(key);  addition  =  addition;  [CE]  ')'  expected  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.removeChild(key);  addition  =  addition;  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.removeChild(key);  addition  =  addition;	  n.removeChild(addition);    addition    =    addition;    	non-compiled	[CE]  ')'  expected	37	None	replace
10	[BUG]  [BUGGY]  n.getNext().replaceChild(condition,  addition);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getNext().replaceChild(condition,  addition);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getNext().replaceChild(condition,  addition);	  n.getParent().replaceChild(condition,    addition);    	non-compiled	[CE]  ')'  expected	15	None	replace
11	[BUG]  [BUGGY]  n.getFirstChild().removeChild(value);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getFirstChild().removeChild(value);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getFirstChild().removeChild(value);	  n.getLastChild().removeChild(value);    	non-compiled	[CE]  ')'  expected	21	None	replace
12	[BUG]  [BUGGY]  n.getFirstChild().removeChild(a);  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getFirstChild().removeChild(a);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getFirstChild().removeChild(a);	  n.getLastChild().removeChild(value);    	non-compiled	[CE]  ')'  expected	21	None	replace
13	[BUG]  [BUGGY]  n.getFirstChild().removeChild(addition);  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getFirstChild().removeChild(addition);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getFirstChild().removeChild(addition);	  n.getLastChild().removeChild(value);    	non-compiled	[CE]  ')'  expected	21	None	replace
14	[BUG]  [BUGGY]  n.getLastChild().removeChild(add);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getLastChild().removeChild(add);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getLastChild().removeChild(add);	  n.getLastChild().removeChild(value);    	non-compiled	[CE]  ')'  expected	21	None	replace
15	[BUG]  [BUGGY]  n.getFirstChild().removeChild(address);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getFirstChild().removeChild(address);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getFirstChild().removeChild(address);	  n.getLastChild().removeChild(value);    	non-compiled	[CE]  ')'  expected	21	None	replace
16	[BUG]  [BUGGY]  n.getName().replaceChild(callTarget,  addition);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getName().replaceChild(callTarget,  addition);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getName().replaceChild(callTarget,  addition);	  n.getName().replaceChild(value,    addition);    	non-compiled	[CE]  ')'  expected	26	None	replace
17	[BUG]  [BUGGY]  n.getName().replaceChild(addition,  addition);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getName().replaceChild(addition,  addition);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getName().replaceChild(addition,  addition);	  n.getName().replaceChild(value,    addition);    	non-compiled	[CE]  ')'  expected	26	None	replace
18	[BUG]  [BUGGY]  n.getName().removeChild(addition);  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getName().removeChild(addition);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getName().removeChild(addition);	  n.getName().replaceChild(value,    addition);    	non-compiled	[CE]  ')'  expected	26	None	replace
19	[BUG]  [BUGGY]  n.getName().replaceChild(addition,  value);  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getName().replaceChild(addition,  value);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getName().replaceChild(addition,  value);	  n.getName().replaceChild(value,    addition);    	non-compiled	[CE]  ')'  expected	26	None	replace
20	[BUG]  [BUGGY]  n.getType().replaceChild(value,  addition);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getType().replaceChild(value,  addition);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getType().replaceChild(value,  addition);	  n.getName().replaceChild(value,    addition);    	non-compiled	[CE]  ')'  expected	26	None	replace
21	[BUG]  [BUGGY]  n.getLastChild().addChildToFront(addition);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getLastChild().addChildToFront(addition);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getLastChild().addChildToFront(addition);	  n.getLastChild().removeChild(addition);    	non-compiled	[CE]  ')'  expected	20	None	replace
22	[BUG]  [BUGGY]  n.getNext().addChildToFront(addition);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getNext().addChildToFront(addition);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getNext().addChildToFront(addition);	  n.getNext().removeChild(addition);    	non-compiled	[CE]  ')'  expected	3	None	replace
23	[BUG]  [BUGGY]  n.getNext().addChildToFront(a);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getNext().addChildToFront(a);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getNext().addChildToFront(a);	  n.getNext().removeChild(a);    	non-compiled	[CE]  ')'  expected	16	None	replace
24	[BUG]  [BUGGY]  n.getLastChild().replaceChild(addition,  addition);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getLastChild().replaceChild(addition,  addition);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getLastChild().replaceChild(addition,  addition);	  n.getLastChild().replaceChild(value,    addition);    	non-compiled	[CE]  ')'  expected	5	None	replace
25	[BUG]  [BUGGY]  n.getLastChild().replaceChild(addition,  value);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getLastChild().replaceChild(addition,  value);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getLastChild().replaceChild(addition,  value);	  n.getLastChild().replaceChild(value,    addition);    	non-compiled	[CE]  ')'  expected	5	None	replace
26	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction());  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction());  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction());	  NodeTraversal.traverse(compiler,    addition,    new    FoldArrayAction());    	non-compiled	[CE]  ')'  expected	34	None	replace
27	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  addition,  new  FoldArrayAction(),  addition);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  NodeTraversal.traverse(compiler,  addition,  new  FoldArrayAction(),  addition);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	NodeTraversal.traverse(compiler,  addition,  new  FoldArrayAction(),  addition);	  NodeTraversal.traverse(compiler,    addition,    new    FoldArrayAction());    	non-compiled	[CE]  ')'  expected	34	None	replace
28	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  value,  new  FoldArrayAction());  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  NodeTraversal.traverse(compiler,  value,  new  FoldArrayAction());  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	NodeTraversal.traverse(compiler,  value,  new  FoldArrayAction());	  NodeTraversal.traverse(compiler,    addition,    new    FoldArrayAction());    	non-compiled	[CE]  ')'  expected	34	None	replace
29	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  additional,  new  FoldArrayAction(),  addition);  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  NodeTraversal.traverse(compiler,  additional,  new  FoldArrayAction(),  addition);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	NodeTraversal.traverse(compiler,  additional,  new  FoldArrayAction(),  addition);	  NodeTraversal.traverse(compiler,    addition,    new    FoldArrayAction());    	non-compiled	[CE]  ')'  expected	34	None	replace
30	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  addition,  new  FoldArrayAction(),  this);  [CE]  ')'  expected  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  NodeTraversal.traverse(compiler,  addition,  new  FoldArrayAction(),  this);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	NodeTraversal.traverse(compiler,  addition,  new  FoldArrayAction(),  this);	  NodeTraversal.traverse(compiler,    addition,    new    FoldArrayAction());    	non-compiled	[CE]  ')'  expected	34	None	replace
31	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  add,  new  FoldArrayAction());  [CE]  ')'  expected  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  NodeTraversal.traverse(compiler,  add,  new  FoldArrayAction());  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	NodeTraversal.traverse(compiler,  add,  new  FoldArrayAction());	  NodeTraversal.traverse(compiler,    addition,    new    FoldArrayAction());    	non-compiled	[CE]  ')'  expected	34	None	replace
32	[BUG]  [BUGGY]  n.getParent().removeChild(addition,  value);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getParent().removeChild(addition,  value);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getParent().removeChild(addition,  value);	  n.getParent().removeChild(value,    addition);    	non-compiled	[CE]  ')'  expected	32	None	replace
33	[BUG]  [BUGGY]  n.getParent().removeChild(address,  addition);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getParent().removeChild(address,  addition);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getParent().removeChild(address,  addition);	  n.getParent().removeChild(value,    addition);    	non-compiled	[CE]  ')'  expected	32	None	replace
34	[BUG]  [BUGGY]  n.getNext().removeChild(value,  addition);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getNext().removeChild(value,  addition);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getNext().removeChild(value,  addition);	  n.getParent().removeChild(value,    addition);    	non-compiled	[CE]  ')'  expected	32	None	replace
35	[BUG]  [BUGGY]  n.getParent().removeChild(addition,  addition);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getParent().removeChild(addition,  addition);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getParent().removeChild(addition,  addition);	  n.getParent().removeChild(value,    addition);    	non-compiled	[CE]  ')'  expected	32	None	replace
36	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()!=  Token.FUNCTION);  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Preconditions.checkState(a.getType()!=  Token.FUNCTION);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Preconditions.checkState(a.getType()!=  Token.FUNCTION);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	36	None	replace
37	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	36	None	replace
38	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION,  addition);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION,  addition);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Preconditions.checkState(a.getType()  ==  Token.FUNCTION,  addition);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	36	None	replace
39	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.NAME);  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.NAME);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.NAME);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	36	None	replace
40	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.FUNCTION);  [CE]  ')'  expected  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.FUNCTION);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	36	None	replace
41	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.CALL);  [CE]  ')'  expected  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.CALL);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.CALL);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	36	None	replace
42	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  addition,  true);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  NodeTraversal.traverse(compiler,  addition,  true);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	NodeTraversal.traverse(compiler,  addition,  true);	  NodeTraversal.traverse(compiler,    addition,    false);    	non-compiled	[CE]  ')'  expected	38	None	replace
43	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  false);  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  NodeTraversal.traverse(compiler,  n,  false);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	NodeTraversal.traverse(compiler,  n,  false);	  NodeTraversal.traverse(compiler,    addition,    false);    	non-compiled	[CE]  ')'  expected	38	None	replace
44	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  additional,  true);  [CE]  ')'  expected  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  NodeTraversal.traverse(compiler,  additional,  true);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	NodeTraversal.traverse(compiler,  additional,  true);	  NodeTraversal.traverse(compiler,    addition,    false);    	non-compiled	[CE]  ')'  expected	38	None	replace
45	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  value,  false);  [CE]  ')'  expected  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  NodeTraversal.traverse(compiler,  value,  false);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	NodeTraversal.traverse(compiler,  value,  false);	  NodeTraversal.traverse(compiler,    addition,    false);    	non-compiled	[CE]  ')'  expected	38	None	replace
46	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  addition,  false,  value);  [CE]  ')'  expected  [FE]                                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  NodeTraversal.traverse(compiler,  addition,  false,  value);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	NodeTraversal.traverse(compiler,  addition,  false,  value);	  NodeTraversal.traverse(compiler,    addition,    false);    	non-compiled	[CE]  ')'  expected	38	None	replace
47	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  true,  addition);  [CE]  ')'  expected  [FE]                                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  NodeTraversal.traverse(compiler,  true,  addition);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	NodeTraversal.traverse(compiler,  true,  addition);	  NodeTraversal.traverse(compiler,    addition,    false);    	non-compiled	[CE]  ')'  expected	38	None	replace
48	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  addition,  false,  n);  [CE]  ')'  expected  [FE]                                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  NodeTraversal.traverse(compiler,  addition,  false,  n);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	NodeTraversal.traverse(compiler,  addition,  false,  n);	  NodeTraversal.traverse(compiler,    addition,    false);    	non-compiled	[CE]  ')'  expected	38	None	replace
49	[BUG]  [BUGGY]  n.getParent().replaceChild(callTarget,  condition);  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getParent().replaceChild(callTarget,  condition);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getParent().replaceChild(callTarget,  condition);	  n.getParent().replaceChild(condition,    callTarget);    	non-compiled	[CE]  ')'  expected	33	None	replace
50	[BUG]  [BUGGY]  n.getParent().replaceChild(addition,  callTarget);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getParent().replaceChild(addition,  callTarget);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getParent().replaceChild(addition,  callTarget);	  n.getParent().replaceChild(condition,    callTarget);    	non-compiled	[CE]  ')'  expected	33	None	replace
51	[BUG]  [BUGGY]  n.getNext().replaceChild(callTarget,  condition);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getNext().replaceChild(callTarget,  condition);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getNext().replaceChild(callTarget,  condition);	  n.getParent().replaceChild(condition,    callTarget);    	non-compiled	[CE]  ')'  expected	33	None	replace
52	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n);  [CE]  ')'  expected  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  NodeTraversal.traverse(compiler,  n);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	NodeTraversal.traverse(compiler,  n);	  NodeTraversal.traverse(compiler,    addition);    	non-compiled	[CE]  ')'  expected	11	None	replace
53	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  addition,  this);  [CE]  ')'  expected  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  NodeTraversal.traverse(compiler,  addition,  this);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	NodeTraversal.traverse(compiler,  addition,  this);	  NodeTraversal.traverse(compiler,    addition);    	non-compiled	[CE]  ')'  expected	11	None	replace
54	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  addition,  reportCodeChange());  [CE]  ')'  expected  [FE]                                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  NodeTraversal.traverse(compiler,  addition,  reportCodeChange());  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	NodeTraversal.traverse(compiler,  addition,  reportCodeChange());	  NodeTraversal.traverse(compiler,    addition);    	non-compiled	[CE]  ')'  expected	11	None	replace
55	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  additional,  n);  [CE]  ')'  expected  [FE]                                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  NodeTraversal.traverse(compiler,  additional,  n);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	NodeTraversal.traverse(compiler,  additional,  n);	  NodeTraversal.traverse(compiler,    addition);    	non-compiled	[CE]  ')'  expected	11	None	replace
56	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  addition,  new  ImmutableSet());  [CE]  ')'  expected  [FE]                                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  NodeTraversal.traverse(compiler,  addition,  new  ImmutableSet());  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	NodeTraversal.traverse(compiler,  addition,  new  ImmutableSet());	  NodeTraversal.traverse(compiler,    addition);    	non-compiled	[CE]  ')'  expected	11	None	replace
57	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  addition,  value);  [CE]  ')'  expected  [FE]                                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  NodeTraversal.traverse(compiler,  addition,  value);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	NodeTraversal.traverse(compiler,  addition,  value);	  NodeTraversal.traverse(compiler,    addition);    	non-compiled	[CE]  ')'  expected	11	None	replace
58	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(addition,  addition);  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getFirstChild().replaceChild(addition,  addition);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getFirstChild().replaceChild(addition,  addition);	  n.getFirstChild().replaceChild(value,    addition);    	non-compiled	[CE]  ')'  expected	22	None	replace
59	[BUG]  [BUGGY]  Node  addition  =  value.getNext();  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Node  addition  =  value.getNext();  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Node  addition  =  value.getNext();	  Node    addition    =    addition.getNext();    	non-compiled	[CE]  ')'  expected	8	None	replace
60	[BUG]  [BUGGY]  Node  addition  =  n.getParent();  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Node  addition  =  n.getParent();  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Node  addition  =  n.getParent();	  Node    addition    =    addition.getNext();    	non-compiled	[CE]  ')'  expected	8	None	replace
61	[BUG]  [BUGGY]  Node  addition  =  n.getFirstChild();  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Node  addition  =  n.getFirstChild();  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Node  addition  =  n.getFirstChild();	  Node    addition    =    addition.getNext();    	non-compiled	[CE]  ')'  expected	8	None	replace
62	[BUG]  [BUGGY]  Node  addition  =  add.getNext();  [CE]  ')'  expected  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Node  addition  =  add.getNext();  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Node  addition  =  add.getNext();	  Node    addition    =    addition.getNext();    	non-compiled	[CE]  ')'  expected	8	None	replace
63	[BUG]  [BUGGY]  Node  addition  =  addr.getNext();  [CE]  ')'  expected  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Node  addition  =  addr.getNext();  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Node  addition  =  addr.getNext();	  Node    addition    =    addition.getNext();    	non-compiled	[CE]  ')'  expected	8	None	replace
64	[BUG]  [BUGGY]  Node  addition  =  n.getLastChild();  [CE]  ')'  expected  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Node  addition  =  n.getLastChild();  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Node  addition  =  n.getLastChild();	  Node    addition    =    n.getNext();    	non-compiled	[CE]  ')'  expected	12	None	replace
65	[BUG]  [BUGGY]  Node  addition  =  n.getType()  ==  Token.FUNCTION;  [CE]  ')'  expected  [FE]                                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Node  addition  =  n.getType()  ==  Token.FUNCTION;  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Node  addition  =  n.getType()  ==  Token.FUNCTION;	  Node    addition    =    n.getNext();    	non-compiled	[CE]  ')'  expected	12	None	replace
66	[BUG]  [BUGGY]  Node  addition  =  n.getNext()  +  1;  [CE]  ')'  expected  [FE]                                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Node  addition  =  n.getNext()  +  1;  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Node  addition  =  n.getNext()  +  1;	  Node    addition    =    n.getNext();    	non-compiled	[CE]  ')'  expected	12	None	replace
67	[BUG]  [BUGGY]  n.removeChild(add);  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.removeChild(add);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.removeChild(add);	  n.removeChild(addition);    	non-compiled	[CE]  ')'  expected	10	None	replace
68	[BUG]  [BUGGY]  n.addChildToFront(addition);  [CE]  ')'  expected  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.addChildToFront(addition);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.addChildToFront(addition);	  n.removeChild(addition);    	non-compiled	[CE]  ')'  expected	10	None	replace
69	[BUG]  [BUGGY]  n.addChildToBack(addition);  [CE]  ')'  expected  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.addChildToBack(addition);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.addChildToBack(addition);	  n.removeChild(addition);    	non-compiled	[CE]  ')'  expected	10	None	replace
70	[BUG]  [BUGGY]  n.getNext().removeChild(addr);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getNext().removeChild(addr);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getNext().removeChild(addr);	  n.getParent().removeChild(addr);    	non-compiled	[CE]  ')'  expected	18	None	replace
71	[BUG]  [BUGGY]  n.getLastChild().removeChild(addr);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getLastChild().removeChild(addr);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getLastChild().removeChild(addr);	  n.getParent().removeChild(addr);    	non-compiled	[CE]  ')'  expected	18	None	replace
72	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  addition);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  NodeTraversal.traverse(compiler,  n,  addition);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	NodeTraversal.traverse(compiler,  n,  addition);	  NodeTraversal.traverse(compiler,    addition,    n);    	non-compiled	[CE]  ')'  expected	35	None	replace
73	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  addition,  n,  value);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  NodeTraversal.traverse(compiler,  addition,  n,  value);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	NodeTraversal.traverse(compiler,  addition,  n,  value);	  NodeTraversal.traverse(compiler,    addition,    n);    	non-compiled	[CE]  ')'  expected	35	None	replace
74	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  addition,  n,  REGEXP_FLAGS_RE);  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  NodeTraversal.traverse(compiler,  addition,  n,  REGEXP_FLAGS_RE);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	NodeTraversal.traverse(compiler,  addition,  n,  REGEXP_FLAGS_RE);	  NodeTraversal.traverse(compiler,    addition,    n);    	non-compiled	[CE]  ')'  expected	35	None	replace
75	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  value,  addition);  [CE]  ')'  expected  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  NodeTraversal.traverse(compiler,  value,  addition);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	NodeTraversal.traverse(compiler,  value,  addition);	  NodeTraversal.traverse(compiler,    addition,    n);    	non-compiled	[CE]  ')'  expected	35	None	replace
76	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  addition,  n,  this);  [CE]  ')'  expected  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  NodeTraversal.traverse(compiler,  addition,  n,  this);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	NodeTraversal.traverse(compiler,  addition,  n,  this);	  NodeTraversal.traverse(compiler,    addition,    n);    	non-compiled	[CE]  ')'  expected	35	None	replace
77	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  addition,  n,  REGEXP_FLAGS);  [CE]  ')'  expected  [FE]                                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  NodeTraversal.traverse(compiler,  addition,  n,  REGEXP_FLAGS);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	NodeTraversal.traverse(compiler,  addition,  n,  REGEXP_FLAGS);	  NodeTraversal.traverse(compiler,    addition,    n);    	non-compiled	[CE]  ')'  expected	35	None	replace
78	[BUG]  [BUGGY]  n.getPrevious().replaceChild(callTarget,  addition);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getPrevious().replaceChild(callTarget,  addition);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getPrevious().replaceChild(callTarget,  addition);	  n.getPrevious().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	2	None	replace
79	[BUG]  [BUGGY]  n.getPrevious().removeChild(value);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getPrevious().removeChild(value);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getPrevious().removeChild(value);	  n.getPrevious().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	2	None	replace
80	[BUG]  [BUGGY]  n.getPrevious().removeChild(addition);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getPrevious().removeChild(addition);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getPrevious().removeChild(addition);	  n.getPrevious().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	2	None	replace
81	[BUG]  [BUGGY]  n.getPrevious().replaceChild(addition,  value);  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getPrevious().replaceChild(addition,  value);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getPrevious().replaceChild(addition,  value);	  n.getPrevious().replaceChild(value,    addition);    	non-compiled	[CE]  ')'  expected	27	None	replace
82	[BUG]  [BUGGY]  n.getPrevious().replaceChild(addition,  addition);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getPrevious().replaceChild(addition,  addition);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getPrevious().replaceChild(addition,  addition);	  n.getPrevious().replaceChild(value,    addition);    	non-compiled	[CE]  ')'  expected	27	None	replace
83	[BUG]  [BUGGY]  n.removeChild(address);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.removeChild(address);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.removeChild(address);	  n.removeChild(value);    	non-compiled	[CE]  ')'  expected	40	None	replace
84	[BUG]  [BUGGY]  n.removeChild(addr);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.removeChild(addr);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.removeChild(addr);	  n.removeChild(value);    	non-compiled	[CE]  ')'  expected	40	None	replace
85	[BUG]  [BUGGY]  n.removeChild(a);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.removeChild(a);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.removeChild(a);	  n.removeChild(value);    	non-compiled	[CE]  ')'  expected	40	None	replace
86	[BUG]  [BUGGY]  n.removeChild(addment);  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.removeChild(addment);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.removeChild(addment);	  n.removeChild(value);    	non-compiled	[CE]  ')'  expected	40	None	replace
87	[BUG]  [BUGGY]  Node  n  =  addition.getLastChild();  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Node  n  =  addition.getLastChild();  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Node  n  =  addition.getLastChild();	  Node    n    =    addition.getFirstChild();    	non-compiled	[CE]  ')'  expected	9	None	replace
88	[BUG]  [BUGGY]  Node  n  =  value.getFirstChild();  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Node  n  =  value.getFirstChild();  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Node  n  =  value.getFirstChild();	  Node    n    =    addition.getFirstChild();    	non-compiled	[CE]  ')'  expected	9	None	replace
89	[BUG]  [BUGGY]  Node  n  =  add.getLastChild();  [CE]  ')'  expected  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Node  n  =  add.getLastChild();  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Node  n  =  add.getLastChild();	  Node    n    =    addition.getFirstChild();    	non-compiled	[CE]  ')'  expected	9	None	replace
90	[BUG]  [BUGGY]  Node  n  =  addition.getType()  ==  Token.FUNCTION;  [CE]  ')'  expected  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Node  n  =  addition.getType()  ==  Token.FUNCTION;  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Node  n  =  addition.getType()  ==  Token.FUNCTION;	  Node    n    =    addition.getFirstChild();    	non-compiled	[CE]  ')'  expected	9	None	replace
91	[BUG]  [BUGGY]  Node  n  =  addition.getParent();  [CE]  ')'  expected  [FE]                                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Node  n  =  addition.getParent();  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Node  n  =  addition.getParent();	  Node    n    =    addition.getFirstChild();    	non-compiled	[CE]  ')'  expected	9	None	replace
92	[BUG]  [BUGGY]  Node  n  =  addition.getNext()  +  1;  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Node  n  =  addition.getNext()  +  1;  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Node  n  =  addition.getNext()  +  1;	  Node    n    =    addition.getNext();    	non-compiled	[CE]  ')'  expected	7	None	replace
93	[BUG]  [BUGGY]  Node  n  =  add.getNext();  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Node  n  =  add.getNext();  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Node  n  =  add.getNext();	  Node    n    =    addition.getNext();    	non-compiled	[CE]  ')'  expected	7	None	replace
94	[BUG]  [BUGGY]  Node  n  =  addition.getPrevious();  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Node  n  =  addition.getPrevious();  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Node  n  =  addition.getPrevious();	  Node    n    =    addition.getNext();    	non-compiled	[CE]  ')'  expected	7	None	replace
95	[BUG]  [BUGGY]  n.removeFirstChild().replaceChild(addition,  addition);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.removeFirstChild().replaceChild(addition,  addition);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.removeFirstChild().replaceChild(addition,  addition);	  n.removeFirstChild().replaceChild(value,    addition);    	non-compiled	[CE]  ')'  expected	30	None	replace
96	[BUG]  [BUGGY]  n.removeLastChild().replaceChild(value,  addition);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.removeLastChild().replaceChild(value,  addition);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.removeLastChild().replaceChild(value,  addition);	  n.removeFirstChild().replaceChild(value,    addition);    	non-compiled	[CE]  ')'  expected	30	None	replace
97	[BUG]  [BUGGY]  n.removeFirstChild().replaceChild(callTarget,  addition);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.removeFirstChild().replaceChild(callTarget,  addition);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.removeFirstChild().replaceChild(callTarget,  addition);	  n.removeFirstChild().replaceChild(value,    addition);    	non-compiled	[CE]  ')'  expected	30	None	replace
98	[BUG]  [BUGGY]  n.removeFirstChild().replaceChild(addition,  value);  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.removeFirstChild().replaceChild(addition,  value);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.removeFirstChild().replaceChild(addition,  value);	  n.removeFirstChild().replaceChild(value,    addition);    	non-compiled	[CE]  ')'  expected	30	None	replace
99	[BUG]  [BUGGY]  n.removeFirstChild().replaceChild(n,  addition);  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.removeFirstChild().replaceChild(n,  addition);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.removeFirstChild().replaceChild(n,  addition);	  n.removeFirstChild().replaceChild(value,    addition);    	non-compiled	[CE]  ')'  expected	30	None	replace
100	[BUG]  [BUGGY]  n.getFirstChild().removeChild(add);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getFirstChild().removeChild(add);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getFirstChild().removeChild(add);	  n.getNext().removeChild(add);    	non-compiled	[CE]  ')'  expected	29	None	replace
101	[BUG]  [BUGGY]  n.getNext().addChildToFront(add);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getNext().addChildToFront(add);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getNext().addChildToFront(add);	  n.getNext().removeChild(add);    	non-compiled	[CE]  ')'  expected	29	None	replace
102	[BUG]  [BUGGY]  n.getNext().addChild(value);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getNext().addChild(value);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getNext().addChild(value);	  n.getNext().removeChild(add);    	non-compiled	[CE]  ')'  expected	29	None	replace
103	[BUG]  [BUGGY]  n.getLastChild().addChild(addition);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getLastChild().addChild(addition);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getLastChild().addChild(addition);	  n.getLastChild().removeChild(addition);    	non-compiled	[CE]  ')'  expected	20	None	replace
104	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  addr,  false);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  NodeTraversal.traverse(compiler,  addr,  false);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	NodeTraversal.traverse(compiler,  addr,  false);	  NodeTraversal.traverse(compiler,    addition,    false);    	non-compiled	[CE]  ')'  expected	38	None	replace
105	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  true,  addition,  false);  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  NodeTraversal.traverse(compiler,  true,  addition,  false);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	NodeTraversal.traverse(compiler,  true,  addition,  false);	  NodeTraversal.traverse(compiler,    addition,    false);    	non-compiled	[CE]  ')'  expected	38	None	replace
106	[BUG]  [BUGGY]  n.getParent().replaceChild(position,  addition);  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getParent().replaceChild(position,  addition);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getParent().replaceChild(position,  addition);	  n.getParent().replaceChild(condition,    callTarget);    	non-compiled	[CE]  ')'  expected	33	None	replace
107	[BUG]  [BUGGY]  n.getFirstChild().removeChild(value,  addition);  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getFirstChild().removeChild(value,  addition);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getFirstChild().removeChild(value,  addition);	  n.getFirstChild().replaceChild(value,    addition);    	non-compiled	[CE]  ')'  expected	22	None	replace
108	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(addition,  value);  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getFirstChild().replaceChild(addition,  value);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getFirstChild().replaceChild(addition,  value);	  n.getFirstChild().replaceChild(value,    addition);    	non-compiled	[CE]  ')'  expected	22	None	replace
109	[BUG]  [BUGGY]  n.getLastChild().removeChild(value,  addition);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getLastChild().removeChild(value,  addition);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getLastChild().removeChild(value,  addition);	  n.getLastChild().replaceChild(value,    addition);    	non-compiled	[CE]  ')'  expected	5	None	replace
110	[BUG]  [BUGGY]  n.replaceChild(value,  addition);  addition  =  addition;  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.replaceChild(value,  addition);  addition  =  addition;  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.replaceChild(value,  addition);  addition  =  addition;	  n.removeChild(addition);    addition    =    addition;    	non-compiled	[CE]  ')'  expected	37	None	replace
111	[BUG]  [BUGGY]  n.addChildToFront(addition);  addition  =  addition;  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.addChildToFront(addition);  addition  =  addition;  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.addChildToFront(addition);  addition  =  addition;	  n.removeChild(addition);    addition    =    addition;    	non-compiled	[CE]  ')'  expected	37	None	replace
112	[BUG]  [BUGGY]  n.addChildToBack(addition);  addition  =  addition;  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.addChildToBack(addition);  addition  =  addition;  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.addChildToBack(addition);  addition  =  addition;	  n.removeChild(addition);    addition    =    addition;    	non-compiled	[CE]  ')'  expected	37	None	replace
113	[BUG]  [BUGGY]  n.setChild(value);  addition  =  addition;  [CE]  ')'  expected  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.setChild(value);  addition  =  addition;  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.setChild(value);  addition  =  addition;	  n.removeChild(addition);    addition    =    addition;    	non-compiled	[CE]  ')'  expected	37	None	replace
114	[BUG]  [BUGGY]  n.getPrevious().removeChild(value,  addition);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getPrevious().removeChild(value,  addition);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getPrevious().removeChild(value,  addition);	  n.getPrevious().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	2	None	replace
115	[BUG]  [BUGGY]  Node  n  =  addition.removeFirstChild();  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Node  n  =  addition.removeFirstChild();  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Node  n  =  addition.removeFirstChild();	  Node    n    =    addition.getFirstChild();    	non-compiled	[CE]  ')'  expected	9	None	replace
116	[BUG]  [BUGGY]  Node  n  =  addition.cloneTree();  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Node  n  =  addition.cloneTree();  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Node  n  =  addition.cloneTree();	  Node    n    =    addition.getFirstChild();    	non-compiled	[CE]  ')'  expected	9	None	replace
117	[BUG]  [BUGGY]  Node  n  =  addition.getType();  [CE]  ')'  expected  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Node  n  =  addition.getType();  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Node  n  =  addition.getType();	  Node    n    =    addition.getFirstChild();    	non-compiled	[CE]  ')'  expected	9	None	replace
118	[BUG]  [BUGGY]  Node  addition  =  n.removeFirstChild();  [CE]  ')'  expected  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Node  addition  =  n.removeFirstChild();  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Node  addition  =  n.removeFirstChild();	  Node    addition    =    n.getNext();    	non-compiled	[CE]  ')'  expected	12	None	replace
119	[BUG]  [BUGGY]  Node  addition  =  n.getAssignedValue();  [CE]  ')'  expected  [FE]                                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Node  addition  =  n.getAssignedValue();  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Node  addition  =  n.getAssignedValue();	  Node    addition    =    n.getNext();    	non-compiled	[CE]  ')'  expected	12	None	replace
120	[BUG]  [BUGGY]  n.replaceChild(callTarget,  addition);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.replaceChild(callTarget,  addition);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.replaceChild(callTarget,  addition);	  n.removeChild(value);    	non-compiled	[CE]  ')'  expected	40	None	replace
121	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  addition,  new  FoldArrayAction(),  REGEXP_FLAGS_RE);  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  NodeTraversal.traverse(compiler,  addition,  new  FoldArrayAction(),  REGEXP_FLAGS_RE);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	NodeTraversal.traverse(compiler,  addition,  new  FoldArrayAction(),  REGEXP_FLAGS_RE);	  NodeTraversal.traverse(compiler,    addition,    new    FoldArrayAction());    	non-compiled	[CE]  ')'  expected	34	None	replace
122	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  addr,  new  FoldArrayAction());  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  NodeTraversal.traverse(compiler,  addr,  new  FoldArrayAction());  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	NodeTraversal.traverse(compiler,  addr,  new  FoldArrayAction());	  NodeTraversal.traverse(compiler,    addition,    new    FoldArrayAction());    	non-compiled	[CE]  ')'  expected	34	None	replace
123	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  addition,  new  FoldArrayAction(),  value);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  NodeTraversal.traverse(compiler,  addition,  new  FoldArrayAction(),  value);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	NodeTraversal.traverse(compiler,  addition,  new  FoldArrayAction(),  value);	  NodeTraversal.traverse(compiler,    addition,    new    FoldArrayAction());    	non-compiled	[CE]  ')'  expected	34	None	replace
124	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  additional,  new  FoldArrayAction(),  REGEXP_FLAGS_RE);  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  NodeTraversal.traverse(compiler,  additional,  new  FoldArrayAction(),  REGEXP_FLAGS_RE);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	NodeTraversal.traverse(compiler,  additional,  new  FoldArrayAction(),  REGEXP_FLAGS_RE);	  NodeTraversal.traverse(compiler,    addition,    new    FoldArrayAction());    	non-compiled	[CE]  ')'  expected	34	None	replace
125	[BUG]  [BUGGY]  n.replaceChild(value,  addition);  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.replaceChild(value,  addition);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.replaceChild(value,  addition);	  n.removeChild(addition);    	non-compiled	[CE]  ')'  expected	10	None	replace
126	[BUG]  [BUGGY]  n.setChild(addition);  [CE]  ')'  expected  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.setChild(addition);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.setChild(addition);	  n.removeChild(addition);    	non-compiled	[CE]  ')'  expected	10	None	replace
127	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  value,  n);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  NodeTraversal.traverse(compiler,  value,  n);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	NodeTraversal.traverse(compiler,  value,  n);	  NodeTraversal.traverse(compiler,    addition,    n);    	non-compiled	[CE]  ')'  expected	35	None	replace
128	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  additional,  n,  value);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  NodeTraversal.traverse(compiler,  additional,  n,  value);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	NodeTraversal.traverse(compiler,  additional,  n,  value);	  NodeTraversal.traverse(compiler,    addition,    n);    	non-compiled	[CE]  ')'  expected	35	None	replace
129	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  additional,  value);  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  NodeTraversal.traverse(compiler,  additional,  value);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	NodeTraversal.traverse(compiler,  additional,  value);	  NodeTraversal.traverse(compiler,    addition,    n);    	non-compiled	[CE]  ')'  expected	35	None	replace
130	[BUG]  [BUGGY]  n.getNext().replaceChild(point,  addition);  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getNext().replaceChild(point,  addition);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getNext().replaceChild(point,  addition);	  n.getParent().replaceChild(point,    addition);    	non-compiled	[CE]  ')'  expected	31	None	replace
131	[BUG]  [BUGGY]  Preconditions.checkState(add.getType()  ==  Token.FUNCTION);  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Preconditions.checkState(add.getType()  ==  Token.FUNCTION);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Preconditions.checkState(add.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	36	None	replace
132	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Preconditions.checkState(a.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	36	None	replace
133	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.hasChildren());  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.hasChildren());  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.hasChildren());	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	36	None	replace
134	[BUG]  [BUGGY]  Node  addition  =  value.next();  [CE]  ')'  expected  [FE]                                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Node  addition  =  value.next();  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Node  addition  =  value.next();	  Node    addition    =    addition.next();    	non-compiled	[CE]  ')'  expected	13	None	replace
135	[BUG]  [BUGGY]  Node  addition  =  addition.nextToken();  [CE]  ')'  expected  [FE]                                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Node  addition  =  addition.nextToken();  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Node  addition  =  addition.nextToken();	  Node    addition    =    addition.next();    	non-compiled	[CE]  ')'  expected	13	None	replace
136	[BUG]  [BUGGY]  Node  addition  =  add.next();  [CE]  ')'  expected  [FE]                                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Node  addition  =  add.next();  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Node  addition  =  add.next();	  Node    addition    =    addition.next();    	non-compiled	[CE]  ')'  expected	13	None	replace
137	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  value);  [CE]  ')'  expected  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  NodeTraversal.traverse(compiler,  value);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	NodeTraversal.traverse(compiler,  value);	  NodeTraversal.traverse(compiler,    addition);    	non-compiled	[CE]  ')'  expected	11	None	replace
138	[BUG]  [BUGGY]  Node  addition  =  address.getNext();  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Node  addition  =  address.getNext();  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Node  addition  =  address.getNext();	  Node    addition    =    addition.getNext();    	non-compiled	[CE]  ')'  expected	8	None	replace
139	[BUG]  [BUGGY]  Node  addition  =  addment.getNext();  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Node  addition  =  addment.getNext();  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Node  addition  =  addment.getNext();	  Node    addition    =    addition.getNext();    	non-compiled	[CE]  ')'  expected	8	None	replace
140	[BUG]  [BUGGY]  Node  addition  =  expression.getNext();  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Node  addition  =  expression.getNext();  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Node  addition  =  expression.getNext();	  Node    addition    =    addition.getNext();    	non-compiled	[CE]  ')'  expected	8	None	replace
141	[BUG]  [BUGGY]  n.getReferenceName().replaceChild(value,  addition);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getReferenceName().replaceChild(value,  addition);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getReferenceName().replaceChild(value,  addition);	  n.getName().replaceChild(value,    addition);    	non-compiled	[CE]  ')'  expected	26	None	replace
142	[BUG]  [BUGGY]  n.getName().removeChild(value);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getName().removeChild(value);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getName().removeChild(value);	  n.getName().replaceChild(value,    addition);    	non-compiled	[CE]  ')'  expected	26	None	replace
143	[BUG]  [BUGGY]  n.getName().removeChild(value,  addition);  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getName().removeChild(value,  addition);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getName().removeChild(value,  addition);	  n.getName().replaceChild(value,    addition);    	non-compiled	[CE]  ')'  expected	26	None	replace
144	[BUG]  [BUGGY]  n.getParent().addChildToFront(addr);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getParent().addChildToFront(addr);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getParent().addChildToFront(addr);	  n.getParent().removeChild(addr);    	non-compiled	[CE]  ')'  expected	18	None	replace
145	[BUG]  [BUGGY]  Node  n  =  value.getNext();  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Node  n  =  value.getNext();  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Node  n  =  value.getNext();	  Node    n    =    addition.getNext();    	non-compiled	[CE]  ')'  expected	7	None	replace
146	[BUG]  [BUGGY]  n.getParent().replaceChild(alpha,  addition);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getParent().replaceChild(alpha,  addition);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getParent().replaceChild(alpha,  addition);	  n.getParent().replaceChild(addition,    value);    	non-compiled	[CE]  ')'  expected	6	None	replace
147	[BUG]  [BUGGY]  Node  addition  =  value.removeFirstChild();  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Node  addition  =  value.removeFirstChild();  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Node  addition  =  value.removeFirstChild();	  Node    addition    =    addition.getNext();    	non-compiled	[CE]  ')'  expected	8	None	replace
148	[BUG]  [BUGGY]  Node  addition  =  this.addition.getNext();  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Node  addition  =  this.addition.getNext();  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Node  addition  =  this.addition.getNext();	  Node    addition    =    addition.getNext();    	non-compiled	[CE]  ')'  expected	8	None	replace
149	[BUG]  [BUGGY]  Node  addition  =  n.getChildCount();  [CE]  ')'  expected  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Node  addition  =  n.getChildCount();  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Node  addition  =  n.getChildCount();	  Node    addition    =    n.getNext();    	non-compiled	[CE]  ')'  expected	12	None	replace
150	[BUG]  [BUGGY]  n.removeFirstChild().replaceChild(value,  addition));  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.removeFirstChild().replaceChild(value,  addition));  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.removeFirstChild().replaceChild(value,  addition));	  n.removeFirstChild().replaceChild(value,    addition);    	non-compiled	[CE]  ';'  expected	30	None	replace
151	[BUG]  [BUGGY]  Preconditions.checkArgument(a.getType()  ==  Token.FUNCTION);  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Preconditions.checkArgument(a.getType()  ==  Token.FUNCTION);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Preconditions.checkArgument(a.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	36	None	replace
152	[BUG]  [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.VAR);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.VAR);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	Preconditions.checkState(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.VAR);	  Preconditions.checkState(a.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	36	None	replace
153	[BUG]  [BUGGY]  n.getParent().replaceChild(alternate,  addition);  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getParent().replaceChild(alternate,  addition);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getParent().replaceChild(alternate,  addition);	  n.getParent().replaceChild(condition,    callTarget);    	non-compiled	[CE]  ')'  expected	33	None	replace
154	[BUG]  [BUGGY]  n.setChildren(addition);  addition  =  addition;  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.setChildren(addition);  addition  =  addition;  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.setChildren(addition);  addition  =  addition;	  n.removeChild(addition);    addition    =    addition;    	non-compiled	[CE]  ')'  expected	37	None	replace
155	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  next,  new  FoldArrayAction());  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  NodeTraversal.traverse(compiler,  next,  new  FoldArrayAction());  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	NodeTraversal.traverse(compiler,  next,  new  FoldArrayAction());	  NodeTraversal.traverse(compiler,    addition,    new    FoldArrayAction());    	non-compiled	[CE]  ')'  expected	34	None	replace
156	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  FoldArrayAction());  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  FoldArrayAction());  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	NodeTraversal.traverse(compiler,  node,  new  FoldArrayAction());	  NodeTraversal.traverse(compiler,    addition,    new    FoldArrayAction());    	non-compiled	[CE]  ')'  expected	34	None	replace
157	[BUG]  [BUGGY]  n.removeLastChild();  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.removeLastChild();  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.removeLastChild();	  n.getLastChild().replaceChild(value,    addition);    	non-compiled	[CE]  ')'  expected	5	None	replace
158	[BUG]  [BUGGY]  n.getChildCount().removeChild(value);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.getChildCount().removeChild(value);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.getChildCount().removeChild(value);	  n.getName().replaceChild(value,    addition);    	non-compiled	[CE]  ')'  expected	26	None	replace
159	[BUG]  [BUGGY]  n.removeFirstChild();  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.removeFirstChild();  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.removeFirstChild();	  n.getFirstChild().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	19	None	replace
160	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  false);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  NodeTraversal.traverse(compiler,  node,  false);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	NodeTraversal.traverse(compiler,  node,  false);	  NodeTraversal.traverse(compiler,    addition,    false);    	non-compiled	[CE]  ')'  expected	38	None	replace
161	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  addr,  n);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  NodeTraversal.traverse(compiler,  addr,  n);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	NodeTraversal.traverse(compiler,  addr,  n);	  NodeTraversal.traverse(compiler,    addition,    n);    	non-compiled	[CE]  ')'  expected	35	None	replace
162	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  addition);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  NodeTraversal.traverse(compiler,  node,  addition);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	NodeTraversal.traverse(compiler,  node,  addition);	  NodeTraversal.traverse(compiler,    addition,    n);    	non-compiled	[CE]  ')'  expected	35	None	replace
163	[BUG]  [BUGGY]  n.addChildToFront(value);  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]            Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());      [BUGGY]  n.addChildToFront(value);  [BUGGY]      reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	224	224	1	replace	n.addChildToFront(value);	  n.removeChild(addition);    	non-compiled	[CE]  ')'  expected	10	None	replace
