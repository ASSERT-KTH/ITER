bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value),  value.detachFromParent());  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value),  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Infinity   ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	3	None	replace
2	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value),  callTarget.detachFromParent());  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value),  callTarget.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value),  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Infinity   ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	3	None	replace
3	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value,  callTarget),  value.detachFromParent());  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value,  callTarget),  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value,  callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Infinity   ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	3	None	replace
4	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  callTarget.detachFromParent());  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  callTarget.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Infinity   ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	3	None	replace
5	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value),  callTarget,  value.detachFromParent());  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value),  callTarget,  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value),  callTarget,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Infinity   ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	3	None	replace
6	[BUG]  [BUGGY]  Node  addition  =  value.getNext();  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  value.getNext();  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  value.getNext();	      	non-compiled	[CE]  not  a  statement	8	None	replace
7	[BUG]  [BUGGY]  n.getParent().removeChild(value);  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  n.getParent().removeChild(value);  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.getParent().removeChild(value);	      	non-compiled	[CE]  not  a  statement	8	None	replace
8	[BUG]  [BUGGY]  n.getNext().removeChild(value);  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  n.getNext().removeChild(value);  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.getNext().removeChild(value);	      	non-compiled	[CE]  not  a  statement	8	None	replace
9	[BUG]  [BUGGY]  n.getParent().removeChild(value);  addition  =  value.detachFromParent();  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  n.getParent().removeChild(value);  addition  =  value.detachFromParent();  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.getParent().removeChild(value);  addition  =  value.detachFromParent();	      	non-compiled	[CE]  not  a  statement	8	None	replace
10	[BUG]  [BUGGY]  Node  addition  =  value.removeFirstChild();  [CE]  not  a  statement  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  value.removeFirstChild();  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  value.removeFirstChild();	      	non-compiled	[CE]  not  a  statement	8	None	replace
11	[BUG]  [BUGGY]  n.getNext().removeChild(value);  addition  =  value.detachFromParent();  [CE]  not  a  statement  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  n.getNext().removeChild(value);  addition  =  value.detachFromParent();  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.getNext().removeChild(value);  addition  =  value.detachFromParent();	      	non-compiled	[CE]  not  a  statement	8	None	replace
12	[BUG]  [BUGGY]  n.removeChild(value);  addition  =  value.detachFromParent();  [CE]  not  a  statement  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  n.removeChild(value);  addition  =  value.detachFromParent();  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.removeChild(value);  addition  =  value.detachFromParent();	      	non-compiled	[CE]  not  a  statement	8	None	replace
13	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").srcref(value,  callTarget),  value.detachFromParent());  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").srcref(value,  callTarget),  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity ").srcref(value,  callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "infinity   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	13	None	replace
14	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").srcref(value),  callTarget,  value.detachFromParent());  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").srcref(value),  callTarget,  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity ").srcref(value),  callTarget,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "infinity   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	13	None	replace
15	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value),  value.detachFromParent());  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value),  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").src(value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "av   ").src(callTarget),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	9	None	replace
16	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value),  callTarget.detachFromParent());  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value),  callTarget.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").src(value),  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "av   ").src(callTarget),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	9	None	replace
17	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Av ").src(callTarget),  value.detachFromParent());  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "Av ").src(callTarget),  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Av ").src(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "av   ").src(callTarget),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	9	None	replace
18	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value,  callTarget),  value.detachFromParent());  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value,  callTarget),  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").src(value,  callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "av   ").src(callTarget),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	9	None	replace
19	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value),  callTarget,  value.detachFromParent());  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value),  callTarget,  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").src(value),  callTarget,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "av   ").src(callTarget),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	9	None	replace
20	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value),  callTarget.detachFromParent());  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value),  callTarget.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity ").src(value),  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "infinity   ").src(value),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	11	None	replace
21	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value,  callTarget),  value.detachFromParent());  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value,  callTarget),  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity ").src(value,  callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "infinity   ").src(value),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	11	None	replace
22	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value),  callTarget,  value.detachFromParent());  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value),  callTarget,  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity ").src(value),  callTarget,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "infinity   ").src(value),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	11	None	replace
23	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").srcref(value),  callTarget.detachFromParent());  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").srcref(value),  callTarget.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ").srcref(value),  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "*   ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	1	None	replace
24	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").srcref(value),  value.detachFromParent());  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").srcref(value),  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ").srcref(value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "*   ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	1	None	replace
25	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").src(value),  callTarget.detachFromParent());  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").src(value),  callTarget.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ").src(value),  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "*   ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	1	None	replace
26	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").srcref(value),  callTarget,  value.detachFromParent());  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").srcref(value),  callTarget,  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ").srcref(value),  callTarget,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "*   ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	1	None	replace
27	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").src(value),  value.detachFromParent());  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").src(value),  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ").src(value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "*   ").src(callTarget),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	4	None	replace
28	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").src(value),  callTarget,  value.detachFromParent());  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").src(value),  callTarget,  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ").src(value),  callTarget,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "*   ").src(callTarget),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	4	None	replace
29	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(value,  callTarget),  value.detachFromParent());  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(value,  callTarget),  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").srcref(value,  callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "av   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	10	None	replace
30	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Av ").srcref(value),  value.detachFromParent());  [CE]  invalid  method  declaration;  return  type  required  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "Av ").srcref(value),  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Av ").srcref(value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "av   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
31	[BUG]  [BUGGY]  Node  addition  =  n.add(IR.string( "av ").srcref(value),  value.detachFromParent());  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  n.add(IR.string( "av ").srcref(value),  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  n.add(IR.string( "av ").srcref(value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "av   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	10	None	replace
32	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(value),  callTarget,  value.detachFromParent());  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(value),  callTarget,  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").srcref(value),  callTarget,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "av   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	10	None	replace
33	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(value),  callTarget.detachFromParent());  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(value),  callTarget.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").srcref(value),  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "av   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	10	None	replace
34	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Anonymous  value: ").srcref(callTarget),  value.detachFromParent());  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "Anonymous  value: ").srcref(callTarget),  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Anonymous  value: ").srcref(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "n   ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	2	None	replace
35	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "a.src ",  callTarget),  value.detachFromParent());  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "a.src ",  callTarget),  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "a.src ",  callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "n   ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	2	None	replace
36	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "no_arguments ").srcref(callTarget),  value.detachFromParent());  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "no_arguments ").srcref(callTarget),  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "no_arguments ").srcref(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "n   ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	2	None	replace
37	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Attach: ").srcref(callTarget),  value.detachFromParent());  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "Attach: ").srcref(callTarget),  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Attach: ").srcref(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "n   ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	2	None	replace
38	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "a.src "),  value.src(callTarget),  value.detachFromParent());  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "a.src "),  value.src(callTarget),  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "a.src "),  value.src(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "n   ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	2	None	replace
39	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Assignment  of   ").src(callTarget),  value.detachFromParent());  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "Assignment  of   ").src(callTarget),  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Assignment  of   ").src(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "n   ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	2	None	replace
40	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(value));  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(value));  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").srcref(value));	  Node    addition    =    IR.add(IR.string(   "av   ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	5	None	replace
41	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value,  callTarget),  value.detachFromParent());  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value,  callTarget),  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(value,  callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	14	None	replace
42	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  callTarget,  value.detachFromParent());  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  callTarget,  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  callTarget,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	14	None	replace
43	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Additional  value: ").srcref(value),  value.detachFromParent());  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "Additional  value: ").srcref(value),  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Additional  value: ").srcref(value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "n   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	12	None	replace
44	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Anonymous  value: ").srcref(value),  value.detachFromParent());  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "Anonymous  value: ").srcref(value),  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Anonymous  value: ").srcref(value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "n   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	12	None	replace
45	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "AttachFromParent   ").srcref(value),  value.detachFromParent());  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "AttachFromParent   ").srcref(value),  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "AttachFromParent   ").srcref(value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "n   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	12	None	replace
46	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "AttachFromParent:   ").srcref(value),  value.detachFromParent());  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "AttachFromParent:   ").srcref(value),  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "AttachFromParent:   ").srcref(value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "n   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	12	None	replace
47	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Assignment  of   ").srcref(value),  value.detachFromParent());  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "Assignment  of   ").srcref(value),  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Assignment  of   ").srcref(value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "n   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	12	None	replace
48	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Assignment  of   ").src(value),  value.detachFromParent());  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "Assignment  of   ").src(value),  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Assignment  of   ").src(value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "n   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	12	None	replace
49	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value));  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value));  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(value));	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(callTarget),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	7	None	replace
50	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Anonymous  value: ").srcref(value),  callTarget.detachFromParent());  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "Anonymous  value: ").srcref(value),  callTarget.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Anonymous  value: ").srcref(value),  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "n   ").srcref(value),    callTarget.detachFromParent());    	non-compiled	[CE]  not  a  statement	6	None	replace
51	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "a.src ",  value),  callTarget.detachFromParent());  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "a.src ",  value),  callTarget.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "a.src ",  value),  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "n   ").srcref(value),    callTarget.detachFromParent());    	non-compiled	[CE]  not  a  statement	6	None	replace
52	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "no_arguments ").srcref(value),  callTarget.detachFromParent());  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "no_arguments ").srcref(value),  callTarget.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "no_arguments ").srcref(value),  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "n   ").srcref(value),    callTarget.detachFromParent());    	non-compiled	[CE]  not  a  statement	6	None	replace
53	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "n ").src(value),  callTarget.detachFromParent());  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "n ").src(value),  callTarget.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "n ").src(value),  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "n   ").srcref(value),    callTarget.detachFromParent());    	non-compiled	[CE]  not  a  statement	6	None	replace
54	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value));  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value));  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").src(value));	  Node    addition    =    IR.add(IR.string(   "av   ").src(callTarget),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	9	None	replace
55	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").src(callTarget),  value.detachFromParent());  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").src(callTarget),  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "A-Z ").src(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "av   ").src(callTarget),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	9	None	replace
56	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value));  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value));  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity ").src(value));	  Node    addition    =    IR.add(IR.string(   "infinity   ").src(value),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	11	None	replace
57	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").src(value),  callTarget.detachFromParent());  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").src(value),  callTarget.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "   ").src(value),  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "n   ").srcref(value),    callTarget.detachFromParent());    	non-compiled	[CE]  not  a  statement	6	None	replace
58	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").srcref(value),  callTarget.detachFromParent());  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").srcref(value),  callTarget.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "   ").srcref(value),  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "n   ").srcref(value),    callTarget.detachFromParent());    	non-compiled	[CE]  not  a  statement	6	None	replace
59	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").srcref(value),  value.detachFromParent());  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").srcref(value),  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "   ").srcref(value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "n   ").srcref(value),    callTarget.detachFromParent());    	non-compiled	[CE]  not  a  statement	6	None	replace
60	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").srcref(value),  callTarget.detachFromParent());  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").srcref(value),  callTarget.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity ").srcref(value),  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "n   ").srcref(value),    callTarget.detachFromParent());    	non-compiled	[CE]  not  a  statement	6	None	replace
61	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Av ").srcref(callTarget),  value.detachFromParent());  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "Av ").srcref(callTarget),  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Av ").srcref(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "av   ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	5	None	replace
62	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").src(value),  value.detachFromParent());  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").src(value),  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "   ").src(value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "n   ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	2	None	replace
63	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").src(callTarget),  value.detachFromParent());  [CE]  invalid  method  declaration;  return  type  required  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").src(callTarget),  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "   ").src(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "n   ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
64	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value));  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value));  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value));	  Node    addition    =    IR.add(IR.string(   "Infinity   ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	3	None	replace
65	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).src(value),  value.detachFromParent());  [CE]  invalid  method  declaration;  return  type  required  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).src(value),  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ")).src(value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "*   ").src(callTarget),    value.detachFromParent());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
66	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").src(value));  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").src(value));  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ").src(value));	  Node    addition    =    IR.add(IR.string(   "*   ").src(callTarget),    value.detachFromParent());    	non-compiled	[CE]  not  a  statement	4	None	replace
67	[BUG]  [BUGGY]  Node  addition  =  n.getFirstChild();  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  n.getFirstChild();  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  n.getFirstChild();	      	non-compiled	[CE]  not  a  statement	8	None	replace
68	[BUG]  [BUGGY]  Node  addition  =  n.getNext();  [CE]  invalid  method  declaration;  return  type  required  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  n.getNext();  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  n.getNext();	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
69	[BUG]  [BUGGY]  Node  addition  =  value.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  value.getFirstChild();  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  value.getFirstChild();	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
70	[BUG]  [BUGGY]  n.removeChild(value);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  n.removeChild(value);  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.removeChild(value);	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
71	[BUG]  [BUGGY]  n  =  value.getNext();  [CE]  invalid  method  declaration;  return  type  required  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  n  =  value.getNext();  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n  =  value.getNext();	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
72	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").src(value),  value.detachFromParent());  [CE]  invalid  method  declaration;  return  type  required  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").src(value),  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "A-Z ").src(value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "n   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
73	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value)&&  value.detachFromParent());  [CE]  invalid  method  declaration;  return  type  required  [FE]        junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value)&&  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").src(value)&&  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "av   ").src(callTarget),    value.detachFromParent());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
74	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").srcref(value));  [CE]  invalid  method  declaration;  return  type  required  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").srcref(value));  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity ").srcref(value));	  Node    addition    =    IR.add(IR.string(   "infinity   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
75	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").src(value),  callTarget.detachFromParent());  [CE]  invalid  method  declaration;  return  type  required  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").src(value),  callTarget.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "A-Z ").src(value),  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "n   ").srcref(value),    callTarget.detachFromParent());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
76	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").srcref(value),  callTarget.detachFromParent());  [CE]  invalid  method  declaration;  return  type  required  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").srcref(value),  callTarget.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "A-Z ").srcref(value),  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "n   ").srcref(value),    callTarget.detachFromParent());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
77	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  value.detachFromParent(),  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]        junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  value.detachFromParent(),  n);  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  value.detachFromParent(),  n);	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value),    value.detachFromParent());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
78	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(value)-  1,  value.detachFromParent());  [CE]  invalid  method  declaration;  return  type  required  [FE]          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(value)-  1,  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").srcref(value)-  1,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "av   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
79	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").srcref(callTarget),  value.detachFromParent());  [CE]  invalid  method  declaration;  return  type  required  [FE]          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").srcref(callTarget),  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "A-Z ").srcref(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "n   ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
80	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value),  value.detachFromParent(),  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value),  value.detachFromParent(),  n);  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity ").src(value),  value.detachFromParent(),  n);	  Node    addition    =    IR.add(IR.string(   "infinity   ").src(value),    value.detachFromParent());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
81	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").srcref(value));  [CE]  invalid  method  declaration;  return  type  required  [FE]        junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").srcref(value));  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ").srcref(value));	  Node    addition    =    IR.add(IR.string(   "*   ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
82	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).srcref(value),  value.detachFromParent());  [CE]  invalid  method  declaration;  return  type  required  [FE]          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).srcref(value),  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ")).srcref(value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "*   ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
83	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value)&&  value.detachFromParent());  [CE]  invalid  method  declaration;  return  type  required  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value)&&  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(value)&&  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(callTarget),    value.detachFromParent());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
84	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").src(value,  callTarget),  value.detachFromParent());  [CE]  invalid  method  declaration;  return  type  required  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").src(value,  callTarget),  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ").src(value,  callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "*   ").src(callTarget),    value.detachFromParent());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
85	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").srcref(value),  value.detachFromParent());  [CE]  invalid  method  declaration;  return  type  required  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").srcref(value),  value.detachFromParent());  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "A-Z ").srcref(value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "n   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
86	[BUG]  [BUGGY]  Node  addition  =  value.removeFirstChild();  n.getParent().removeChild(value);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]    if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(   "String   "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {    [BUGGY]  Node  addition  =  value.removeFirstChild();  n.getParent().removeChild(value);  [BUGGY]    IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  value.removeFirstChild();  n.getParent().removeChild(value);	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
