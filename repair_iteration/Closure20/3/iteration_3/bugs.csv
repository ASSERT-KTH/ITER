bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Av ").src(value),  value.detachFromParent());  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Av ").src(value),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Av ").src(value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Av   ").src(callTarget),    value.detachFromParent());    	non-compiled	[CE]  ';'  expected	17	None	replace
2	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Av ").src(value),  callTarget.detachFromParent());  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Av ").src(value),  callTarget.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Av ").src(value),  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Av   ").src(callTarget),    value.detachFromParent());    	non-compiled	[CE]  ';'  expected	17	None	replace
3	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Av ").src(value,  callTarget),  value.detachFromParent());  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Av ").src(value,  callTarget),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Av ").src(value,  callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Av   ").src(callTarget),    value.detachFromParent());    	non-compiled	[CE]  ';'  expected	17	None	replace
4	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Av ").src(value),  callTarget,  value.detachFromParent());  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Av ").src(value),  callTarget,  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Av ").src(value),  callTarget,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Av   ").src(callTarget),    value.detachFromParent());    	non-compiled	[CE]  	17	None	replace
5	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Av ").src(value));  [CE]  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Av ").src(value));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Av ").src(value));	  Node    addition    =    IR.add(IR.string(   "Av   ").src(callTarget),    value.detachFromParent());    	non-compiled	[CE]  	17	None	replace
6	[BUG]  [BUGGY]  Node  addition  =  n.add(IR.string( "Infinity ").srcref(value));  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  n.add(IR.string( "Infinity ").srcref(value));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  n.add(IR.string( "Infinity ").srcref(value));	  Node    addition    =    IR.add(IR.string(   "Infinity   ").srcref(value));    	non-compiled	[CE]  	64	None	replace
7	[BUG]  [BUGGY]  Node  addition  =  value.add(IR.string( "Infinity ").srcref(value));  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  value.add(IR.string( "Infinity ").srcref(value));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  value.add(IR.string( "Infinity ").srcref(value));	  Node    addition    =    IR.add(IR.string(   "Infinity   ").srcref(value));    	non-compiled	[CE]  	64	None	replace
8	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value),  value);  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value),  value);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value),  value);	  Node    addition    =    IR.add(IR.string(   "Infinity   ").srcref(value));    	non-compiled	[CE]  	64	None	replace
9	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value)||  value.detachFromParent());  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value)||  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").src(value)||  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "av   ").src(value)&&    value.detachFromParent());    	non-compiled	[CE]  	73	None	replace
10	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value)&&  value.detachFromParent(),  n);  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value)&&  value.detachFromParent(),  n);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").src(value)&&  value.detachFromParent(),  n);	  Node    addition    =    IR.add(IR.string(   "av   ").src(value)&&    value.detachFromParent());    	non-compiled	[CE]  	73	None	replace
11	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Av ").src(value)&&  value.detachFromParent());  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Av ").src(value)&&  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Av ").src(value)&&  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "av   ").src(value)&&    value.detachFromParent());    	non-compiled	[CE]  	73	None	replace
12	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av. ").src(value)&&  value.detachFromParent());  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "av. ").src(value)&&  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av. ").src(value)&&  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "av   ").src(value)&&    value.detachFromParent());    	non-compiled	[CE]  	73	None	replace
13	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").src(value)&&  value.detachFromParent());  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").src(value)&&  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "A-Z ").src(value)&&  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "av   ").src(value)&&    value.detachFromParent());    	non-compiled	[CE]  	73	None	replace
14	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value)/&  value.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value)/&  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").src(value)/&  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "av   ").src(value)&&    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
15	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(value),  callTarget,  value.removeFirstChild());  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(value),  callTarget,  value.removeFirstChild());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").srcref(value),  callTarget,  value.removeFirstChild());	  Node    addition    =    IR.add(IR.string(   "av   ").srcref(value),    callTarget,    value.detachFromParent());    	non-compiled	[CE]  	32	None	replace
16	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").srcref(value),  callTarget,  value.detachFromParent());  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").srcref(value),  callTarget,  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "A-Z ").srcref(value),  callTarget,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "av   ").srcref(value),    callTarget,    value.detachFromParent());    	non-compiled	[CE]  	32	None	replace
17	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(value),  value,  callTarget.detachFromParent());  [CE]  illegal  start  of  type  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(value),  value,  callTarget.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").srcref(value),  value,  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "av   ").srcref(value),    callTarget,    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
18	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "AttachFromParent: ").srcref(callTarget),  value.detachFromParent());  [CE]  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "AttachFromParent: ").srcref(callTarget),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "AttachFromParent: ").srcref(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "AttachFromParent:       ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  	46	None	replace
19	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "AttachFromParent: ").srcref(value),  callTarget,  value.detachFromParent());  [CE]  illegal  start  of  type  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "AttachFromParent: ").srcref(value),  callTarget,  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "AttachFromParent: ").srcref(value),  callTarget,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "AttachFromParent:       ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
20	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "AttachFromParent: ").srcref(value),  callTarget.detachFromParent());  [CE]  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "AttachFromParent: ").srcref(value),  callTarget.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "AttachFromParent: ").srcref(value),  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "AttachFromParent:       ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  	46	None	replace
21	[BUG]  [BUGGY]  Node  addition  =  n.add(IR.string( "* ").src(value));  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  n.add(IR.string( "* ").src(value));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  n.add(IR.string( "* ").src(value));	  Node    addition    =    IR.add(IR.string(   "*   ").src(value));    	non-compiled	[CE]  	66	None	replace
22	[BUG]  [BUGGY]  Node  addition  =  value.add(IR.string( "* ").src(value));  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  value.add(IR.string( "* ").src(value));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  value.add(IR.string( "* ").src(value));	  Node    addition    =    IR.add(IR.string(   "*   ").src(value));    	non-compiled	[CE]  	66	None	replace
23	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* "),  value.src(value));  [CE]  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "* "),  value.src(value));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* "),  value.src(value));	  Node    addition    =    IR.add(IR.string(   "*   ").src(value));    	non-compiled	[CE]  	66	None	replace
24	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").srcref(value,  callTarget),  value.detachFromParent());  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").srcref(value,  callTarget),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "A-Z ").srcref(value,  callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "A-Z   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  	85	None	replace
25	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").srcref(value)/  2,  value.detachFromParent());  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").srcref(value)/  2,  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "A-Z ").srcref(value)/  2,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "A-Z   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
26	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").srcref(value)+  1,  value.detachFromParent());  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").srcref(value)+  1,  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "A-Z ").srcref(value)+  1,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "A-Z   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
27	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").src(value),  callTarget,  value.removeFirstChild());  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").src(value),  callTarget,  value.removeFirstChild());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ").src(value),  callTarget,  value.removeFirstChild());	  Node    addition    =    IR.add(IR.string(   "*   ").src(value),    callTarget,    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
28	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").src(value),  callTarget,  n.detachFromParent());  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").src(value),  callTarget,  n.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ").src(value),  callTarget,  n.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "*   ").src(value),    callTarget,    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
29	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").srcref(value));  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").srcref(value));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "A-Z ").srcref(value));	  Node    addition    =    IR.add(IR.string(   "A-Z   ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
30	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(callTarget),  value.detachFromParent());  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(callTarget),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity ").src(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "infinity   ").src(value),    callTarget.detachFromParent());    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
31	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").src(value),  callTarget.detachFromParent(),  value);  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").src(value),  callTarget.detachFromParent(),  value);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "A-Z ").src(value),  callTarget.detachFromParent(),  value);	  Node    addition    =    IR.add(IR.string(   "A-Z   ").src(value),    callTarget.detachFromParent());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
32	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").src(value),  callTarget.detachFromParent(),  value.detachFromParent());  [CE]  illegal  start  of  type  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").src(value),  callTarget.detachFromParent(),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "A-Z ").src(value),  callTarget.detachFromParent(),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "A-Z   ").src(value),    callTarget.detachFromParent());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
33	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").src(value),  callTarget,  value.detachFromParent());  [CE]  illegal  start  of  type  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").src(value),  callTarget,  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "A-Z ").src(value),  callTarget,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "A-Z   ").src(value),    callTarget.detachFromParent());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
34	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").src(value,  callTarget.detachFromParent()));  [CE]  illegal  start  of  type  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").src(value,  callTarget.detachFromParent()));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "A-Z ").src(value,  callTarget.detachFromParent()));	  Node    addition    =    IR.add(IR.string(   "A-Z   ").src(value),    callTarget.detachFromParent());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
35	[BUG]  [BUGGY]  Node  addition  =  n.getLastChild();  [CE]  illegal  start  of  type  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  n.getLastChild();  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  n.getLastChild();	  Node    addition    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
36	[BUG]  [BUGGY]  Node  addition  =  callTarget.getFirstChild();  [CE]  illegal  start  of  type  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  callTarget.getFirstChild();  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  callTarget.getFirstChild();	  Node    addition    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
37	[BUG]  [BUGGY]  Node  addition  =  value.getLastChild();  [CE]  illegal  start  of  type  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  value.getLastChild();  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  value.getLastChild();	  Node    addition    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
38	[BUG]  [BUGGY]  Node  addition  =  node.getFirstChild();  [CE]  illegal  start  of  type  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  node.getFirstChild();  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  node.getFirstChild();	  Node    addition    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
39	[BUG]  [BUGGY]  Node  addition  =  key.getFirstChild();  [CE]  illegal  start  of  type  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  key.getFirstChild();  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  key.getFirstChild();	  Node    addition    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
40	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").srcref(value,  callTarget),  n.detachFromParent());  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").srcref(value,  callTarget),  n.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity ").srcref(value,  callTarget),  n.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "infinity   ").srcref(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
41	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").srcref(value,  callTarget),  value.removeFirstChild());  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").srcref(value,  callTarget),  value.removeFirstChild());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity ").srcref(value,  callTarget),  value.removeFirstChild());	  Node    addition    =    IR.add(IR.string(   "infinity   ").srcref(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
42	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").srcref(callTarget,  value),  value.detachFromParent());  [CE]  illegal  start  of  type  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").srcref(callTarget,  value),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity ").srcref(callTarget,  value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "infinity   ").srcref(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
43	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Anonymous  value: ").srcref(value),  callTarget,  value.detachFromParent());  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Anonymous  value: ").srcref(value),  callTarget,  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Anonymous  value: ").srcref(value),  callTarget,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Anonymous    value:   ").srcref(value),    callTarget.detachFromParent());    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
44	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Anonymous  value: ").src(value),  callTarget.detachFromParent());  [CE]  illegal  start  of  type  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Anonymous  value: ").src(value),  callTarget.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Anonymous  value: ").src(value),  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Anonymous    value:   ").srcref(value),    callTarget.detachFromParent());    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
45	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Anonymous  value: ").srcref(value,  callTarget.getType()),  value.detachFromParent());  [CE]  illegal  start  of  type  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Anonymous  value: ").srcref(value,  callTarget.getType()),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Anonymous  value: ").srcref(value,  callTarget.getType()),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Anonymous    value:   ").srcref(value),    callTarget.detachFromParent());    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
46	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  value);  [CE]  illegal  start  of  type  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n.getNext().replaceChild(n,  value);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.getNext().replaceChild(n,  value);	  n.getNext().removeChild(value);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
47	[BUG]  [BUGGY]  n.getNext().replaceChild(callTarget,  value);  [CE]  illegal  start  of  type  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n.getNext().replaceChild(callTarget,  value);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.getNext().replaceChild(callTarget,  value);	  n.getNext().removeChild(value);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
48	[BUG]  [BUGGY]  n.getNext().removeChild(callTarget);  [CE]  ')'  expected  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n.getNext().removeChild(callTarget);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.getNext().removeChild(callTarget);	  n.getNext().removeChild(value);    	non-compiled	[CE]  ')'  expected	8	None	replace
49	[BUG]  [BUGGY]  n.getNext().removeChild(key);  [CE]  ')'  expected  [FE]                                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n.getNext().removeChild(key);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.getNext().removeChild(key);	  n.getNext().removeChild(value);    	non-compiled	[CE]  ')'  expected	8	None	replace
50	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  addition);  [CE]  ')'  expected  [FE]                                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n.getNext().replaceChild(n,  addition);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.getNext().replaceChild(n,  addition);	  n.getNext().removeChild(value);    	non-compiled	[CE]  ')'  expected	8	None	replace
51	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Additional  value:   ").srcref(callTarget),  value.detachFromParent());  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Additional  value:   ").srcref(callTarget),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Additional  value:   ").srcref(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Additional    value:   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	43	None	replace
52	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Additional  value:   ").srcref(value),  callTarget,  value.detachFromParent());  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Additional  value:   ").srcref(value),  callTarget,  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Additional  value:   ").srcref(value),  callTarget,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Additional    value:   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	43	None	replace
53	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Additional  value:   ").srcref(value),  callTarget.detachFromParent());  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Additional  value:   ").srcref(value),  callTarget.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Additional  value:   ").srcref(value),  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Additional    value:   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	43	None	replace
54	[BUG]  [BUGGY]  n  =  callTarget.getNext();  [CE]  ')'  expected  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n  =  callTarget.getNext();  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n  =  callTarget.getNext();	  n    =    value.getNext();    	non-compiled	[CE]  ')'  expected	71	None	replace
55	[BUG]  [BUGGY]  n  =  value.getNext()  +  1;  [CE]  ')'  expected  [FE]                                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n  =  value.getNext()  +  1;  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n  =  value.getNext()  +  1;	  n    =    value.getNext();    	non-compiled	[CE]  ')'  expected	71	None	replace
56	[BUG]  [BUGGY]  n  =  value.getParent();  [CE]  ')'  expected  [FE]                                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n  =  value.getParent();  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n  =  value.getParent();	  n    =    value.getNext();    	non-compiled	[CE]  ')'  expected	71	None	replace
57	[BUG]  [BUGGY]  n  =  value.getNext()  -  1;  [CE]  illegal  start  of  expression  [FE]                                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n  =  value.getNext()  -  1;  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n  =  value.getNext()  -  1;	  n    =    value.getNext();    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
58	[BUG]  [BUGGY]  n  =  value.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n  =  value.getFirstChild();  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n  =  value.getFirstChild();	  n    =    value.getNext();    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
59	[BUG]  [BUGGY]  n  =  value.getNext()  *  2;  [CE]  illegal  start  of  expression  [FE]                                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n  =  value.getNext()  *  2;  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n  =  value.getNext()  *  2;	  n    =    value.getNext();    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
60	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "a.src "),  value,  value.src(callTarget),  value.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "a.src "),  value,  value.src(callTarget),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "a.src "),  value,  value.src(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "a.src   "),    value.src(callTarget),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
61	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "A.src "),  value.src(callTarget),  value.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "A.src "),  value.src(callTarget),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "A.src "),  value.src(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "a.src   "),    value.src(callTarget),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
62	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "a.src "),  value,  callTarget.src(value.detachFromParent()));  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "a.src "),  value,  callTarget.src(value.detachFromParent()));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "a.src "),  value,  callTarget.src(value.detachFromParent()));	  Node    addition    =    IR.add(IR.string(   "a.src   "),    value.src(callTarget),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
63	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "a.src "),  callTarget,  value.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "a.src "),  callTarget,  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "a.src "),  callTarget,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "a.src   "),    value.src(callTarget),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
64	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(callTarget,  value),  value.detachFromParent());  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(callTarget,  value),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(callTarget,  value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
65	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value,  callTarget),  n.detachFromParent());  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value,  callTarget),  n.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(value,  callTarget),  n.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
66	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value,  callTarget),  value.removeFirstChild());  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value,  callTarget),  value.removeFirstChild());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(value,  callTarget),  value.removeFirstChild());	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
67	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(callTarget,  value));  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(callTarget,  value));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(callTarget,  value));	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
68	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Av ").srcref(value,  callTarget),  value.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Av ").srcref(value,  callTarget),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Av ").srcref(value,  callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Av   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
69	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Av ").srcref(value),  callTarget,  value.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Av ").srcref(value),  callTarget,  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Av ").srcref(value),  callTarget,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Av   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
70	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Av ").srcref(value),  value,  callTarget.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Av ").srcref(value),  value,  callTarget.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Av ").srcref(value),  value,  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Av   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
71	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "n ").src(value),  value.detachFromParent());  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "n ").src(value),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "n ").src(value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "       ").src(value),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
72	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").src(value,  callTarget),  value.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").src(value,  callTarget),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "   ").src(value,  callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "       ").src(value),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
73	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").src(value),  callTarget,  value.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").src(value),  callTarget,  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "   ").src(value),  callTarget,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "       ").src(value),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
74	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").srcref(callTarget,  value),  value.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").srcref(callTarget,  value),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").srcref(callTarget,  value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Infinity   ").srcref(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
75	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value,  callTarget),  n.detachFromParent());  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value,  callTarget),  n.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value,  callTarget),  n.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Infinity   ").srcref(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	3	None	replace
76	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value,  callTarget),  value.removeFirstChild());  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value,  callTarget),  value.removeFirstChild());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value,  callTarget),  value.removeFirstChild());	  Node    addition    =    IR.add(IR.string(   "Infinity   ").srcref(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
77	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value,  callTarget),  value.toString());  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value,  callTarget),  value.toString());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value,  callTarget),  value.toString());	  Node    addition    =    IR.add(IR.string(   "Infinity   ").srcref(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
78	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Assignment  of ").srcref(value),  callTarget,  value.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Assignment  of ").srcref(value),  callTarget,  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Assignment  of ").srcref(value),  callTarget,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Assignment    of       ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
79	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Assignment  of ").srcref(value,  callTarget),  value.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Assignment  of ").srcref(value,  callTarget),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Assignment  of ").srcref(value,  callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Assignment    of       ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
80	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Assignment  of ").srcref(value),  callTarget.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Assignment  of ").srcref(value),  callTarget.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Assignment  of ").srcref(value),  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Assignment    of       ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
81	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value,  callTarget.getType()),  value.detachFromParent());  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value,  callTarget.getType()),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").src(value,  callTarget.getType()),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "av   ").src(value),    callTarget.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
82	[BUG]  [BUGGY]  Node  addition  =  value.add(IR.string( "av ").srcref(value),  n.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  value.add(IR.string( "av ").srcref(value),  n.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  value.add(IR.string( "av ").srcref(value),  n.detachFromParent());	  Node    addition    =    n.add(IR.string(   "av   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
83	[BUG]  [BUGGY]  Node  addition  =  n.add(IR.string( "av ").srcref(value),  callTarget.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  n.add(IR.string( "av ").srcref(value),  callTarget.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  n.add(IR.string( "av ").srcref(value),  callTarget.detachFromParent());	  Node    addition    =    n.add(IR.string(   "av   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
84	[BUG]  [BUGGY]  Node  addition  =  value.add(IR.string( "av ").srcref(n));  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  value.add(IR.string( "av ").srcref(n));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  value.add(IR.string( "av ").srcref(n));	  Node    addition    =    n.add(IR.string(   "av   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
85	[BUG]  [BUGGY]  Node  addition  =  value.add(IR.string( "av ")).srcref(value),  n.detachFromParent());  [CE]  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  value.add(IR.string( "av ")).srcref(value),  n.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  value.add(IR.string( "av ")).srcref(value),  n.detachFromParent());	  Node    addition    =    n.add(IR.string(   "av   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  	31	None	replace
86	[BUG]  [BUGGY]  Node  addition  =  value.add(IR.string( "av ").srcref(n),  value.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  value.add(IR.string( "av ").srcref(n),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  value.add(IR.string( "av ").srcref(n),  value.detachFromParent());	  Node    addition    =    n.add(IR.string(   "av   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
87	[BUG]  [BUGGY]  Node  addition  =  value.add(IR.string( "av ").srcref(null),  value.detachFromParent());  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  value.add(IR.string( "av ").srcref(null),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  value.add(IR.string( "av ").srcref(null),  value.detachFromParent());	  Node    addition    =    n.add(IR.string(   "av   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	31	None	replace
88	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( ", ").src(value),  value.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( ", ").src(value),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( ", ").src(value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "       ").src(value),    callTarget.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
89	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( ", ").src(value),  callTarget.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( ", ").src(value),  callTarget.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( ", ").src(value),  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "       ").src(value),    callTarget.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
90	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value),  callTarget,  value.removeFirstChild());  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value),  callTarget,  value.removeFirstChild());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity ").src(value),  callTarget,  value.removeFirstChild());	  Node    addition    =    IR.add(IR.string(   "infinity   ").src(value),    callTarget,    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
91	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value),  callTarget,  value.toString());  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value),  callTarget,  value.toString());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity ").src(value),  callTarget,  value.toString());	  Node    addition    =    IR.add(IR.string(   "infinity   ").src(value),    callTarget,    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
92	[BUG]  [BUGGY]  Node  addition  =  n.add(IR.string( "Infinity ").src(value));  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  n.add(IR.string( "Infinity ").src(value));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  n.add(IR.string( "Infinity ").src(value));	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value));    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
93	[BUG]  [BUGGY]  Node  addition  =  value.add(IR.string( "Infinity ").src(IR.string( "Infinity "));  [CE]  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  value.add(IR.string( "Infinity ").src(IR.string( "Infinity "));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  value.add(IR.string( "Infinity ").src(IR.string( "Infinity "));	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value));    	non-compiled	[CE]  	49	None	replace
94	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  value);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  value);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  value);	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value));    	non-compiled	[CE]  ')'  expected	49	None	replace
95	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  callTarget);  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  callTarget);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  callTarget);	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value));    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
96	[BUG]  [BUGGY]  Node  addition  =  IR.assign(IR.string( "Infinity ").src(value));  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.assign(IR.string( "Infinity ").src(value));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.assign(IR.string( "Infinity ").src(value));	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value));    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
97	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "a.src "),  value,  callTarget.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "a.src "),  value,  callTarget.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "a.src "),  value,  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "a.src   ",    value),    callTarget.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
98	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "a.src ", "value "),  value.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "a.src ", "value "),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "a.src ", "value "),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "a.src   ",    value),    callTarget.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
99	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "a.src "),  value.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "a.src "),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "a.src "),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "a.src   ",    value),    callTarget.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
100	[BUG]  [BUGGY]  Node  addition  =  n.add(IR.string( "av ").src(value));  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  n.add(IR.string( "av ").src(value));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  n.add(IR.string( "av ").src(value));	  Node    addition    =    IR.add(IR.string(   "av   ").src(value));    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
101	[BUG]  [BUGGY]  Node  addition  =  value.add(IR.string( "av ").src(value));  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  value.add(IR.string( "av ").src(value));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  value.add(IR.string( "av ").src(value));	  Node    addition    =    IR.add(IR.string(   "av   ").src(value));    	non-compiled	[CE]  ')'  expected	54	None	replace
102	[BUG]  [BUGGY]  Node  addition  =  n.getNext().add(IR.string( "av ").src(value));  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  n.getNext().add(IR.string( "av ").src(value));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  n.getNext().add(IR.string( "av ").src(value));	  Node    addition    =    IR.add(IR.string(   "av   ").src(value));    	non-compiled	[CE]  ')'  expected	54	None	replace
103	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value),  value);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value),  value);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").src(value),  value);	  Node    addition    =    IR.add(IR.string(   "av   ").src(value));    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
104	[BUG]  [BUGGY]  Node  addition  =  callTarget.getNext();  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  callTarget.getNext();  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  callTarget.getNext();	  Node    addition    =    value.getNext();    	non-compiled	[CE]  ')'  expected	6	None	replace
105	[BUG]  [BUGGY]  Node  addition  =  value.getNext()  :  null;  [CE]  ';'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  value.getNext()  :  null;  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  value.getNext()  :  null;	  Node    addition    =    value.getNext();    	non-compiled	[CE]  ';'  expected	6	None	replace
106	[BUG]  [BUGGY]  Node  addition  =  value.getNext()  -  1;  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  value.getNext()  -  1;  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  value.getNext()  -  1;	  Node    addition    =    value.getNext();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
107	[BUG]  [BUGGY]  Node  addition  =  value.getParent();  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  value.getParent();  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  value.getParent();	  Node    addition    =    value.getNext();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
108	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Attach: ").srcref(value),  callTarget.detachFromParent());  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Attach: ").srcref(value),  callTarget.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Attach: ").srcref(value),  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Attach:   ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	37	None	replace
109	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Attach: ").srcref(value),  value.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Attach: ").srcref(value),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Attach: ").srcref(value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Attach:   ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
110	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Attach: ").src(value),  callTarget.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Attach: ").src(value),  callTarget.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Attach: ").src(value),  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Attach:   ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
111	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Attach: ").srcref(value),  callTarget,  value.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Attach: ").srcref(value),  callTarget,  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Attach: ").srcref(value),  callTarget,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Attach:   ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
112	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Attach: ").srcref(value,  callTarget),  value.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Attach: ").srcref(value,  callTarget),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Attach: ").srcref(value,  callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Attach:   ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
113	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Av ").srcref(value),  callTarget.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Av ").srcref(value),  callTarget.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Av ").srcref(value),  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Av   ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
114	[BUG]  [BUGGY]  Node  addition  =  n.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  n.removeFirstChild();  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  n.removeFirstChild();	  Node    addition    =    value.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
115	[BUG]  [BUGGY]  Node  addition  =  value.removeLastChild();  [CE]  ')'  expected  [FE]                                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  value.removeLastChild();  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  value.removeLastChild();	  Node    addition    =    value.removeFirstChild();    	non-compiled	[CE]  ')'  expected	10	None	replace
116	[BUG]  [BUGGY]  Node  addition  =  callTarget.removeFirstChild();  [CE]  ')'  expected  [FE]                                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  callTarget.removeFirstChild();  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  callTarget.removeFirstChild();	  Node    addition    =    value.removeFirstChild();    	non-compiled	[CE]  ')'  expected	10	None	replace
117	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "null   ").src(value),  callTarget.detachFromParent());  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "null   ").src(value),  callTarget.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "null   ").src(value),  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "n   ").src(value),    callTarget.detachFromParent());    	non-compiled	[CE]  ')'  expected	53	None	replace
118	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "no_arguments ").src(value),  callTarget.detachFromParent());  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "no_arguments ").src(value),  callTarget.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "no_arguments ").src(value),  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "n   ").src(value),    callTarget.detachFromParent());    	non-compiled	[CE]  ')'  expected	53	None	replace
119	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(callTarget,  value),  value.detachFromParent());  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(callTarget,  value),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").srcref(callTarget,  value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "av   ").srcref(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	29	None	replace
120	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(value,  callTarget),  value.removeFirstChild());  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(value,  callTarget),  value.removeFirstChild());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").srcref(value,  callTarget),  value.removeFirstChild());	  Node    addition    =    IR.add(IR.string(   "av   ").srcref(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	29	None	replace
121	[BUG]  [BUGGY]  Node  addition  =  IR.string( "av ").srcref(value,  callTarget),  value.detachFromParent());  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.string( "av ").srcref(value,  callTarget),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.string( "av ").srcref(value,  callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "av   ").srcref(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  	29	None	replace
122	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(value,  callTarget),  value.toString());  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(value,  callTarget),  value.toString());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").srcref(value,  callTarget),  value.toString());	  Node    addition    =    IR.add(IR.string(   "av   ").srcref(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	29	None	replace
123	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").src(value));  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").src(value));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "A-Z ").src(value));	  Node    addition    =    IR.add(IR.string(   "A-Z   ").src(callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	55	None	replace
124	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").src(value,  callTarget),  value.detachFromParent());  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").src(value,  callTarget),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "A-Z ").src(value,  callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "A-Z   ").src(callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	55	None	replace
125	[BUG]  [BUGGY]  Node  addition  =  n.removeFirstChild();  n.getParent().removeChild(value);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  n.removeFirstChild();  n.getParent().removeChild(value);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  n.removeFirstChild();  n.getParent().removeChild(value);	  Node    addition    =    value.removeFirstChild();    n.getParent().removeChild(value);    	non-compiled	[CE]  ')'  expected	86	None	replace
126	[BUG]  [BUGGY]  Node  addition  =  value.removeFirstChild();  n.getParent().removeChild(callTarget);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  value.removeFirstChild();  n.getParent().removeChild(callTarget);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  value.removeFirstChild();  n.getParent().removeChild(callTarget);	  Node    addition    =    value.removeFirstChild();    n.getParent().removeChild(value);    	non-compiled	[CE]  ')'  expected	86	None	replace
127	[BUG]  [BUGGY]  Node  addition  =  n.getFirstChild();  n.getParent().removeChild(value);  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  n.getFirstChild();  n.getParent().removeChild(value);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  n.getFirstChild();  n.getParent().removeChild(value);	  Node    addition    =    value.removeFirstChild();    n.getParent().removeChild(value);    	non-compiled	[CE]  ')'  expected	86	None	replace
128	[BUG]  [BUGGY]  Node  addition  =  value.removeFirstChild();  n.getNext().removeChild(value);  [CE]  ')'  expected  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  value.removeFirstChild();  n.getNext().removeChild(value);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  value.removeFirstChild();  n.getNext().removeChild(value);	  Node    addition    =    value.removeFirstChild();    n.getParent().removeChild(value);    	non-compiled	[CE]  ')'  expected	86	None	replace
129	[BUG]  [BUGGY]  Node  addition  =  value.getFirstChild();  n.getParent().removeChild(value);  [CE]  ')'  expected  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  value.getFirstChild();  n.getParent().removeChild(value);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  value.getFirstChild();  n.getParent().removeChild(value);	  Node    addition    =    value.removeFirstChild();    n.getParent().removeChild(value);    	non-compiled	[CE]  ')'  expected	86	None	replace
130	[BUG]  [BUGGY]  Node  addition  =  value.removeFirstChild();  n.getParent().removeChild(a);  [CE]  ')'  expected  [FE]                                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  value.removeFirstChild();  n.getParent().removeChild(a);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  value.removeFirstChild();  n.getParent().removeChild(a);	  Node    addition    =    value.removeFirstChild();    n.getParent().removeChild(value);    	non-compiled	[CE]  ')'  expected	86	None	replace
131	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( ", ").srcref(value),  value.detachFromParent());  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( ", ").srcref(value),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( ", ").srcref(value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "       ").srcref(value),    callTarget.detachFromParent());    	non-compiled	[CE]  ')'  expected	58	None	replace
132	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").srcref(value),  callTarget,  value.detachFromParent());  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").srcref(value),  callTarget,  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "   ").srcref(value),  callTarget,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "       ").srcref(value),    callTarget.detachFromParent());    	non-compiled	[CE]  ')'  expected	58	None	replace
133	[BUG]  [BUGGY]  n.removeChild(callTarget);  [CE]  ')'  expected  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n.removeChild(callTarget);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.removeChild(callTarget);	  n.removeChild(value);    	non-compiled	[CE]  ')'  expected	70	None	replace
134	[BUG]  [BUGGY]  n.removeChild(value,  value);  [CE]  ')'  expected  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n.removeChild(value,  value);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.removeChild(value,  value);	  n.removeChild(value);    	non-compiled	[CE]  ')'  expected	70	None	replace
135	[BUG]  [BUGGY]  n.removeChild(key);  [CE]  ')'  expected  [FE]                                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n.removeChild(key);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.removeChild(key);	  n.removeChild(value);    	non-compiled	[CE]  ')'  expected	70	None	replace
136	[BUG]  [BUGGY]  n.removeChild(value,  addition);  [CE]  ')'  expected  [FE]                                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n.removeChild(value,  addition);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.removeChild(value,  addition);	  n.removeChild(value);    	non-compiled	[CE]  ')'  expected	70	None	replace
137	[BUG]  [BUGGY]  n.replaceChild(callTarget,  value);  [CE]  ')'  expected  [FE]                                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n.replaceChild(callTarget,  value);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.replaceChild(callTarget,  value);	  n.removeChild(value);    	non-compiled	[CE]  ')'  expected	70	None	replace
138	[BUG]  [BUGGY]  n.removeChild(value,  value.detachFromParent());  [CE]  ')'  expected  [FE]                                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n.removeChild(value,  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.removeChild(value,  value.detachFromParent());	  n.removeChild(value);    	non-compiled	[CE]  ')'  expected	70	None	replace
139	[BUG]  [BUGGY]  Node  addition  =  n.getParent();  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  n.getParent();  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  n.getParent();	  Node    addition    =    n.getNext();    	non-compiled	[CE]  ')'  expected	68	None	replace
140	[BUG]  [BUGGY]  Node  addition  =  n.getNext(),  value);  [CE]  ';'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  n.getNext(),  value);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  n.getNext(),  value);	  Node    addition    =    n.getNext();    	non-compiled	[CE]  ';'  expected	68	None	replace
141	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(value)/  1,  value.detachFromParent());  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(value)/  1,  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").srcref(value)/  1,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "av   ").srcref(value)-    1,    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	78	None	replace
142	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(value)/  2,  value.detachFromParent());  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(value)/  2,  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").srcref(value)/  2,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "av   ").srcref(value)-    1,    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	78	None	replace
143	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(value)-  1,  callTarget,  value.detachFromParent());  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(value)-  1,  callTarget,  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").srcref(value)-  1,  callTarget,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "av   ").srcref(value)-    1,    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	78	None	replace
144	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Av ").srcref(value)-  1,  value.detachFromParent());  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Av ").srcref(value)-  1,  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Av ").srcref(value)-  1,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "av   ").srcref(value)-    1,    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	78	None	replace
145	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(value)+  1,  value.detachFromParent());  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(value)+  1,  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").srcref(value)+  1,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "av   ").srcref(value)-    1,    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	78	None	replace
146	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").src(value,  callTarget),  value.detachFromParent(),  n);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").src(value,  callTarget),  value.detachFromParent(),  n);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ").src(value,  callTarget),  value.detachFromParent(),  n);	  Node    addition    =    IR.add(IR.string(   "*   ").src(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	84	None	replace
147	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").src(callTarget,  value),  value.detachFromParent());  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").src(callTarget,  value),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ").src(callTarget,  value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "*   ").src(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	84	None	replace
148	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").src(value,  callTarget),  n.detachFromParent());  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").src(value,  callTarget),  n.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ").src(value,  callTarget),  n.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "*   ").src(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	84	None	replace
149	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(callTarget,  value),  value.detachFromParent());  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(callTarget,  value),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity ").src(callTarget,  value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "infinity   ").src(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	21	None	replace
150	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value,  callTarget),  n.detachFromParent());  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value,  callTarget),  n.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity ").src(value,  callTarget),  n.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "infinity   ").src(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	21	None	replace
151	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value,  callTarget),  value.removeFirstChild());  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value,  callTarget),  value.removeFirstChild());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity ").src(value,  callTarget),  value.removeFirstChild());	  Node    addition    =    IR.add(IR.string(   "infinity   ").src(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	21	None	replace
152	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").srcref(value,  callTarget),  value.detachFromParent());  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").srcref(value,  callTarget),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "   ").srcref(value,  callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "       ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	59	None	replace
153	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value,  callTarget.getType()),  value.detachFromParent());  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value,  callTarget.getType()),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(value,  callTarget.getType()),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value),    callTarget.detachFromParent());    	non-compiled	[CE]  ')'  expected	4	None	replace
154	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "n ").src(callTarget),  value.detachFromParent());  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "n ").src(callTarget),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "n ").src(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "       ").src(callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	63	None	replace
155	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value,  callTarget.getType()),  value.detachFromParent());  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value,  callTarget.getType()),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value,  callTarget.getType()),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Infinity   ").srcref(value),    callTarget.detachFromParent());    	non-compiled	[CE]  ')'  expected	2	None	replace
156	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Assignment  of ").src(value),  callTarget.detachFromParent());  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Assignment  of ").src(value),  callTarget.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Assignment  of ").src(value),  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Assignment    of       ").src(callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	39	None	replace
157	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Assignment  of ").src(value),  callTarget,  value.detachFromParent());  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Assignment  of ").src(value),  callTarget,  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Assignment  of ").src(value),  callTarget,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Assignment    of       ").src(callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	39	None	replace
158	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Assignment  of ").src(value,  callTarget),  value.detachFromParent());  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Assignment  of ").src(value,  callTarget),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Assignment  of ").src(value,  callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Assignment    of       ").src(callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	39	None	replace
159	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").srcref(value,  callTarget),  value.detachFromParent());  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").srcref(value,  callTarget),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ").srcref(value,  callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "*   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	24	None	replace
160	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").srcref(value),  callTarget,  n.detachFromParent());  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").srcref(value),  callTarget,  n.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ").srcref(value),  callTarget,  n.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "*   ").srcref(value),    callTarget,    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	26	None	replace
161	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").srcref(value),  callTarget,  value.removeFirstChild());  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").srcref(value),  callTarget,  value.removeFirstChild());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ").srcref(value),  callTarget,  value.removeFirstChild());	  Node    addition    =    IR.add(IR.string(   "*   ").srcref(value),    callTarget,    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	26	None	replace
162	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(callTarget,  value),  value.detachFromParent());  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(callTarget,  value),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").src(callTarget,  value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "av   ").src(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	18	None	replace
163	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value,  callTarget),  value.removeFirstChild());  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value,  callTarget),  value.removeFirstChild());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").src(value,  callTarget),  value.removeFirstChild());	  Node    addition    =    IR.add(IR.string(   "av   ").src(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	18	None	replace
164	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ".src(value,  callTarget),  value.detachFromParent());  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ".src(value,  callTarget),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ".src(value,  callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "av   ").src(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  	18	None	replace
165	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value,  callTarget),  name.detachFromParent());  [CE]  illegal  start  of  type  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value,  callTarget),  name.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").src(value,  callTarget),  name.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "av   ").src(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
166	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).src(value,  callTarget),  value.detachFromParent());  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).src(value,  callTarget),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ")).src(value,  callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "*   ")).src(value),    value.detachFromParent());    	non-compiled	[CE]  	65	None	replace
167	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).src(value),  callTarget,  value.detachFromParent());  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).src(value),  callTarget,  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ")).src(value),  callTarget,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "*   ")).src(value),    value.detachFromParent());    	non-compiled	[CE]  	65	None	replace
168	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).src(value),  value.detachFromParent(),  n);  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).src(value),  value.detachFromParent(),  n);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ")).src(value),  value.detachFromParent(),  n);	  Node    addition    =    IR.add(IR.string(   "*   ")).src(value),    value.detachFromParent());    	non-compiled	[CE]  	65	None	replace
169	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).src(value),  value,  callTarget.detachFromParent());  [CE]  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).src(value),  value,  callTarget.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ")).src(value),  value,  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "*   ")).src(value),    value.detachFromParent());    	non-compiled	[CE]  	65	None	replace
170	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).src(callTarget),  value.detachFromParent());  [CE]  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).src(callTarget),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ")).src(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "*   ")).src(value),    value.detachFromParent());    	non-compiled	[CE]  	65	None	replace
171	[BUG]  [BUGGY]  Node  addition  =  n.add(IR.string( "infinity ").src(value));  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  n.add(IR.string( "infinity ").src(value));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  n.add(IR.string( "infinity ").src(value));	  Node    addition    =    IR.add(IR.string(   "infinity   ").src(value));    	non-compiled	[CE]  ')'  expected	56	None	replace
172	[BUG]  [BUGGY]  Node  addition  =  value.add(IR.string( "infinity ").src(IR.string( "infinity "));  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  value.add(IR.string( "infinity ").src(IR.string( "infinity "));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  value.add(IR.string( "infinity ").src(IR.string( "infinity "));	  Node    addition    =    IR.add(IR.string(   "infinity   ").src(value));    	non-compiled	[CE]  	56	None	replace
173	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value),  value);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value),  value);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity ").src(value),  value);	  Node    addition    =    IR.add(IR.string(   "infinity   ").src(value));    	non-compiled	[CE]  ')'  expected	56	None	replace
174	[BUG]  [BUGGY]  Node  addition  =  value.getAncestor(1);  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  value.getAncestor(1);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  value.getAncestor(1);	  Node    addition    =    value.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
175	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  callTarget,  value.removeFirstChild());  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  callTarget,  value.removeFirstChild());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  callTarget,  value.removeFirstChild());	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value),    callTarget,    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	42	None	replace
176	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  callTarget,  value.toString());  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  callTarget,  value.toString());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  callTarget,  value.toString());	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value),    callTarget,    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	42	None	replace
177	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "AttachFromParent   ").srcref(callTarget),  value.detachFromParent());  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "AttachFromParent   ").srcref(callTarget),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "AttachFromParent   ").srcref(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "AttachFromParent       ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	45	None	replace
178	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "AttachFromParent   ").srcref(value,  callTarget),  value.detachFromParent());  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "AttachFromParent   ").srcref(value,  callTarget),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "AttachFromParent   ").srcref(value,  callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "AttachFromParent       ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	45	None	replace
179	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "AttachFromParent   ").srcref(value),  callTarget,  value.detachFromParent());  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "AttachFromParent   ").srcref(value),  callTarget,  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "AttachFromParent   ").srcref(value),  callTarget,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "AttachFromParent       ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	45	None	replace
180	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "AttachFromParent   ").srcref(value),  callTarget.detachFromParent());  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "AttachFromParent   ").srcref(value),  callTarget.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "AttachFromParent   ").srcref(value),  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "AttachFromParent       ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	45	None	replace
181	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "AttachFromParent   ").src(value),  callTarget.detachFromParent());  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "AttachFromParent   ").src(value),  callTarget.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "AttachFromParent   ").src(value),  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "AttachFromParent       ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	45	None	replace
182	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value),  callTarget,  value.removeFirstChild());  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value),  callTarget,  value.removeFirstChild());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").src(value),  callTarget,  value.removeFirstChild());	  Node    addition    =    IR.add(IR.string(   "av   ").src(value),    callTarget,    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	19	None	replace
183	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value),  callTarget,  value.toString());  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value),  callTarget,  value.toString());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").src(value),  callTarget,  value.toString());	  Node    addition    =    IR.add(IR.string(   "av   ").src(value),    callTarget,    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	19	None	replace
184	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "No_arguments ").srcref(value),  callTarget.detachFromParent());  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "No_arguments ").srcref(value),  callTarget.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "No_arguments ").srcref(value),  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "no_arguments   ").srcref(value),    callTarget.detachFromParent());    	non-compiled	[CE]  ')'  expected	52	None	replace
185	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "No_arguments ").srcref(value),  value.detachFromParent());  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "No_arguments ").srcref(value),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "No_arguments ").srcref(value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "no_arguments   ").srcref(value),    callTarget.detachFromParent());    	non-compiled	[CE]  ')'  expected	52	None	replace
186	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "no_arguments ").srcref(value),  value.detachFromParent());  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "no_arguments ").srcref(value),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "no_arguments ").srcref(value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "no_arguments   ").srcref(value),    callTarget.detachFromParent());    	non-compiled	[CE]  ')'  expected	52	None	replace
187	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "No_arguments ").src(value),  callTarget.detachFromParent());  [CE]  ')'  expected  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "No_arguments ").src(value),  callTarget.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "No_arguments ").src(value),  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "no_arguments   ").srcref(value),    callTarget.detachFromParent());    	non-compiled	[CE]  ')'  expected	52	None	replace
188	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value),  callTarget,  value.detachFromParent(),  n);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value),  callTarget,  value.detachFromParent(),  n);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity ").src(value),  callTarget,  value.detachFromParent(),  n);	  Node    addition    =    IR.add(IR.string(   "infinity   ").src(value),    value.detachFromParent(),    n);    	non-compiled	[CE]  ')'  expected	80	None	replace
189	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ",  n),  value.detachFromParent(),  value);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ",  n),  value.detachFromParent(),  value);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity ",  n),  value.detachFromParent(),  value);	  Node    addition    =    IR.add(IR.string(   "infinity   ").src(value),    value.detachFromParent(),    n);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
190	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value),  n.detachFromParent(),  value);  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value),  n.detachFromParent(),  value);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity ").src(value),  n.detachFromParent(),  value);	  Node    addition    =    IR.add(IR.string(   "infinity   ").src(value),    value.detachFromParent(),    n);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
191	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value),  value.detachFromParent(),  n,  callTarget);  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value),  value.detachFromParent(),  n,  callTarget);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity ").src(value),  value.detachFromParent(),  n,  callTarget);	  Node    addition    =    IR.add(IR.string(   "infinity   ").src(value),    value.detachFromParent(),    n);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
192	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value),  value.detachFromParent(),  n,  n);  [CE]  illegal  start  of  type  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value),  value.detachFromParent(),  n,  n);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity ").src(value),  value.detachFromParent(),  n,  n);	  Node    addition    =    IR.add(IR.string(   "infinity   ").src(value),    value.detachFromParent(),    n);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
193	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").srcref(value,  callTarget.detachFromParent()));  [CE]  illegal  start  of  type  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").srcref(value,  callTarget.detachFromParent()));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "A-Z ").srcref(value,  callTarget.detachFromParent()));	  Node    addition    =    IR.add(IR.string(   "A-Z   ").srcref(value),    callTarget.detachFromParent());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
194	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").srcref(value),  callTarget.detachFromParent(),  value.detachFromParent());  [CE]  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").srcref(value),  callTarget.detachFromParent(),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "A-Z ").srcref(value),  callTarget.detachFromParent(),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "A-Z   ").srcref(value),    callTarget.detachFromParent());    	non-compiled	[CE]  	76	None	replace
195	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).srcref(value,  callTarget),  value.detachFromParent());  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).srcref(value,  callTarget),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ")).srcref(value,  callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "*   ")).srcref(value),    value.detachFromParent());    	non-compiled	[CE]  	82	None	replace
196	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).srcref(value),  callTarget,  value.detachFromParent());  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).srcref(value),  callTarget,  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ")).srcref(value),  callTarget,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "*   ")).srcref(value),    value.detachFromParent());    	non-compiled	[CE]  	82	None	replace
197	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).srcref(callTarget,  value.detachFromParent());  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).srcref(callTarget,  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ")).srcref(callTarget,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "*   ")).srcref(value),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
198	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).srcref(callTarget),  value.detachFromParent());  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).srcref(callTarget),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ")).srcref(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "*   ")).srcref(value),    value.detachFromParent());    	non-compiled	[CE]  	82	None	replace
199	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).srcref(value),  value,  callTarget.detachFromParent());  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).srcref(value),  value,  callTarget.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ")).srcref(value),  value,  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "*   ")).srcref(value),    value.detachFromParent());    	non-compiled	[CE]  	82	None	replace
200	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).srcref(value),  value.detachFromParent(),  n);  [CE]  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).srcref(value),  value.detachFromParent(),  n);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ")).srcref(value),  value.detachFromParent(),  n);	  Node    addition    =    IR.add(IR.string(   "*   ")).srcref(value),    value.detachFromParent());    	non-compiled	[CE]  	82	None	replace
201	[BUG]  [BUGGY]  n.getParent().replaceChild(callTarget,  value);  [CE]  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n.getParent().replaceChild(callTarget,  value);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.getParent().replaceChild(callTarget,  value);	  n.getParent().removeChild(value);    	non-compiled	[CE]  	7	None	replace
202	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  value);  [CE]  illegal  start  of  type  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n.getParent().replaceChild(n,  value);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.getParent().replaceChild(n,  value);	  n.getParent().removeChild(value);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
203	[BUG]  [BUGGY]  n.getParent().removeChild(callTarget);  [CE]  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n.getParent().removeChild(callTarget);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.getParent().removeChild(callTarget);	  n.getParent().removeChild(value);    	non-compiled	[CE]  	7	None	replace
204	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  addition);  [CE]  illegal  start  of  type  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n.getParent().replaceChild(n,  addition);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.getParent().replaceChild(n,  addition);	  n.getParent().removeChild(value);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
205	[BUG]  [BUGGY]  n.getParent().replaceChild(value,  addition);  [CE]  illegal  start  of  type  [FE]                                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n.getParent().replaceChild(value,  addition);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.getParent().replaceChild(value,  addition);	  n.getParent().removeChild(value);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
206	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value),  callTarget,  value.removeFirstChild());  [CE]  illegal  start  of  type  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value),  callTarget,  value.removeFirstChild());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value),  callTarget,  value.removeFirstChild());	  Node    addition    =    IR.add(IR.string(   "Infinity   ").srcref(value),    callTarget,    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
207	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value)||  value.detachFromParent());  [CE]  illegal  start  of  type  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value)||  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(value)||  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value)&&    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
208	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value)&&  value.detachFromParent(),  n);  [CE]  illegal  start  of  type  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value)&&  value.detachFromParent(),  n);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(value)&&  value.detachFromParent(),  n);	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value)&&    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
209	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(callTarget)&&  value.detachFromParent());  [CE]  illegal  start  of  type  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(callTarget)&&  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(callTarget)&&  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value)&&    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
210	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ",  value)&&  value.detachFromParent());  [CE]  illegal  start  of  type  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ",  value)&&  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ",  value)&&  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value)&&    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
211	[BUG]  [BUGGY]  n.removeChild(callTarget);  addition  =  value.detachFromParent();  [CE]  illegal  start  of  type  [FE]                                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n.removeChild(callTarget);  addition  =  value.detachFromParent();  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.removeChild(callTarget);  addition  =  value.detachFromParent();	  n.removeChild(value);    addition    =    value.detachFromParent();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
212	[BUG]  [BUGGY]  n.removeChild(key);  addition  =  value.detachFromParent();  [CE]  illegal  start  of  type  [FE]                                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n.removeChild(key);  addition  =  value.detachFromParent();  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.removeChild(key);  addition  =  value.detachFromParent();	  n.removeChild(value);    addition    =    value.detachFromParent();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
213	[BUG]  [BUGGY]  node.removeChild(value);  addition  =  value.detachFromParent();  [CE]  illegal  start  of  type  [FE]                                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  node.removeChild(value);  addition  =  value.detachFromParent();  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	node.removeChild(value);  addition  =  value.detachFromParent();	  n.removeChild(value);    addition    =    value.detachFromParent();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
214	[BUG]  [BUGGY]  n.removeChild(a);  addition  =  value.detachFromParent();  [CE]  ')'  expected  [FE]                                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n.removeChild(a);  addition  =  value.detachFromParent();  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.removeChild(a);  addition  =  value.detachFromParent();	  n.removeChild(value);    addition    =    value.detachFromParent();    	non-compiled	[CE]  ')'  expected	12	None	replace
215	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  callTarget,  value.detachFromParent(),  n);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  callTarget,  value.detachFromParent(),  n);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  callTarget,  value.detachFromParent(),  n);	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value),    value.detachFromParent(),    n);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
216	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ",  n),  value.detachFromParent(),  value);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ",  n),  value.detachFromParent(),  value);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ",  n),  value.detachFromParent(),  value);	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value),    value.detachFromParent(),    n);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
217	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  n.detachFromParent(),  value);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  n.detachFromParent(),  value);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  n.detachFromParent(),  value);	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value),    value.detachFromParent(),    n);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
218	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  value,  callTarget.detachFromParent(),  n);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  value,  callTarget.detachFromParent(),  n);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  value,  callTarget.detachFromParent(),  n);	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value),    value.detachFromParent(),    n);    	non-compiled	[CE]  ')'  expected	77	None	replace
219	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  value.detachFromParent(),  n,  callTarget);  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  value.detachFromParent(),  n,  callTarget);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  value.detachFromParent(),  n,  callTarget);	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value),    value.detachFromParent(),    n);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
220	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "No_arguments ").srcref(callTarget),  value.detachFromParent());  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "No_arguments ").srcref(callTarget),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "No_arguments ").srcref(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "no_arguments   ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
221	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "invalid_arguments ").srcref(callTarget),  value.detachFromParent());  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "invalid_arguments ").srcref(callTarget),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "invalid_arguments ").srcref(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "no_arguments   ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
222	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* "),  value.srcref(callTarget));  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "* "),  value.srcref(callTarget));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* "),  value.srcref(callTarget));	  Node    addition    =    IR.add(IR.string(   "*   ").srcref(value));    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
223	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").srcref(value),  value);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").srcref(value),  value);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ").srcref(value),  value);	  Node    addition    =    IR.add(IR.string(   "*   ").srcref(value));    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
224	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").srcref(value,  value));  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").srcref(value,  value));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ").srcref(value,  value));	  Node    addition    =    IR.add(IR.string(   "*   ").srcref(value));    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
225	[BUG]  [BUGGY]  n.getNext().removeChild(callTarget);  addition  =  value.detachFromParent();  [CE]  illegal  start  of  type  [FE]                                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n.getNext().removeChild(callTarget);  addition  =  value.detachFromParent();  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.getNext().removeChild(callTarget);  addition  =  value.detachFromParent();	  n.getNext().removeChild(value);    addition    =    value.detachFromParent();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
226	[BUG]  [BUGGY]  node.getNext().removeChild(value);  addition  =  value.detachFromParent();  [CE]  illegal  start  of  type  [FE]                                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  node.getNext().removeChild(value);  addition  =  value.detachFromParent();  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	node.getNext().removeChild(value);  addition  =  value.detachFromParent();	  n.getNext().removeChild(value);    addition    =    value.detachFromParent();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
227	[BUG]  [BUGGY]  n.getNext().removeChild(key);  addition  =  value.detachFromParent();  [CE]  ')'  expected  [FE]                                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n.getNext().removeChild(key);  addition  =  value.detachFromParent();  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.getNext().removeChild(key);  addition  =  value.detachFromParent();	  n.getNext().removeChild(value);    addition    =    value.detachFromParent();    	non-compiled	[CE]  ')'  expected	11	None	replace
228	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").src(value),  value.detachFromParent(),  n);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").src(value),  value.detachFromParent(),  n);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "A-Z ").src(value),  value.detachFromParent(),  n);	  Node    addition    =    IR.add(IR.string(   "A-Z   ").src(value),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
229	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").src(value)/  2,  value.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").src(value)/  2,  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "A-Z ").src(value)/  2,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "A-Z   ").src(value),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
230	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").srcref(value),  value);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").srcref(value),  value);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity ").srcref(value),  value);	  Node    addition    =    IR.add(IR.string(   "infinity   ").srcref(value));    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
231	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").srcref(value,  value));  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").srcref(value,  value));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity ").srcref(value,  value));	  Node    addition    =    IR.add(IR.string(   "infinity   ").srcref(value));    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
232	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").srcref(value,  callTarget.getType()),  value.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").srcref(value,  callTarget.getType()),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity ").srcref(value,  callTarget.getType()),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "infinity   ").srcref(value),    callTarget.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
233	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").srcref(value),  callTarget,  value.removeFirstChild());  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").srcref(value),  callTarget,  value.removeFirstChild());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity ").srcref(value),  callTarget,  value.removeFirstChild());	  Node    addition    =    IR.add(IR.string(   "infinity   ").srcref(value),    callTarget,    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
234	[BUG]  [BUGGY]  Node  addition  =  n.add(IR.string( "av ").srcref(value));  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  n.add(IR.string( "av ").srcref(value));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  n.add(IR.string( "av ").srcref(value));	  Node    addition    =    IR.add(IR.string(   "av   ").srcref(value));    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
235	[BUG]  [BUGGY]  Node  addition  =  value.add(IR.string( "av ").srcref(value));  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  value.add(IR.string( "av ").srcref(value));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  value.add(IR.string( "av ").srcref(value));	  Node    addition    =    IR.add(IR.string(   "av   ").srcref(value));    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
236	[BUG]  [BUGGY]  Node  addition  =  n.getNext().add(IR.string( "av ").srcref(value));  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  n.getNext().add(IR.string( "av ").srcref(value));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  n.getNext().add(IR.string( "av ").srcref(value));	  Node    addition    =    IR.add(IR.string(   "av   ").srcref(value));    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
237	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Av ").srcref(value));  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Av ").srcref(value));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Av ").srcref(value));	  Node    addition    =    IR.add(IR.string(   "av   ").srcref(value));    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
238	[BUG]  [BUGGY]  node.getParent().removeChild(value);  addition  =  value.detachFromParent();  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  node.getParent().removeChild(value);  addition  =  value.detachFromParent();  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	node.getParent().removeChild(value);  addition  =  value.detachFromParent();	  n.getParent().removeChild(value);    addition    =    value.detachFromParent();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
239	[BUG]  [BUGGY]  n.getParent().removeChild(callTarget);  addition  =  value.detachFromParent();  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n.getParent().removeChild(callTarget);  addition  =  value.detachFromParent();  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.getParent().removeChild(callTarget);  addition  =  value.detachFromParent();	  n.getParent().removeChild(value);    addition    =    value.detachFromParent();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
240	[BUG]  [BUGGY]  n.getParent().removeChild(key);  addition  =  value.detachFromParent();  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n.getParent().removeChild(key);  addition  =  value.detachFromParent();  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.getParent().removeChild(key);  addition  =  value.detachFromParent();	  n.getParent().removeChild(value);    addition    =    value.detachFromParent();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
241	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  addition);  addition  =  value.detachFromParent();  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n.getParent().replaceChild(n,  addition);  addition  =  value.detachFromParent();  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.getParent().replaceChild(n,  addition);  addition  =  value.detachFromParent();	  n.getParent().removeChild(value);    addition    =    value.detachFromParent();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
242	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value),  value.detachFromParent(),  n,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value),  value.detachFromParent(),  n,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity ").src(value),  value.detachFromParent(),  n,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Node    addition    =    IR.add(IR.string(   "infinity   ").src(value),    value.detachFromParent(),    n);    	non-compiled	[CE]  ')'  expected	80	None	replace
243	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value),  value.detachFromParent(),  n,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value),  value.detachFromParent(),  n,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity ").src(value),  value.detachFromParent(),  n,  STANDARD_OBJECT_CONSTRUCTORS);	  Node    addition    =    IR.add(IR.string(   "infinity   ").src(value),    value.detachFromParent(),    n);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
244	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value),  value.detachFromParent(),  n,  NON_GLOBAL_EXPRESSION_FLAGS);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value),  value.detachFromParent(),  n,  NON_GLOBAL_EXPRESSION_FLAGS);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity ").src(value),  value.detachFromParent(),  n,  NON_GLOBAL_EXPRESSION_FLAGS);	  Node    addition    =    IR.add(IR.string(   "infinity   ").src(value),    value.detachFromParent(),    n);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
245	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value),  callTarget,  value.removeFromParent());  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value),  callTarget,  value.removeFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity ").src(value),  callTarget,  value.removeFromParent());	  Node    addition    =    IR.add(IR.string(   "infinity   ").src(value),    callTarget,    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
246	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).srcref(value,  value.detachFromParent()));  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).srcref(value,  value.detachFromParent()));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ")).srcref(value,  value.detachFromParent()));	  Node    addition    =    IR.add(IR.string(   "*   ")).srcref(value),    value.detachFromParent());    	non-compiled	[CE]  	82	None	replace
247	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").src(value),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").src(value),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ").src(value),  INVALID_REGULAR_EXPRESSION_FLAGS);	  Node    addition    =    IR.add(IR.string(   "*   ").src(value));    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
248	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").src(value),  value);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").src(value),  value);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ").src(value),  value);	  Node    addition    =    IR.add(IR.string(   "*   ").src(value));    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
249	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).src(value));  [CE]  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).src(value));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ")).src(value));	  Node    addition    =    IR.add(IR.string(   "*   ").src(value));    	non-compiled	[CE]  	66	None	replace
250	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ".src(value));  [CE]  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "* ".src(value));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ".src(value));	  Node    addition    =    IR.add(IR.string(   "*   ").src(value));    	non-compiled	[CE]  	66	None	replace
251	[BUG]  [BUGGY]  Node  addition  =  value.getAncestor(2);  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  value.getAncestor(2);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  value.getAncestor(2);	  Node    addition    =    value.getFirstChild();    	non-compiled	[CE]  ')'  expected	69	None	replace
252	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value,  callTarget),  value.removeFromParent());  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value,  callTarget),  value.removeFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").src(value,  callTarget),  value.removeFromParent());	  Node    addition    =    IR.add(IR.string(   "av   ").src(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	18	None	replace
253	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(callTarget,  value));  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(callTarget,  value));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").src(callTarget,  value));	  Node    addition    =    IR.add(IR.string(   "av   ").src(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	18	None	replace
254	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value,  callTarget));  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value,  callTarget));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").src(value,  callTarget));	  Node    addition    =    IR.add(IR.string(   "av   ").src(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	18	None	replace
255	[BUG]  [BUGGY]  n.getParent().removeChild(value,  value);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n.getParent().removeChild(value,  value);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.getParent().removeChild(value,  value);	  n.getParent().removeChild(value);    	non-compiled	[CE]  ')'  expected	7	None	replace
256	[BUG]  [BUGGY]  n.getName().removeChild(value);  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n.getName().removeChild(value);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.getName().removeChild(value);	  n.getParent().removeChild(value);    	non-compiled	[CE]  ')'  expected	7	None	replace
257	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  INVALID_REGULAR_EXPRESSION_FLAGS);	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value));    	non-compiled	[CE]  ')'  expected	49	None	replace
258	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value,  value));  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value,  value));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(value,  value));	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value));    	non-compiled	[CE]  ')'  expected	49	None	replace
259	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  JSON_OBJECT_CONSTRUCTORS);  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  JSON_OBJECT_CONSTRUCTORS);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  JSON_OBJECT_CONSTRUCTORS);	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value));    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
260	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(value,  callTarget),  value.removeFromParent());  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(value,  callTarget),  value.removeFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").srcref(value,  callTarget),  value.removeFromParent());	  Node    addition    =    IR.add(IR.string(   "av   ").srcref(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	29	None	replace
261	[BUG]  [BUGGY]  n.getFirstChild().removeChild(value);  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n.getFirstChild().removeChild(value);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.getFirstChild().removeChild(value);	  n.getNext().removeChild(value);    	non-compiled	[CE]  ')'  expected	8	None	replace
262	[BUG]  [BUGGY]  n.getNext().replaceChild(value,  addition);  [CE]  ')'  expected  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n.getNext().replaceChild(value,  addition);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.getNext().replaceChild(value,  addition);	  n.getNext().removeChild(value);    	non-compiled	[CE]  ')'  expected	8	None	replace
263	[BUG]  [BUGGY]  n.getNext().removeChild(value,  value);  [CE]  ')'  expected  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n.getNext().removeChild(value,  value);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.getNext().removeChild(value,  value);	  n.getNext().removeChild(value);    	non-compiled	[CE]  ')'  expected	8	None	replace
264	[BUG]  [BUGGY]  n.getNext().detachFromParent();  [CE]  ')'  expected  [FE]                                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n.getNext().detachFromParent();  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.getNext().detachFromParent();	  n.getNext().removeChild(value);    	non-compiled	[CE]  ')'  expected	8	None	replace
265	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "a.src ",  value.src(callTarget),  value.detachFromParent());  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "a.src ",  value.src(callTarget),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "a.src ",  value.src(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "a.src   "),    value.src(callTarget),    value.detachFromParent());    	non-compiled	[CE]  	38	None	replace
266	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "a.src, "),  value.src(callTarget),  value.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "a.src, "),  value.src(callTarget),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "a.src, "),  value.src(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "a.src   "),    value.src(callTarget),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
267	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "a.src= "),  value.src(callTarget),  value.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "a.src= "),  value.src(callTarget),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "a.src= "),  value.src(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "a.src   "),    value.src(callTarget),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
268	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").srCfg(value));  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").srCfg(value));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").srCfg(value));	  Node    addition    =    IR.add(IR.string(   "Infinity   ").srcref(value));    	non-compiled	[CE]  ')'  expected	64	None	replace
269	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "AttachFromParent   ").src(value),  value.detachFromParent());  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "AttachFromParent   ").src(value),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "AttachFromParent   ").src(value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "AttachFromParent       ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	45	None	replace
270	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity ").src(value),  INVALID_REGULAR_EXPRESSION_FLAGS);	  Node    addition    =    IR.add(IR.string(   "infinity   ").src(value));    	non-compiled	[CE]  ')'  expected	56	None	replace
271	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity. ").src(value));  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity. ").src(value));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity. ").src(value));	  Node    addition    =    IR.add(IR.string(   "infinity   ").src(value));    	non-compiled	[CE]  ')'  expected	56	None	replace
272	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ",  value),  callTarget.detachFromParent());  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ",  value),  callTarget.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ",  value),  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value),    callTarget.detachFromParent());    	non-compiled	[CE]  ')'  expected	4	None	replace
273	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value)-  1,  value.detachFromParent());  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value)-  1,  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").src(value)-  1,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "av   ").srcref(value)-    1,    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	78	None	replace
274	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string(value)-  1,  value.detachFromParent());  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string(value)-  1,  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string(value)-  1,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "av   ").srcref(value)-    1,    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	78	None	replace
275	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  addition);  addition  =  value.detachFromParent();  [CE]  ')'  expected  [FE]                                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n.getNext().replaceChild(n,  addition);  addition  =  value.detachFromParent();  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.getNext().replaceChild(n,  addition);  addition  =  value.detachFromParent();	  n.getNext().removeChild(value);    addition    =    value.detachFromParent();    	non-compiled	[CE]  ')'  expected	11	None	replace
276	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  value.detachFromParent(),  n,  NON_GLOBAL_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  value.detachFromParent(),  n,  NON_GLOBAL_EXPRESSION_FLAGS);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  value.detachFromParent(),  n,  NON_GLOBAL_EXPRESSION_FLAGS);	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value),    value.detachFromParent(),    n);    	non-compiled	[CE]  ')'  expected	77	None	replace
277	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value,  n),  value.detachFromParent(),  n);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value,  n),  value.detachFromParent(),  n);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(value,  n),  value.detachFromParent(),  n);	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value),    value.detachFromParent(),    n);    	non-compiled	[CE]  ')'  expected	77	None	replace
278	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  callTarget.detachFromParent(),  n);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  callTarget.detachFromParent(),  n);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  callTarget.detachFromParent(),  n);	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value),    value.detachFromParent(),    n);    	non-compiled	[CE]  ')'  expected	77	None	replace
279	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  value.detachFromParent(),  n,  predicate);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  value.detachFromParent(),  n,  predicate);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  value.detachFromParent(),  n,  predicate);	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value),    value.detachFromParent(),    n);    	non-compiled	[CE]  ')'  expected	77	None	replace
280	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value)&&  value.detachFromParent(),  callTarget);  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value)&&  value.detachFromParent(),  callTarget);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(value)&&  value.detachFromParent(),  callTarget);	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value)&&    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	83	None	replace
281	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value)&&  value.detachFromParent(),  value);  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value)&&  value.detachFromParent(),  value);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(value)&&  value.detachFromParent(),  value);	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value)&&    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
282	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value),  value,  value.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value),  value,  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").src(value),  value,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "av   ").src(value),    callTarget,    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
283	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "a.src ",  value),  value.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "a.src ",  value),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "a.src ",  value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "a.src   ",    callTarget),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
284	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "a.src "),  value,  value.detachFromParent());  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "a.src "),  value,  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "a.src "),  value,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "a.src   ",    callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	35	None	replace
285	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "a.src ",  callTarget),  value,  value.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "a.src ",  callTarget),  value,  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "a.src ",  callTarget),  value,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "a.src   ",    callTarget),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
286	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "a.src ",  callTarget),  value.removeFromParent());  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "a.src ",  callTarget),  value.removeFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "a.src ",  callTarget),  value.removeFromParent());	  Node    addition    =    IR.add(IR.string(   "a.src   ",    callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	35	None	replace
287	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value,  callTarget),  value.removeFromParent());  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value,  callTarget),  value.removeFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value,  callTarget),  value.removeFromParent());	  Node    addition    =    IR.add(IR.string(   "Infinity   ").srcref(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	3	None	replace
288	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value,  callTarget),  value.removeFromParent());  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value,  callTarget),  value.removeFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(value,  callTarget),  value.removeFromParent());	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	41	None	replace
289	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value,  callTarget),  value.toString());  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value,  callTarget),  value.toString());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(value,  callTarget),  value.toString());	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
290	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value,  callTarget));  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value,  callTarget));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(value,  callTarget));	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	41	None	replace
291	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "AttachFromParent:   ").src(value),  value.detachFromParent());  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "AttachFromParent:   ").src(value),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "AttachFromParent:   ").src(value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "AttachFromParent:       ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	46	None	replace
292	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "AttachFromParent:   ").srcref(value,  callTarget),  value.detachFromParent());  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "AttachFromParent:   ").srcref(value,  callTarget),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "AttachFromParent:   ").srcref(value,  callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "AttachFromParent:       ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	46	None	replace
293	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "AttachFromParent:   ").srcref(value));  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "AttachFromParent:   ").srcref(value));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "AttachFromParent:   ").srcref(value));	  Node    addition    =    IR.add(IR.string(   "AttachFromParent:       ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	46	None	replace
294	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "AttachFromParent:   ").srcref(value),  value.toString());  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "AttachFromParent:   ").srcref(value),  value.toString());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "AttachFromParent:   ").srcref(value),  value.toString());	  Node    addition    =    IR.add(IR.string(   "AttachFromParent:       ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	46	None	replace
295	[BUG]  [BUGGY]  n.removeChild(value)&&  NodeUtil.isFunctionDeclaration(value);  [CE]  not  a  statement  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n.removeChild(value)&&  NodeUtil.isFunctionDeclaration(value);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.removeChild(value)&&  NodeUtil.isFunctionDeclaration(value);	  n.removeChild(value);    	non-compiled	[CE]  not  a  statement	70	None	replace
296	[BUG]  [BUGGY]  n.removeChild(value).replaceChild(n,  value);  [CE]  ')'  expected  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n.removeChild(value).replaceChild(n,  value);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.removeChild(value).replaceChild(n,  value);	  n.removeChild(value);    	non-compiled	[CE]  ')'  expected	70	None	replace
297	[BUG]  [BUGGY]  n.removeChild(value)&&  NodeUtil.isFunctionAnonymous(value);  [CE]  not  a  statement  [FE]                                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n.removeChild(value)&&  NodeUtil.isFunctionAnonymous(value);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.removeChild(value)&&  NodeUtil.isFunctionAnonymous(value);	  n.removeChild(value);    	non-compiled	[CE]  not  a  statement	70	None	replace
298	[BUG]  [BUGGY]  Node  addition  =  n.add(IR.string( "av ").src(value),  value.detachFromParent());  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  n.add(IR.string( "av ").src(value),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  n.add(IR.string( "av ").src(value),  value.detachFromParent());	  Node    addition    =    n.add(IR.string(   "av   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	31	None	replace
299	[BUG]  [BUGGY]  Node  addition  =  value.add(IR.string( "av ").src(value),  n.detachFromParent());  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  value.add(IR.string( "av ").src(value),  n.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  value.add(IR.string( "av ").src(value),  n.detachFromParent());	  Node    addition    =    n.add(IR.string(   "av   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	31	None	replace
300	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "no_arguments  available "),  value,  callTarget.detachFromParent());  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "no_arguments  available "),  value,  callTarget.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "no_arguments  available "),  value,  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "n   ").src(value),    callTarget.detachFromParent());    	non-compiled	[CE]  ')'  expected	53	None	replace
301	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value)+  1,  value.detachFromParent());  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value)+  1,  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").src(value)+  1,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "av   ").src(value),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	15	None	replace
302	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").src(value)+  1,  value.detachFromParent());  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").src(value)+  1,  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "A-Z ").src(value)+  1,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "A-Z   ").src(value),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	72	None	replace
303	[BUG]  [BUGGY]  Node  addition  =  n.getNext().removeChild(value);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  n.getNext().removeChild(value);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  n.getNext().removeChild(value);	  Node    addition    =    n.getNext();    	non-compiled	[CE]  ')'  expected	68	None	replace
304	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "*   ").src(value,  callTarget),  value.detachFromParent(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "*   ").src(value,  callTarget),  value.detachFromParent(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "*   ").src(value,  callTarget),  value.detachFromParent(),  INVALID_REGULAR_EXPRESSION_FLAGS);	  Node    addition    =    IR.add(IR.string(   "*   ").src(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	84	None	replace
305	[BUG]  [BUGGY]  n.getParent().replaceChild(value,  addition);  addition  =  value.detachFromParent();  [CE]  ')'  expected  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n.getParent().replaceChild(value,  addition);  addition  =  value.detachFromParent();  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.getParent().replaceChild(value,  addition);  addition  =  value.detachFromParent();	  n.getParent().removeChild(value);    addition    =    value.detachFromParent();    	non-compiled	[CE]  ')'  expected	9	None	replace
306	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Invalid  no_arguments ").srcref(value),  callTarget.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Invalid  no_arguments ").srcref(value),  callTarget.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Invalid  no_arguments ").srcref(value),  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "no_arguments   ").srcref(value),    callTarget.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
307	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "invalid_arguments ").srcref(value),  callTarget.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "invalid_arguments ").srcref(value),  callTarget.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "invalid_arguments ").srcref(value),  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "no_arguments   ").srcref(value),    callTarget.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
308	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "no_arguments "),  value,  callTarget.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "no_arguments "),  value,  callTarget.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "no_arguments "),  value,  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "no_arguments   ").srcref(value),    callTarget.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
309	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "no_arguments ").src(value),  value.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "no_arguments ").src(value),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "no_arguments ").src(value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "no_arguments   ").srcref(value),    callTarget.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
310	[BUG]  [BUGGY]  Node  addition  =  value.replaceChild(n,  n);  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  value.replaceChild(n,  n);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  value.replaceChild(n,  n);	  Node    addition    =    value.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
311	[BUG]  [BUGGY]  NodeUtil.removeChild(value);  addition  =  value.detachFromParent();  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  NodeUtil.removeChild(value);  addition  =  value.detachFromParent();  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	NodeUtil.removeChild(value);  addition  =  value.detachFromParent();	  n.removeChild(value);    addition    =    value.detachFromParent();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
312	[BUG]  [BUGGY]  n.removeChild(value);  addition  =  value.detachFromNext();  [CE]  illegal  start  of  expression  [FE]                                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n.removeChild(value);  addition  =  value.detachFromNext();  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.removeChild(value);  addition  =  value.detachFromNext();	  n.removeChild(value);    addition    =    value.detachFromParent();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
313	[BUG]  [BUGGY]  n  =  value.detachFromParent();  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n  =  value.detachFromParent();  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n  =  value.detachFromParent();	  n    =    value.getNext();    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
314	[BUG]  [BUGGY]  n  =  value.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n  =  value.removeFirstChild();  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n  =  value.removeFirstChild();	  n    =    value.getNext();    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
315	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value)&&  value.detachFromParent(),  callTarget);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value)&&  value.detachFromParent(),  callTarget);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").src(value)&&  value.detachFromParent(),  callTarget);	  Node    addition    =    IR.add(IR.string(   "av   ").src(value)&&    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
316	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value)&&  value.detachFromParent()  +  1);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value)&&  value.detachFromParent()  +  1);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").src(value)&&  value.detachFromParent()  +  1);	  Node    addition    =    IR.add(IR.string(   "av   ").src(value)&&    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
317	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").src(value),  INVALID_REGULAR_EXPRESSION_FLAGS);	  Node    addition    =    IR.add(IR.string(   "av   ").src(value));    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
318	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Add   ").src(value));  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Add   ").src(value));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Add   ").src(value));	  Node    addition    =    IR.add(IR.string(   "av   ").src(value));    	non-compiled	[CE]  ')'  expected	54	None	replace
319	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  callTarget,  value.removeFromParent());  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  callTarget,  value.removeFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  callTarget,  value.removeFromParent());	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value),    callTarget,    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	42	None	replace
320	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Additional  value:   ").src(value),  value.detachFromParent());  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Additional  value:   ").src(value),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Additional  value:   ").src(value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Additional    value:   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	43	None	replace
321	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Additional  value:   ").src(value,  callTarget),  value.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Additional  value:   ").src(value,  callTarget),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Additional  value:   ").src(value,  callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Additional    value:   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
322	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Additional  value:   ").srcref(value));  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Additional  value:   ").srcref(value));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Additional  value:   ").srcref(value));	  Node    addition    =    IR.add(IR.string(   "Additional    value:   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
323	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Additional  value:   ").src(value),  callTarget,  value.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Additional  value:   ").src(value),  callTarget,  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Additional  value:   ").src(value),  callTarget,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Additional    value:   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
324	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").src(value));  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").src(value));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "   ").src(value));	  Node    addition    =    IR.add(IR.string(   "       ").src(value),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
325	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Attachment:   ").srcref(value),  value.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Attachment:   ").srcref(value),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Attachment:   ").srcref(value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Attach:   ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
326	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Attachment:   ").src(value),  value.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Attachment:   ").src(value),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Attachment:   ").src(value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Attach:   ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
327	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Attach: ").src(value),  value.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Attach: ").src(value),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Attach: ").src(value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Attach:   ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
328	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Anonymous  value:   ").src(value),  value.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Anonymous  value:   ").src(value),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Anonymous  value:   ").src(value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Anonymous    value:   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
329	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Anonymous  value:   ").srcref(value));  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Anonymous  value:   ").srcref(value));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Anonymous  value:   ").srcref(value));	  Node    addition    =    IR.add(IR.string(   "Anonymous    value:   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
330	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* "),  value,  callTarget,  value.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "* "),  value,  callTarget,  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* "),  value,  callTarget,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "*   ").src(value),    callTarget,    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
331	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "*   ").src(value),  callTarget,  value.toString());  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "*   ").src(value),  callTarget,  value.toString());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "*   ").src(value),  callTarget,  value.toString());	  Node    addition    =    IR.add(IR.string(   "*   ").src(value),    callTarget,    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
332	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Anonymous  value:   ").srcref(value,  callTarget),  value.detachFromParent());  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Anonymous  value:   ").srcref(value,  callTarget),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Anonymous  value:   ").srcref(value,  callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Anonymous    value:   ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
333	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(value),  value,  value.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(value),  value,  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").srcref(value),  value,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "av   ").srcref(value),    callTarget,    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
334	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(value),  callTarget,  value.removeFromParent());  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(value),  callTarget,  value.removeFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").srcref(value),  callTarget,  value.removeFromParent());	  Node    addition    =    IR.add(IR.string(   "av   ").srcref(value),    callTarget,    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
335	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( ", ").src(callTarget),  value.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( ", ").src(callTarget),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( ", ").src(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "       ").src(value),    callTarget.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
336	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Invalid  no_arguments ").srcref(callTarget),  value.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Invalid  no_arguments ").srcref(callTarget),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Invalid  no_arguments ").srcref(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "no_arguments   ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
337	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "no_arguments "),  value.src(callTarget),  value.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "no_arguments "),  value.src(callTarget),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "no_arguments "),  value.src(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "no_arguments   ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
338	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value,  callTarget),  value.removeFromParent());  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value,  callTarget),  value.removeFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity ").src(value,  callTarget),  value.removeFromParent());	  Node    addition    =    IR.add(IR.string(   "infinity   ").src(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
339	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value,  callTarget),  value.toString());  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value,  callTarget),  value.toString());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity ").src(value,  callTarget),  value.toString());	  Node    addition    =    IR.add(IR.string(   "infinity   ").src(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	21	None	replace
340	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity. ").src(value,  callTarget),  value.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity. ").src(value,  callTarget),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity. ").src(value,  callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "infinity   ").src(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
341	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Add   ").srcref(value));  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Add   ").srcref(value));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Add   ").srcref(value));	  Node    addition    =    IR.add(IR.string(   "av   ").srcref(value));    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
342	[BUG]  [BUGGY]  Node  addition  =  value.removeFirstChild();  n.getParent().replaceChild(n,  addition);  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  value.removeFirstChild();  n.getParent().replaceChild(n,  addition);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  value.removeFirstChild();  n.getParent().replaceChild(n,  addition);	  Node    addition    =    value.removeFirstChild();    n.getParent().removeChild(value);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
343	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").srcref(value,  callTarget),  value.removeFromParent());  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").srcref(value,  callTarget),  value.removeFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity ").srcref(value,  callTarget),  value.removeFromParent());	  Node    addition    =    IR.add(IR.string(   "infinity   ").srcref(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
344	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity. ").srcref(value,  callTarget),  value.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity. ").srcref(value,  callTarget),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity. ").srcref(value,  callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "infinity   ").srcref(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
345	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).src(value)&&  value.detachFromParent());  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).src(value)&&  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ")).src(value)&&  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "*   ")).src(value),    value.detachFromParent());    	non-compiled	[CE]  	65	None	replace
346	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).src(value)/  2,  value.detachFromParent());  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).src(value)/  2,  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ")).src(value)/  2,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "*   ")).src(value),    value.detachFromParent());    	non-compiled	[CE]  	65	None	replace
347	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value,  value));  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value,  value));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity ").src(value,  value));	  Node    addition    =    IR.add(IR.string(   "infinity   ").src(value));    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
348	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity. ").src(value));  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity. ").src(value));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity. ").src(value));	  Node    addition    =    IR.add(IR.string(   "infinity   ").src(value));    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
349	[BUG]  [BUGGY]  Node  addition  =  value.replaceChild(n,  addition);  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  value.replaceChild(n,  addition);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  value.replaceChild(n,  addition);	  Node    addition    =    value.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
350	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).src(value,  value.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).src(value,  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ")).src(value,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "*   ")).src(value),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
351	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string(value)).src(value),  value.detachFromParent());  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string(value)).src(value),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string(value)).src(value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "*   ")).src(value),    value.detachFromParent());    	non-compiled	[CE]  ';'  expected	65	None	replace
352	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* "),  value);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "* "),  value);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* "),  value);	  Node    addition    =    IR.add(IR.string(   "*   ").src(value));    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
353	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).src(value);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).src(value);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ")).src(value);	  Node    addition    =    IR.add(IR.string(   "*   ").src(value));    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
354	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Av ").srcref(value),  value.detachFromParent(),  n);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Av ").srcref(value),  value.detachFromParent(),  n);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Av ").srcref(value),  value.detachFromParent(),  n);	  Node    addition    =    IR.add(IR.string(   "Av   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	30	None	replace
355	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Av ").src(value),  value.detachFromParent(),  n);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Av ").src(value),  value.detachFromParent(),  n);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Av ").src(value),  value.detachFromParent(),  n);	  Node    addition    =    IR.add(IR.string(   "Av   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
356	[BUG]  [BUGGY]  n  =  value.getLastChild();  [CE]  ')'  expected  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n  =  value.getLastChild();  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n  =  value.getLastChild();	  n    =    value.getNext();    	non-compiled	[CE]  ')'  expected	71	None	replace
357	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value),  value,  callTarget.detachFromParent());  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value),  value,  callTarget.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value),  value,  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Infinity   ").srcref(value),    callTarget,    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
358	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value),  callTarget,  value.detachFromParent(),  n);  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value),  callTarget,  value.detachFromParent(),  n);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value),  callTarget,  value.detachFromParent(),  n);	  Node    addition    =    IR.add(IR.string(   "Infinity   ").srcref(value),    callTarget,    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
359	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").srcref(value),  callTarget,  value.detachFromParent(),  n);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").srcref(value),  callTarget,  value.detachFromParent(),  n);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ").srcref(value),  callTarget,  value.detachFromParent(),  n);	  Node    addition    =    IR.add(IR.string(   "*   ").srcref(value),    callTarget,    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
360	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").srcref(value),  callTarget,  value.cloneTarget());  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").srcref(value),  callTarget,  value.cloneTarget());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ").srcref(value),  callTarget,  value.cloneTarget());	  Node    addition    =    IR.add(IR.string(   "*   ").srcref(value),    callTarget,    value.detachFromParent());    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
361	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(value)-  1,  value.detachFromParent(),  n);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(value)-  1,  value.detachFromParent(),  n);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").srcref(value)-  1,  value.detachFromParent(),  n);	  Node    addition    =    IR.add(IR.string(   "av   ").srcref(value)-    1,    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	78	None	replace
362	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(value)-  1,  value.detachFromParent(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(value)-  1,  value.detachFromParent(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").srcref(value)-  1,  value.detachFromParent(),  INVALID_REGULAR_EXPRESSION_FLAGS);	  Node    addition    =    IR.add(IR.string(   "av   ").srcref(value)-    1,    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	78	None	replace
363	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(value)-  1,  value.detachFromParent(),  value.detachFromParent());  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(value)-  1,  value.detachFromParent(),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").srcref(value)-  1,  value.detachFromParent(),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "av   ").srcref(value)-    1,    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	78	None	replace
364	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( ", ").srcref(value));  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( ", ").srcref(value));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( ", ").srcref(value));	  Node    addition    =    IR.add(IR.string(   "       ").srcref(value),    callTarget.detachFromParent());    	non-compiled	[CE]  ')'  expected	58	None	replace
365	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value,  callTarget),  value.detachFromParent(),  n);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value,  callTarget),  value.detachFromParent(),  n);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value,  callTarget),  value.detachFromParent(),  n);	  Node    addition    =    IR.add(IR.string(   "Infinity   ").srcref(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	3	None	replace
366	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value,  callTarget),  value.cloneTree());  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value,  callTarget),  value.cloneTree());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value,  callTarget),  value.cloneTree());	  Node    addition    =    IR.add(IR.string(   "Infinity   ").srcref(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	3	None	replace
367	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value),  value.detachFromParent(),  n,  predicate);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value),  value.detachFromParent(),  n,  predicate);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity ").src(value),  value.detachFromParent(),  n,  predicate);	  Node    addition    =    IR.add(IR.string(   "infinity   ").src(value),    value.detachFromParent(),    n);    	non-compiled	[CE]  ')'  expected	80	None	replace
368	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value),  value.detachFromParent(),  n,  DETACH_SPLIT_OVERHEAD);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value),  value.detachFromParent(),  n,  DETACH_SPLIT_OVERHEAD);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity ").src(value),  value.detachFromParent(),  n,  DETACH_SPLIT_OVERHEAD);	  Node    addition    =    IR.add(IR.string(   "infinity   ").src(value),    value.detachFromParent(),    n);    	non-compiled	[CE]  ')'  expected	80	None	replace
369	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "a.src= ",  value.src(callTarget),  value.detachFromParent());  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "a.src= ",  value.src(callTarget),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "a.src= ",  value.src(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "a.src   "),    value.src(callTarget),    value.detachFromParent());    	non-compiled	[CE]  	38	None	replace
370	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Invalid  no_arguments ").srcref(value),  value.detachFromParent());  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Invalid  no_arguments ").srcref(value),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Invalid  no_arguments ").srcref(value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "no_arguments   ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	36	None	replace
371	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "no_arguments "),  value.srcref(callTarget),  value.detachFromParent());  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "no_arguments "),  value.srcref(callTarget),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "no_arguments "),  value.srcref(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "no_arguments   ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	36	None	replace
372	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  value.detachFromParent(),  n,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  value.detachFromParent(),  n,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  value.detachFromParent(),  n,  STANDARD_OBJECT_CONSTRUCTORS);	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value),    value.detachFromParent(),    n);    	non-compiled	[CE]  ')'  expected	77	None	replace
373	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  n,  value.detachFromParent());  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  n,  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  n,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value),    value.detachFromParent(),    n);    	non-compiled	[CE]  ')'  expected	77	None	replace
374	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  value.detachFromParent(),  n,  DETACH_SPLIT_OVERHEAD);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  value.detachFromParent(),  n,  DETACH_SPLIT_OVERHEAD);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  value.detachFromParent(),  n,  DETACH_SPLIT_OVERHEAD);	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value),    value.detachFromParent(),    n);    	non-compiled	[CE]  ')'  expected	77	None	replace
375	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srCfg(value));  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srCfg(value));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").srCfg(value));	  Node    addition    =    IR.add(IR.string(   "av   ").srcref(value));    	non-compiled	[CE]  ')'  expected	40	None	replace
376	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Attach: ").src(callTarget),  value.detachFromParent());  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Attach: ").src(callTarget),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Attach: ").src(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "       ").src(callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	63	None	replace
377	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Arrays:   ").src(value),  value.detachFromParent());  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Arrays:   ").src(value),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Arrays:   ").src(value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "       ").src(callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	63	None	replace
378	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "AttachFromParent ").srcref(value));  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "AttachFromParent ").srcref(value));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "AttachFromParent ").srcref(value));	  Node    addition    =    IR.add(IR.string(   "AttachFromParent       ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	45	None	replace
379	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value),  callTarget,  value.detachFromParent(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value),  callTarget,  value.detachFromParent(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity ").src(value),  callTarget,  value.detachFromParent(),  INVALID_REGULAR_EXPRESSION_FLAGS);	  Node    addition    =    IR.add(IR.string(   "infinity   ").src(value),    callTarget,    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	22	None	replace
380	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value),  callTarget,  value.detachFromParent(),  NON_GLOBAL_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value),  callTarget,  value.detachFromParent(),  NON_GLOBAL_EXPRESSION_FLAGS);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity ").src(value),  callTarget,  value.detachFromParent(),  NON_GLOBAL_EXPRESSION_FLAGS);	  Node    addition    =    IR.add(IR.string(   "infinity   ").src(value),    callTarget,    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	22	None	replace
381	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Attachments: ").srcref(value),  value.detachFromParent());  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Attachments: ").srcref(value),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Attachments: ").srcref(value),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Attach:   ").srcref(callTarget),    value.detachFromParent());    	non-compiled	[CE]  	37	None	replace
382	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "a.src ",  value));  [CE]  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "a.src ",  value));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "a.src ",  value));	  Node    addition    =    IR.add(IR.string(   "a.src   ",    value),    callTarget.detachFromParent());    	non-compiled	[CE]  	51	None	replace
383	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value),  value.detachFromParent(),  n);  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value),  value.detachFromParent(),  n);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value),  value.detachFromParent(),  n);	  Node    addition    =    IR.add(IR.string(   "Infinity   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  	1	None	replace
384	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").src(value),  value.detachFromParent(),  n);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").src(value),  value.detachFromParent(),  n);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "   ").src(value),  value.detachFromParent(),  n);	  Node    addition    =    IR.add(IR.string(   "       ").src(value),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	62	None	replace
385	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value)&&  value.removeFirstChild());  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value)&&  value.removeFirstChild());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").src(value)&&  value.removeFirstChild());	  Node    addition    =    IR.add(IR.string(   "av   ").src(value)&&    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	73	None	replace
386	[BUG]  [BUGGY]  Node  addition  =  value.removeFirstChild();  n.getParent().removeChild(parent);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  value.removeFirstChild();  n.getParent().removeChild(parent);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  value.removeFirstChild();  n.getParent().removeChild(parent);	  Node    addition    =    value.removeFirstChild();    n.getParent().removeChild(value);    	non-compiled	[CE]  ')'  expected	86	None	replace
387	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* "),  value.src(callTarget),  value.detachFromParent());  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "* "),  value.src(callTarget),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* "),  value.src(callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "*   ").src(value),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	27	None	replace
388	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").src(value),  value.detachFromParent(),  n);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").src(value),  value.detachFromParent(),  n);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ").src(value),  value.detachFromParent(),  n);	  Node    addition    =    IR.add(IR.string(   "*   ").src(value),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	27	None	replace
389	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "AttachFromParent:   ").srcref(value),  value.cloneTree());  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "AttachFromParent:   ").srcref(value),  value.cloneTree());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "AttachFromParent:   ").srcref(value),  value.cloneTree());	  Node    addition    =    IR.add(IR.string(   "AttachFromParent:       ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	46	None	replace
390	[BUG]  [BUGGY]  n.removeChild(value)&&  n.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  not  a  statement  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n.removeChild(value)&&  n.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.removeChild(value)&&  n.getFirstChild().getType()  ==  Token.FUNCTION;	  n.removeChild(value);    	non-compiled	[CE]  not  a  statement	70	None	replace
391	[BUG]  [BUGGY]  n.removeChild(value).removeChild(value);  [CE]  ')'  expected  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n.removeChild(value).removeChild(value);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.removeChild(value).removeChild(value);	  n.removeChild(value);    	non-compiled	[CE]  ')'  expected	70	None	replace
392	[BUG]  [BUGGY]  n.removeChild(value)&&  n.getFirstChild().getType()  ==  Token.THIS;  [CE]  not  a  statement  [FE]                                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n.removeChild(value)&&  n.getFirstChild().getType()  ==  Token.THIS;  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.removeChild(value)&&  n.getFirstChild().getType()  ==  Token.THIS;	  n.removeChild(value);    	non-compiled	[CE]  not  a  statement	70	None	replace
393	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(value,  callTarget),  value.detachFromParent()  +  1);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").srcref(value,  callTarget),  value.detachFromParent()  +  1);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").srcref(value,  callTarget),  value.detachFromParent()  +  1);	  Node    addition    =    IR.add(IR.string(   "av   ").srcref(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	29	None	replace
394	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value,  n));  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value,  n));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").src(value,  n));	  Node    addition    =    IR.add(IR.string(   "av   ").src(value));    	non-compiled	[CE]  ')'  expected	54	None	replace
395	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Additional  value: ").src(value));  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Additional  value: ").src(value));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Additional  value: ").src(value));	  Node    addition    =    IR.add(IR.string(   "av   ").src(value));    	non-compiled	[CE]  ')'  expected	54	None	replace
396	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Anonymous  value:   ").srcref(value),  value.detachFromParent(),  n);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Anonymous  value:   ").srcref(value),  value.detachFromParent(),  n);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Anonymous  value:   ").srcref(value),  value.detachFromParent(),  n);	  Node    addition    =    IR.add(IR.string(   "Anonymous    value:   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	44	None	replace
397	[BUG]  [BUGGY]  Node  addition  =  value.removeChild(value);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  value.removeChild(value);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  value.removeChild(value);	  Node    addition    =    value.getNext();    	non-compiled	[CE]  ')'  expected	6	None	replace
398	[BUG]  [BUGGY]  Node  addition  =  value.cloneTree();  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  value.cloneTree();  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  value.cloneTree();	  Node    addition    =    value.getNext();    	non-compiled	[CE]  ')'  expected	6	None	replace
399	[BUG]  [BUGGY]  Node  addition  =  value.removeFirst();  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  value.removeFirst();  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  value.removeFirst();	  Node    addition    =    value.getNext();    	non-compiled	[CE]  ')'  expected	6	None	replace
400	[BUG]  [BUGGY]  n.getParent().removeChild(value,  addition);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n.getParent().removeChild(value,  addition);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.getParent().removeChild(value,  addition);	  n.getParent().removeChild(value);    	non-compiled	[CE]  ')'  expected	7	None	replace
401	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value),  callTarget,  value.detachFromParent(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value),  callTarget,  value.detachFromParent(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").src(value),  callTarget,  value.detachFromParent(),  INVALID_REGULAR_EXPRESSION_FLAGS);	  Node    addition    =    IR.add(IR.string(   "av   ").src(value),    callTarget,    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	19	None	replace
402	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value),  callTarget,  value.detachFromParent(),  n);  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "av ").src(value),  callTarget,  value.detachFromParent(),  n);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "av ").src(value),  callTarget,  value.detachFromParent(),  n);	  Node    addition    =    IR.add(IR.string(   "av   ").src(value),    callTarget,    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	19	None	replace
403	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value,  callTarget.getNext()),  value.detachFromParent());  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value,  callTarget.getNext()),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").srcref(value,  callTarget.getNext()),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Infinity   ").srcref(value),    callTarget.detachFromParent());    	non-compiled	[CE]  ')'  expected	2	None	replace
404	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").srcref(value),  value.detachFromParent(),  n);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "   ").srcref(value),  value.detachFromParent(),  n);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "   ").srcref(value),  value.detachFromParent(),  n);	  Node    addition    =    IR.add(IR.string(   "       ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	59	None	replace
405	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").srcref(value),  value.detachFromParent(),  n);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "A-Z ").srcref(value),  value.detachFromParent(),  n);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "A-Z ").srcref(value),  value.detachFromParent(),  n);	  Node    addition    =    IR.add(IR.string(   "A-Z   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	85	None	replace
406	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").src(value,  callTarget),  value.detachFromParent(),  NON_GLOBAL_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").src(value,  callTarget),  value.detachFromParent(),  NON_GLOBAL_EXPRESSION_FLAGS);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ").src(value,  callTarget),  value.detachFromParent(),  NON_GLOBAL_EXPRESSION_FLAGS);	  Node    addition    =    IR.add(IR.string(   "*   ").src(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	84	None	replace
407	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).src(value,  callTarget),  value.detachFromParent(),  n);  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).src(value,  callTarget),  value.detachFromParent(),  n);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ")).src(value,  callTarget),  value.detachFromParent(),  n);	  Node    addition    =    IR.add(IR.string(   "*   ").src(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  	84	None	replace
408	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  callTarget,  value.detachFromParent(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  callTarget,  value.detachFromParent(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  callTarget,  value.detachFromParent(),  INVALID_REGULAR_EXPRESSION_FLAGS);	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value),    callTarget,    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	42	None	replace
409	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  callTarget,  value.detachFromParent(),  NON_GLOBAL_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  callTarget,  value.detachFromParent(),  NON_GLOBAL_EXPRESSION_FLAGS);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  callTarget,  value.detachFromParent(),  NON_GLOBAL_EXPRESSION_FLAGS);	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value),    callTarget,    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	42	None	replace
410	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Additional  value:   ").srcref(value),  value.detachFromParent(),  n);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Additional  value:   ").srcref(value),  value.detachFromParent(),  n);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Additional  value:   ").srcref(value),  value.detachFromParent(),  n);	  Node    addition    =    IR.add(IR.string(   "Additional    value:   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	43	None	replace
411	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Additional  value:   ").srcref(value,  callTarget),  value.detachFromParent());  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Additional  value:   ").srcref(value,  callTarget),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Additional  value:   ").srcref(value,  callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Additional    value:   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	43	None	replace
412	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value,  callTarget),  value.detachFromParent(),  n);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value,  callTarget),  value.detachFromParent(),  n);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity ").src(value,  callTarget),  value.detachFromParent(),  n);	  Node    addition    =    IR.add(IR.string(   "infinity   ").src(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	21	None	replace
413	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  callTarget.getParent());  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  callTarget.getParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  callTarget.getParent());	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value),    callTarget.detachFromParent());    	non-compiled	[CE]  ')'  expected	4	None	replace
414	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  callTarget.getNext());  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  callTarget.getNext());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  callTarget.getNext());	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value),    callTarget.detachFromParent());    	non-compiled	[CE]  ')'  expected	4	None	replace
415	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value,  Integer.MAX_VALUE));  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value,  Integer.MAX_VALUE));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(value,  Integer.MAX_VALUE));	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value));    	non-compiled	[CE]  ')'  expected	49	None	replace
416	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  Integer.MAX_VALUE);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  Integer.MAX_VALUE);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(value),  Integer.MAX_VALUE);	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value));    	non-compiled	[CE]  ')'  expected	49	None	replace
417	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "AttachFromParent:   ").src(value),  callTarget.detachFromParent());  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "AttachFromParent:   ").src(value),  callTarget.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "AttachFromParent:   ").src(value),  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "n   ").src(value),    callTarget.detachFromParent());    	non-compiled	[CE]  ')'  expected	53	None	replace
418	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "a.src/main/resource/ ",  callTarget),  value.detachFromParent());  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "a.src/main/resource/ ",  callTarget),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "a.src/main/resource/ ",  callTarget),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "a.src   ",    callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	35	None	replace
419	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").srcref(value),  value,  callTarget.detachFromParent());  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").srcref(value),  value,  callTarget.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity ").srcref(value),  value,  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "infinity   ").srcref(value),    callTarget,    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	14	None	replace
420	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Assignment  of ").srcref(value),  value.detachFromParent(),  n);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Assignment  of ").srcref(value),  value.detachFromParent(),  n);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Assignment  of ").srcref(value),  value.detachFromParent(),  n);	  Node    addition    =    IR.add(IR.string(   "Assignment    of       ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	47	None	replace
421	[BUG]  [BUGGY]  n.getNext().detachFromParent();  addition  =  value.detachFromParent();  [CE]  ')'  expected  [FE]                                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  n.getNext().detachFromParent();  addition  =  value.detachFromParent();  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	n.getNext().detachFromParent();  addition  =  value.detachFromParent();	  n.getNext().removeChild(value);    addition    =    value.detachFromParent();    	non-compiled	[CE]  ')'  expected	11	None	replace
422	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").src(value),  callTarget,  value.detachFromParent(),  n);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").src(value),  callTarget,  value.detachFromParent(),  n);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ").src(value),  callTarget,  value.detachFromParent(),  n);	  Node    addition    =    IR.add(IR.string(   "*   ").src(value),    callTarget,    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	28	None	replace
423	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value)&&  value.detachFromParent(),  value.detachFromParent());  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value)&&  value.detachFromParent(),  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(value)&&  value.detachFromParent(),  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value)&&    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	83	None	replace
424	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value)&&  value.removeFirstChild());  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value)&&  value.removeFirstChild());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(value)&&  value.removeFirstChild());	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value)&&    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	83	None	replace
425	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value)&&  value.detachFromParent());  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").src(value)&&  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity ").src(value)&&  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value)&&    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	83	None	replace
426	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Assignment  of ").src(value),  value.detachFromParent(),  n);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Assignment  of ").src(value),  value.detachFromParent(),  n);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Assignment  of ").src(value),  value.detachFromParent(),  n);	  Node    addition    =    IR.add(IR.string(   "Assignment    of       ").src(value),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	48	None	replace
427	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Assignment  of ").src(value));  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Assignment  of ").src(value));  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Assignment  of ").src(value));	  Node    addition    =    IR.add(IR.string(   "Assignment    of       ").src(value),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	48	None	replace
428	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Assignment  of ").src(value),  value.removeFirstChild());  [CE]  ')'  expected  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Assignment  of ").src(value),  value.removeFirstChild());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Assignment  of ").src(value),  value.removeFirstChild());	  Node    addition    =    IR.add(IR.string(   "Assignment    of       ").src(value),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	48	None	replace
429	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Invalid  constructor:  no_arguments ").srcref(value),  callTarget.detachFromParent());  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Invalid  constructor:  no_arguments ").srcref(value),  callTarget.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Invalid  constructor:  no_arguments ").srcref(value),  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "no_arguments   ").srcref(value),    callTarget.detachFromParent());    	non-compiled	[CE]  ')'  expected	52	None	replace
430	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Invalid  no_arguments ").src(value),  callTarget.detachFromParent());  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Invalid  no_arguments ").src(value),  callTarget.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Invalid  no_arguments ").src(value),  callTarget.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "no_arguments   ").srcref(value),    callTarget.detachFromParent());    	non-compiled	[CE]  ')'  expected	52	None	replace
431	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).srcref(value)-  1,  value.detachFromParent());  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).srcref(value)-  1,  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ")).srcref(value)-  1,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "*   ")).srcref(value),    value.detachFromParent());    	non-compiled	[CE]  	82	None	replace
432	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).srcref(value,  value.detachFromParent());  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "* ")).srcref(value,  value.detachFromParent());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ")).srcref(value,  value.detachFromParent());	  Node    addition    =    IR.add(IR.string(   "*   ")).srcref(value),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	82	None	replace
433	[BUG]  [BUGGY]  Node  addition  =  n.getAncestor(2);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  n.getAncestor(2);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  n.getAncestor(2);	  Node    addition    =    n.getNext();    	non-compiled	[CE]  ')'  expected	68	None	replace
434	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value,  callTarget),  value.detachFromParent(),  n);  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value,  callTarget),  value.detachFromParent(),  n);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(value,  callTarget),  value.detachFromParent(),  n);	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	41	None	replace
435	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value,  callTarget),  value.cloneTree());  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "Infinity ").src(value,  callTarget),  value.cloneTree());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "Infinity ").src(value,  callTarget),  value.cloneTree());	  Node    addition    =    IR.add(IR.string(   "Infinity   ").src(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	41	None	replace
436	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").srcref(value),  value.detachFromParent(),  n);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").srcref(value),  value.detachFromParent(),  n);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ").srcref(value),  value.detachFromParent(),  n);	  Node    addition    =    IR.add(IR.string(   "*   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	24	None	replace
437	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").srcref(value),  value.cloneTree());  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "* ").srcref(value),  value.cloneTree());  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "* ").srcref(value),  value.cloneTree());	  Node    addition    =    IR.add(IR.string(   "*   ").srcref(value),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	24	None	replace
438	[BUG]  [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").srcref(value,  callTarget),  value.detachFromParent(),  n);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]      if  (callTarget  !=  null  &&  callTarget.isName()  &&  callTarget.getString().equals(     "String     "))  {        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {      [BUGGY]  Node  addition  =  IR.add(IR.string( "infinity ").srcref(value,  callTarget),  value.detachFromParent(),  n);  [BUGGY]      IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();  return  addition;  }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	221	223	1	replace	Node  addition  =  IR.add(IR.string( "infinity ").srcref(value,  callTarget),  value.detachFromParent(),  n);	  Node    addition    =    IR.add(IR.string(   "infinity   ").srcref(value,    callTarget),    value.detachFromParent());    	non-compiled	[CE]  ')'  expected	13	None	replace
