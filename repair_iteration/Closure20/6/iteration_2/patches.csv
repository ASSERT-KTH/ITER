bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  addition  ==  null?  value.cloneTree()  :  addition;  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  value.cloneTree()  :  addition;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value.cloneTree()  :  addition;	  return    addition!=    null?    value.cloneTree()    :    addition;    	non-compiled	[CE]  ')'  expected	67	None	replace
2	[BUG]  [BUGGY]  return  addition!=  null?  n.cloneTree()  :  addition;  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  n.cloneTree()  :  addition;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  n.cloneTree()  :  addition;	  return    addition!=    null?    value.cloneTree()    :    addition;    	non-compiled	[CE]  ')'  expected	67	None	replace
3	[BUG]  [BUGGY]  return  addition!=  null?  value.clone()  :  addition;  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value.clone()  :  addition;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.clone()  :  addition;	  return    addition!=    null?    value.cloneTree()    :    addition;    	non-compiled	[CE]  ')'  expected	67	None	replace
4	[BUG]  [BUGGY]  return  addition!=  null?  value.clonePath()  :  addition;  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value.clonePath()  :  addition;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.clonePath()  :  addition;	  return    addition!=    null?    value.cloneTree()    :    addition;    	non-compiled	[CE]  ')'  expected	67	None	replace
5	[BUG]  [BUGGY]  n.getParent().replaceChild(value,  addition);  reportCodeChange();  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  n.getParent().replaceChild(value,  addition);  reportCodeChange();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.getParent().replaceChild(value,  addition);  reportCodeChange();	  n.getParent().replaceChild(n,    addition);    reportCodeChange();    	non-compiled	[CE]  ')'  expected	29	None	replace
6	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  addition);  reportCodeChange();  [CE]  ')'  expected  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  n.getNext().replaceChild(n,  addition);  reportCodeChange();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.getNext().replaceChild(n,  addition);  reportCodeChange();	  n.getParent().replaceChild(n,    addition);    reportCodeChange();    	non-compiled	[CE]  ')'  expected	29	None	replace
7	[BUG]  [BUGGY]  return  addition  >=  null?  null  :  addition.cloneTree();  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  >=  null?  null  :  addition.cloneTree();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  >=  null?  null  :  addition.cloneTree();	  return    addition    <    null?    null    :    addition.cloneTree();    	non-compiled	[CE]  ')'  expected	25	None	replace
8	[BUG]  [BUGGY]  return  addition!=  null?  value  :  addition.removeLast();  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value  :  addition.removeLast();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value  :  addition.removeLast();	  return    addition!=    null?    value    :    addition.removeFirst();    	non-compiled	[CE]  ')'  expected	60	None	replace
9	[BUG]  [BUGGY]  return  addition!=  null?  value  :  addition.getLastChild();  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value  :  addition.getLastChild();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value  :  addition.getLastChild();	  return    addition!=    null?    value    :    addition.removeFirst();    	non-compiled	[CE]  ')'  expected	60	None	replace
10	[BUG]  [BUGGY]  return  addition!=  null?  value  :  addition.getFirst();  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value  :  addition.getFirst();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value  :  addition.getFirst();	  return    addition!=    null?    value    :    addition.removeFirst();    	non-compiled	[CE]  ')'  expected	60	None	replace
11	[BUG]  [BUGGY]  return  addition  ==  null  ||  addition.getType()!=  Token.FUNCTION;  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null  ||  addition.getType()!=  Token.FUNCTION;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null  ||  addition.getType()!=  Token.FUNCTION;	  return    addition    ==    null    &&    addition.getType()!=    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	52	None	replace
12	[BUG]  [BUGGY]  return  addition!=  null  ||  addition.getType()!=  Token.FUNCTION;  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null  ||  addition.getType()!=  Token.FUNCTION;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null  ||  addition.getType()!=  Token.FUNCTION;	  return    addition    ==    null    &&    addition.getType()!=    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	52	None	replace
13	[BUG]  [BUGGY]  return  addition!=  null  &&  addition.getType()!=  Token.FUNCTION;  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null  &&  addition.getType()!=  Token.FUNCTION;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null  &&  addition.getType()!=  Token.FUNCTION;	  return    addition    ==    null    &&    addition.getType()!=    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	52	None	replace
14	[BUG]  [BUGGY]  return  addition  ==  null?  n.getType()  :  Token.FUNCTION;  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  n.getType()  :  Token.FUNCTION;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  n.getType()  :  Token.FUNCTION;	  return    addition    ==    null?    value.getType()    :    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	43	None	replace
15	[BUG]  [BUGGY]  return  addition  ==  null?  addr.getType()  :  Token.FUNCTION;  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  addr.getType()  :  Token.FUNCTION;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  addr.getType()  :  Token.FUNCTION;	  return    addition    ==    null?    value.getType()    :    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	43	None	replace
16	[BUG]  [BUGGY]  return  addition!=  null?  null  :  addition.removeLastChild();  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  null  :  addition.removeLastChild();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  null  :  addition.removeLastChild();	  return    addition!=    null?    null    :    addition.removeFirstChild();    	non-compiled	[CE]  ')'  expected	51	None	replace
17	[BUG]  [BUGGY]  return  addition  ==  null?  null  :  addition.removeLastChild();  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  null  :  addition.removeLastChild();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  null  :  addition.removeLastChild();	  return    addition!=    null?    null    :    addition.removeFirstChild();    	non-compiled	[CE]  ')'  expected	51	None	replace
18	[BUG]  [BUGGY]  return  addition  ==  null?  value  :  addition.removeLast();  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  value  :  addition.removeLast();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value  :  addition.removeLast();	  return    addition    ==    null?    value    :    addition.removeFirst();    	non-compiled	[CE]  ')'  expected	69	None	replace
19	[BUG]  [BUGGY]  return  addition  ==  null?  value  :  addition.getLastChild();  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  value  :  addition.getLastChild();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value  :  addition.getLastChild();	  return    addition    ==    null?    value    :    addition.removeFirst();    	non-compiled	[CE]  ')'  expected	69	None	replace
20	[BUG]  [BUGGY]  return  addition  ==  null?  value  :  addition.getFirst();  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  value  :  addition.getFirst();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value  :  addition.getFirst();	  return    addition    ==    null?    value    :    addition.removeFirst();    	non-compiled	[CE]  ')'  expected	69	None	replace
21	[BUG]  [BUGGY]  return  addition  ==  null?  null  :  addition.removeLast();  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  null  :  addition.removeLast();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  null  :  addition.removeLast();	  return    addition    ==    null?    null    :    addition.removeFirst();    	non-compiled	[CE]  ')'  expected	73	None	replace
22	[BUG]  [BUGGY]  return  addition  ==  null?  null  :  addition.getLastChild();  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  null  :  addition.getLastChild();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  null  :  addition.getLastChild();	  return    addition    ==    null?    null    :    addition.removeFirst();    	non-compiled	[CE]  ')'  expected	73	None	replace
23	[BUG]  [BUGGY]  return  addition!=  null?  null  :  addition.removeLast();  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  null  :  addition.removeLast();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  null  :  addition.removeLast();	  return    addition!=    null?    null    :    addition.removeFirst();    	non-compiled	[CE]  ')'  expected	64	None	replace
24	[BUG]  [BUGGY]  return  addition!=  null?  null  :  addition.getLastChild();  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  null  :  addition.getLastChild();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  null  :  addition.getLastChild();	  return    addition!=    null?    null    :    addition.removeFirst();    	non-compiled	[CE]  ')'  expected	64	None	replace
25	[BUG]  [BUGGY]  return  addition!=  null?  value.getType()  :  Token.EXPR_RESULT;  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value.getType()  :  Token.EXPR_RESULT;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.getType()  :  Token.EXPR_RESULT;	  return    addition    ==    null?    value.getType()    :    Token.EXPR_RESULT;    	non-compiled	[CE]  ')'  expected	77	None	replace
26	[BUG]  [BUGGY]  return  addition  ==  null?  value.getType()  :  Token.EXPR_RESULT  +  1;  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  value.getType()  :  Token.EXPR_RESULT  +  1;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value.getType()  :  Token.EXPR_RESULT  +  1;	  return    addition    ==    null?    value.getType()    :    Token.EXPR_RESULT;    	non-compiled	[CE]  ')'  expected	77	None	replace
27	[BUG]  [BUGGY]  return  addition  ==  null?  n.getType()  :  Token.EXPR_RESULT;  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  n.getType()  :  Token.EXPR_RESULT;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  n.getType()  :  Token.EXPR_RESULT;	  return    addition    ==    null?    value.getType()    :    Token.EXPR_RESULT;    	non-compiled	[CE]  ')'  expected	77	None	replace
28	[BUG]  [BUGGY]  return  addition  ==  null?  addr.getType()  :  Token.EXPR_RESULT;  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  addr.getType()  :  Token.EXPR_RESULT;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  addr.getType()  :  Token.EXPR_RESULT;	  return    addition    ==    null?    value.getType()    :    Token.EXPR_RESULT;    	non-compiled	[CE]  ')'  expected	77	None	replace
29	[BUG]  [BUGGY]  return  addition.cloneTree(n);  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition.cloneTree(n);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition.cloneTree(n);	  return    addition.cloneTree(value);    	non-compiled	[CE]  ')'  expected	48	None	replace
30	[BUG]  [BUGGY]  return  addition!=  null?  null  :  addition.cloneTree(value);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  null  :  addition.cloneTree(value);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  null  :  addition.cloneTree(value);	  return    addition.cloneTree(value);    	non-compiled	[CE]  ')'  expected	48	None	replace
31	[BUG]  [BUGGY]  return  addition.cloneTree(value,  n);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition.cloneTree(value,  n);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition.cloneTree(value,  n);	  return    addition.cloneTree(value);    	non-compiled	[CE]  ')'  expected	48	None	replace
32	[BUG]  [BUGGY]  n.getParent().removeChild(addition);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  n.getParent().removeChild(addition);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.getParent().removeChild(addition);	  return    addition.cloneTree(value);    	non-compiled	[CE]  ')'  expected	48	None	replace
33	[BUG]  [BUGGY]  return  addition.cloneTree(n,  value);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition.cloneTree(n,  value);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition.cloneTree(n,  value);	  return    addition.cloneTree(value);    	non-compiled	[CE]  ')'  expected	48	None	replace
34	[BUG]  [BUGGY]  return  addition!=  null?  value  :  addition.cloneTarget();  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value  :  addition.cloneTarget();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value  :  addition.cloneTarget();	  return    addition!=    null?    value    :    addition.clonePosition();    	non-compiled	[CE]  ')'  expected	55	None	replace
35	[BUG]  [BUGGY]  return  addition!=  null?  value  :  addition.cloneFunction();  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value  :  addition.cloneFunction();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value  :  addition.cloneFunction();	  return    addition!=    null?    value    :    addition.clonePosition();    	non-compiled	[CE]  ')'  expected	55	None	replace
36	[BUG]  [BUGGY]  return  addition!=  null?  value  :  addition.cloneSimpleFunctionCall();  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value  :  addition.cloneSimpleFunctionCall();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value  :  addition.cloneSimpleFunctionCall();	  return    addition!=    null?    value    :    addition.clonePosition();    	non-compiled	[CE]  ')'  expected	55	None	replace
37	[BUG]  [BUGGY]  return  addition  ==  null?  new  FoldArrayAction(value):  addition.cloneTree();  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  new  FoldArrayAction(value):  addition.cloneTree();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  new  FoldArrayAction(value):  addition.cloneTree();	  return    addition!=    null?    new    FoldArrayAction(value):    addition.cloneTree();    	non-compiled	[CE]  ')'  expected	66	None	replace
38	[BUG]  [BUGGY]  return  addition!=  null?  new  FoldArrayAction(value):  addition.clone();  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  new  FoldArrayAction(value):  addition.clone();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  new  FoldArrayAction(value):  addition.clone();	  return    addition!=    null?    new    FoldArrayAction(value):    addition.cloneTree();    	non-compiled	[CE]  ')'  expected	66	None	replace
39	[BUG]  [BUGGY]  return  addition!=  null?  new  FoldArrayAction(n):  addition.cloneTree();  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  new  FoldArrayAction(n):  addition.cloneTree();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  new  FoldArrayAction(n):  addition.cloneTree();	  return    addition!=    null?    new    FoldArrayAction(value):    addition.cloneTree();    	non-compiled	[CE]  ')'  expected	66	None	replace
40	[BUG]  [BUGGY]  return  addition!=  null?  new  FoldArrayAction(value):  addition.clonePath();  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  new  FoldArrayAction(value):  addition.clonePath();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  new  FoldArrayAction(value):  addition.clonePath();	  return    addition!=    null?    new    FoldArrayAction(value):    addition.cloneTree();    	non-compiled	[CE]  ')'  expected	66	None	replace
41	[BUG]  [BUGGY]  return  addition!=  null?  new  FoldArrayAction(value):  addition.clonePosition();  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  new  FoldArrayAction(value):  addition.clonePosition();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  new  FoldArrayAction(value):  addition.clonePosition();	  return    addition!=    null?    new    FoldArrayAction(value):    addition.cloneTree();    	non-compiled	[CE]  ')'  expected	66	None	replace
42	[BUG]  [BUGGY]  return  addition!=  null  ||  addition.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.VAR;  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null  ||  addition.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.VAR;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null  ||  addition.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.VAR;	  return    addition!=    null    &&    addition.getType()    ==    Token.FUNCTION    ||    addition.getType()    ==    Token.VAR;    	non-compiled	[CE]  ')'  expected	72	None	replace
43	[BUG]  [BUGGY]  return  addition  ==  null  &&  addition.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.VAR;  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null  &&  addition.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.VAR;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null  &&  addition.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.VAR;	  return    addition!=    null    &&    addition.getType()    ==    Token.FUNCTION    ||    addition.getType()    ==    Token.VAR;    	non-compiled	[CE]  ')'  expected	72	None	replace
44	[BUG]  [BUGGY]  return  addition  ==  null  ||  addition.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.VAR;  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null  ||  addition.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.VAR;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null  ||  addition.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.VAR;	  return    addition!=    null    &&    addition.getType()    ==    Token.FUNCTION    ||    addition.getType()    ==    Token.VAR;    	non-compiled	[CE]  ')'  expected	72	None	replace
45	[BUG]  [BUGGY]  return  addition!=  null?  null  :  addition.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.VAR;  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  null  :  addition.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.VAR;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  null  :  addition.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.VAR;	  return    addition!=    null    &&    addition.getType()    ==    Token.FUNCTION    ||    addition.getType()    ==    Token.VAR;    	non-compiled	[CE]  ')'  expected	72	None	replace
46	[BUG]  [BUGGY]  return  addition!=  null  &&  addition.getType()  >=  Token.FUNCTION  ||  addition.getType()  ==  Token.VAR;  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null  &&  addition.getType()  >=  Token.FUNCTION  ||  addition.getType()  ==  Token.VAR;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null  &&  addition.getType()  >=  Token.FUNCTION  ||  addition.getType()  ==  Token.VAR;	  return    addition!=    null    &&    addition.getType()    ==    Token.FUNCTION    ||    addition.getType()    ==    Token.VAR;    	non-compiled	[CE]  ')'  expected	72	None	replace
47	[BUG]  [BUGGY]  return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION  &&  addition.getType()  ==  Token.VAR;  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION  &&  addition.getType()  ==  Token.VAR;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION  &&  addition.getType()  ==  Token.VAR;	  return    addition!=    null    &&    addition.getType()    ==    Token.FUNCTION    ||    addition.getType()    ==    Token.VAR;    	non-compiled	[CE]  ')'  expected	72	None	replace
48	[BUG]  [BUGGY]  return  addition  ==  null?  value  :  addition.toString();  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  value  :  addition.toString();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value  :  addition.toString();	  return    addition!=    null?    value    :    addition.toString();    	non-compiled	[CE]  ')'  expected	61	None	replace
49	[BUG]  [BUGGY]  return  addition!=  null?  JSError.make(NON_GLOBAL_EXPRESSION_FLAGS):  addition.toString();  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  JSError.make(NON_GLOBAL_EXPRESSION_FLAGS):  addition.toString();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  JSError.make(NON_GLOBAL_EXPRESSION_FLAGS):  addition.toString();	  return    addition!=    null?    value    :    addition.toString();    	non-compiled	[CE]  ')'  expected	61	None	replace
50	[BUG]  [BUGGY]  return  addition!=  null?  NON_GLOBAL_EXPRESSION_FLAGS  :  addition.toString();  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  NON_GLOBAL_EXPRESSION_FLAGS  :  addition.toString();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  NON_GLOBAL_EXPRESSION_FLAGS  :  addition.toString();	  return    addition!=    null?    value    :    addition.toString();    	non-compiled	[CE]  ')'  expected	61	None	replace
51	[BUG]  [BUGGY]  return  addition!=  null?  JSError.make(NON_GLOBAL_EXPRESSION_FLAGS,  value):  addition.toString();  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  JSError.make(NON_GLOBAL_EXPRESSION_FLAGS,  value):  addition.toString();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  JSError.make(NON_GLOBAL_EXPRESSION_FLAGS,  value):  addition.toString();	  return    addition!=    null?    value    :    addition.toString();    	non-compiled	[CE]  ')'  expected	61	None	replace
52	[BUG]  [BUGGY]  return  addition  ==  null?  value  :  addition.cloneTarget();  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  value  :  addition.cloneTarget();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value  :  addition.cloneTarget();	  return    addition    ==    null?    value    :    addition.cloneNode();    	non-compiled	[CE]  ')'  expected	63	None	replace
53	[BUG]  [BUGGY]  return  addition  ==  null?  value  :  addition.cloneFunctionNode();  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  value  :  addition.cloneFunctionNode();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value  :  addition.cloneFunctionNode();	  return    addition    ==    null?    value    :    addition.cloneNode();    	non-compiled	[CE]  ')'  expected	63	None	replace
54	[BUG]  [BUGGY]  return  addition!=  null  ||  addition.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null  ||  addition.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null  ||  addition.getFirstChild().getType()  ==  Token.FUNCTION;	  return    addition!=    null    &&    addition.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	70	None	replace
55	[BUG]  [BUGGY]  return  addition!=  null  &&  addition.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null  &&  addition.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null  &&  addition.getLastChild().getType()  ==  Token.FUNCTION;	  return    addition!=    null    &&    addition.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	70	None	replace
56	[BUG]  [BUGGY]  return  addition  ==  null  &&  addition.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null  &&  addition.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null  &&  addition.getFirstChild().getType()  ==  Token.FUNCTION;	  return    addition!=    null    &&    addition.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	70	None	replace
57	[BUG]  [BUGGY]  return  addition  ==  null  ||  addition.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null  ||  addition.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null  ||  addition.getFirstChild().getType()  ==  Token.FUNCTION;	  return    addition!=    null    &&    addition.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	70	None	replace
58	[BUG]  [BUGGY]  return  addition!=  null  &&  addition.getFirstChild().getType()  >=  Token.FUNCTION;  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null  &&  addition.getFirstChild().getType()  >=  Token.FUNCTION;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null  &&  addition.getFirstChild().getType()  >=  Token.FUNCTION;	  return    addition!=    null    &&    addition.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	70	None	replace
59	[BUG]  [BUGGY]  return  addition!=  null?  null  :  addition.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  null  :  addition.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  null  :  addition.getFirstChild().getType()  ==  Token.FUNCTION;	  return    addition!=    null    &&    addition.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	70	None	replace
60	[BUG]  [BUGGY]  return  addition!=  null  ||  addition.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.EXPR_RESULT;  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null  ||  addition.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null  ||  addition.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.EXPR_RESULT;	  return    addition!=    null    &&    addition.getType()    ==    Token.FUNCTION    ||    addition.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  ')'  expected	71	None	replace
61	[BUG]  [BUGGY]  return  addition  ==  null  ||  addition.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.EXPR_RESULT;  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null  ||  addition.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null  ||  addition.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.EXPR_RESULT;	  return    addition!=    null    &&    addition.getType()    ==    Token.FUNCTION    ||    addition.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  ')'  expected	71	None	replace
62	[BUG]  [BUGGY]  return  addition  ==  null  &&  addition.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.EXPR_RESULT;  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null  &&  addition.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null  &&  addition.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.EXPR_RESULT;	  return    addition!=    null    &&    addition.getType()    ==    Token.FUNCTION    ||    addition.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  ')'  expected	71	None	replace
63	[BUG]  [BUGGY]  return  addition!=  null?  null  :  addition.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.EXPR_RESULT;  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  null  :  addition.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  null  :  addition.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.EXPR_RESULT;	  return    addition!=    null    &&    addition.getType()    ==    Token.FUNCTION    ||    addition.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  ')'  expected	71	None	replace
64	[BUG]  [BUGGY]  return  addition!=  null  &&  addition.getType()  >=  Token.FUNCTION  ||  addition.getType()  ==  Token.EXPR_RESULT;  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null  &&  addition.getType()  >=  Token.FUNCTION  ||  addition.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null  &&  addition.getType()  >=  Token.FUNCTION  ||  addition.getType()  ==  Token.EXPR_RESULT;	  return    addition!=    null    &&    addition.getType()    ==    Token.FUNCTION    ||    addition.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  ')'  expected	71	None	replace
65	[BUG]  [BUGGY]  return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION  &&  addition.getType()  ==  Token.EXPR_RESULT;  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION  &&  addition.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION  &&  addition.getType()  ==  Token.EXPR_RESULT;	  return    addition!=    null    &&    addition.getType()    ==    Token.FUNCTION    ||    addition.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  ')'  expected	71	None	replace
66	[BUG]  [BUGGY]  return  addition!=  null?  value  :  addition.clonePath();  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value  :  addition.clonePath();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value  :  addition.clonePath();	  return    addition!=    null?    value    :    addition.cloneTree();    	non-compiled	[CE]  ')'  expected	8	None	replace
67	[BUG]  [BUGGY]  return  addition.cloneTree(),  n);  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition.cloneTree(),  n);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition.cloneTree(),  n);	  return    addition.cloneTree(),    value);    	non-compiled	[CE]  ';'  expected	4	None	replace
68	[BUG]  [BUGGY]  return  addition!=  null?  null  :  addition.cloneTree(),  value);  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  null  :  addition.cloneTree(),  value);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  null  :  addition.cloneTree(),  value);	  return    addition.cloneTree(),    value);    	non-compiled	[CE]  ';'  expected	4	None	replace
69	[BUG]  [BUGGY]  return  addition.cloneTree(),  value,  REGEXP_FLAGS_RE);  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition.cloneTree(),  value,  REGEXP_FLAGS_RE);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition.cloneTree(),  value,  REGEXP_FLAGS_RE);	  return    addition.cloneTree(),    value);    	non-compiled	[CE]  ';'  expected	4	None	replace
70	[BUG]  [BUGGY]  return  addition.cloneTree(),  value,  NON_GLOBAL_EXPRESSION_FLAGS);  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition.cloneTree(),  value,  NON_GLOBAL_EXPRESSION_FLAGS);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition.cloneTree(),  value,  NON_GLOBAL_EXPRESSION_FLAGS);	  return    addition.cloneTree(),    value);    	non-compiled	[CE]  ';'  expected	4	None	replace
71	[BUG]  [BUGGY]  return  addition.cloneTree(),  value,  n);  [CE]  ';'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition.cloneTree(),  value,  n);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition.cloneTree(),  value,  n);	  return    addition.cloneTree(),    value);    	non-compiled	[CE]  ';'  expected	4	None	replace
72	[BUG]  [BUGGY]  return  addition.cloneTree(),  value,  false);  [CE]  ';'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition.cloneTree(),  value,  false);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition.cloneTree(),  value,  false);	  return    addition.cloneTree(),    value);    	non-compiled	[CE]  ';'  expected	4	None	replace
73	[BUG]  [BUGGY]  return  addition!=  null?  addition.getNext()  :  addition;  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  addition.getNext()  :  addition;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  addition.getNext()  :  addition;	  return    addition!=    null?    addr.getNext()    :    addition;    	non-compiled	[CE]  ')'  expected	50	None	replace
74	[BUG]  [BUGGY]  return  addition!=  null?  addition.getNext()  :  addr;  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  addition.getNext()  :  addr;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  addition.getNext()  :  addr;	  return    addition!=    null?    addr.getNext()    :    addition;    	non-compiled	[CE]  ')'  expected	50	None	replace
75	[BUG]  [BUGGY]  return  addition!=  null?  addr.getParent()  :  addition;  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  addr.getParent()  :  addition;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  addr.getParent()  :  addition;	  return    addition!=    null?    addr.getNext()    :    addition;    	non-compiled	[CE]  ')'  expected	50	None	replace
76	[BUG]  [BUGGY]  return  addition  ==  null?  addr.getNext()  :  addition;  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  addr.getNext()  :  addition;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  addr.getNext()  :  addition;	  return    addition!=    null?    addr.getNext()    :    addition;    	non-compiled	[CE]  ')'  expected	50	None	replace
77	[BUG]  [BUGGY]  return  addition.cloneTree(),  n;  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition.cloneTree(),  n;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition.cloneTree(),  n;	  return    addition.cloneTree(),    value;    	non-compiled	[CE]  ';'  expected	5	None	replace
78	[BUG]  [BUGGY]  return  addition!=  null?  null  :  addition.cloneTree(),  value;  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  null  :  addition.cloneTree(),  value;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  null  :  addition.cloneTree(),  value;	  return    addition.cloneTree(),    value;    	non-compiled	[CE]  ';'  expected	5	None	replace
79	[BUG]  [BUGGY]  return  addition.cloneTree(),  value.cloneTree();  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition.cloneTree(),  value.cloneTree();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition.cloneTree(),  value.cloneTree();	  return    addition.cloneTree(),    value;    	non-compiled	[CE]  ';'  expected	5	None	replace
80	[BUG]  [BUGGY]  return  addition  ==  null?  null  :  addition.cloneTree(),  value;  [CE]  ';'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  null  :  addition.cloneTree(),  value;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  null  :  addition.cloneTree(),  value;	  return    addition.cloneTree(),    value;    	non-compiled	[CE]  ';'  expected	5	None	replace
81	[BUG]  [BUGGY]  return  addition.cloneTree(),  value,  n;  [CE]  ';'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition.cloneTree(),  value,  n;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition.cloneTree(),  value,  n;	  return    addition.cloneTree(),    value;    	non-compiled	[CE]  ';'  expected	5	None	replace
82	[BUG]  [BUGGY]  return  addition!=  null?  null  :  addition.clonePosition();  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  null  :  addition.clonePosition();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  null  :  addition.clonePosition();	  return    addition!=    null?    null    :    addition.cloneTree();    	non-compiled	[CE]  ')'  expected	1	None	replace
83	[BUG]  [BUGGY]  return  addition!=  null?  null  :  addition.clonePath();  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  null  :  addition.clonePath();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  null  :  addition.clonePath();	  return    addition!=    null?    null    :    addition.cloneTree();    	non-compiled	[CE]  ')'  expected	1	None	replace
84	[BUG]  [BUGGY]  return  addition!=  null?  value  :  addition.removeLastChild();  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value  :  addition.removeLastChild();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value  :  addition.removeLastChild();	  return    addition!=    null?    value    :    addition.removeFirstChild();    	non-compiled	[CE]  ')'  expected	9	None	replace
85	[BUG]  [BUGGY]  return  addition!=  null?  value  :  addition.getFirstChild();  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value  :  addition.getFirstChild();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value  :  addition.getFirstChild();	  return    addition!=    null?    value    :    addition.removeFirstChild();    	non-compiled	[CE]  ')'  expected	9	None	replace
86	[BUG]  [BUGGY]  return  addition!=  null? "null "  :  addition.getType();  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null? "null "  :  addition.getType();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null? "null "  :  addition.getType();	  return    addition!=    null?    null    :    addition.getType();    	non-compiled	[CE]  ')'  expected	7	None	replace
87	[BUG]  [BUGGY]  return  addition!=  null?  null  :  addition.getString();  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  null  :  addition.getString();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  null  :  addition.getString();	  return    addition!=    null?    null    :    addition.getType();    	non-compiled	[CE]  ')'  expected	7	None	replace
88	[BUG]  [BUGGY]  return  addition  >=  null?  null  :  addition.getType();  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  >=  null?  null  :  addition.getType();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  >=  null?  null  :  addition.getType();	  return    addition!=    null?    null    :    addition.getType();    	non-compiled	[CE]  ')'  expected	7	None	replace
89	[BUG]  [BUGGY]  return  addition!=  null  ||  addition.getType()  >=  Token.FUNCTION;  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null  ||  addition.getType()  >=  Token.FUNCTION;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null  ||  addition.getType()  >=  Token.FUNCTION;	  return    addition!=    null    &&    addition.getType()    >=    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	16	None	replace
90	[BUG]  [BUGGY]  n.removeChild(callTarget);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  n.removeChild(callTarget);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.removeChild(callTarget);	  n.removeChild(address);    	non-compiled	[CE]  ')'  expected	46	None	replace
91	[BUG]  [BUGGY]  n.removeChild(key);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  n.removeChild(key);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.removeChild(key);	  n.removeChild(address);    	non-compiled	[CE]  ')'  expected	46	None	replace
92	[BUG]  [BUGGY]  n.removeChild(a);  reportCodeChange();  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  n.removeChild(a);  reportCodeChange();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.removeChild(a);  reportCodeChange();	  n.removeChild(value);    reportCodeChange();    	non-compiled	[CE]  ')'  expected	56	None	replace
93	[BUG]  [BUGGY]  n.removeChild(address);  reportCodeChange();  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  n.removeChild(address);  reportCodeChange();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.removeChild(address);  reportCodeChange();	  n.removeChild(value);    reportCodeChange();    	non-compiled	[CE]  ')'  expected	56	None	replace
94	[BUG]  [BUGGY]  n.removeChild(add);  reportCodeChange();  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  n.removeChild(add);  reportCodeChange();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.removeChild(add);  reportCodeChange();	  n.removeChild(value);    reportCodeChange();    	non-compiled	[CE]  ')'  expected	56	None	replace
95	[BUG]  [BUGGY]  n.removeChild(addition);  reportCodeChange();  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  n.removeChild(addition);  reportCodeChange();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.removeChild(addition);  reportCodeChange();	  n.removeChild(value);    reportCodeChange();    	non-compiled	[CE]  ')'  expected	56	None	replace
96	[BUG]  [BUGGY]  return  addition!=  null?  add.cloneTree()  :  new  FoldArrayAction(a,  addition);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  add.cloneTree()  :  new  FoldArrayAction(a,  addition);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  add.cloneTree()  :  new  FoldArrayAction(a,  addition);	  return    addition!=    null?    add.cloneTree()    :    null;    	non-compiled	[CE]  ')'  expected	68	None	replace
97	[BUG]  [BUGGY]  return  addition!=  null?  add.cloneTree()  :  n;  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  add.cloneTree()  :  n;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  add.cloneTree()  :  n;	  return    addition!=    null?    add.cloneTree()    :    null;    	non-compiled	[CE]  ')'  expected	68	None	replace
98	[BUG]  [BUGGY]  return  addition!=  null?  add.cloneTree()  :  Integer.toString(Integer.toString(value));  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  add.cloneTree()  :  Integer.toString(Integer.toString(value));  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  add.cloneTree()  :  Integer.toString(Integer.toString(value));	  return    addition!=    null?    add.cloneTree()    :    null;    	non-compiled	[CE]  ')'  expected	68	None	replace
99	[BUG]  [BUGGY]  return  addition!=  null?  add.cloneTree()  :  Collections.EMPTY_LIST;  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  add.cloneTree()  :  Collections.EMPTY_LIST;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  add.cloneTree()  :  Collections.EMPTY_LIST;	  return    addition!=    null?    add.cloneTree()    :    null;    	non-compiled	[CE]  ')'  expected	68	None	replace
100	[BUG]  [BUGGY]  return  addition!=  null?  add.cloneTree()  :  Collections.emptyList();  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  add.cloneTree()  :  Collections.emptyList();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  add.cloneTree()  :  Collections.emptyList();	  return    addition!=    null?    add.cloneTree()    :    null;    	non-compiled	[CE]  ')'  expected	68	None	replace
101	[BUG]  [BUGGY]  return  addition!=  null?  add.cloneTree()  :  this;  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  add.cloneTree()  :  this;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  add.cloneTree()  :  this;	  return    addition!=    null?    add.cloneTree()    :    null;    	non-compiled	[CE]  ')'  expected	68	None	replace
102	[BUG]  [BUGGY]  return  addition!=  null?  value.getType()  :  Integer.MIN_VALUE;  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value.getType()  :  Integer.MIN_VALUE;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.getType()  :  Integer.MIN_VALUE;	  return    addition!=    null?    value.getType()    :    Integer.MAX_VALUE;    	non-compiled	[CE]  ')'  expected	34	None	replace
103	[BUG]  [BUGGY]  return  addition!=  null?  n.getType()  :  Integer.MAX_VALUE;  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  n.getType()  :  Integer.MAX_VALUE;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  n.getType()  :  Integer.MAX_VALUE;	  return    addition!=    null?    value.getType()    :    Integer.MAX_VALUE;    	non-compiled	[CE]  ')'  expected	34	None	replace
104	[BUG]  [BUGGY]  n.getNext().removeChild(value);  reportCodeChange();  [CE]  ')'  expected  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  n.getNext().removeChild(value);  reportCodeChange();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.getNext().removeChild(value);  reportCodeChange();	  n.getParent().removeChild(value);    reportCodeChange();    	non-compiled	[CE]  ')'  expected	30	None	replace
105	[BUG]  [BUGGY]  return  addition  ==  null?  value.cloneTree()  :  addition.cloneTree();  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  value.cloneTree()  :  addition.cloneTree();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value.cloneTree()  :  addition.cloneTree();	  return    addition!=    null?    value.cloneTree()    :    addition.cloneTree();    	non-compiled	[CE]  ')'  expected	65	None	replace
106	[BUG]  [BUGGY]  return  addition!=  null?  n.cloneTree()  :  addition.cloneTree();  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  n.cloneTree()  :  addition.cloneTree();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  n.cloneTree()  :  addition.cloneTree();	  return    addition!=    null?    value.cloneTree()    :    addition.cloneTree();    	non-compiled	[CE]  ')'  expected	65	None	replace
107	[BUG]  [BUGGY]  return  addition!=  null?  value.clone()  :  addition.cloneTree();  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value.clone()  :  addition.cloneTree();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.clone()  :  addition.cloneTree();	  return    addition!=    null?    value.cloneTree()    :    addition.cloneTree();    	non-compiled	[CE]  ')'  expected	65	None	replace
108	[BUG]  [BUGGY]  return  addition  ==  null?  value.getType()  :  Integer.MIN_VALUE;  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  value.getType()  :  Integer.MIN_VALUE;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value.getType()  :  Integer.MIN_VALUE;	  return    addition    ==    null?    value.getType()    :    Integer.MAX_VALUE;    	non-compiled	[CE]  ')'  expected	18	None	replace
109	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction());  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction());  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction());	  NodeTraversal.traverse(compiler,    addition,    new    FoldArrayAction());    	non-compiled	[CE]  ')'  expected	45	None	replace
110	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  STANDARD_OBJECT_CONSTRUCTORS,  addition,  new  FoldArrayAction());  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  STANDARD_OBJECT_CONSTRUCTORS,  addition,  new  FoldArrayAction());  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	NodeTraversal.traverse(compiler,  STANDARD_OBJECT_CONSTRUCTORS,  addition,  new  FoldArrayAction());	  NodeTraversal.traverse(compiler,    addition,    new    FoldArrayAction());    	non-compiled	[CE]  ')'  expected	45	None	replace
111	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  INVALID_REGULAR_EXPRESSION_FLAGS,  new  FoldArrayAction());  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  INVALID_REGULAR_EXPRESSION_FLAGS,  new  FoldArrayAction());  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	NodeTraversal.traverse(compiler,  INVALID_REGULAR_EXPRESSION_FLAGS,  new  FoldArrayAction());	  NodeTraversal.traverse(compiler,    addition,    new    FoldArrayAction());    	non-compiled	[CE]  ')'  expected	45	None	replace
112	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  INVALID_REGULAR_EXPRESSION_FLAGS,  addition,  new  FoldArrayAction());  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  INVALID_REGULAR_EXPRESSION_FLAGS,  addition,  new  FoldArrayAction());  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	NodeTraversal.traverse(compiler,  INVALID_REGULAR_EXPRESSION_FLAGS,  addition,  new  FoldArrayAction());	  NodeTraversal.traverse(compiler,    addition,    new    FoldArrayAction());    	non-compiled	[CE]  ')'  expected	45	None	replace
113	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callTarget,  new  FoldArrayAction());  [CE]  ')'  expected  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  callTarget,  new  FoldArrayAction());  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	NodeTraversal.traverse(compiler,  callTarget,  new  FoldArrayAction());	  NodeTraversal.traverse(compiler,    addition,    new    FoldArrayAction());    	non-compiled	[CE]  ')'  expected	45	None	replace
114	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  STANDARD_OBJECT_CONSTRUCTORS,  new  FoldArrayAction());  [CE]  ')'  expected  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  STANDARD_OBJECT_CONSTRUCTORS,  new  FoldArrayAction());  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	NodeTraversal.traverse(compiler,  STANDARD_OBJECT_CONSTRUCTORS,  new  FoldArrayAction());	  NodeTraversal.traverse(compiler,    addition,    new    FoldArrayAction());    	non-compiled	[CE]  ')'  expected	45	None	replace
115	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  FoldArrayAction());  [CE]  ')'  expected  [FE]                                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  FoldArrayAction());  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	NodeTraversal.traverse(compiler,  node,  new  FoldArrayAction());	  NodeTraversal.traverse(compiler,    addition,    new    FoldArrayAction());    	non-compiled	[CE]  ')'  expected	45	None	replace
116	[BUG]  [BUGGY]  return  addition  ==  null?  null  :  addition.getType()  ==  Token.FUNCTION;  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  null  :  addition.getType()  ==  Token.FUNCTION;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  null  :  addition.getType()  ==  Token.FUNCTION;	  return    addition!=    null    ||    addition.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	11	None	replace
117	[BUG]  [BUGGY]  n.addChildToFront(value);  [CE]  ')'  expected  [FE]                                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  n.addChildToFront(value);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.addChildToFront(value);	  n.removeChild(addition);    	non-compiled	[CE]  ')'  expected	32	None	replace
118	[BUG]  [BUGGY]  return  addition!=  null?  value  :  addition.clonePrettyPrinter();  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value  :  addition.clonePrettyPrinter();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value  :  addition.clonePrettyPrinter();	  return    addition    ==    null?    value    :    addition.clonePrettyPrinter();    	non-compiled	[CE]  ')'  expected	62	None	replace
119	[BUG]  [BUGGY]  return  addition  ==  null?  value  :  addition.cloneSimpleFunctionCall();  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  value  :  addition.cloneSimpleFunctionCall();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value  :  addition.cloneSimpleFunctionCall();	  return    addition    ==    null?    value    :    addition.clonePrettyPrinter();    	non-compiled	[CE]  ')'  expected	62	None	replace
120	[BUG]  [BUGGY]  return  addition  ==  null?  value  :  addition.cloneFunctionCall();  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  value  :  addition.cloneFunctionCall();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value  :  addition.cloneFunctionCall();	  return    addition    ==    null?    value    :    addition.clonePrettyPrinter();    	non-compiled	[CE]  ')'  expected	62	None	replace
121	[BUG]  [BUGGY]  return  addition!=  null?  NON_GLOBAL_EXPRESSION_FLAGS  :  addition;  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  NON_GLOBAL_EXPRESSION_FLAGS  :  addition;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  NON_GLOBAL_EXPRESSION_FLAGS  :  addition;	  return    addition!=    null?    n    :    addition;    	non-compiled	[CE]  ')'  expected	42	None	replace
122	[BUG]  [BUGGY]  return  addition!=  null?  n  :  addition.cloneTree();  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  n  :  addition.cloneTree();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  n  :  addition.cloneTree();	  return    addition!=    null?    n    :    addition;    	non-compiled	[CE]  ')'  expected	42	None	replace
123	[BUG]  [BUGGY]  return  addition!=  null?  n  :  addition.removeFirstChild();  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  n  :  addition.removeFirstChild();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  n  :  addition.removeFirstChild();	  return    addition!=    null?    n    :    addition;    	non-compiled	[CE]  ')'  expected	42	None	replace
124	[BUG]  [BUGGY]  return  addition!=  null?  null  :  addition.clone();  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  null  :  addition.clone();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  null  :  addition.clone();	  return    addition.clone();    	non-compiled	[CE]  ')'  expected	2	None	replace
125	[BUG]  [BUGGY]  return  addition  ==  null?  null  :  addition.clone();  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  null  :  addition.clone();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  null  :  addition.clone();	  return    addition.clone();    	non-compiled	[CE]  ')'  expected	2	None	replace
126	[BUG]  [BUGGY]  return  addition.clone()  &&  value.getType()  ==  Token.FUNCTION;  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition.clone()  &&  value.getType()  ==  Token.FUNCTION;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition.clone()  &&  value.getType()  ==  Token.FUNCTION;	  return    addition.clone();    	non-compiled	[CE]  ')'  expected	2	None	replace
127	[BUG]  [BUGGY]  return  addition.clone()  &&!NodeUtil.isFunctionDeclaration(value));  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition.clone()  &&!NodeUtil.isFunctionDeclaration(value));  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition.clone()  &&!NodeUtil.isFunctionDeclaration(value));	  return    addition.clone();    	non-compiled	[CE]  ';'  expected	2	None	replace
128	[BUG]  [BUGGY]  return  addition.clone()  &&  n.getType()  ==  Token.FUNCTION;  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition.clone()  &&  n.getType()  ==  Token.FUNCTION;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition.clone()  &&  n.getType()  ==  Token.FUNCTION;	  return    addition.clone();    	non-compiled	[CE]  ')'  expected	2	None	replace
129	[BUG]  [BUGGY]  if(a.getType()  ==  Token.FUNCTION)  {  return  addition  ==  null  &&  addition.getType()  ==  Token.FUNCTION;  }  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  if(a.getType()  ==  Token.FUNCTION)  {  return  addition  ==  null  &&  addition.getType()  ==  Token.FUNCTION;  }  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	if(a.getType()  ==  Token.FUNCTION)  {  return  addition  ==  null  &&  addition.getType()  ==  Token.FUNCTION;  }	  return    addition    ==    null    &&    addition.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	13	None	replace
130	[BUG]  [BUGGY]  if(a.getType()  ==  Token.FUNCTION)  {  return  addition  ==  null  ||  addition.getType()  ==  Token.FUNCTION;  }  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  if(a.getType()  ==  Token.FUNCTION)  {  return  addition  ==  null  ||  addition.getType()  ==  Token.FUNCTION;  }  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	if(a.getType()  ==  Token.FUNCTION)  {  return  addition  ==  null  ||  addition.getType()  ==  Token.FUNCTION;  }	  return    addition    ==    null    &&    addition.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	13	None	replace
131	[BUG]  [BUGGY]  return  addition  ==  null?  value  :  addition.removeLastChild();  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  value  :  addition.removeLastChild();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value  :  addition.removeLastChild();	  return    addition    ==    null?    value    :    addition.removeFirstChild();    	non-compiled	[CE]  ')'  expected	20	None	replace
132	[BUG]  [BUGGY]  return  addition  ==  null?  value  :  addition.getFirstChild();  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  value  :  addition.getFirstChild();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value  :  addition.getFirstChild();	  return    addition    ==    null?    value    :    addition.removeFirstChild();    	non-compiled	[CE]  ')'  expected	20	None	replace
133	[BUG]  [BUGGY]  return  addition!=  null?  value.getString()  :  Integer.toString(INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value.getString()  :  Integer.toString(INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.getString()  :  Integer.toString(INVALID_REGULAR_EXPRESSION_FLAGS);	  return    addition!=    null?    value.getString()    :    addition;    	non-compiled	[CE]  ')'  expected	58	None	replace
134	[BUG]  [BUGGY]  return  addition!=  null?  value.getString()  :  Integer.toString(Integer.toString(int));  [CE]  '.class'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value.getString()  :  Integer.toString(Integer.toString(int));  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.getString()  :  Integer.toString(Integer.toString(int));	  return    addition!=    null?    value.getString()    :    addition;    	non-compiled	[CE]  '.class'  expected	58	None	replace
135	[BUG]  [BUGGY]  return  addition!=  null?  value.getString()  :  Integer.toString(Integer.toString(value));  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value.getString()  :  Integer.toString(Integer.toString(value));  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.getString()  :  Integer.toString(Integer.toString(value));	  return    addition!=    null?    value.getString()    :    addition;    	non-compiled	[CE]  ')'  expected	58	None	replace
136	[BUG]  [BUGGY]  return  addition!=  null?  value.getString()  :  Integer.toString(Integer.toString(n.getLastChild()));  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value.getString()  :  Integer.toString(Integer.toString(n.getLastChild()));  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.getString()  :  Integer.toString(Integer.toString(n.getLastChild()));	  return    addition!=    null?    value.getString()    :    addition;    	non-compiled	[CE]  ')'  expected	58	None	replace
137	[BUG]  [BUGGY]  return  addition!=  null?  value.getString()  :  Integer.toString(intValue);  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value.getString()  :  Integer.toString(intValue);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.getString()  :  Integer.toString(intValue);	  return    addition!=    null?    value.getString()    :    addition;    	non-compiled	[CE]  ')'  expected	58	None	replace
138	[BUG]  [BUGGY]  return  addition!=  null?  value.getString()  :  Integer.toHexString(Integer.toHexString(n.getLastChild()));  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value.getString()  :  Integer.toHexString(Integer.toHexString(n.getLastChild()));  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.getString()  :  Integer.toHexString(Integer.toHexString(n.getLastChild()));	  return    addition!=    null?    value.getString()    :    addition;    	non-compiled	[CE]  ')'  expected	58	None	replace
139	[BUG]  [BUGGY]  return  addition!=  null?  value.getString()  :  adjuvant;  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value.getString()  :  adjuvant;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.getString()  :  adjuvant;	  return    addition!=    null?    value.getString()    :    addition;    	non-compiled	[CE]  ')'  expected	58	None	replace
140	[BUG]  [BUGGY]  return  addition  ==  null?  value  :  addition.intValue();  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  value  :  addition.intValue();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value  :  addition.intValue();	  return    addition!=    null?    value    :    addition.intValue();    	non-compiled	[CE]  ')'  expected	59	None	replace
141	[BUG]  [BUGGY]  return  addition!=  null?  n  :  addition.intValue();  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  n  :  addition.intValue();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  n  :  addition.intValue();	  return    addition!=    null?    value    :    addition.intValue();    	non-compiled	[CE]  ')'  expected	59	None	replace
142	[BUG]  [BUGGY]  return  addition!=  null?  value  :  addition.nextValue();  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value  :  addition.nextValue();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value  :  addition.nextValue();	  return    addition!=    null?    value    :    addition.intValue();    	non-compiled	[CE]  ')'  expected	59	None	replace
143	[BUG]  [BUGGY]  return  addition!=  null?  value  :  addition.longValue();  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value  :  addition.longValue();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value  :  addition.longValue();	  return    addition!=    null?    value    :    addition.intValue();    	non-compiled	[CE]  ')'  expected	59	None	replace
144	[BUG]  [BUGGY]  return  addition  ==  null?  value  :  addition.cloneFunction();  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  value  :  addition.cloneFunction();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value  :  addition.cloneFunction();	  return    addition    ==    null?    value    :    addition.clonePosition();    	non-compiled	[CE]  ')'  expected	21	None	replace
145	[BUG]  [BUGGY]  return  addition  ==  null? "null "  :  addition.getType();  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null? "null "  :  addition.getType();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null? "null "  :  addition.getType();	  return    addition    ==    null?    null    :    addition.getType();    	non-compiled	[CE]  ')'  expected	40	None	replace
146	[BUG]  [BUGGY]  return  addition  ==  null?  null  :  addition.getString();  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  null  :  addition.getString();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  null  :  addition.getString();	  return    addition    ==    null?    null    :    addition.getType();    	non-compiled	[CE]  ')'  expected	40	None	replace
147	[BUG]  [BUGGY]  return  addition  ==  null?  null  :  addition.getParent();  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  null  :  addition.getParent();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  null  :  addition.getParent();	  return    addition    ==    null?    null    :    addition.getType();    	non-compiled	[CE]  ')'  expected	40	None	replace
148	[BUG]  [BUGGY]  n.removeChild(a);  [CE]  ')'  expected  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  n.removeChild(a);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.removeChild(a);	  n.removeChild(value);    	non-compiled	[CE]  ')'  expected	31	None	replace
149	[BUG]  [BUGGY]  n.removeChild(add);  [CE]  ')'  expected  [FE]                                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  n.removeChild(add);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.removeChild(add);	  n.removeChild(value);    	non-compiled	[CE]  ')'  expected	31	None	replace
150	[BUG]  [BUGGY]  return  addition!=  null?  value  :  addition.cloneChildren();  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value  :  addition.cloneChildren();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value  :  addition.cloneChildren();	  return    addition!=    null?    value    :    addition.cloneNode();    	non-compiled	[CE]  ')'  expected	54	None	replace
151	[BUG]  [BUGGY]  return  addition!=  null?  value  :  addition.cloneFunctionNode();  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value  :  addition.cloneFunctionNode();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value  :  addition.cloneFunctionNode();	  return    addition!=    null?    value    :    addition.cloneNode();    	non-compiled	[CE]  ')'  expected	54	None	replace
152	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION;  }  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION;  }  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION;  }	  if(a.getType()    ==    Token.FUNCTION)    {    return    addition!=    null    &&    addition.getType()    ==    Token.FUNCTION;    }    	non-compiled	[CE]  ')'  expected	12	None	replace
153	[BUG]  [BUGGY]  if(a.getType()  ==  Token.FUNCTION)  {  return  addition!=  null  ||  addition.getType()  ==  Token.FUNCTION;  }  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  if(a.getType()  ==  Token.FUNCTION)  {  return  addition!=  null  ||  addition.getType()  ==  Token.FUNCTION;  }  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	if(a.getType()  ==  Token.FUNCTION)  {  return  addition!=  null  ||  addition.getType()  ==  Token.FUNCTION;  }	  if(a.getType()    ==    Token.FUNCTION)    {    return    addition!=    null    &&    addition.getType()    ==    Token.FUNCTION;    }    	non-compiled	[CE]  ')'  expected	12	None	replace
154	[BUG]  [BUGGY]  if(a.getType()  ==  Token.FUNCTION  ||  addition!=  null)  {  return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION;  }  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  if(a.getType()  ==  Token.FUNCTION  ||  addition!=  null)  {  return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION;  }  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	if(a.getType()  ==  Token.FUNCTION  ||  addition!=  null)  {  return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION;  }	  if(a.getType()    ==    Token.FUNCTION)    {    return    addition!=    null    &&    addition.getType()    ==    Token.FUNCTION;    }    	non-compiled	[CE]  ')'  expected	12	None	replace
155	[BUG]  [BUGGY]  if(a.getType()  ==  Token.FUNCTION  ||  addition!=  null  ||  addition.getType()  ==  Token.FUNCTION)  {  return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION;  }  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  if(a.getType()  ==  Token.FUNCTION  ||  addition!=  null  ||  addition.getType()  ==  Token.FUNCTION)  {  return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION;  }  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	if(a.getType()  ==  Token.FUNCTION  ||  addition!=  null  ||  addition.getType()  ==  Token.FUNCTION)  {  return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION;  }	  if(a.getType()    ==    Token.FUNCTION)    {    return    addition!=    null    &&    addition.getType()    ==    Token.FUNCTION;    }    	non-compiled	[CE]  ')'  expected	12	None	replace
156	[BUG]  [BUGGY]  if(a.getType()  ==  Token.NAME)  {  return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION;  }  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  if(a.getType()  ==  Token.NAME)  {  return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION;  }  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	if(a.getType()  ==  Token.NAME)  {  return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION;  }	  if(a.getType()    ==    Token.FUNCTION)    {    return    addition!=    null    &&    addition.getType()    ==    Token.FUNCTION;    }    	non-compiled	[CE]  ')'  expected	12	None	replace
157	[BUG]  [BUGGY]  return  addition  ==  null?  null  :  addition.clonePath();  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  null  :  addition.clonePath();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  null  :  addition.clonePath();	  return    addition    ==    null?    null    :    addition.cloneTree();    	non-compiled	[CE]  ')'  expected	3	None	replace
158	[BUG]  [BUGGY]  return  addition  ==  null?  null  :  addition.clonePosition();  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  null  :  addition.clonePosition();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  null  :  addition.clonePosition();	  return    addition    ==    null?    null    :    addition.cloneTree();    	non-compiled	[CE]  ')'  expected	3	None	replace
159	[BUG]  [BUGGY]  n.getParent().replaceChild(callTarget,  addition);  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  n.getParent().replaceChild(callTarget,  addition);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.getParent().replaceChild(callTarget,  addition);	  n.getParent().removeChild(value);    	non-compiled	[CE]  ')'  expected	26	None	replace
160	[BUG]  [BUGGY]  n.getParent().removeChild(callTarget);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  n.getParent().removeChild(callTarget);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.getParent().removeChild(callTarget);	  n.getParent().removeChild(value);    	non-compiled	[CE]  ')'  expected	26	None	replace
161	[BUG]  [BUGGY]  n.getParent().removeChild(parent);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  n.getParent().removeChild(parent);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.getParent().removeChild(parent);	  n.getParent().removeChild(value);    	non-compiled	[CE]  ')'  expected	26	None	replace
162	[BUG]  [BUGGY]  return  addition  ==  null?  value.getString()  :  Integer.toString(INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  value.getString()  :  Integer.toString(INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value.getString()  :  Integer.toString(INVALID_REGULAR_EXPRESSION_FLAGS);	  return    addition    ==    null?    value.getString()    :    addition;    	non-compiled	[CE]  ')'  expected	19	None	replace
163	[BUG]  [BUGGY]  return  addition  ==  null?  value.getString()  :  Integer.toString(Integer.toString(value));  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  value.getString()  :  Integer.toString(Integer.toString(value));  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value.getString()  :  Integer.toString(Integer.toString(value));	  return    addition    ==    null?    value.getString()    :    addition;    	non-compiled	[CE]  ')'  expected	19	None	replace
164	[BUG]  [BUGGY]  return  addition  ==  null?  value.getString()  :  Integer.toString(Integer.toString(int));  [CE]  '.class'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  value.getString()  :  Integer.toString(Integer.toString(int));  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value.getString()  :  Integer.toString(Integer.toString(int));	  return    addition    ==    null?    value.getString()    :    addition;    	non-compiled	[CE]  '.class'  expected	19	None	replace
165	[BUG]  [BUGGY]  return  addition  ==  null?  value.getString()  :  Integer.toString(Integer.toString(n.getLastChild()));  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  value.getString()  :  Integer.toString(Integer.toString(n.getLastChild()));  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value.getString()  :  Integer.toString(Integer.toString(n.getLastChild()));	  return    addition    ==    null?    value.getString()    :    addition;    	non-compiled	[CE]  ')'  expected	19	None	replace
166	[BUG]  [BUGGY]  return  addition  ==  null?  value.getString()  :  Integer.toString(intValue);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  value.getString()  :  Integer.toString(intValue);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value.getString()  :  Integer.toString(intValue);	  return    addition    ==    null?    value.getString()    :    addition;    	non-compiled	[CE]  ')'  expected	19	None	replace
167	[BUG]  [BUGGY]  return  addition  ==  null?  value.getString()  :  Integer.toHexString(Integer.toHexString(n.getLastChild()));  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  value.getString()  :  Integer.toHexString(Integer.toHexString(n.getLastChild()));  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value.getString()  :  Integer.toHexString(Integer.toHexString(n.getLastChild()));	  return    addition    ==    null?    value.getString()    :    addition;    	non-compiled	[CE]  ')'  expected	19	None	replace
168	[BUG]  [BUGGY]  return  addition  ==  null?  value.getString()  :  Integer.toHexString(Integer.toHexString(int));  [CE]  '.class'  expected  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  value.getString()  :  Integer.toHexString(Integer.toHexString(int));  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value.getString()  :  Integer.toHexString(Integer.toHexString(int));	  return    addition    ==    null?    value.getString()    :    addition;    	non-compiled	[CE]  '.class'  expected	19	None	replace
169	[BUG]  [BUGGY]  return  addition  ==  null?  value  :  addition.getNext();  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  value  :  addition.getNext();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value  :  addition.getNext();	  return    addition!=    null?    value    :    addition.getNext();    	non-compiled	[CE]  ')'  expected	10	None	replace
170	[BUG]  [BUGGY]  return  addition!=  null?  value  :  addition.getParent();  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value  :  addition.getParent();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value  :  addition.getParent();	  return    addition!=    null?    value    :    addition.getNext();    	non-compiled	[CE]  ')'  expected	10	None	replace
171	[BUG]  [BUGGY]  return  addition  >=  null?  value  :  addition.cloneTree();  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  >=  null?  value  :  addition.cloneTree();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  >=  null?  value  :  addition.cloneTree();	  return    addition    <    null?    value    :    addition.cloneTree();    	non-compiled	[CE]  ')'  expected	37	None	replace
172	[BUG]  [BUGGY]  return  addition  ==  null?  NON_GLOBAL_EXPRESSION_FLAGS  :  addition.clone();  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  NON_GLOBAL_EXPRESSION_FLAGS  :  addition.clone();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  NON_GLOBAL_EXPRESSION_FLAGS  :  addition.clone();	  return    addition    ==    null?    value    :    addition.clone();    	non-compiled	[CE]  ')'  expected	22	None	replace
173	[BUG]  [BUGGY]  return  addition  ==  null?  n  :  addition.clone();  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  n  :  addition.clone();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  n  :  addition.clone();	  return    addition    ==    null?    value    :    addition.clone();    	non-compiled	[CE]  ')'  expected	22	None	replace
174	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  addition);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  n.getNext().replaceChild(n,  addition);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.getNext().replaceChild(n,  addition);	  n.getNext().removeChild(value);    	non-compiled	[CE]  ')'  expected	27	None	replace
175	[BUG]  [BUGGY]  n.getNext().replaceChild(callTarget,  addition);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  n.getNext().replaceChild(callTarget,  addition);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.getNext().replaceChild(callTarget,  addition);	  n.getNext().removeChild(value);    	non-compiled	[CE]  ')'  expected	27	None	replace
176	[BUG]  [BUGGY]  return  addition!=  null?  NON_GLOBAL_EXPRESSION_FLAGS  :  addition.clone();  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  NON_GLOBAL_EXPRESSION_FLAGS  :  addition.clone();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  NON_GLOBAL_EXPRESSION_FLAGS  :  addition.clone();	  return    addition!=    null?    value    :    addition.clone();    	non-compiled	[CE]  ')'  expected	41	None	replace
177	[BUG]  [BUGGY]  return  addition!=  null?  NON_OBJECT_CONSTRUCTORS  :  addition.clone();  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  NON_OBJECT_CONSTRUCTORS  :  addition.clone();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  NON_OBJECT_CONSTRUCTORS  :  addition.clone();	  return    addition!=    null?    value    :    addition.clone();    	non-compiled	[CE]  ')'  expected	41	None	replace
178	[BUG]  [BUGGY]  return  addition!=  null?  n  :  addition.clone();  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  n  :  addition.clone();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  n  :  addition.clone();	  return    addition!=    null?    value    :    addition.clone();    	non-compiled	[CE]  ')'  expected	41	None	replace
179	[BUG]  [BUGGY]  return  addition!=  null?  null  :  addition.toString();  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  null  :  addition.toString();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  null  :  addition.toString();	  return    addition    ==    null?    null    :    addition.toString();    	non-compiled	[CE]  ')'  expected	75	None	replace
180	[BUG]  [BUGGY]  if(a.getType()  ==  Token.FUNCTION)  {  return  addition  ==  null?  null  :  addition.toString();  }  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  if(a.getType()  ==  Token.FUNCTION)  {  return  addition  ==  null?  null  :  addition.toString();  }  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	if(a.getType()  ==  Token.FUNCTION)  {  return  addition  ==  null?  null  :  addition.toString();  }	  return    addition    ==    null?    null    :    addition.toString();    	non-compiled	[CE]  ')'  expected	75	None	replace
181	[BUG]  [BUGGY]  return  addition  ==  null? "null "  :  addition.toString();  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null? "null "  :  addition.toString();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null? "null "  :  addition.toString();	  return    addition    ==    null?    null    :    addition.toString();    	non-compiled	[CE]  ')'  expected	75	None	replace
182	[BUG]  [BUGGY]  if(a.getType()  ==  Token.FUNCTION)  {  return  addition!=  null?  null  :  addition.toString();  }  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  if(a.getType()  ==  Token.FUNCTION)  {  return  addition!=  null?  null  :  addition.toString();  }  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	if(a.getType()  ==  Token.FUNCTION)  {  return  addition!=  null?  null  :  addition.toString();  }	  return    addition    ==    null?    null    :    addition.toString();    	non-compiled	[CE]  ')'  expected	75	None	replace
183	[BUG]  [BUGGY]  return  addition!=  null?  null  :  addition.getType()  >>  Token.FUNCTION;  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  null  :  addition.getType()  >>  Token.FUNCTION;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  null  :  addition.getType()  >>  Token.FUNCTION;	  return    addition!=    null?    null    :    addition.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	14	None	replace
184	[BUG]  [BUGGY]  return  addition!=  null?  null  :  addition.getType()  >=  Token.FUNCTION;  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  null  :  addition.getType()  >=  Token.FUNCTION;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  null  :  addition.getType()  >=  Token.FUNCTION;	  return    addition!=    null?    null    :    addition.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	14	None	replace
185	[BUG]  [BUGGY]  return  addition!=  null?  null  :  addition.cloneFunction();  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  null  :  addition.cloneFunction();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  null  :  addition.cloneFunction();	  return    addition.cloneFunction();    	non-compiled	[CE]  ')'  expected	6	None	replace
186	[BUG]  [BUGGY]  return  addition  ==  null?  null  :  addition.cloneFunction();  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  null  :  addition.cloneFunction();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  null  :  addition.cloneFunction();	  return    addition.cloneFunction();    	non-compiled	[CE]  ')'  expected	6	None	replace
187	[BUG]  [BUGGY]  return  addition.cloneTarget();  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition.cloneTarget();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition.cloneTarget();	  return    addition.cloneFunction();    	non-compiled	[CE]  ')'  expected	6	None	replace
188	[BUG]  [BUGGY]  return  addition.cloneSimpleFunction();  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition.cloneSimpleFunction();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition.cloneSimpleFunction();	  return    addition.cloneFunction();    	non-compiled	[CE]  ')'  expected	6	None	replace
189	[BUG]  [BUGGY]  return  addition.cloneFunctionCall();  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition.cloneFunctionCall();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition.cloneFunctionCall();	  return    addition.cloneFunction();    	non-compiled	[CE]  ')'  expected	6	None	replace
190	[BUG]  [BUGGY]  return  addition!=  null?  addr.getType()  :  Token.FUNCTION;  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  addr.getType()  :  Token.FUNCTION;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  addr.getType()  :  Token.FUNCTION;	  return    addition!=    null?    value.getType()    :    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	35	None	replace
191	[BUG]  [BUGGY]  return  addition!=  null?  n.getType()  :  Token.FUNCTION;  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  n.getType()  :  Token.FUNCTION;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  n.getType()  :  Token.FUNCTION;	  return    addition!=    null?    value.getType()    :    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	35	None	replace
192	[BUG]  [BUGGY]  return  addition!=  null?  add.getType()  :  Token.FUNCTION;  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  add.getType()  :  Token.FUNCTION;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  add.getType()  :  Token.FUNCTION;	  return    addition!=    null?    value.getType()    :    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	35	None	replace
193	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  addition);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  addition);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	NodeTraversal.traverse(compiler,  n,  addition);	  NodeTraversal.traverse(compiler,    addition,    n);    	non-compiled	[CE]  ')'  expected	47	None	replace
194	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  addition);  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  Traversal.traverse(compiler,  n,  addition);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	Traversal.traverse(compiler,  n,  addition);	  NodeTraversal.traverse(compiler,    addition,    n);    	non-compiled	[CE]  ')'  expected	47	None	replace
195	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  value,  n);  [CE]  ')'  expected  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  value,  n);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	NodeTraversal.traverse(compiler,  value,  n);	  NodeTraversal.traverse(compiler,    addition,    n);    	non-compiled	[CE]  ')'  expected	47	None	replace
196	[BUG]  [BUGGY]  Context.traverse(compiler,  n,  addition);  [CE]  ')'  expected  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  Context.traverse(compiler,  n,  addition);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	Context.traverse(compiler,  n,  addition);	  NodeTraversal.traverse(compiler,    addition,    n);    	non-compiled	[CE]  ')'  expected	47	None	replace
197	[BUG]  [BUGGY]  Traverse.traverse(compiler,  n,  addition);  [CE]  ')'  expected  [FE]                                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  Traverse.traverse(compiler,  n,  addition);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	Traverse.traverse(compiler,  n,  addition);	  NodeTraversal.traverse(compiler,    addition,    n);    	non-compiled	[CE]  ')'  expected	47	None	replace
198	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  addr);  [CE]  ')'  expected  [FE]                                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  addr);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	NodeTraversal.traverse(compiler,  n,  addr);	  NodeTraversal.traverse(compiler,    addition,    n);    	non-compiled	[CE]  ')'  expected	47	None	replace
199	[BUG]  [BUGGY]  n.getParent().replaceChild(value,  addition);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  n.getParent().replaceChild(value,  addition);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.getParent().replaceChild(value,  addition);	  n.getParent().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	28	None	replace
200	[BUG]  [BUGGY]  n.getLastChild().replaceChild(n,  addition);  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  n.getLastChild().replaceChild(n,  addition);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.getLastChild().replaceChild(n,  addition);	  n.getParent().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	28	None	replace
201	[BUG]  [BUGGY]  return  addition!=  null?  value.getType()  :  Integer.toString(value.getType()):  addition;  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value.getType()  :  Integer.toString(value.getType()):  addition;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.getType()  :  Integer.toString(value.getType()):  addition;	  return    addition!=    null?    value.getParent()    :    addition;    	non-compiled	[CE]  ';'  expected	36	None	replace
202	[BUG]  [BUGGY]  return  addition  ==  null?  null  :  addition.cloneTree(),  value);  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  null  :  addition.cloneTree(),  value);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  null  :  addition.cloneTree(),  value);	  return    addition.cloneTree(),    value);    	non-compiled	[CE]  ';'  expected	4	None	replace
203	[BUG]  [BUGGY]  return  addition.cloneTree(),  value  +  1;  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition.cloneTree(),  value  +  1;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition.cloneTree(),  value  +  1;	  return    addition.cloneTree(),    value);    	non-compiled	[CE]  ';'  expected	4	None	replace
204	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  value,  new  FoldArrayAction());  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  value,  new  FoldArrayAction());  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	NodeTraversal.traverse(compiler,  value,  new  FoldArrayAction());	  NodeTraversal.traverse(compiler,    addition,    new    FoldArrayAction());    	non-compiled	[CE]  ')'  expected	45	None	replace
205	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  addr,  new  FoldArrayAction());  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  addr,  new  FoldArrayAction());  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	NodeTraversal.traverse(compiler,  addr,  new  FoldArrayAction());	  NodeTraversal.traverse(compiler,    addition,    new    FoldArrayAction());    	non-compiled	[CE]  ')'  expected	45	None	replace
206	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  FoldArrayAction(),  addition);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  new  FoldArrayAction(),  addition);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	NodeTraversal.traverse(compiler,  new  FoldArrayAction(),  addition);	  NodeTraversal.traverse(compiler,    addition,    new    FoldArrayAction());    	non-compiled	[CE]  ')'  expected	45	None	replace
207	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  next,  new  FoldArrayAction());  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  next,  new  FoldArrayAction());  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	NodeTraversal.traverse(compiler,  next,  new  FoldArrayAction());	  NodeTraversal.traverse(compiler,    addition,    new    FoldArrayAction());    	non-compiled	[CE]  ')'  expected	45	None	replace
208	[BUG]  [BUGGY]  return  addition!=  null?  new  FoldArrayAction(value):  addition.clonePrettyPrint();  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  new  FoldArrayAction(value):  addition.clonePrettyPrint();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  new  FoldArrayAction(value):  addition.clonePrettyPrint();	  return    addition!=    null?    new    FoldArrayAction(value):    addition.cloneTree();    	non-compiled	[CE]  ')'  expected	66	None	replace
209	[BUG]  [BUGGY]  return  addition!=  null?  new  FoldArrayAction(value):  addition.cloneNode();  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  new  FoldArrayAction(value):  addition.cloneNode();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  new  FoldArrayAction(value):  addition.cloneNode();	  return    addition!=    null?    new    FoldArrayAction(value):    addition.cloneTree();    	non-compiled	[CE]  ')'  expected	66	None	replace
210	[BUG]  [BUGGY]  return  addition  ==  null  ||  addition.getType()  >=  Token.FUNCTION;  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null  ||  addition.getType()  >=  Token.FUNCTION;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null  ||  addition.getType()  >=  Token.FUNCTION;	  return    addition!=    null    &&    addition.getType()    >=    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	16	None	replace
211	[BUG]  [BUGGY]  return  addition!=  null?  n  :  addition.toString();  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  n  :  addition.toString();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  n  :  addition.toString();	  return    addition!=    null?    value    :    addition.toString();    	non-compiled	[CE]  ')'  expected	61	None	replace
212	[BUG]  [BUGGY]  return  addition  >=  null?  value  :  addition.toString();  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  >=  null?  value  :  addition.toString();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  >=  null?  value  :  addition.toString();	  return    addition!=    null?    value    :    addition.toString();    	non-compiled	[CE]  ')'  expected	61	None	replace
213	[BUG]  [BUGGY]  return  addition!=  null?  value  :  addition.getString();  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value  :  addition.getString();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value  :  addition.getString();	  return    addition!=    null?    value    :    addition.toString();    	non-compiled	[CE]  ')'  expected	61	None	replace
214	[BUG]  [BUGGY]  return  addition.cloneTree(),  value.detachFromParent();  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition.cloneTree(),  value.detachFromParent();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition.cloneTree(),  value.detachFromParent();	  return    addition.cloneTree(),    value;    	non-compiled	[CE]  ';'  expected	5	None	replace
215	[BUG]  [BUGGY]  return  addition!=  null?  addr.cloneTree()  :  addition.cloneTree();  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  addr.cloneTree()  :  addition.cloneTree();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  addr.cloneTree()  :  addition.cloneTree();	  return    addition!=    null?    value.cloneTree()    :    addition.cloneTree();    	non-compiled	[CE]  ')'  expected	65	None	replace
216	[BUG]  [BUGGY]  return  addition!=  null?  addition.getType()  :  Token.FUNCTION;  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  addition.getType()  :  Token.FUNCTION;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  addition.getType()  :  Token.FUNCTION;	  return    addition    ==    null?    value.getType()    :    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	43	None	replace
217	[BUG]  [BUGGY]  return  addition!=  null?  null  :  addition.cloneNode();  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  null  :  addition.cloneNode();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  null  :  addition.cloneNode();	  return    addition    ==    null?    null    :    addition.cloneTree();    	non-compiled	[CE]  ')'  expected	3	None	replace
218	[BUG]  [BUGGY]  return  addition  ==  null?  null  :  addition.cloneNode();  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  null  :  addition.cloneNode();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  null  :  addition.cloneNode();	  return    addition    ==    null?    null    :    addition.cloneTree();    	non-compiled	[CE]  ')'  expected	3	None	replace
219	[BUG]  [BUGGY]  return  addition  ==  null?  value.getType()  :  Token.EXPR_RESULT  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  value.getType()  :  Token.EXPR_RESULT  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value.getType()  :  Token.EXPR_RESULT  :  INVALID_REGULAR_EXPRESSION_FLAGS;	  return    addition    ==    null?    value.getType()    :    Token.EXPR_RESULT;    	non-compiled	[CE]  ';'  expected	77	None	replace
220	[BUG]  [BUGGY]  return  addition!=  null?  value.getType()  :  Token.EXPR_RESULT  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value.getType()  :  Token.EXPR_RESULT  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.getType()  :  Token.EXPR_RESULT  :  INVALID_REGULAR_EXPRESSION_FLAGS;	  return    addition    ==    null?    value.getType()    :    Token.EXPR_RESULT;    	non-compiled	[CE]  ';'  expected	77	None	replace
221	[BUG]  [BUGGY]  return  addition!=  null?  value.getType()  :  Token.EXPR_RESULT  +  1;  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value.getType()  :  Token.EXPR_RESULT  +  1;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.getType()  :  Token.EXPR_RESULT  +  1;	  return    addition    ==    null?    value.getType()    :    Token.EXPR_RESULT;    	non-compiled	[CE]  ')'  expected	77	None	replace
222	[BUG]  [BUGGY]  return  addition!=  null?  addition.getNext()  :  value;  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  addition.getNext()  :  value;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  addition.getNext()  :  value;	  return    addition!=    null?    addr.getNext()    :    addition;    	non-compiled	[CE]  ')'  expected	50	None	replace
223	[BUG]  [BUGGY]  Predicates.traverse(compiler,  n,  addition);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  Predicates.traverse(compiler,  n,  addition);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	Predicates.traverse(compiler,  n,  addition);	  NodeTraversal.traverse(compiler,    addition,    n);    	non-compiled	[CE]  ')'  expected	47	None	replace
224	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  addr,  n);  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  addr,  n);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	NodeTraversal.traverse(compiler,  addr,  n);	  NodeTraversal.traverse(compiler,    addition,    n);    	non-compiled	[CE]  ')'  expected	47	None	replace
225	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  addition);  [CE]  ')'  expected  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  node,  addition);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	NodeTraversal.traverse(compiler,  node,  addition);	  NodeTraversal.traverse(compiler,    addition,    n);    	non-compiled	[CE]  ')'  expected	47	None	replace
226	[BUG]  [BUGGY]  return  addition!=  null?  null  :  addition.getType()  {  Token.FUNCTION;  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  null  :  addition.getType()  {  Token.FUNCTION;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  null  :  addition.getType()  {  Token.FUNCTION;	  return    addition!=    null?    null    :    addition.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	14	None	replace
227	[BUG]  [BUGGY]  return  addition!=  null?  null  :  addition.getType()  >  Token.FUNCTION;  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  null  :  addition.getType()  >  Token.FUNCTION;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  null  :  addition.getType()  >  Token.FUNCTION;	  return    addition!=    null?    null    :    addition.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	14	None	replace
228	[BUG]  [BUGGY]  return  addition  >=  null?  value  :  addition.intValue();  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  >=  null?  value  :  addition.intValue();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  >=  null?  value  :  addition.intValue();	  return    addition!=    null?    value    :    addition.intValue();    	non-compiled	[CE]  ')'  expected	59	None	replace
229	[BUG]  [BUGGY]  n.replaceChild(value,  addition);  [CE]  ')'  expected  [FE]                                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  n.replaceChild(value,  addition);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.replaceChild(value,  addition);	  n.removeChild(addition);    	non-compiled	[CE]  ')'  expected	32	None	replace
230	[BUG]  [BUGGY]  n.addChildToFront(addition);  [CE]  ')'  expected  [FE]                                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  n.addChildToFront(addition);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.addChildToFront(addition);	  n.removeChild(addition);    	non-compiled	[CE]  ')'  expected	32	None	replace
231	[BUG]  [BUGGY]  return  addition  ==  null?  value.getString()  :  adjuvant;  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  value.getString()  :  adjuvant;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value.getString()  :  adjuvant;	  return    addition    ==    null?    value.getString()    :    addition;    	non-compiled	[CE]  ')'  expected	19	None	replace
232	[BUG]  [BUGGY]  return  addition!=  null?  value.getString()  :  adjudication;  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value.getString()  :  adjudication;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.getString()  :  adjudication;	  return    addition    ==    null?    value.getString()    :    addition;    	non-compiled	[CE]  ')'  expected	19	None	replace
233	[BUG]  [BUGGY]  return  addition!=  null?  value  :  addition.clonePsitiveNode();  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value  :  addition.clonePsitiveNode();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value  :  addition.clonePsitiveNode();	  return    addition!=    null?    value    :    addition.cloneNode();    	non-compiled	[CE]  ')'  expected	54	None	replace
234	[BUG]  [BUGGY]  return  addition!=  null?  value  :  addition.cloneAssertionFailedError();  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value  :  addition.cloneAssertionFailedError();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value  :  addition.cloneAssertionFailedError();	  return    addition    ==    null?    value    :    addition.clonePrettyPrinter();    	non-compiled	[CE]  ')'  expected	62	None	replace
235	[BUG]  [BUGGY]  return  addition!=  null?  value  :  addition.cloneFlags();  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value  :  addition.cloneFlags();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value  :  addition.cloneFlags();	  return    addition    ==    null?    value    :    addition.clonePrettyPrinter();    	non-compiled	[CE]  ')'  expected	62	None	replace
236	[BUG]  [BUGGY]  return  addition  ==  null?  value  :  addition.cloneFlags();  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  value  :  addition.cloneFlags();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value  :  addition.cloneFlags();	  return    addition    ==    null?    value    :    addition.clonePrettyPrinter();    	non-compiled	[CE]  ')'  expected	62	None	replace
237	[BUG]  [BUGGY]  return  addition  ==  null  ||  addition.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionObjectCall(n);  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null  ||  addition.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionObjectCall(n);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null  ||  addition.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionObjectCall(n);	  return    addition    ==    null    ||    addition.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	15	None	replace
238	[BUG]  [BUGGY]  return  addition  ==  null  ||  addition.getType()  ==  Token.FUNCTION  &&!NodeUtil.isFunctionObjectCall(n);  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null  ||  addition.getType()  ==  Token.FUNCTION  &&!NodeUtil.isFunctionObjectCall(n);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null  ||  addition.getType()  ==  Token.FUNCTION  &&!NodeUtil.isFunctionObjectCall(n);	  return    addition    ==    null    ||    addition.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	15	None	replace
239	[BUG]  [BUGGY]  return  addition!=  null?  add.cloneTree()  :  addition;  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  add.cloneTree()  :  addition;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  add.cloneTree()  :  addition;	  return    addition!=    null?    add.cloneTree()    :    null;    	non-compiled	[CE]  ')'  expected	68	None	replace
240	[BUG]  [BUGGY]  return  addition!=  null?  addition.cloneTree()  :  null;  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  addition.cloneTree()  :  null;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  addition.cloneTree()  :  null;	  return    addition!=    null?    add.cloneTree()    :    null;    	non-compiled	[CE]  ')'  expected	68	None	replace
241	[BUG]  [BUGGY]  return  addition  ==  null?  add.cloneTree()  :  null;  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  add.cloneTree()  :  null;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  add.cloneTree()  :  null;	  return    addition!=    null?    add.cloneTree()    :    null;    	non-compiled	[CE]  ')'  expected	68	None	replace
242	[BUG]  [BUGGY]  return  addition!=  null?  add.cloneTree()  :  new  FoldArrayAction(addition);  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  add.cloneTree()  :  new  FoldArrayAction(addition);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  add.cloneTree()  :  new  FoldArrayAction(addition);	  return    addition!=    null?    add.cloneTree()    :    null;    	non-compiled	[CE]  ')'  expected	68	None	replace
243	[BUG]  [BUGGY]  return  addition!=  null?  addition.cloneTree()  :  new  FoldArrayAction(addition);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  addition.cloneTree()  :  new  FoldArrayAction(addition);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  addition.cloneTree()  :  new  FoldArrayAction(addition);	  return    addition!=    null?    add.cloneTree()    :    null;    	non-compiled	[CE]  ')'  expected	68	None	replace
244	[BUG]  [BUGGY]  return  addition!=  null?  value.clone()  :  addition.clone();  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value.clone()  :  addition.clone();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.clone()  :  addition.clone();	  return    addition.clone();    	non-compiled	[CE]  ')'  expected	2	None	replace
245	[BUG]  [BUGGY]  return  addition!=  null?  new  FoldArrayAction(n):  addition.clone();  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  new  FoldArrayAction(n):  addition.clone();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  new  FoldArrayAction(n):  addition.clone();	  return    addition.clone();    	non-compiled	[CE]  ')'  expected	2	None	replace
246	[BUG]  [BUGGY]  return  addition!=  null?  new  FoldArrayAction()  :  addition.clone();  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  new  FoldArrayAction()  :  addition.clone();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  new  FoldArrayAction()  :  addition.clone();	  return    addition.clone();    	non-compiled	[CE]  ')'  expected	2	None	replace
247	[BUG]  [BUGGY]  return  addition  ==  null  &&  addition.getType()!=  Token.FUNCTION  ||  addition.getType()  ==  Token.VAR;  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null  &&  addition.getType()!=  Token.FUNCTION  ||  addition.getType()  ==  Token.VAR;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null  &&  addition.getType()!=  Token.FUNCTION  ||  addition.getType()  ==  Token.VAR;	  return    addition!=    null    &&    addition.getType()    ==    Token.FUNCTION    ||    addition.getType()    ==    Token.VAR;    	non-compiled	[CE]  ')'  expected	72	None	replace
248	[BUG]  [BUGGY]  return  addition  ==  null  &&  addition.getType()  ==  Token.FUNCTION  ||  addition.getType()!=  Token.VAR;  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null  &&  addition.getType()  ==  Token.FUNCTION  ||  addition.getType()!=  Token.VAR;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null  &&  addition.getType()  ==  Token.FUNCTION  ||  addition.getType()!=  Token.VAR;	  return    addition!=    null    &&    addition.getType()    ==    Token.FUNCTION    ||    addition.getType()    ==    Token.VAR;    	non-compiled	[CE]  ')'  expected	72	None	replace
249	[BUG]  [BUGGY]  return  addition!=  null?  JSError.make(NAME_INVALID_REGULAR_EXPRESSION_FLAGS):  addition;  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  JSError.make(NAME_INVALID_REGULAR_EXPRESSION_FLAGS):  addition;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  JSError.make(NAME_INVALID_REGULAR_EXPRESSION_FLAGS):  addition;	  return    addition!=    null?    n    :    addition;    	non-compiled	[CE]  ')'  expected	42	None	replace
250	[BUG]  [BUGGY]  return  addition!=  null?  JSError.make(NON_GLOBAL_EXPRESSION_FLAGS):  addition;  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  JSError.make(NON_GLOBAL_EXPRESSION_FLAGS):  addition;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  JSError.make(NON_GLOBAL_EXPRESSION_FLAGS):  addition;	  return    addition!=    null?    n    :    addition;    	non-compiled	[CE]  ')'  expected	42	None	replace
251	[BUG]  [BUGGY]  return  addition!=  null?  JSError.make(JSError.INVALID_REGULAR_EXPRESSION_FLAGS):  addition;  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  JSError.make(JSError.INVALID_REGULAR_EXPRESSION_FLAGS):  addition;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  JSError.make(JSError.INVALID_REGULAR_EXPRESSION_FLAGS):  addition;	  return    addition!=    null?    n    :    addition;    	non-compiled	[CE]  ')'  expected	42	None	replace
252	[BUG]  [BUGGY]  return  addition!=  null?  JSError.make(JSError.make(value,  n,  INVALID_REGULAR_EXPRESSION_FLAGS):  addition;  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  JSError.make(JSError.make(value,  n,  INVALID_REGULAR_EXPRESSION_FLAGS):  addition;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  JSError.make(JSError.make(value,  n,  INVALID_REGULAR_EXPRESSION_FLAGS):  addition;	  return    addition!=    null?    n    :    addition;    	non-compiled	[CE]  ')'  expected	42	None	replace
253	[BUG]  [BUGGY]  return  addition!=  null?  JSError.make(NAME_INVALID_REGULAR_EXPRESSION_FLAGS,  value):  addition;  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  JSError.make(NAME_INVALID_REGULAR_EXPRESSION_FLAGS,  value):  addition;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  JSError.make(NAME_INVALID_REGULAR_EXPRESSION_FLAGS,  value):  addition;	  return    addition!=    null?    n    :    addition;    	non-compiled	[CE]  ')'  expected	42	None	replace
254	[BUG]  [BUGGY]  return  addition  ==  null  &&  addition.getFirstChild().getType()!=  Token.FUNCTION;  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null  &&  addition.getFirstChild().getType()!=  Token.FUNCTION;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null  &&  addition.getFirstChild().getType()!=  Token.FUNCTION;	  return    addition!=    null    &&    addition.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	70	None	replace
255	[BUG]  [BUGGY]  return  addition!=  null?  value  :  addition.cloneStatement();  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value  :  addition.cloneStatement();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value  :  addition.cloneStatement();	  return    addition!=    null?    value    :    addition.clonePosition();    	non-compiled	[CE]  ')'  expected	55	None	replace
256	[BUG]  [BUGGY]  return  addition  ==  null  &&  addition.getType()!=  Token.FUNCTION  ||  addition.getType()  ==  Token.EXPR_RESULT;  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null  &&  addition.getType()!=  Token.FUNCTION  ||  addition.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null  &&  addition.getType()!=  Token.FUNCTION  ||  addition.getType()  ==  Token.EXPR_RESULT;	  return    addition!=    null    &&    addition.getType()    ==    Token.FUNCTION    ||    addition.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  ')'  expected	71	None	replace
257	[BUG]  [BUGGY]  return  addition  ==  null  &&  addition.getType()  ==  Token.FUNCTION  ||  addition.getType()!=  Token.EXPR_RESULT;  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null  &&  addition.getType()  ==  Token.FUNCTION  ||  addition.getType()!=  Token.EXPR_RESULT;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null  &&  addition.getType()  ==  Token.FUNCTION  ||  addition.getType()!=  Token.EXPR_RESULT;	  return    addition!=    null    &&    addition.getType()    ==    Token.FUNCTION    ||    addition.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  ')'  expected	71	None	replace
258	[BUG]  [BUGGY]  n.getGrandparent().replaceChild(n,  addition);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  n.getGrandparent().replaceChild(n,  addition);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.getGrandparent().replaceChild(n,  addition);	  n.getParent().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	28	None	replace
259	[BUG]  [BUGGY]  n.getParent().replaceChild(parent,  addition);  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  n.getParent().replaceChild(parent,  addition);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.getParent().replaceChild(parent,  addition);	  n.getParent().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	28	None	replace
260	[BUG]  [BUGGY]  return  addition!=  null?  null  :  addition.getParent();  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  null  :  addition.getParent();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  null  :  addition.getParent();	  return    addition!=    null?    null    :    addition.getType();    	non-compiled	[CE]  ')'  expected	7	None	replace
261	[BUG]  [BUGGY]  n.getParent().removeChild(value,  addition);  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  n.getParent().removeChild(value,  addition);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.getParent().removeChild(value,  addition);	  n.getParent().removeChild(value);    	non-compiled	[CE]  ')'  expected	26	None	replace
262	[BUG]  [BUGGY]  n.getName().removeChild(value);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  n.getName().removeChild(value);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.getName().removeChild(value);	  n.getParent().removeChild(value);    	non-compiled	[CE]  ')'  expected	26	None	replace
263	[BUG]  [BUGGY]  return  addition!=  null?  value.getType()  :  Token.FUNCTION_EXPRESSION;  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value.getType()  :  Token.FUNCTION_EXPRESSION;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.getType()  :  Token.FUNCTION_EXPRESSION;	  return    addition!=    null?    value.getType()    :    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	35	None	replace
264	[BUG]  [BUGGY]  return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTIONS_PREDICATE;  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTIONS_PREDICATE;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTIONS_PREDICATE;	  return    addition    ==    null    &&    addition.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	13	None	replace
265	[BUG]  [BUGGY]  return  addition  ==  null?  value.getPrevious()  :  addition;  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  value.getPrevious()  :  addition;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value.getPrevious()  :  addition;	  return    addition!=    null?    value.getPrevious()    :    addition;    	non-compiled	[CE]  ')'  expected	49	None	replace
266	[BUG]  [BUGGY]  if(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.FUNCTION)  {  return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION;  }  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  if(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.FUNCTION)  {  return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION;  }  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	if(a.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.FUNCTION)  {  return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION;  }	  if(a.getType()    ==    Token.FUNCTION)    {    return    addition!=    null    &&    addition.getType()    ==    Token.FUNCTION;    }    	non-compiled	[CE]  ')'  expected	12	None	replace
267	[BUG]  [BUGGY]  if(value.getType()  ==  Token.FUNCTION)  {  return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION;  }  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  if(value.getType()  ==  Token.FUNCTION)  {  return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION;  }  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	if(value.getType()  ==  Token.FUNCTION)  {  return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION;  }	  if(a.getType()    ==    Token.FUNCTION)    {    return    addition!=    null    &&    addition.getType()    ==    Token.FUNCTION;    }    	non-compiled	[CE]  ')'  expected	12	None	replace
268	[BUG]  [BUGGY]  n.getFirstChild().removeChild(value);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  n.getFirstChild().removeChild(value);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.getFirstChild().removeChild(value);	  n.getNext().removeChild(value);    	non-compiled	[CE]  ')'  expected	27	None	replace
269	[BUG]  [BUGGY]  n.getNext().removeChild(addition);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  n.getNext().removeChild(addition);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.getNext().removeChild(addition);	  n.getNext().removeChild(value);    	non-compiled	[CE]  ')'  expected	27	None	replace
270	[BUG]  [BUGGY]  n.getPrevious().removeChild(value);  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  n.getPrevious().removeChild(value);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.getPrevious().removeChild(value);	  n.getNext().removeChild(value);    	non-compiled	[CE]  ')'  expected	27	None	replace
271	[BUG]  [BUGGY]  return  addition!=  null? "null "  :  addition.toString();  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null? "null "  :  addition.toString();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null? "null "  :  addition.toString();	  return    addition    ==    null?    null    :    addition.toString();    	non-compiled	[CE]  ')'  expected	75	None	replace
272	[BUG]  [BUGGY]  return  addition  >=  null?  null  :  addition.toString();  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  >=  null?  null  :  addition.toString();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  >=  null?  null  :  addition.toString();	  return    addition    ==    null?    null    :    addition.toString();    	non-compiled	[CE]  ')'  expected	75	None	replace
273	[BUG]  [BUGGY]  return  addition!=  null?  addr.cloneTree()  :  addition;  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  addr.cloneTree()  :  addition;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  addr.cloneTree()  :  addition;	  return    addition!=    null?    value.cloneTree()    :    addition;    	non-compiled	[CE]  ')'  expected	67	None	replace
274	[BUG]  [BUGGY]  return  addition!=  null?  value.cloneNode()  :  addition;  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value.cloneNode()  :  addition;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.cloneNode()  :  addition;	  return    addition!=    null?    value.cloneTree()    :    addition;    	non-compiled	[CE]  ')'  expected	67	None	replace
275	[BUG]  [BUGGY]  return  addition!=  null?  value.clonePrettyPrint()  :  addition;  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value.clonePrettyPrint()  :  addition;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.clonePrettyPrint()  :  addition;	  return    addition!=    null?    value.cloneTree()    :    addition;    	non-compiled	[CE]  ')'  expected	67	None	replace
276	[BUG]  [BUGGY]  return  addition!=  null?  value.getType()  :  Integer.MAX_VALUE  +  1;  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value.getType()  :  Integer.MAX_VALUE  +  1;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.getType()  :  Integer.MAX_VALUE  +  1;	  return    addition!=    null?    value.getType()    :    Integer.MAX_VALUE;    	non-compiled	[CE]  ')'  expected	34	None	replace
277	[BUG]  [BUGGY]  return  addition!=  null?  value  :  addition.clonePath()  +  1;  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value  :  addition.clonePath()  +  1;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value  :  addition.clonePath()  +  1;	  return    addition    ==    null?    value    :    addition.clonePath();    	non-compiled	[CE]  ')'  expected	23	None	replace
278	[BUG]  [BUGGY]  n.getParent().removeChild(addition);  reportCodeChange();  [CE]  ')'  expected  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  n.getParent().removeChild(addition);  reportCodeChange();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.getParent().removeChild(addition);  reportCodeChange();	  n.getParent().removeChild(value);    reportCodeChange();    	non-compiled	[CE]  ')'  expected	30	None	replace
279	[BUG]  [BUGGY]  n.getParent().removeChild(value,  addition);  reportCodeChange();  [CE]  ')'  expected  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  n.getParent().removeChild(value,  addition);  reportCodeChange();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.getParent().removeChild(value,  addition);  reportCodeChange();	  n.getParent().removeChild(value);    reportCodeChange();    	non-compiled	[CE]  ')'  expected	30	None	replace
280	[BUG]  [BUGGY]  return  addition  [Delete]  null?  null  :  addition.cloneTree();  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  [Delete]  null?  null  :  addition.cloneTree();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  [Delete]  null?  null  :  addition.cloneTree();	  return    addition    <    null?    null    :    addition.cloneTree();    	non-compiled	[CE]  ';'  expected	25	None	replace
281	[BUG]  [BUGGY]  return  addition!=  null?  value  :  addition.cloneFunctionDeclaration();  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value  :  addition.cloneFunctionDeclaration();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value  :  addition.cloneFunctionDeclaration();	  return    addition    ==    null?    value    :    addition.cloneNode();    	non-compiled	[CE]  ')'  expected	63	None	replace
282	[BUG]  [BUGGY]  n.replaceChild(callTarget,  addition);  [CE]  ')'  expected  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  n.replaceChild(callTarget,  addition);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.replaceChild(callTarget,  addition);	  n.removeChild(value);    	non-compiled	[CE]  ')'  expected	31	None	replace
283	[BUG]  [BUGGY]  n.removeChild(addive);  [CE]  ')'  expected  [FE]                                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  n.removeChild(addive);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.removeChild(addive);	  n.removeChild(value);    	non-compiled	[CE]  ')'  expected	31	None	replace
284	[BUG]  [BUGGY]  return  addition  ==  null?  null  :  addition.cloneTree(value);  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  null  :  addition.cloneTree(value);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  null  :  addition.cloneTree(value);	  return    addition.cloneTree(value);    	non-compiled	[CE]  ')'  expected	48	None	replace
285	[BUG]  [BUGGY]  return  addition!=  null  &&  addition.cloneTree(value);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null  &&  addition.cloneTree(value);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null  &&  addition.cloneTree(value);	  return    addition.cloneTree(value);    	non-compiled	[CE]  ')'  expected	48	None	replace
286	[BUG]  [BUGGY]  return  addition!=  null?  value.cloneTree()  :  addition.clone();  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value.cloneTree()  :  addition.clone();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.cloneTree()  :  addition.clone();	  return    addition.clone();    	non-compiled	[CE]  ')'  expected	2	None	replace
287	[BUG]  [BUGGY]  return  addition!=  null?  add.clone()  :  value.clone();  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  add.clone()  :  value.clone();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  add.clone()  :  value.clone();	  return    addition.clone();    	non-compiled	[CE]  ')'  expected	2	None	replace
288	[BUG]  [BUGGY]  return  addition  ==  null?  value  :  addition.clonePath()  +  1;  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  value  :  addition.clonePath()  +  1;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value  :  addition.clonePath()  +  1;	  return    addition    ==    null?    value    :    addition.clonePath();    	non-compiled	[CE]  ')'  expected	23	None	replace
289	[BUG]  [BUGGY]  return  addition!=  null  &&  addition.getFirstChild().getType()  ==  Token.FUNCTION  ||  addition.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null  &&  addition.getFirstChild().getType()  ==  Token.FUNCTION  ||  addition.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null  &&  addition.getFirstChild().getType()  ==  Token.FUNCTION  ||  addition.getFirstChild().getType()  ==  Token.FUNCTION;	  return    addition!=    null    &&    addition.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	70	None	replace
290	[BUG]  [BUGGY]  return  addition!=  null  &&  addition.getFirstChild().getString().endsWith( "__ ")||  addition.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null  &&  addition.getFirstChild().getString().endsWith( "__ ")||  addition.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null  &&  addition.getFirstChild().getString().endsWith( "__ ")||  addition.getFirstChild().getType()  ==  Token.FUNCTION;	  return    addition!=    null    &&    addition.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	70	None	replace
291	[BUG]  [BUGGY]  return  addition!=  null  &&  addition.getFirstChild().getString().endsWith( "_ ")||  addition.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null  &&  addition.getFirstChild().getString().endsWith( "_ ")||  addition.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null  &&  addition.getFirstChild().getString().endsWith( "_ ")||  addition.getFirstChild().getType()  ==  Token.FUNCTION;	  return    addition!=    null    &&    addition.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	70	None	replace
292	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  value);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  n.getParent().replaceChild(n,  value);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.getParent().replaceChild(n,  value);	  n.getParent().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	28	None	replace
293	[BUG]  [BUGGY]  n.getNext().replaceChild(value,  addition);  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  n.getNext().replaceChild(value,  addition);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.getNext().replaceChild(value,  addition);	  n.getParent().replaceChild(n,    addition);    	non-compiled	[CE]  ')'  expected	28	None	replace
294	[BUG]  [BUGGY]  return  addition!=  null?  add.cloneTree(value):  addition.cloneTree(value);  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  add.cloneTree(value):  addition.cloneTree(value);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  add.cloneTree(value):  addition.cloneTree(value);	  return    addition.cloneTree(value);    	non-compiled	[CE]  ')'  expected	48	None	replace
295	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callTarget,  addition);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  callTarget,  addition);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	NodeTraversal.traverse(compiler,  callTarget,  addition);	  NodeTraversal.traverse(compiler,    addition,    n);    	non-compiled	[CE]  ')'  expected	47	None	replace
296	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callTarget,  n);  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  callTarget,  n);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	NodeTraversal.traverse(compiler,  callTarget,  n);	  NodeTraversal.traverse(compiler,    addition,    n);    	non-compiled	[CE]  ')'  expected	47	None	replace
297	[BUG]  [BUGGY]  if(addition  ==  null  ||  addition.getType()  ==  Token.FUNCTION)  {  return  addition;  }  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  if(addition  ==  null  ||  addition.getType()  ==  Token.FUNCTION)  {  return  addition;  }  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	if(addition  ==  null  ||  addition.getType()  ==  Token.FUNCTION)  {  return  addition;  }	  return    addition    ==    null    &&    addition.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	13	None	replace
298	[BUG]  [BUGGY]  return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION  ||  addition.getFirstChild()  ==  Token.VAR;  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION  ||  addition.getFirstChild()  ==  Token.VAR;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION  ||  addition.getFirstChild()  ==  Token.VAR;	  return    addition!=    null    &&    addition.getType()    ==    Token.FUNCTION    ||    addition.getType()    ==    Token.VAR;    	non-compiled	[CE]  ')'  expected	72	None	replace
299	[BUG]  [BUGGY]  return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION  ||  addition.getChildCount()  ==  2;  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION  ||  addition.getChildCount()  ==  2;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION  ||  addition.getChildCount()  ==  2;	  return    addition!=    null    &&    addition.getType()    ==    Token.FUNCTION    ||    addition.getType()    ==    Token.VAR;    	non-compiled	[CE]  ')'  expected	72	None	replace
300	[BUG]  [BUGGY]  n.getLastChild().removeChild(value);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  n.getLastChild().removeChild(value);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.getLastChild().removeChild(value);	  n.getNext().removeChild(value);    	non-compiled	[CE]  ')'  expected	27	None	replace
301	[BUG]  [BUGGY]  return  addition!=  null?  value.getString()  :  Token.FUNCTION;  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value.getString()  :  Token.FUNCTION;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.getString()  :  Token.FUNCTION;	  return    addition!=    null?    value.getType()    :    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	35	None	replace
302	[BUG]  [BUGGY]  return  addition!=  null?  value.toString()  :  Token.FUNCTION;  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value.toString()  :  Token.FUNCTION;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.toString()  :  Token.FUNCTION;	  return    addition!=    null?    value.getType()    :    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	35	None	replace
303	[BUG]  [BUGGY]  return  addition!=  null?  null  :  addition.getNext();  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  null  :  addition.getNext();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  null  :  addition.getNext();	  return    addition!=    null?    null    :    addition.getType();    	non-compiled	[CE]  ')'  expected	7	None	replace
304	[BUG]  [BUGGY]  n.getNext().replaceChild(value,  addition);  reportCodeChange();  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  n.getNext().replaceChild(value,  addition);  reportCodeChange();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.getNext().replaceChild(value,  addition);  reportCodeChange();	  n.getParent().replaceChild(n,    addition);    reportCodeChange();    	non-compiled	[CE]  ')'  expected	29	None	replace
305	[BUG]  [BUGGY]  n.getParent().replaceChild(parent,  addition);  reportCodeChange();  [CE]  ')'  expected  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  n.getParent().replaceChild(parent,  addition);  reportCodeChange();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.getParent().replaceChild(parent,  addition);  reportCodeChange();	  n.getParent().replaceChild(n,    addition);    reportCodeChange();    	non-compiled	[CE]  ')'  expected	29	None	replace
306	[BUG]  [BUGGY]  return  addition  ==  null  ||  addition.toString().equals( " "))?  null  :  addition.toString();  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null  ||  addition.toString().equals( " "))?  null  :  addition.toString();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null  ||  addition.toString().equals( " "))?  null  :  addition.toString();	  return    addition    ==    null?    null    :    addition.toString();    	non-compiled	[CE]  	75	None	replace
307	[BUG]  [BUGGY]  if(addition  ==  null)return  null;  if(addition.getType()  ==  Token.FUNCTION)  {  return  addition;  }  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  if(addition  ==  null)return  null;  if(addition.getType()  ==  Token.FUNCTION)  {  return  addition;  }  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	if(addition  ==  null)return  null;  if(addition.getType()  ==  Token.FUNCTION)  {  return  addition;  }	  return    addition    ==    null?    null    :    addition.toString();    	non-compiled	[CE]  ')'  expected	75	None	replace
308	[BUG]  [BUGGY]  return  addition  ==  null?  value.getType()  :  Token.EXPR_RESULT  :  Integer.MAX_VALUE;  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  value.getType()  :  Token.EXPR_RESULT  :  Integer.MAX_VALUE;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value.getType()  :  Token.EXPR_RESULT  :  Integer.MAX_VALUE;	  return    addition    ==    null?    value.getType()    :    Token.EXPR_RESULT;    	non-compiled	[CE]  ';'  expected	77	None	replace
309	[BUG]  [BUGGY]  return  addition!=  null?  value.getType()  :  Integer.MAX_VALUE  :  1;  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value.getType()  :  Integer.MAX_VALUE  :  1;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.getType()  :  Integer.MAX_VALUE  :  1;	  return    addition!=    null?    value.getType()    :    Integer.MAX_VALUE;    	non-compiled	[CE]  ';'  expected	34	None	replace
310	[BUG]  [BUGGY]  return  addition!=  null?  value  :  addition.detachFromParent();  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value  :  addition.detachFromParent();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value  :  addition.detachFromParent();	  return    addition!=    null?    value    :    addition.removeFirstChild();    	non-compiled	[CE]  ')'  expected	9	None	replace
311	[BUG]  [BUGGY]  return  addition!=  null?  null  :  addition.clonePrettyPrinter();  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  null  :  addition.clonePrettyPrinter();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  null  :  addition.clonePrettyPrinter();	  return    addition!=    null?    null    :    addition.cloneTree();    	non-compiled	[CE]  ')'  expected	1	None	replace
312	[BUG]  [BUGGY]  return  addition!=  null?  null  :  addition.clonePrettyPrint();  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  null  :  addition.clonePrettyPrint();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  null  :  addition.clonePrettyPrint();	  return    addition!=    null?    null    :    addition.cloneTree();    	non-compiled	[CE]  ')'  expected	1	None	replace
313	[BUG]  [BUGGY]  return  addition!=  null?  value.cloneTree()  :  addition.cloneTree(),  value);  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value.cloneTree()  :  addition.cloneTree(),  value);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.cloneTree()  :  addition.cloneTree(),  value);	  return    addition.cloneTree(),    value);    	non-compiled	[CE]  ';'  expected	4	None	replace
314	[BUG]  [BUGGY]  return  addition  ==  null  &&  addition.getType()  >=  Token.FUNCTION;  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null  &&  addition.getType()  >=  Token.FUNCTION;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null  &&  addition.getType()  >=  Token.FUNCTION;	  return    addition!=    null    &&    addition.getType()    >=    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	16	None	replace
315	[BUG]  [BUGGY]  return  addition!=  null  &&  addition.getType()  >>  Token.FUNCTION;  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null  &&  addition.getType()  >>  Token.FUNCTION;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null  &&  addition.getType()  >>  Token.FUNCTION;	  return    addition!=    null    &&    addition.getType()    >=    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	16	None	replace
316	[BUG]  [BUGGY]  return  addition!=  null?  value  :  addition.booleanValue();  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value  :  addition.booleanValue();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value  :  addition.booleanValue();	  return    addition!=    null?    value    :    addition.intValue();    	non-compiled	[CE]  ')'  expected	59	None	replace
317	[BUG]  [BUGGY]  return  addition!=  null?  value  :  addition.intValue()  +  1;  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value  :  addition.intValue()  +  1;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value  :  addition.intValue()  +  1;	  return    addition!=    null?    value    :    addition.intValue();    	non-compiled	[CE]  ')'  expected	59	None	replace
318	[BUG]  [BUGGY]  return  addition  >>  null?  value  :  addition.cloneTree();  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  >>  null?  value  :  addition.cloneTree();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  >>  null?  value  :  addition.cloneTree();	  return    addition    <    null?    value    :    addition.cloneTree();    	non-compiled	[CE]  ')'  expected	37	None	replace
319	[BUG]  [BUGGY]  return  addition!=  null?  addition.cloneTree()  :  n;  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  addition.cloneTree()  :  n;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  addition.cloneTree()  :  n;	  return    addition!=    null?    add.cloneTree()    :    null;    	non-compiled	[CE]  ')'  expected	68	None	replace
320	[BUG]  [BUGGY]  return  addition!=  null?  addition.cloneTree()  :  this;  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  addition.cloneTree()  :  this;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  addition.cloneTree()  :  this;	  return    addition!=    null?    add.cloneTree()    :    null;    	non-compiled	[CE]  ')'  expected	68	None	replace
321	[BUG]  [BUGGY]  return  addition!=  null?  value.removeFirstChild()  :  addition;  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value.removeFirstChild()  :  addition;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.removeFirstChild()  :  addition;	  return    addition!=    null?    value.getFirstChild()    :    addition;    	non-compiled	[CE]  ')'  expected	44	None	replace
322	[BUG]  [BUGGY]  return  addition!=  null?  addr.getNext()  :  value;  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  addr.getNext()  :  value;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  addr.getNext()  :  value;	  return    addition!=    null?    addr.getNext()    :    addition;    	non-compiled	[CE]  ')'  expected	50	None	replace
323	[BUG]  [BUGGY]  return  addition!=  null?  addr.getNext()  :  next;  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  addr.getNext()  :  next;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  addr.getNext()  :  next;	  return    addition!=    null?    addr.getNext()    :    addition;    	non-compiled	[CE]  ')'  expected	50	None	replace
324	[BUG]  [BUGGY]  return  addition!=  null?  addr.getNext()  :  n;  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  addr.getNext()  :  n;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  addr.getNext()  :  n;	  return    addition!=    null?    addr.getNext()    :    addition;    	non-compiled	[CE]  ')'  expected	50	None	replace
325	[BUG]  [BUGGY]  return  addition!=  null?  value  :  addition.clonePosition()  +  1;  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value  :  addition.clonePosition()  +  1;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value  :  addition.clonePosition()  +  1;	  return    addition!=    null?    value    :    addition.clonePosition();    	non-compiled	[CE]  ')'  expected	55	None	replace
326	[BUG]  [BUGGY]  n.detachFromParent();  [CE]  ')'  expected  [FE]                                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  n.detachFromParent();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.detachFromParent();	  n.removeChild(addition);    	non-compiled	[CE]  ')'  expected	32	None	replace
327	[BUG]  [BUGGY]  return  addition!=  null?  value.toString()  :  addition;  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value.toString()  :  addition;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.toString()  :  addition;	  return    addition!=    null?    value.getParent()    :    addition;    	non-compiled	[CE]  ')'  expected	36	None	replace
328	[BUG]  [BUGGY]  return  addition!=  null?  value.cloneTree()  :  addition.cloneFunction();  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value.cloneTree()  :  addition.cloneFunction();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.cloneTree()  :  addition.cloneFunction();	  return    addition.cloneFunction();    	non-compiled	[CE]  ')'  expected	6	None	replace
329	[BUG]  [BUGGY]  return  addition!=  null?  value.cloneFunction()  :  addition.cloneFunction();  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value.cloneFunction()  :  addition.cloneFunction();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.cloneFunction()  :  addition.cloneFunction();	  return    addition.cloneFunction();    	non-compiled	[CE]  ')'  expected	6	None	replace
330	[BUG]  [BUGGY]  return  addition!=  null?  value.cloneTarget()  :  addition.cloneFunction();  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value.cloneTarget()  :  addition.cloneFunction();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.cloneTarget()  :  addition.cloneFunction();	  return    addition.cloneFunction();    	non-compiled	[CE]  ')'  expected	6	None	replace
331	[BUG]  [BUGGY]  if(a.getType()  ==  Token.FUNCTION  ||  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION;  }  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  if(a.getType()  ==  Token.FUNCTION  ||  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION;  }  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	if(a.getType()  ==  Token.FUNCTION  ||  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION;  }	  if(a.getType()    ==    Token.FUNCTION)    {    return    addition!=    null    &&    addition.getType()    ==    Token.FUNCTION;    }    	non-compiled	[CE]  ')'  expected	12	None	replace
332	[BUG]  [BUGGY]  if(a.getType()  ==  Token.VAR)  {  return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION;  }  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  if(a.getType()  ==  Token.VAR)  {  return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION;  }  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	if(a.getType()  ==  Token.VAR)  {  return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION;  }	  if(a.getType()    ==    Token.FUNCTION)    {    return    addition!=    null    &&    addition.getType()    ==    Token.FUNCTION;    }    	non-compiled	[CE]  ')'  expected	12	None	replace
333	[BUG]  [BUGGY]  if(a.getType()  ==  Token.FUNCTION  ||  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  if(a.getType()  ==  Token.FUNCTION  ||  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	if(a.getType()  ==  Token.FUNCTION  ||  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION);	  if(a.getType()    ==    Token.FUNCTION)    {    return    addition!=    null    &&    addition.getType()    ==    Token.FUNCTION;    }    	non-compiled	[CE]  ')'  expected	12	None	replace
334	[BUG]  [BUGGY]  return  addition  ==  null?  null  :  addition.clonePrettyPrinter();  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  null  :  addition.clonePrettyPrinter();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  null  :  addition.clonePrettyPrinter();	  return    addition    ==    null?    null    :    addition.cloneTree();    	non-compiled	[CE]  ')'  expected	3	None	replace
335	[BUG]  [BUGGY]  return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION  ||  addition.getFirstChild()  ==  Token.EXPR_RESULT;  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION  ||  addition.getFirstChild()  ==  Token.EXPR_RESULT;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION  ||  addition.getFirstChild()  ==  Token.EXPR_RESULT;	  return    addition!=    null    &&    addition.getType()    ==    Token.FUNCTION    ||    addition.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  ')'  expected	71	None	replace
336	[BUG]  [BUGGY]  return  addition!=  null?  value.toString()  :  addition.cloneTree();  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value.toString()  :  addition.cloneTree();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.toString()  :  addition.cloneTree();	  return    addition!=    null?    value.cloneTree()    :    addition.cloneTree();    	non-compiled	[CE]  ')'  expected	65	None	replace
337	[BUG]  [BUGGY]  return  addition!=  null?  value.cloneTree()  :  addition.cloneTree(n);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value.cloneTree()  :  addition.cloneTree(n);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.cloneTree()  :  addition.cloneTree(n);	  return    addition!=    null?    value.cloneTree()    :    addition.cloneTree();    	non-compiled	[CE]  ')'  expected	65	None	replace
338	[BUG]  [BUGGY]  return  addition  ==  null?  n  :  addition;  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  n  :  addition;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  n  :  addition;	  return    addition!=    null?    n    :    addition;    	non-compiled	[CE]  ')'  expected	42	None	replace
339	[BUG]  [BUGGY]  n  =  addition!=  null?  value  :  addition;  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  n  =  addition!=  null?  value  :  addition;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n  =  addition!=  null?  value  :  addition;	  return    addition!=    null?    n    :    addition;    	non-compiled	[CE]  ')'  expected	42	None	replace
340	[BUG]  [BUGGY]  return  addition!=  null  &&  addition.equals(value);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null  &&  addition.equals(value);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null  &&  addition.equals(value);	  return    addition!=    null?    n    :    addition;    	non-compiled	[CE]  ')'  expected	42	None	replace
341	[BUG]  [BUGGY]  return  addition!=  null?  add(value):  addition;  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  add(value):  addition;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  add(value):  addition;	  return    addition!=    null?    n    :    addition;    	non-compiled	[CE]  ')'  expected	42	None	replace
342	[BUG]  [BUGGY]  return  addition  ==  null?  null  :  addition.getFirst();  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  null  :  addition.getFirst();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  null  :  addition.getFirst();	  return    addition    ==    null?    null    :    addition.removeFirst();    	non-compiled	[CE]  ')'  expected	73	None	replace
343	[BUG]  [BUGGY]  return  addition  ==  null?  value.getString()  :  Token.FUNCTION;  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  value.getString()  :  Token.FUNCTION;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value.getString()  :  Token.FUNCTION;	  return    addition    ==    null?    value.getType()    :    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	43	None	replace
344	[BUG]  [BUGGY]  return  addition  >=  null?  value.getType()  :  Token.FUNCTION;  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  >=  null?  value.getType()  :  Token.FUNCTION;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  >=  null?  value.getType()  :  Token.FUNCTION;	  return    addition    ==    null?    value.getType()    :    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	43	None	replace
345	[BUG]  [BUGGY]  return  addition  >>  null  &&  addition.getType()  ==  Token.FUNCTION;  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  >>  null  &&  addition.getType()  ==  Token.FUNCTION;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  >>  null  &&  addition.getType()  ==  Token.FUNCTION;	  return    addition!=    null    ||    addition.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	11	None	replace
346	[BUG]  [BUGGY]  return  addition!=  null?  new  FoldArrayAction(addition):  addition.cloneTree();  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  new  FoldArrayAction(addition):  addition.cloneTree();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  new  FoldArrayAction(addition):  addition.cloneTree();	  return    addition!=    null?    new    FoldArrayAction(value):    addition.cloneTree();    	non-compiled	[CE]  ')'  expected	66	None	replace
347	[BUG]  [BUGGY]  return  addition!=  null?  new  FoldArrayAction(value):  addition.cloneBlock();  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  new  FoldArrayAction(value):  addition.cloneBlock();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  new  FoldArrayAction(value):  addition.cloneBlock();	  return    addition!=    null?    new    FoldArrayAction(value):    addition.cloneTree();    	non-compiled	[CE]  ')'  expected	66	None	replace
348	[BUG]  [BUGGY]  return  addition  ==  null  ||  addition.getType()  ==  Token.FUNCTION  &&  value.equals(Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null  ||  addition.getType()  ==  Token.FUNCTION  &&  value.equals(Token.EXPR_RESULT);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null  ||  addition.getType()  ==  Token.FUNCTION  &&  value.equals(Token.EXPR_RESULT);	  return    addition    ==    null    ||    addition.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	15	None	replace
349	[BUG]  [BUGGY]  return  addition!=  null?  value.cloneTree()  :  addition.cloneTree(),  value;  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value.cloneTree()  :  addition.cloneTree(),  value;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.cloneTree()  :  addition.cloneTree(),  value;	  return    addition.cloneTree(),    value;    	non-compiled	[CE]  ';'  expected	5	None	replace
350	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this.node,  new  FoldArrayAction());  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  this.node,  new  FoldArrayAction());  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	NodeTraversal.traverse(compiler,  this.node,  new  FoldArrayAction());	  NodeTraversal.traverse(compiler,    addition,    new    FoldArrayAction());    	non-compiled	[CE]  ')'  expected	45	None	replace
351	[BUG]  [BUGGY]  return  addition  ==  null?  value.getString()  :  Integer.toHexString(Integer.toHexString(value));  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  value.getString()  :  Integer.toHexString(Integer.toHexString(value));  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value.getString()  :  Integer.toHexString(Integer.toHexString(value));	  return    addition    ==    null?    value.getString()    :    addition;    	non-compiled	[CE]  ')'  expected	19	None	replace
352	[BUG]  [BUGGY]  return  addition  ==  null?  value.getString()  : "null ";  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  value.getString()  : "null ";  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value.getString()  : "null ";	  return    addition    ==    null?    value.getString()    :    addition;    	non-compiled	[CE]  ')'  expected	19	None	replace
353	[BUG]  [BUGGY]  return  addition!=  null?  value  :  addition.clonePsitive();  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value  :  addition.clonePsitive();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value  :  addition.clonePsitive();	  return    addition!=    null?    value    :    addition.cloneTree();    	non-compiled	[CE]  ')'  expected	8	None	replace
354	[BUG]  [BUGGY]  n.getGrandparent().removeChild(value);  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  n.getGrandparent().removeChild(value);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.getGrandparent().removeChild(value);	  n.getParent().removeChild(value);    	non-compiled	[CE]  ')'  expected	26	None	replace
355	[BUG]  [BUGGY]  return  addition  ==  null?  value  :  addition.clonePosition()  +  1;  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  value  :  addition.clonePosition()  +  1;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value  :  addition.clonePosition()  +  1;	  return    addition    ==    null?    value    :    addition.clonePosition();    	non-compiled	[CE]  ')'  expected	21	None	replace
356	[BUG]  [BUGGY]  return  addition  ==  null?  value.getType()  :  Integer.MAX_VALUE  +  1;  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  value.getType()  :  Integer.MAX_VALUE  +  1;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value.getType()  :  Integer.MAX_VALUE  +  1;	  return    addition    ==    null?    value.getType()    :    Integer.MAX_VALUE;    	non-compiled	[CE]  ')'  expected	18	None	replace
357	[BUG]  [BUGGY]  return  addition!=  null?  null  :  addition.replaceChild(n,  value);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  null  :  addition.replaceChild(n,  value);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  null  :  addition.replaceChild(n,  value);	  return    addition!=    null?    null    :    addition.removeFirstChild();    	non-compiled	[CE]  ')'  expected	51	None	replace
358	[BUG]  [BUGGY]  n.removeChild(value).removeChild(value);  [CE]  ')'  expected  [FE]                                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  n.removeChild(value).removeChild(value);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.removeChild(value).removeChild(value);	  n.removeChild(value);    	non-compiled	[CE]  ')'  expected	31	None	replace
359	[BUG]  [BUGGY]  n.removeChild(value).replaceChild(n,  addition);  [CE]  ')'  expected  [FE]                                    junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  n.removeChild(value).replaceChild(n,  addition);  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.removeChild(value).replaceChild(n,  addition);	  n.removeChild(value);    	non-compiled	[CE]  ')'  expected	31	None	replace
360	[BUG]  [BUGGY]  n.replaceChild(value,  addition);  reportCodeChange();  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  n.replaceChild(value,  addition);  reportCodeChange();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.replaceChild(value,  addition);  reportCodeChange();	  n.removeChild(value);    reportCodeChange();    	non-compiled	[CE]  ')'  expected	56	None	replace
361	[BUG]  [BUGGY]  return  addition!=  null?  null  :  addition.getFirst();  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  null  :  addition.getFirst();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  null  :  addition.getFirst();	  return    addition!=    null?    null    :    addition.removeFirst();    	non-compiled	[CE]  ')'  expected	64	None	replace
362	[BUG]  [BUGGY]  return  addition!=  null?  value.getString()  :  Integer.toHexString(Integer.toHexString(value));  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value.getString()  :  Integer.toHexString(Integer.toHexString(value));  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.getString()  :  Integer.toHexString(Integer.toHexString(value));	  return    addition!=    null?    value.getString()    :    addition;    	non-compiled	[CE]  ')'  expected	58	None	replace
363	[BUG]  [BUGGY]  return  addition!=  null?  value.getString()  :  Integer.toHexString(Integer.toHexString(int));  [CE]  '.class'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value.getString()  :  Integer.toHexString(Integer.toHexString(int));  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.getString()  :  Integer.toHexString(Integer.toHexString(int));	  return    addition!=    null?    value.getString()    :    addition;    	non-compiled	[CE]  '.class'  expected	58	None	replace
364	[BUG]  [BUGGY]  return  addition!=  null?  value.getString()  : "null ";  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value.getString()  : "null ";  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.getString()  : "null ";	  return    addition!=    null?    value.getString()    :    addition;    	non-compiled	[CE]  ')'  expected	58	None	replace
365	[BUG]  [BUGGY]  return  addition  ==  null?  value  :  addition.clonePsitiveNode();  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition  ==  null?  value  :  addition.clonePsitiveNode();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value  :  addition.clonePsitiveNode();	  return    addition    ==    null?    value    :    addition.cloneNode();    	non-compiled	[CE]  ')'  expected	63	None	replace
366	[BUG]  [BUGGY]  return  addition!=  null?  value  :  addition.toString()  +  1;  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value  :  addition.toString()  +  1;  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value  :  addition.toString()  +  1;	  return    addition!=    null?    value    :    addition.toString();    	non-compiled	[CE]  ')'  expected	61	None	replace
367	[BUG]  [BUGGY]  return  addition!=  null?  value  :  addition.cloneFallThrough();  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value  :  addition.cloneFallThrough();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value  :  addition.cloneFallThrough();	  return    addition    ==    null?    value    :    addition.clonePrettyPrinter();    	non-compiled	[CE]  ')'  expected	62	None	replace
368	[BUG]  [BUGGY]  return  addition!=  null?  value  :  addition.cloneFolder();  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(     "hello     "      [CONTEXT]          Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(     "     ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();      [BUGGY]  return  addition!=  null?  value  :  addition.cloneFolder();  [BUGGY]      }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value  :  addition.cloneFolder();	  return    addition    ==    null?    value    :    addition.clonePrettyPrinter();    	non-compiled	[CE]  ')'  expected	62	None	replace
