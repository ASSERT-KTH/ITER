bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  addition!=  null?  null  :  addition.cloneTree();  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition!=  null?  null  :  addition.cloneTree();  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  null  :  addition.cloneTree();	  return    addition.cloneTree();    	non-compiled	[CE]  ')'  expected	1	None	replace
2	[BUG]  [BUGGY]  return  addition.clone();  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition.clone();  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition.clone();	  return    addition.cloneTree();    	non-compiled	[CE]  ')'  expected	1	None	replace
3	[BUG]  [BUGGY]  return  addition  ==  null?  null  :  addition.cloneTree();  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition  ==  null?  null  :  addition.cloneTree();  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  null  :  addition.cloneTree();	  return    addition.cloneTree();    	non-compiled	[CE]  ')'  expected	1	None	replace
4	[BUG]  [BUGGY]  return  addition.cloneTree(),  value);  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition.cloneTree(),  value);  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition.cloneTree(),  value);	  return    addition.cloneTree();    	non-compiled	[CE]  ';'  expected	1	None	replace
5	[BUG]  [BUGGY]  return  addition.cloneTree(),  value;  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition.cloneTree(),  value;  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition.cloneTree(),  value;	  return    addition.cloneTree();    	non-compiled	[CE]  ';'  expected	1	None	replace
6	[BUG]  [BUGGY]  return  addition.cloneFunction();  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition.cloneFunction();  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition.cloneFunction();	  return    addition.cloneTree();    	non-compiled	[CE]  ')'  expected	1	None	replace
7	[BUG]  [BUGGY]  return  addition!=  null?  null  :  addition.getType();  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition!=  null?  null  :  addition.getType();  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  null  :  addition.getType();	  return    addition!=    null?    null    :    addition;    	non-compiled	[CE]  ')'  expected	2	None	replace
8	[BUG]  [BUGGY]  return  addition!=  null?  value  :  addition.cloneTree();  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition!=  null?  value  :  addition.cloneTree();  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value  :  addition.cloneTree();	  return    addition!=    null?    value    :    addition;    	non-compiled	[CE]  ')'  expected	5	None	replace
9	[BUG]  [BUGGY]  return  addition!=  null?  value  :  addition.removeFirstChild();  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition!=  null?  value  :  addition.removeFirstChild();  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value  :  addition.removeFirstChild();	  return    addition!=    null?    value    :    addition;    	non-compiled	[CE]  ')'  expected	5	None	replace
10	[BUG]  [BUGGY]  return  addition!=  null?  value  :  addition.getNext();  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition!=  null?  value  :  addition.getNext();  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value  :  addition.getNext();	  return    addition!=    null?    value    :    addition;    	non-compiled	[CE]  ')'  expected	5	None	replace
11	[BUG]  [BUGGY]  return  addition!=  null  ||  addition.getType()  ==  Token.FUNCTION;  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition!=  null  ||  addition.getType()  ==  Token.FUNCTION;  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null  ||  addition.getType()  ==  Token.FUNCTION;	  return    addition!=    null    &&    addition.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	12	None	replace
12	[BUG]  [BUGGY]  if(a.getType()  ==  Token.FUNCTION)  {  return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION;  }  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  if(a.getType()  ==  Token.FUNCTION)  {  return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION;  }  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	if(a.getType()  ==  Token.FUNCTION)  {  return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION;  }	  return    addition!=    null    &&    addition.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	12	None	replace
13	[BUG]  [BUGGY]  return  addition  ==  null  &&  addition.getType()  ==  Token.FUNCTION;  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition  ==  null  &&  addition.getType()  ==  Token.FUNCTION;  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null  &&  addition.getType()  ==  Token.FUNCTION;	  return    addition!=    null    &&    addition.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	12	None	replace
14	[BUG]  [BUGGY]  return  addition!=  null?  null  :  addition.getType()  ==  Token.FUNCTION;  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition!=  null?  null  :  addition.getType()  ==  Token.FUNCTION;  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  null  :  addition.getType()  ==  Token.FUNCTION;	  return    addition!=    null    &&    addition.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	12	None	replace
15	[BUG]  [BUGGY]  return  addition  ==  null  ||  addition.getType()  ==  Token.FUNCTION;  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition  ==  null  ||  addition.getType()  ==  Token.FUNCTION;  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null  ||  addition.getType()  ==  Token.FUNCTION;	  return    addition!=    null    &&    addition.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	12	None	replace
16	[BUG]  [BUGGY]  return  addition!=  null  &&  addition.getType()  >=  Token.FUNCTION;  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition!=  null  &&  addition.getType()  >=  Token.FUNCTION;  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null  &&  addition.getType()  >=  Token.FUNCTION;	  return    addition!=    null    &&    addition.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	12	None	replace
17	[BUG]  [BUGGY]  return  addition  ==  null?  value.getLastChild()  :  addition;  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition  ==  null?  value.getLastChild()  :  addition;  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value.getLastChild()  :  addition;	  return    addition    ==    null?    value.getNext()    :    addition;    	non-compiled	[CE]  ')'  expected	10	None	replace
18	[BUG]  [BUGGY]  return  addition  ==  null?  value.getType()  :  Integer.MAX_VALUE;  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition  ==  null?  value.getType()  :  Integer.MAX_VALUE;  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value.getType()  :  Integer.MAX_VALUE;	  return    addition    ==    null?    value.getNext()    :    addition;    	non-compiled	[CE]  ')'  expected	10	None	replace
19	[BUG]  [BUGGY]  return  addition  ==  null?  value.getString()  :  addition;  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition  ==  null?  value.getString()  :  addition;  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value.getString()  :  addition;	  return    addition    ==    null?    value.getNext()    :    addition;    	non-compiled	[CE]  ')'  expected	10	None	replace
20	[BUG]  [BUGGY]  return  addition  ==  null?  value  :  addition.removeFirstChild();  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition  ==  null?  value  :  addition.removeFirstChild();  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value  :  addition.removeFirstChild();	  return    addition    ==    null?    value    :    addition;    	non-compiled	[CE]  ')'  expected	6	None	replace
21	[BUG]  [BUGGY]  return  addition  ==  null?  value  :  addition.clonePosition();  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition  ==  null?  value  :  addition.clonePosition();  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value  :  addition.clonePosition();	  return    addition    ==    null?    value    :    addition.cloneTree();    	non-compiled	[CE]  ')'  expected	11	None	replace
22	[BUG]  [BUGGY]  return  addition  ==  null?  value  :  addition.clone();  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition  ==  null?  value  :  addition.clone();  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value  :  addition.clone();	  return    addition    ==    null?    value    :    addition.cloneTree();    	non-compiled	[CE]  ')'  expected	11	None	replace
23	[BUG]  [BUGGY]  return  addition  ==  null?  value  :  addition.clonePath();  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition  ==  null?  value  :  addition.clonePath();  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value  :  addition.clonePath();	  return    addition    ==    null?    value    :    addition.cloneTree();    	non-compiled	[CE]  ')'  expected	11	None	replace
24	[BUG]  [BUGGY]  return  addition  >=  null?  null  :  addition;  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition  >=  null?  null  :  addition;  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  >=  null?  null  :  addition;	  return    addition    <    null?    null    :    addition;    	non-compiled	[CE]  ')'  expected	4	None	replace
25	[BUG]  [BUGGY]  return  addition  <  null?  null  :  addition.cloneTree();  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition  <  null?  null  :  addition.cloneTree();  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  <  null?  null  :  addition.cloneTree();	  return    addition    <    null?    null    :    addition;    	non-compiled	[CE]  ')'  expected	4	None	replace
26	[BUG]  [BUGGY]  n.getParent().removeChild(value);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  n.getParent().removeChild(value);  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.getParent().removeChild(value);	      	non-compiled	[CE]  ')'  expected	7	None	replace
27	[BUG]  [BUGGY]  n.getNext().removeChild(value);  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  n.getNext().removeChild(value);  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.getNext().removeChild(value);	      	non-compiled	[CE]  ')'  expected	7	None	replace
28	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  addition);  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  n.getParent().replaceChild(n,  addition);  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.getParent().replaceChild(n,  addition);	      	non-compiled	[CE]  ')'  expected	7	None	replace
29	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  addition);  reportCodeChange();  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  n.getParent().replaceChild(n,  addition);  reportCodeChange();  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.getParent().replaceChild(n,  addition);  reportCodeChange();	      	non-compiled	[CE]  ')'  expected	7	None	replace
30	[BUG]  [BUGGY]  n.getParent().removeChild(value);  reportCodeChange();  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  n.getParent().removeChild(value);  reportCodeChange();  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.getParent().removeChild(value);  reportCodeChange();	      	non-compiled	[CE]  ')'  expected	7	None	replace
31	[BUG]  [BUGGY]  n.removeChild(value);  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  n.removeChild(value);  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.removeChild(value);	      	non-compiled	[CE]  ')'  expected	7	None	replace
32	[BUG]  [BUGGY]  n.removeChild(addition);  [CE]  ')'  expected  [FE]                                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  n.removeChild(addition);  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.removeChild(addition);	      	non-compiled	[CE]  ')'  expected	7	None	replace
33	[BUG]  [BUGGY]  return  addition!=  null?  value.getLastChild()  :  addition;  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition!=  null?  value.getLastChild()  :  addition;  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.getLastChild()  :  addition;	  return    addition!=    null?    value.getNext()    :    addition;    	non-compiled	[CE]  ')'  expected	9	None	replace
34	[BUG]  [BUGGY]  return  addition!=  null?  value.getType()  :  Integer.MAX_VALUE;  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition!=  null?  value.getType()  :  Integer.MAX_VALUE;  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.getType()  :  Integer.MAX_VALUE;	  return    addition!=    null?    value.getNext()    :    addition;    	non-compiled	[CE]  ')'  expected	9	None	replace
35	[BUG]  [BUGGY]  return  addition!=  null?  value.getType()  :  Token.FUNCTION;  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition!=  null?  value.getType()  :  Token.FUNCTION;  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.getType()  :  Token.FUNCTION;	  return    addition!=    null?    value.getNext()    :    addition;    	non-compiled	[CE]  ')'  expected	9	None	replace
36	[BUG]  [BUGGY]  return  addition!=  null?  value.getParent()  :  addition;  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition!=  null?  value.getParent()  :  addition;  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.getParent()  :  addition;	  return    addition!=    null?    value.getNext()    :    addition;    	non-compiled	[CE]  ')'  expected	9	None	replace
37	[BUG]  [BUGGY]  return  addition  <  null?  value  :  addition.cloneTree();  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition  <  null?  value  :  addition.cloneTree();  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  <  null?  value  :  addition.cloneTree();	  return    addition    <    null?    value    :    addition;    	non-compiled	[CE]  ')'  expected	8	None	replace
38	[BUG]  [BUGGY]  return  addition  >=  null?  value  :  addition;  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition  >=  null?  value  :  addition;  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  >=  null?  value  :  addition;	  return    addition    <    null?    value    :    addition;    	non-compiled	[CE]  ')'  expected	8	None	replace
39	[BUG]  [BUGGY]  return  addition  ==  null?  null  :  addition.removeFirstChild();  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition  ==  null?  null  :  addition.removeFirstChild();  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  null  :  addition.removeFirstChild();	  return    addition    ==    null?    null    :    addition;    	non-compiled	[CE]  ')'  expected	3	None	replace
40	[BUG]  [BUGGY]  return  addition  ==  null?  null  :  addition.getType();  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition  ==  null?  null  :  addition.getType();  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  null  :  addition.getType();	  return    addition    ==    null?    null    :    addition;    	non-compiled	[CE]  ')'  expected	3	None	replace
41	[BUG]  [BUGGY]  return  addition!=  null?  value  :  addition.clone();  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition!=  null?  value  :  addition.clone();  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value  :  addition.clone();	  return    addition!=    null?    value    :    addition;    	non-compiled	[CE]  ')'  expected	5	None	replace
42	[BUG]  [BUGGY]  return  addition!=  null?  n  :  addition;  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition!=  null?  n  :  addition;  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  n  :  addition;	  return    addition    <    null?    value    :    addition;    	non-compiled	[CE]  ')'  expected	8	None	replace
43	[BUG]  [BUGGY]  return  addition  ==  null?  value.getType()  :  Token.FUNCTION;  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition  ==  null?  value.getType()  :  Token.FUNCTION;  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value.getType()  :  Token.FUNCTION;	  return    addition    ==    null?    value.getNext()    :    addition;    	non-compiled	[CE]  ')'  expected	10	None	replace
44	[BUG]  [BUGGY]  return  addition!=  null?  value.getFirstChild()  :  addition;  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition!=  null?  value.getFirstChild()  :  addition;  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.getFirstChild()  :  addition;	  return    addition    ==    null?    value.getNext()    :    addition;    	non-compiled	[CE]  ')'  expected	10	None	replace
45	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  addition,  new  FoldArrayAction());  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  NodeTraversal.traverse(compiler,  addition,  new  FoldArrayAction());  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	NodeTraversal.traverse(compiler,  addition,  new  FoldArrayAction());	      	non-compiled	[CE]  ')'  expected	7	None	replace
46	[BUG]  [BUGGY]  n.removeChild(address);  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  n.removeChild(address);  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.removeChild(address);	      	non-compiled	[CE]  ')'  expected	7	None	replace
47	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  addition,  n);  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  NodeTraversal.traverse(compiler,  addition,  n);  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	NodeTraversal.traverse(compiler,  addition,  n);	      	non-compiled	[CE]  ')'  expected	7	None	replace
48	[BUG]  [BUGGY]  return  addition.cloneTree(value);  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition.cloneTree(value);  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition.cloneTree(value);	  return    addition.cloneTree();    	non-compiled	[CE]  ')'  expected	1	None	replace
49	[BUG]  [BUGGY]  return  addition!=  null?  value.getPrevious()  :  addition;  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition!=  null?  value.getPrevious()  :  addition;  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.getPrevious()  :  addition;	  return    addition!=    null?    value.getNext()    :    addition;    	non-compiled	[CE]  ')'  expected	9	None	replace
50	[BUG]  [BUGGY]  return  addition!=  null?  addr.getNext()  :  addition;  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition!=  null?  addr.getNext()  :  addition;  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  addr.getNext()  :  addition;	  return    addition!=    null?    value.getNext()    :    addition;    	non-compiled	[CE]  ')'  expected	9	None	replace
51	[BUG]  [BUGGY]  return  addition!=  null?  null  :  addition.removeFirstChild();  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition!=  null?  null  :  addition.removeFirstChild();  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  null  :  addition.removeFirstChild();	  return    addition!=    null?    null    :    addition;    	non-compiled	[CE]  ')'  expected	2	None	replace
52	[BUG]  [BUGGY]  return  addition  ==  null  &&  addition.getType()!=  Token.FUNCTION;  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition  ==  null  &&  addition.getType()!=  Token.FUNCTION;  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null  &&  addition.getType()!=  Token.FUNCTION;	  return    addition!=    null    &&    addition.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	12	None	replace
53	[BUG]  [BUGGY]  return  addition  >=  null  &&  addition.getType()  ==  Token.FUNCTION;  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition  >=  null  &&  addition.getType()  ==  Token.FUNCTION;  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  >=  null  &&  addition.getType()  ==  Token.FUNCTION;	  return    addition!=    null    &&    addition.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	12	None	replace
54	[BUG]  [BUGGY]  return  addition!=  null?  value  :  addition.cloneNode();  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition!=  null?  value  :  addition.cloneNode();  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value  :  addition.cloneNode();	  return    addition    ==    null?    value    :    addition.cloneTree();    	non-compiled	[CE]  ')'  expected	11	None	replace
55	[BUG]  [BUGGY]  return  addition!=  null?  value  :  addition.clonePosition();  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition!=  null?  value  :  addition.clonePosition();  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value  :  addition.clonePosition();	  return    addition    ==    null?    value    :    addition.cloneTree();    	non-compiled	[CE]  ')'  expected	11	None	replace
56	[BUG]  [BUGGY]  n.removeChild(value);  reportCodeChange();  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  n.removeChild(value);  reportCodeChange();  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	n.removeChild(value);  reportCodeChange();	      	non-compiled	[CE]  ')'  expected	7	None	replace
57	[BUG]  [BUGGY]  return  addition!=  null?  null  :  addition.getFirstChild();  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition!=  null?  null  :  addition.getFirstChild();  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  null  :  addition.getFirstChild();	  return    addition    <    null?    null    :    addition;    	non-compiled	[CE]  ')'  expected	4	None	replace
58	[BUG]  [BUGGY]  return  addition!=  null?  value.getString()  :  addition;  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition!=  null?  value.getString()  :  addition;  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.getString()  :  addition;	  return    addition!=    null?    value.getNext()    :    addition;    	non-compiled	[CE]  ')'  expected	9	None	replace
59	[BUG]  [BUGGY]  return  addition!=  null?  value  :  addition.intValue();  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition!=  null?  value  :  addition.intValue();  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value  :  addition.intValue();	  return    addition!=    null?    value    :    addition;    	non-compiled	[CE]  ')'  expected	5	None	replace
60	[BUG]  [BUGGY]  return  addition!=  null?  value  :  addition.removeFirst();  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition!=  null?  value  :  addition.removeFirst();  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value  :  addition.removeFirst();	  return    addition!=    null?    value    :    addition;    	non-compiled	[CE]  ')'  expected	5	None	replace
61	[BUG]  [BUGGY]  return  addition!=  null?  value  :  addition.toString();  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition!=  null?  value  :  addition.toString();  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value  :  addition.toString();	  return    addition!=    null?    value    :    addition;    	non-compiled	[CE]  ')'  expected	5	None	replace
62	[BUG]  [BUGGY]  return  addition  ==  null?  value  :  addition.clonePrettyPrinter();  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition  ==  null?  value  :  addition.clonePrettyPrinter();  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value  :  addition.clonePrettyPrinter();	  return    addition    ==    null?    value    :    addition.cloneTree();    	non-compiled	[CE]  ')'  expected	11	None	replace
63	[BUG]  [BUGGY]  return  addition  ==  null?  value  :  addition.cloneNode();  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition  ==  null?  value  :  addition.cloneNode();  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value  :  addition.cloneNode();	  return    addition    ==    null?    value    :    addition.cloneTree();    	non-compiled	[CE]  ')'  expected	11	None	replace
64	[BUG]  [BUGGY]  return  addition!=  null?  null  :  addition.removeFirst();  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition!=  null?  null  :  addition.removeFirst();  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  null  :  addition.removeFirst();	  return    addition!=    null?    null    :    addition;    	non-compiled	[CE]  ')'  expected	2	None	replace
65	[BUG]  [BUGGY]  return  addition!=  null?  value.cloneTree()  :  addition.cloneTree();  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition!=  null?  value.cloneTree()  :  addition.cloneTree();  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.cloneTree()  :  addition.cloneTree();	  return    addition.cloneTree();    	non-compiled	[CE]  ')'  expected	1	None	replace
66	[BUG]  [BUGGY]  return  addition!=  null?  new  FoldArrayAction(value):  addition.cloneTree();  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition!=  null?  new  FoldArrayAction(value):  addition.cloneTree();  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  new  FoldArrayAction(value):  addition.cloneTree();	  return    addition.cloneTree();    	non-compiled	[CE]  ')'  expected	1	None	replace
67	[BUG]  [BUGGY]  return  addition!=  null?  value.cloneTree()  :  addition;  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition!=  null?  value.cloneTree()  :  addition;  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  value.cloneTree()  :  addition;	  return    addition.cloneTree();    	non-compiled	[CE]  ')'  expected	1	None	replace
68	[BUG]  [BUGGY]  return  addition!=  null?  add.cloneTree()  :  null;  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition!=  null?  add.cloneTree()  :  null;  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null?  add.cloneTree()  :  null;	  return    addition.cloneTree();    	non-compiled	[CE]  ')'  expected	1	None	replace
69	[BUG]  [BUGGY]  return  addition  ==  null?  value  :  addition.removeFirst();  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition  ==  null?  value  :  addition.removeFirst();  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value  :  addition.removeFirst();	  return    addition    ==    null?    value    :    addition;    	non-compiled	[CE]  ')'  expected	6	None	replace
70	[BUG]  [BUGGY]  return  addition!=  null  &&  addition.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition!=  null  &&  addition.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null  &&  addition.getFirstChild().getType()  ==  Token.FUNCTION;	  return    addition!=    null    &&    addition.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	12	None	replace
71	[BUG]  [BUGGY]  return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.EXPR_RESULT;  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.EXPR_RESULT;  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.EXPR_RESULT;	  return    addition!=    null    &&    addition.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	12	None	replace
72	[BUG]  [BUGGY]  return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.VAR;  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.VAR;  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition!=  null  &&  addition.getType()  ==  Token.FUNCTION  ||  addition.getType()  ==  Token.VAR;	  return    addition!=    null    &&    addition.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ')'  expected	12	None	replace
73	[BUG]  [BUGGY]  return  addition  ==  null?  null  :  addition.removeFirst();  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition  ==  null?  null  :  addition.removeFirst();  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  null  :  addition.removeFirst();	  return    addition    ==    null?    null    :    addition;    	non-compiled	[CE]  ')'  expected	3	None	replace
74	[BUG]  [BUGGY]  return  addition  ==  null?  null  :  addition.getFirstChild();  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition  ==  null?  null  :  addition.getFirstChild();  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  null  :  addition.getFirstChild();	  return    addition    ==    null?    null    :    addition;    	non-compiled	[CE]  ')'  expected	3	None	replace
75	[BUG]  [BUGGY]  return  addition  ==  null?  null  :  addition.toString();  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition  ==  null?  null  :  addition.toString();  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  null  :  addition.toString();	  return    addition    ==    null?    null    :    addition;    	non-compiled	[CE]  ')'  expected	3	None	replace
76	[BUG]  [BUGGY]  return  addition  ==  null?  value.getFirstChild()  :  addition;  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition  ==  null?  value.getFirstChild()  :  addition;  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value.getFirstChild()  :  addition;	  return    addition    ==    null?    value.getNext()    :    addition;    	non-compiled	[CE]  ')'  expected	10	None	replace
77	[BUG]  [BUGGY]  return  addition  ==  null?  value.getType()  :  Token.EXPR_RESULT;  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  a=String(   "hello   "    [CONTEXT]        Node  value  =  callTarget.getNext();  if  (value  !=  null)  {  Node  addition  =  IR.add(  IR.string(   "   ").srcref(callTarget),  value.detachFromParent());  n.getParent().replaceChild(n,  addition);  reportCodeChange();    [BUGGY]  return  addition  ==  null?  value.getType()  :  Token.EXPR_RESULT;  [BUGGY]    }  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldSimpleFunctionCall  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  late  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  addition  callTarget  n  value  int  AND_PRECEDENCE  NOT_PRECEDENCE  OR_PRECEDENCE  STRING_SPLIT_OVERHEAD  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure20/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	226	226	1	replace	return  addition  ==  null?  value.getType()  :  Token.EXPR_RESULT;	  return    addition    ==    null?    value.getNext()    :    addition;    	non-compiled	[CE]  ')'  expected	10	None	replace
