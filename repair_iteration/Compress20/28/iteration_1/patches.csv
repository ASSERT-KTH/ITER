bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  }  else  if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {	  }    else    if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,    true)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
2	[BUG]  [BUGGY]  }  else  if(cpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  }  else  if(cpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(cpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {	  }    else    if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,    true)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
3	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  }  else  if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {	  }    else    if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,    true)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
4	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  }  else  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  MAGIC_NEW)  {	  }    else    if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,    true)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
5	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readNewEntry(true);  }  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readNewEntry(true);  }  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readNewEntry(true);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
6	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readNewEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readNewEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readNewEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
7	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
8	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(true);  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(true);  }  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(true);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
9	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readNewEntry(false);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readNewEntry(false);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readNewEntry(false);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
10	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readNewEntry(false);  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readNewEntry(false);  }  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readNewEntry(false);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
11	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(false);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(false);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(false);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
12	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  this.entry)  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  this.entry)  {  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  this.entry)  {	  }    else    if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
13	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_NEW)  {	  }    else    if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
14	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_NEW)  {	  }    else    if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
15	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  this.old_BINARY)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  this.old_BINARY)  {  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  this.old_BINARY)  {	  }    else    if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
16	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  System.arraycopy(TWO_BYTES_BUF,  0,  this.entry.length))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  System.arraycopy(TWO_BYTES_BUF,  0,  this.entry.length))  {  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  System.arraycopy(TWO_BYTES_BUF,  0,  this.entry.length))  {	  }    else    if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
17	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  this.entry)  {  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  }  else  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  this.entry)  {  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  this.entry)  {	  }    else    if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
18	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  this.old_BINARY)  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  }  else  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  this.old_BINARY)  {  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  this.old_BINARY)  {	  }    else    if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
19	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  }  else  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {	  }    else    if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
20	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  }  else  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_NEW)  {	  }    else    if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    true)    ==    MAGIC_NEW)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
21	[BUG]  [BUGGY]  }  else  if(cpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  }  else  if(cpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(cpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_NEW)  {	  }    else    if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    true)    ==    MAGIC_NEW)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
22	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  this.entry)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  }  else  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  this.entry)  {  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  this.entry)  {	  }    else    if(cpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
23	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  this.entry)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  }  else  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  this.entry)  {  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  this.entry)  {	  }    else    if(cpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
24	[BUG]  [BUGGY]  }  else  if(cpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  }  else  if(cpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(cpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {	  }    else    if(cpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
25	[BUG]  [BUGGY]  }  else  if(cpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  this.entry)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  }  else  if(cpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  this.entry)  {  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(cpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  this.entry)  {	  }    else    if(cpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
26	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)!=  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)!=  MAGIC_OLD_BINARY)  {  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)!=  MAGIC_OLD_BINARY)  {	  }    else    if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)!=    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
27	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)!=  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  }  else  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)!=  MAGIC_OLD_BINARY)  {  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)!=  MAGIC_OLD_BINARY)  {	  }    else    if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)!=    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
28	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)!=  MAGIC_NEW)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  }  else  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)!=  MAGIC_NEW)  {  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)!=  MAGIC_NEW)  {	  }    else    if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)!=    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
29	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  this.old_BINARY)  {  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  }  else  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  this.old_BINARY)  {  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  this.old_BINARY)  {	  }    else    if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
30	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)!=  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  }  else  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)!=  MAGIC_OLD_BINARY)  {  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)!=  MAGIC_OLD_BINARY)  {	  }    else    if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)!=    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
31	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entryBytesRead,  false)!=  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entryBytesRead,  false)!=  MAGIC_OLD_BINARY)  {  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(this.entryBytesRead,  false)!=  MAGIC_OLD_BINARY)  {	  }    else    if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)!=    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
32	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entry,  false)!=  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entry,  false)!=  MAGIC_OLD_BINARY)  {  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(this.entry,  false)!=  MAGIC_OLD_BINARY)  {	  }    else    if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)!=    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
33	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(THIS_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  }  else  if(CpioUtil.byteArray2long(THIS_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(THIS_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {	  }    else    if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
34	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entryBytesRead,  false)  ==  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entryBytesRead,  false)  ==  MAGIC_OLD_BINARY)  {  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(this.entryBytesRead,  false)  ==  MAGIC_OLD_BINARY)  {	  }    else    if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
35	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entry,  false)  ==  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entry,  false)  ==  MAGIC_OLD_BINARY)  {  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(this.entry,  false)  ==  MAGIC_OLD_BINARY)  {	  }    else    if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
36	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(THIS_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  }  else  if(CpioUtil.byteArray2long(THIS_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(THIS_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {	  }    else    if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,    true)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
37	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(THIS_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  }  else  if(CpioUtil.byteArray2long(THIS_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(THIS_BYTES_BUF,  true)  ==  MAGIC_NEW)  {	  }    else    if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    true)    ==    MAGIC_NEW)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
38	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(this.entryBytesRead,  false)  ==  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  }  else  if(!CpioUtil.byteArray2long(this.entryBytesRead,  false)  ==  MAGIC_OLD_BINARY)  {  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(this.entryBytesRead,  false)  ==  MAGIC_OLD_BINARY)  {	  }    else    if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
39	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(this.entry,  false)  ==  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  }  else  if(!CpioUtil.byteArray2long(this.entry,  false)  ==  MAGIC_OLD_BINARY)  {  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(this.entry,  false)  ==  MAGIC_OLD_BINARY)  {	  }    else    if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
40	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(THIS_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  }  else  if(!CpioUtil.byteArray2long(THIS_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(THIS_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {	  }    else    if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
41	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(THIS_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  }  else  if(!CpioUtil.byteArray2long(THIS_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(THIS_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {	  }    else    if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,    true)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
42	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(THRESHOLD_BINARY,  true)  ==  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  }  else  if(!CpioUtil.byteArray2long(THRESHOLD_BINARY,  true)  ==  MAGIC_OLD_BINARY)  {  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(THRESHOLD_BINARY,  true)  ==  MAGIC_OLD_BINARY)  {	  }    else    if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,    true)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
43	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(false);  }  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(false);  }  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(false);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
44	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(true);  }  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(true);  }  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(true);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
45	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  this.entry)  {  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  }  else  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  this.entry)  {  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  this.entry)  {	  }    else    if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
46	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entryBytes_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entryBytes_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(this.entryBytes_BUF,  false)  ==  MAGIC_OLD_BINARY)  {	  }    else    if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
47	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)!=  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  }  else  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)!=  MAGIC_OLD_BINARY)  {  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)!=  MAGIC_OLD_BINARY)  {	  }    else    if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
48	[BUG]  [BUGGY]  System.arraycopy(FOUR_BYTES_BUF,  0,  this.blockSize);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  System.arraycopy(FOUR_BYTES_BUF,  0,  this.blockSize);  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	System.arraycopy(FOUR_BYTES_BUF,  0,  this.blockSize);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
49	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  this.  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  this.  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  this.	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
50	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(THIS_OLD_BINARY,  false)  ==  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);    [BUGGY]  }  else  if(!CpioUtil.byteArray2long(THIS_OLD_BINARY,  false)  ==  MAGIC_OLD_BINARY)  {  [BUGGY]    ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(THIS_OLD_BINARY,  false)  ==  MAGIC_OLD_BINARY)  {	  }    else    if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
