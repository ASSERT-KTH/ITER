bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]    IllegalArgumentException  [CONTEXT]  public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);  [BUGGY]  }  else  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  [BUGGY]  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {	}  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)    ==  MAGIC_OLD_BINARY)  {  	non-compiled	[CE]  illegal  start  of  type	55	None	replace
2	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]      IllegalArgumentException  [CONTEXT]  public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  [BUGGY]  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {	}  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)    ==  MAGIC_OLD_BINARY)  {  	non-compiled	[CE]  illegal  start  of  type	55	None	replace
3	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException  [CONTEXT]  public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  [BUGGY]  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {	}  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)    ==  MAGIC_OLD_BINARY)  {  	non-compiled	[CE]  illegal  start  of  type	55	None	replace
4	[BUG]  [BUGGY]  }  else  if(cpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException  [CONTEXT]  public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);  [BUGGY]  }  else  if(cpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  [BUGGY]  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(cpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {	}  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)    ==  MAGIC_OLD_BINARY)  {  	non-compiled	[CE]  illegal  start  of  type	55	None	replace
5	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException  [CONTEXT]  public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);  [BUGGY]  }  else  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  [BUGGY]  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_NEW)  {	}  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)    ==  MAGIC_OLD_BINARY)  {  	non-compiled	[CE]  illegal  start  of  type	55	None	replace
6	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)!=  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException  [CONTEXT]  public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);  [BUGGY]  }  else  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)!=  MAGIC_OLD_BINARY)  {  [BUGGY]  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)!=  MAGIC_OLD_BINARY)  {	}  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)    ==  MAGIC_OLD_BINARY)  {  	non-compiled	[CE]  illegal  start  of  type	55	None	replace
7	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]                IllegalArgumentException  [CONTEXT]  public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);  [BUGGY]    [BUGGY]  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	  	}  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)    ==  MAGIC_OLD_BINARY)  {  	non-compiled	[CE]  illegal  start  of  type	55	None	replace
8	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]    IllegalArgumentException  [CONTEXT]  public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);  [BUGGY]  }  else  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  [BUGGY]  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {	}  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)    ==  MAGIC_OLD_BINARY)  {  	non-compiled	[CE]  illegal  start  of  type	55	None	replace
9	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]      IllegalArgumentException  [CONTEXT]  public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);  [BUGGY]  }  else  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  [BUGGY]  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {	}  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)    ==  MAGIC_OLD_BINARY)  {  	non-compiled	[CE]  illegal  start  of  type	55	None	replace
