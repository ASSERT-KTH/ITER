bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  this.entry)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  this.entry)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  this.entry)  {	  }    else    if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,    false)    ==    this.entry)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
2	[BUG]  [BUGGY]  }  else  if(FOUR_BYTES_BUF.length  ==  CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  this.entry)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(FOUR_BYTES_BUF.length  ==  CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  this.entry)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(FOUR_BYTES_BUF.length  ==  CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  this.entry)  {	  }    else    if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,    false)    ==    this.entry)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
3	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)!=  this.entry)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)!=  this.entry)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)!=  this.entry)  {	  }    else    if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,    false)    ==    this.entry)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
4	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entry,  false)  ==  FOUR_BYTES_BUF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entry,  false)  ==  FOUR_BYTES_BUF)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(this.entry,  false)  ==  FOUR_BYTES_BUF)  {	  }    else    if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,    false)    ==    this.entry)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
5	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    this.entry    =    readNewEntry(true);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    this.    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
6	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(true);  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(true);  }  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(true);  }	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    this.entry    =    readNewEntry(true);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    this.    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
7	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(false);  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(false);  }  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(false);  }	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    this.entry    =    readNewEntry(true);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    this.    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
8	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(this.entry,  false)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  this.  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(this.entry,  false)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  this.  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(this.entry,  false)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  this.	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    this.entry    =    readNewEntry(true);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    this.    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
9	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    this.entry    =    readNewEntry(true);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    this.    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
10	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    this.entry    =    readNewEntry(true);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    this.    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
11	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(true);  }  else  {  System.arraycopy(FOUR_BYTES_BUF,  0,  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(true);  }  else  {  System.arraycopy(FOUR_BYTES_BUF,  0,  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(true);  }  else  {  System.arraycopy(FOUR_BYTES_BUF,  0,	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    this.entry    =    readNewEntry(true);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    this.    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
12	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {	  }    else    if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
13	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)!=  MAGIC_NEW)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)!=  MAGIC_NEW)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)!=  MAGIC_NEW)  {	  }    else    if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
14	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(THIS_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(THIS_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(THIS_BYTES_BUF,  false)  ==  MAGIC_NEW)  {	  }    else    if(CpioUtil.byteArray2long(THIS_BYTES_BUF,    true)    ==    MAGIC_NEW)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
15	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(THIS_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(THIS_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(THIS_BYTES_BUF,  true)  ==  MAGIC_NEW)  {	  }    else    if(CpioUtil.byteArray2long(THIS_BYTES_BUF,    true)    ==    MAGIC_NEW)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
16	[BUG]  [BUGGY]  }  else  if(cpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(cpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(cpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_NEW)  {	  }    else    if(CpioUtil.byteArray2long(THIS_BYTES_BUF,    true)    ==    MAGIC_NEW)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
17	[BUG]  [BUGGY]  this.entry  =  readNewEntry(true);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  this.entry  =  readNewEntry(true);  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	this.entry  =  readNewEntry(true);	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    this.entry    =    readNewEntry(true);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
18	[BUG]  [BUGGY]  this.entry  =  readNewEntry(false);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  this.entry  =  readNewEntry(false);  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	this.entry  =  readNewEntry(false);	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    this.entry    =    readNewEntry(true);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
19	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(false);  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(false);  }  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(false);  }	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    this.entry    =    readNewEntry(true);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
20	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(true);  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(true);  }  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(true);  }	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    this.entry    =    readNewEntry(true);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
21	[BUG]  [BUGGY]  ||  CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  ||  CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	||  CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    this.entry    =    readNewEntry(true);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
22	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    this.entry    =    readNewEntry(true);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
23	[BUG]  [BUGGY]  ||  CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  ||  CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	||  CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    this.entry    =    readNewEntry(true);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
24	[BUG]  [BUGGY]  ||  CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readNewEntry(true);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  ||  CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readNewEntry(true);  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	||  CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readNewEntry(true);	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    this.entry    =    readNewEntry(true);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
25	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    this.entry    =    readNewEntry(true);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
26	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);  }  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);  }	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    this.entry    =    readNewEntry(true);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
27	[BUG]  [BUGGY]  System.arraycopy(TWO_BYTES_BUF,  0,  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  System.arraycopy(TWO_BYTES_BUF,  0,  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	System.arraycopy(TWO_BYTES_BUF,  0,	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    this.entry    =    readNewEntry(true);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
28	[BUG]  [BUGGY]  }  else  if(cpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  this.entry)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(cpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  this.entry)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(cpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  this.entry)  {	  }    else    if(cpioUtil.byteArray2long(TWO_BYTES_BUF,    true)    ==    this.entry)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
29	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  this.entry)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  this.entry)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  this.entry)  {	  }    else    if(cpioUtil.byteArray2long(TWO_BYTES_BUF,    true)    ==    this.entry)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
30	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)!=  this.entry)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)!=  this.entry)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)!=  this.entry)  {	  }    else    if(cpioUtil.byteArray2long(TWO_BYTES_BUF,    true)    ==    this.entry)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
31	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  MAGIC_NEW)  {	  }    else    if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,    true)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
32	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)!=  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)!=  MAGIC_OLD_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)!=  MAGIC_OLD_BINARY)  {	  }    else    if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,    true)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
33	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  this.entry)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  this.entry)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  this.entry)  {	  }    else    if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
34	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  FOUR_BYTES_BUF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  FOUR_BYTES_BUF)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  FOUR_BYTES_BUF)  {	  }    else    if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
35	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  this.old_BINARY)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  this.old_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  this.old_BINARY)  {	  }    else    if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
36	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(this.entry,  true)  ==  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(this.entry,  true)  ==  MAGIC_OLD_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(this.entry,  true)  ==  MAGIC_OLD_BINARY)  {	  }    else    if(!CpioUtil.byteArray2long(this.entry,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
37	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_OLD_BINARY,  false)  ==  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_OLD_BINARY,  false)  ==  MAGIC_OLD_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(TWO_OLD_BINARY,  false)  ==  MAGIC_OLD_BINARY)  {	  }    else    if(!CpioUtil.byteArray2long(this.entry,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
38	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(this.entry,  false)  ==  MAGIC_NEW)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(this.entry,  false)  ==  MAGIC_NEW)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(this.entry,  false)  ==  MAGIC_NEW)  {	  }    else    if(!CpioUtil.byteArray2long(this.entry,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
39	[BUG]  [BUGGY]  this.entry  =  readOldBinaryEntry(false);  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  this.entry  =  readOldBinaryEntry(false);  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	this.entry  =  readOldBinaryEntry(false);	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    this.entry    =    readNewEntry(false);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
40	[BUG]  [BUGGY]  this.entry  =  readOldBinaryEntry(true);  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  this.entry  =  readOldBinaryEntry(true);  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	this.entry  =  readOldBinaryEntry(true);	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    this.entry    =    readNewEntry(false);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
41	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    this.entry    =    readNewEntry(false);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
42	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    this.entry    =    readNewEntry(false);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
43	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readNewEntry(true);  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readNewEntry(true);  }  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readNewEntry(true);  }	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    true)    ==    MAGIC_NEW)    {    this.entry    =    readNewEntry(true);    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
44	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  System.arraycopy(TWO_BYTES_BUF,  0,  this.entry.length))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  System.arraycopy(TWO_BYTES_BUF,  0,  this.entry.length))  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  System.arraycopy(TWO_BYTES_BUF,  0,  this.entry.length))  {	  }    else    if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,    true)    ==    System.arraycopy(TWO_BYTES_BUF,    0,    this.entry.length))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
45	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(this.entry,  true)  ==  System.arraycopy(TWO_BYTES_BUF,  0,  this.entry.length))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(this.entry,  true)  ==  System.arraycopy(TWO_BYTES_BUF,  0,  this.entry.length))  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(this.entry,  true)  ==  System.arraycopy(TWO_BYTES_BUF,  0,  this.entry.length))  {	  }    else    if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,    true)    ==    System.arraycopy(TWO_BYTES_BUF,    0,    this.entry.length))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
46	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  System.arraycopy(TWO_BYTES_BUF,  0,  this.entry.length))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  System.arraycopy(TWO_BYTES_BUF,  0,  this.entry.length))  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  System.arraycopy(TWO_BYTES_BUF,  0,  this.entry.length))  {	  }    else    if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,    true)    ==    System.arraycopy(TWO_BYTES_BUF,    0,    this.entry.length))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
47	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  System.arraycopy(TWO_BYTES_BUF,  0,  this.entry.length))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  System.arraycopy(TWO_BYTES_BUF,  0,  this.entry.length))  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  System.arraycopy(TWO_BYTES_BUF,  0,  this.entry.length))  {	  }    else    if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,    true)    ==    System.arraycopy(TWO_BYTES_BUF,    0,    this.entry.length))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
48	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)!=  System.arraycopy(TWO_BYTES_BUF,  0,  this.entry.length))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)!=  System.arraycopy(TWO_BYTES_BUF,  0,  this.entry.length))  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)!=  System.arraycopy(TWO_BYTES_BUF,  0,  this.entry.length))  {	  }    else    if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,    true)    ==    System.arraycopy(TWO_BYTES_BUF,    0,    this.entry.length))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
49	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  System.arraycopy(TWO_BYTES_BUF,  0,  this.entry.length))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  System.arraycopy(TWO_BYTES_BUF,  0,  this.entry.length))  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  System.arraycopy(TWO_BYTES_BUF,  0,  this.entry.length))  {	  }    else    if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,    true)    ==    System.arraycopy(TWO_BYTES_BUF,    0,    this.entry.length))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
50	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  CpioUtil.OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  CpioUtil.OLD_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  CpioUtil.OLD_BINARY)  {	  }    else    if(!CpioUtil.byteArray2long(THIS_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
51	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(THIS_BYTES_BUF,  true)  ==  this.entry)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(THIS_BYTES_BUF,  true)  ==  this.entry)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(THIS_BYTES_BUF,  true)  ==  this.entry)  {	  }    else    if(!CpioUtil.byteArray2long(THIS_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
52	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(THIS_OLD_BINARY,  true)  ==  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(THIS_OLD_BINARY,  true)  ==  MAGIC_OLD_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(THIS_OLD_BINARY,  true)  ==  MAGIC_OLD_BINARY)  {	  }    else    if(!CpioUtil.byteArray2long(THIS_OLD_BINARY,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
53	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(THIS_OLD_BINARY,  false)  ==  MAGIC_NEW)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(THIS_OLD_BINARY,  false)  ==  MAGIC_NEW)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(THIS_OLD_BINARY,  false)  ==  MAGIC_NEW)  {	  }    else    if(!CpioUtil.byteArray2long(THIS_OLD_BINARY,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
54	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(THIS_OLD_BINARY,  true)  ==  this.entry)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(THIS_OLD_BINARY,  true)  ==  this.entry)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(THIS_OLD_BINARY,  true)  ==  this.entry)  {	  }    else    if(!CpioUtil.byteArray2long(THIS_OLD_BINARY,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
55	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(THIS_OLD_BINARY,  true)  ==  MAGIC_NEW)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(THIS_OLD_BINARY,  true)  ==  MAGIC_NEW)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(THIS_OLD_BINARY,  true)  ==  MAGIC_NEW)  {	  }    else    if(!CpioUtil.byteArray2long(THIS_OLD_BINARY,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
56	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_OLD_BINARY,  false)  ==  CpioUtil.MAX_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_OLD_BINARY,  false)  ==  CpioUtil.MAX_OLD_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(TWO_OLD_BINARY,  false)  ==  CpioUtil.MAX_OLD_BINARY)  {	  }    else    if(!CpioUtil.byteArray2long(THIS_OLD_BINARY,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
57	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    this.entry    =    readNewEntry(true);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
58	[BUG]  [BUGGY]  ||  CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(true);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  ||  CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(true);  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	||  CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(true);	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    this.entry    =    readNewEntry(true);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
59	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(this.entryBytesRead,  true)  ==  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(this.entryBytesRead,  true)  ==  MAGIC_OLD_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(this.entryBytesRead,  true)  ==  MAGIC_OLD_BINARY)  {	  }    else    if(!CpioUtil.byteArray2long(this.entryBytesRead,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
60	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(this.entryBytesRead,  false)  ==  MAGIC_NEW)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(this.entryBytesRead,  false)  ==  MAGIC_NEW)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(this.entryBytesRead,  false)  ==  MAGIC_NEW)  {	  }    else    if(!CpioUtil.byteArray2long(this.entryBytesRead,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
61	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(this.entryBytesRead,  false)  ==  this.old_BINARY)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(this.entryBytesRead,  false)  ==  this.old_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(this.entryBytesRead,  false)  ==  this.old_BINARY)  {	  }    else    if(!CpioUtil.byteArray2long(this.entryBytesRead,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
62	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(this.entryBytesRead,  true)  ==  this.entry)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(this.entryBytesRead,  true)  ==  this.entry)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(this.entryBytesRead,  true)  ==  this.entry)  {	  }    else    if(!CpioUtil.byteArray2long(this.entryBytesRead,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
63	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    this.entry    =    readNewEntry(false);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
64	[BUG]  [BUGGY]  ||  CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readNewEntry(false);  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  ||  CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readNewEntry(false);  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	||  CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readNewEntry(false);	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    this.entry    =    readNewEntry(false);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
65	[BUG]  [BUGGY]  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    this.entry    =    readNewEntry(false);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
66	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)!=  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)!=  MAGIC_OLD_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)!=  MAGIC_OLD_BINARY)  {	  }    else    if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    true)!=    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
67	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entry,  true)  ==  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entry,  true)  ==  MAGIC_OLD_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(this.entry,  true)  ==  MAGIC_OLD_BINARY)  {	  }    else    if(CpioUtil.byteArray2long(this.entry,    false)!=    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
68	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(TWO_OLD_BINARY,  false)!=  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(TWO_OLD_BINARY,  false)!=  MAGIC_OLD_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(TWO_OLD_BINARY,  false)!=  MAGIC_OLD_BINARY)  {	  }    else    if(CpioUtil.byteArray2long(this.entry,    false)!=    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
69	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(TWO_OLD_BINARY,  false)  ==  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(TWO_OLD_BINARY,  false)  ==  MAGIC_OLD_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(TWO_OLD_BINARY,  false)  ==  MAGIC_OLD_BINARY)  {	  }    else    if(CpioUtil.byteArray2long(this.entry,    false)!=    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
70	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entry,  true)!=  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entry,  true)!=  MAGIC_OLD_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(this.entry,  true)!=  MAGIC_OLD_BINARY)  {	  }    else    if(CpioUtil.byteArray2long(this.entry,    false)!=    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
71	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  this.old_BINARY)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  this.old_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  this.old_BINARY)  {	  }    else    if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,    true)    ==    this.old_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
72	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  this.old_BINARY)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  this.old_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  this.old_BINARY)  {	  }    else    if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,    true)    ==    this.old_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
73	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)!=  this.old_BINARY)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)!=  this.old_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)!=  this.old_BINARY)  {	  }    else    if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,    true)    ==    this.old_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
74	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  this.old_BINARY)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  this.old_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  this.old_BINARY)  {	  }    else    if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,    true)    ==    this.old_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
75	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  this.old_BINARY)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  this.old_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  this.old_BINARY)  {	  }    else    if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,    true)    ==    this.old_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
76	[BUG]  [BUGGY]  }  else  if(cpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  this.old_BINARY)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(cpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  this.old_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(cpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  this.old_BINARY)  {	  }    else    if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,    true)    ==    this.old_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
77	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entryBytesRead,  true)  ==  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entryBytesRead,  true)  ==  MAGIC_OLD_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(this.entryBytesRead,  true)  ==  MAGIC_OLD_BINARY)  {	  }    else    if(CpioUtil.byteArray2long(this.entryBytesRead,    false)!=    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
78	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entryBytesRead,  false)  ==  MAGIC_NEW)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entryBytesRead,  false)  ==  MAGIC_NEW)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(this.entryBytesRead,  false)  ==  MAGIC_NEW)  {	  }    else    if(CpioUtil.byteArray2long(this.entryBytesRead,    false)!=    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
79	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entryBytesRead,  true)!=  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entryBytesRead,  true)!=  MAGIC_OLD_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(this.entryBytesRead,  true)!=  MAGIC_OLD_BINARY)  {	  }    else    if(CpioUtil.byteArray2long(this.entryBytesRead,    false)!=    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
80	[BUG]  [BUGGY]  ||  CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(false);  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  ||  CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(false);  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	||  CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(false);	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    this.entry    =    readNewEntry(false);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
81	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(false);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(false);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(false);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    this.entry    =    readNewEntry(false);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
82	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(false);  }  else  {  System.arraycopy(FOUR_BYTES_BUF,  0,  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(false);  }  else  {  System.arraycopy(FOUR_BYTES_BUF,  0,  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(false);  }  else  {  System.arraycopy(FOUR_BYTES_BUF,  0,	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    this.entry    =    readNewEntry(false);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
83	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_B  [CE]  illegal  start  of  type  [FE]                                          IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_B  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_B	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    this.entry    =    readNewEntry(false);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
84	[BUG]  [BUGGY]  }  else  if(cpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(cpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(cpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {	  }    else    if(cpioUtil.byteArray2long(FOUR_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
85	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entry,  false)  ==  CPI_BYTES_BUF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entry,  false)  ==  CPI_BYTES_BUF)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(this.entry,  false)  ==  CPI_BYTES_BUF)  {	  }    else    if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    this.entry)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
86	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)!=  this.entry)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)!=  this.entry)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)!=  this.entry)  {	  }    else    if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    this.entry)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
87	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entry,  false)  ==  CAPP_BYTES_BUF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entry,  false)  ==  CAPP_BYTES_BUF)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(this.entry,  false)  ==  CAPP_BYTES_BUF)  {	  }    else    if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    this.entry)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
88	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)!=  MAGIC_NEW)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)!=  MAGIC_NEW)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)!=  MAGIC_NEW)  {	  }    else    if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)!=    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
89	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entry,  false)  ==  MAGIC_NEW)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entry,  false)  ==  MAGIC_NEW)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(this.entry,  false)  ==  MAGIC_NEW)  {	  }    else    if(CpioUtil.byteArray2long(this.entry,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
90	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(THIS_OLD_BINARY,  false)  ==  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(THIS_OLD_BINARY,  false)  ==  MAGIC_OLD_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(THIS_OLD_BINARY,  false)  ==  MAGIC_OLD_BINARY)  {	  }    else    if(CpioUtil.byteArray2long(this.entry,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
91	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entryBytesRead,  false)  ==  this.old_BINARY)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entryBytesRead,  false)  ==  this.old_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(this.entryBytesRead,  false)  ==  this.old_BINARY)  {	  }    else    if(CpioUtil.byteArray2long(this.entryBytesRead,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
92	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)!=  MAGIC_NEW)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)!=  MAGIC_NEW)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)!=  MAGIC_NEW)  {	  }    else    if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,    false)!=    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
93	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(true);  }  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(true);  }  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(true);  }	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    this.entry    =    readNewEntry(false);    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
94	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(false);  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(false);  }  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(false);  }	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    this.entry    =    readNewEntry(false);    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
95	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(false);  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(false);  }  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(false);  }	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    this.entry    =    readNewEntry(false);    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
96	[BUG]  [BUGGY]  }  else  if(cpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  this.old_BINARY)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(cpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  this.old_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(cpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  this.old_BINARY)  {	  }    else    if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    true)    ==    this.old_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
97	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)!=  MAGIC_NEW)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)!=  MAGIC_NEW)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)!=  MAGIC_NEW)  {	  }    else    if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)!=    MAGIC_NEW)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
98	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readNewEntry(true);  }  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readNewEntry(true);  }  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readNewEntry(true);  }	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    this.entry    =    readNewEntry(true);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
99	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);  }  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);  }	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    this.entry    =    readNewEntry(true);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
100	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(THIS_BYTES_BUF,  true)  ==  this.entry)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(THIS_BYTES_BUF,  true)  ==  this.entry)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(THIS_BYTES_BUF,  true)  ==  this.entry)  {	  }    else    if(CpioUtil.byteArray2long(THIS_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
101	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(this.entry,  true)  ==  CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(this.entry,  true)  ==  CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(this.entry,  true)  ==  CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {	  }    else    if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,    true)    ==    this.entry)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
102	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)!=  this.entry)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)!=  this.entry)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)!=  this.entry)  {	  }    else    if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,    true)    ==    this.entry)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
103	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(this.entry,  true)  ==  CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(this.entry,  true)  ==  CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(this.entry,  true)  ==  CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {	  }    else    if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,    true)    ==    this.entry)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
104	[BUG]  [BUGGY]  System.arraycopy(FOUR_BYTES_BUF,  0,  this.blockSize,  FOUR_BYTES_BUF.length);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  System.arraycopy(FOUR_BYTES_BUF,  0,  this.blockSize,  FOUR_BYTES_BUF.length);  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	System.arraycopy(FOUR_BYTES_BUF,  0,  this.blockSize,  FOUR_BYTES_BUF.length);	  System.arraycopy(FOUR_BYTES_BUF,    0,    this.blockSize);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
105	[BUG]  [BUGGY]  System.arraycopy(FOUR_BYTES_BUF,  0,  this.blockSize,  this.length);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  System.arraycopy(FOUR_BYTES_BUF,  0,  this.blockSize,  this.length);  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	System.arraycopy(FOUR_BYTES_BUF,  0,  this.blockSize,  this.length);	  System.arraycopy(FOUR_BYTES_BUF,    0,    this.blockSize);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
106	[BUG]  [BUGGY]  System.arraycopy(FOUR_BYTES_BUF,  0,  this.blockSize,  TWO_BYTES_BUF.length);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  System.arraycopy(FOUR_BYTES_BUF,  0,  this.blockSize,  TWO_BYTES_BUF.length);  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	System.arraycopy(FOUR_BYTES_BUF,  0,  this.blockSize,  TWO_BYTES_BUF.length);	  System.arraycopy(FOUR_BYTES_BUF,    0,    this.blockSize);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
107	[BUG]  [BUGGY]  System.arraycopy(FOUR_BYTES_BUF,  0,  this.blockSize,  0);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  System.arraycopy(FOUR_BYTES_BUF,  0,  this.blockSize,  0);  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	System.arraycopy(FOUR_BYTES_BUF,  0,  this.blockSize,  0);	  System.arraycopy(FOUR_BYTES_BUF,    0,    this.blockSize);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
108	[BUG]  [BUGGY]  System.arraycopy(FOUR_BYTES_BUF,  0,  this.blockSize  -  1);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  System.arraycopy(FOUR_BYTES_BUF,  0,  this.blockSize  -  1);  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	System.arraycopy(FOUR_BYTES_BUF,  0,  this.blockSize  -  1);	  System.arraycopy(FOUR_BYTES_BUF,    0,    this.blockSize);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
109	[BUG]  [BUGGY]  System.arraycopy(FOUR_BYTES_BUF,  0,  this.blockSize,  this.bytesRead);  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  System.arraycopy(FOUR_BYTES_BUF,  0,  this.blockSize,  this.bytesRead);  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	System.arraycopy(FOUR_BYTES_BUF,  0,  this.blockSize,  this.bytesRead);	  System.arraycopy(FOUR_BYTES_BUF,    0,    this.blockSize);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
110	[BUG]  [BUGGY]  System.arraycopy(TWO_BYTES_BUF,  0,  this.blockSize);  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  System.arraycopy(TWO_BYTES_BUF,  0,  this.blockSize);  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	System.arraycopy(TWO_BYTES_BUF,  0,  this.blockSize);	  System.arraycopy(FOUR_BYTES_BUF,    0,    this.blockSize);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
111	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(THRESHOLD_BINARY,  false)  ==  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(THRESHOLD_BINARY,  false)  ==  MAGIC_OLD_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(THRESHOLD_BINARY,  false)  ==  MAGIC_OLD_BINARY)  {	  }    else    if(!CpioUtil.byteArray2long(THRESHOLD_BINARY,    true)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
112	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_OLD_BINARY,  true)  ==  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_OLD_BINARY,  true)  ==  MAGIC_OLD_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(TWO_OLD_BINARY,  true)  ==  MAGIC_OLD_BINARY)  {	  }    else    if(!CpioUtil.byteArray2long(THRESHOLD_BINARY,    true)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
113	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entryBytes_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entryBytes_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(this.entryBytes_BUF,  true)  ==  MAGIC_OLD_BINARY)  {	  }    else    if(CpioUtil.byteArray2long(this.entryBytes_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
114	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entryBytes_BUF,  false)  ==  MAGIC_NEW)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entryBytes_BUF,  false)  ==  MAGIC_NEW)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(this.entryBytes_BUF,  false)  ==  MAGIC_NEW)  {	  }    else    if(CpioUtil.byteArray2long(this.entryBytes_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
115	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entryBytes_BUF,  false)  ==  this.old_BINARY)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entryBytes_BUF,  false)  ==  this.old_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(this.entryBytes_BUF,  false)  ==  this.old_BINARY)  {	  }    else    if(CpioUtil.byteArray2long(this.entryBytes_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
116	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(this.entryBytes_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(this.entryBytes_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(this.entryBytes_BUF,  false)  ==  MAGIC_OLD_BINARY)  {	  }    else    if(CpioUtil.byteArray2long(this.entryBytes_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
117	[BUG]  [BUGGY]  }  else  if(cpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(cpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(cpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {	  }    else    if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,    true)    ==    MAGIC_NEW)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
118	[BUG]  [BUGGY]  }  else  if(FOUR_BYTES_BUF.length  ==  CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  this.entry)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(FOUR_BYTES_BUF.length  ==  CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  this.entry)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(FOUR_BYTES_BUF.length  ==  CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  this.entry)  {	  }    else    if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    true)    ==    this.entry)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
119	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(this.entryBytesRead,  false)!=  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(this.entryBytesRead,  false)!=  MAGIC_OLD_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(this.entryBytesRead,  false)!=  MAGIC_OLD_BINARY)  {	  }    else    if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)!=    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
120	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);  }  else  {  System.arraycopy  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);  }  else  {  System.arraycopy  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);  }  else  {  System.arraycopy	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    this.entry    =    readNewEntry(true);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
121	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);  }  else  {  System.arra  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);  }  else  {  System.arra  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);  }  else  {  System.arra	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    this.entry    =    readNewEntry(true);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
122	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);  }  else  {  System.arraycopy  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);  }  else  {  System.arraycopy  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);  }  else  {  System.arraycopy	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    this.entry    =    readNewEntry(true);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
123	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    this.entry    =    readNewEntry(true);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
124	[BUG]  [BUGGY]  if(SIX_BYTES_BUF.length  ==  SIX_BYTES_BUF.length)  {  ifCpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldB  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(SIX_BYTES_BUF.length  ==  SIX_BYTES_BUF.length)  {  ifCpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldB  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(SIX_BYTES_BUF.length  ==  SIX_BYTES_BUF.length)  {  ifCpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldB	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    this.entry    =    readNewEntry(true);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
125	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entryBytesRead,  false)!=  MAGIC_NEW)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entryBytesRead,  false)!=  MAGIC_NEW)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(this.entryBytesRead,  false)!=  MAGIC_NEW)  {	  }    else    if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)!=    MAGIC_NEW)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
126	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entry,  false)!=  MAGIC_NEW)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entry,  false)!=  MAGIC_NEW)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(this.entry,  false)!=  MAGIC_NEW)  {	  }    else    if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)!=    MAGIC_NEW)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
127	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entryBytesRead,  true)  ==  MAGIC_NEW)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entryBytesRead,  true)  ==  MAGIC_NEW)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(this.entryBytesRead,  true)  ==  MAGIC_NEW)  {	  }    else    if(CpioUtil.byteArray2long(this.entryBytesRead,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
128	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entryBytesRead,  false)  ==  0)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entryBytesRead,  false)  ==  0)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(this.entryBytesRead,  false)  ==  0)  {	  }    else    if(CpioUtil.byteArray2long(this.entryBytesRead,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
129	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(false);  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(false);  }  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(false);  }	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    this.entry    =    readNewEntry(true);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    this.    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
130	[BUG]  [BUGGY]  if(FOUR_BYTES_BUF!=  null)  {  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(false);  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(FOUR_BYTES_BUF!=  null)  {  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(false);  }  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(FOUR_BYTES_BUF!=  null)  {  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(false);  }	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    this.entry    =    readNewEntry(true);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    this.    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
131	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(false);  }  else  {  System.arraycopy(TWO_B  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(false);  }  else  {  System.arraycopy(TWO_B  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(false);  }  else  {  System.arraycopy(TWO_B	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    this.entry    =    readNewEntry(true);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    this.    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
132	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(false);  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(false);  }  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(false);  }	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    this.entry    =    readNewEntry(true);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    this.    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
133	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(false);  }  else  {  System.arra  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(false);  }  else  {  System.arra  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(false);  }  else  {  System.arra	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    this.entry    =    readNewEntry(true);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    this.    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
134	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(false);  }  else  {  System.arraycopy  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(false);  }  else  {  System.arraycopy  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(false);  }  else  {  System.arraycopy	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    this.entry    =    readNewEntry(true);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    this.    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
135	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(true);  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(true);  }  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(true);  }	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    this.entry    =    readNewEntry(true);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    this.    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
136	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    this.entry    =    readNewEntry(false);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
137	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arra  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arra  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arra	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    this.entry    =    readNewEntry(false);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
138	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    this.entry    =    readNewEntry(false);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
139	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(false);  }  else  {  System.arraycopy(TWO  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(false);  }  else  {  System.arraycopy(TWO  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(false);  }  else  {  System.arraycopy(TWO	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    this.entry    =    readNewEntry(false);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
140	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    this.entry    =    readNewEntry(false);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
141	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_B  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_B  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_B	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    this.entry    =    readNewEntry(false);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
142	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO  [CE]  illegal  start  of  type  [FE]                                          IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    this.entry    =    readNewEntry(false);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
143	[BUG]  [BUGGY]  System.arraycopy(FOUR_BYTES_BUF,  0,  this.entry.length);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  System.arraycopy(FOUR_BYTES_BUF,  0,  this.entry.length);  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	System.arraycopy(FOUR_BYTES_BUF,  0,  this.entry.length);	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    this.entry    =    readNewEntry(true);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
144	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entryBytes_BUF,  false)  ==  0)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entryBytes_BUF,  false)  ==  0)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(this.entryBytes_BUF,  false)  ==  0)  {	  }    else    if(CpioUtil.byteArray2long(this.entryBytes_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
145	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entryBytes_BUF,  true)  ==  this.entry)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entryBytes_BUF,  true)  ==  this.entry)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(this.entryBytes_BUF,  true)  ==  this.entry)  {	  }    else    if(CpioUtil.byteArray2long(this.entryBytes_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
146	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  System.arraycopy(FOUR_BYTES_BUF,  0,  this.entry.length))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  System.arraycopy(FOUR_BYTES_BUF,  0,  this.entry.length))  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  System.arraycopy(FOUR_BYTES_BUF,  0,  this.entry.length))  {	  }    else    if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,    true)    ==    System.arraycopy(TWO_BYTES_BUF,    0,    this.entry.length))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
147	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  System.arraycopy(FOUR_BYTES_BUF,  0,  this.entry.length))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  System.arraycopy(FOUR_BYTES_BUF,  0,  this.entry.length))  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  System.arraycopy(FOUR_BYTES_BUF,  0,  this.entry.length))  {	  }    else    if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,    true)    ==    System.arraycopy(TWO_BYTES_BUF,    0,    this.entry.length))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
148	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(this.entry.length,  true)  ==  System.arraycopy(TWO_BYTES_BUF,  0,  this.entry.length))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(this.entry.length,  true)  ==  System.arraycopy(TWO_BYTES_BUF,  0,  this.entry.length))  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(this.entry.length,  true)  ==  System.arraycopy(TWO_BYTES_BUF,  0,  this.entry.length))  {	  }    else    if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,    true)    ==    System.arraycopy(TWO_BYTES_BUF,    0,    this.entry.length))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
149	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  System.arraycopy(FOUR_BYTES_BUF,  0,  this.entry.length))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  System.arraycopy(FOUR_BYTES_BUF,  0,  this.entry.length))  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  System.arraycopy(FOUR_BYTES_BUF,  0,  this.entry.length))  {	  }    else    if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,    true)    ==    System.arraycopy(TWO_BYTES_BUF,    0,    this.entry.length))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
150	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(THIS_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(THIS_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(THIS_BYTES_BUF,  false)  ==  MAGIC_NEW)  {	  }    else    if(CpioUtil.byteArray2long(THIS_BYTES_BUF,    true)    ==    MAGIC_NEW)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
151	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    this.entry    =    readNewEntry(false);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
152	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);  }  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);  }	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    this.entry    =    readNewEntry(false);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
153	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(this.entry,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(this.entry,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);  }  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(this.entry,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);  }	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    this.entry    =    readNewEntry(false);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
154	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(this.entry,  true)  ==  CpioUtil.BYTES_BUF)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(this.entry,  true)  ==  CpioUtil.BYTES_BUF)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(this.entry,  true)  ==  CpioUtil.BYTES_BUF)  {	  }    else    if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,    true)    ==    this.entry)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
155	[BUG]  [BUGGY]  }  else  if(FOUR_BYTES_BUF.length  ==  this.old_BINARY)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(FOUR_BYTES_BUF.length  ==  this.old_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(FOUR_BYTES_BUF.length  ==  this.old_BINARY)  {	  }    else    if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,    true)    ==    this.old_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
156	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(SIX_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(SIX_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(SIX_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {	  }    else    if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,    true)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
157	[BUG]  [BUGGY]  }  else  if(FOUR_BYTES_BUF.length  ==  CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  this.old_BINARY)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(FOUR_BYTES_BUF.length  ==  CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  this.old_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(FOUR_BYTES_BUF.length  ==  CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  this.old_BINARY)  {	  }    else    if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    true)    ==    this.old_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
158	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(this.entry,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(this.entry,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(this.entry,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    this.entry    =    readNewEntry(true);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
159	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(THIS_BUF,  true)  ==  MAGIC_NEW)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(THIS_BUF,  true)  ==  MAGIC_NEW)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(THIS_BUF,  true)  ==  MAGIC_NEW)  {	  }    else    if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,    true)    ==    MAGIC_NEW)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
160	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(THIS_BYTES_BUF,  true)  ==  this.old_BINARY)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(THIS_BYTES_BUF,  true)  ==  this.old_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(THIS_BYTES_BUF,  true)  ==  this.old_BINARY)  {	  }    else    if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,    true)    ==    this.old_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
161	[BUG]  [BUGGY]  }  else  if(FOUR_BYTES_BUF.length  ==  CpioUtil.byteArray2long(this.entry,  false)  ==  CpioUtil.BYTES_BUF)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(FOUR_BYTES_BUF.length  ==  CpioUtil.byteArray2long(this.entry,  false)  ==  CpioUtil.BYTES_BUF)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(FOUR_BYTES_BUF.length  ==  CpioUtil.byteArray2long(this.entry,  false)  ==  CpioUtil.BYTES_BUF)  {	  }    else    if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,    false)    ==    this.entry)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
162	[BUG]  [BUGGY]  }  else  if(FOUR_BYTES_BUF.length  ==  CpioUtil.byteArray2long(this.entry,  false)  ==  CPT_BYTES_BUF)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(FOUR_BYTES_BUF.length  ==  CpioUtil.byteArray2long(this.entry,  false)  ==  CPT_BYTES_BUF)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(FOUR_BYTES_BUF.length  ==  CpioUtil.byteArray2long(this.entry,  false)  ==  CPT_BYTES_BUF)  {	  }    else    if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,    false)    ==    this.entry)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
163	[BUG]  [BUGGY]  System.arraycopy(FOUR_BYTES_BUF,  0,  this.entryBytesRead);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  System.arraycopy(FOUR_BYTES_BUF,  0,  this.entryBytesRead);  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	System.arraycopy(FOUR_BYTES_BUF,  0,  this.entryBytesRead);	  System.arraycopy(FOUR_BYTES_BUF,    0,    this.blockSize);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
164	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(THIS_BUF,  false)  ==  MAGIC_NEW)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(THIS_BUF,  false)  ==  MAGIC_NEW)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(THIS_BUF,  false)  ==  MAGIC_NEW)  {	  }    else    if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
165	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(true);  }  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(true);  }  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(true);  }	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    this.entry    =    readNewEntry(false);    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
166	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(this.entry,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(false);  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(this.entry,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(false);  }  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(this.entry,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(false);  }	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    this.entry    =    readNewEntry(false);    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
167	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(THIS_BYTES_BUF,  false)!=  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(THIS_BYTES_BUF,  false)!=  MAGIC_OLD_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(THIS_BYTES_BUF,  false)!=  MAGIC_OLD_BINARY)  {	  }    else    if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,    false)!=    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
168	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(this.entryBytesRead,  false)  ==  0)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(this.entryBytesRead,  false)  ==  0)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(this.entryBytesRead,  false)  ==  0)  {	  }    else    if(!CpioUtil.byteArray2long(this.entryBytesRead,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
169	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(THRESHOLD_BINARY,  false)  ==  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(THRESHOLD_BINARY,  false)  ==  MAGIC_OLD_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(THRESHOLD_BINARY,  false)  ==  MAGIC_OLD_BINARY)  {	  }    else    if(!CpioUtil.byteArray2long(THRESHOLD_BINARY,    true)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
170	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(THRESHOLD_BINARY,  true)  ==  MAGIC_NEW)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(THRESHOLD_BINARY,  true)  ==  MAGIC_NEW)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(THRESHOLD_BINARY,  true)  ==  MAGIC_NEW)  {	  }    else    if(!CpioUtil.byteArray2long(THRESHOLD_BINARY,    true)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
171	[BUG]  [BUGGY]  }  else  if(FOUR_BYTES_BUF.length  ==  CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  this.entry)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(FOUR_BYTES_BUF.length  ==  CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  this.entry)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(FOUR_BYTES_BUF.length  ==  CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  this.entry)  {	  }    else    if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    this.entry)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
172	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entry,  false)  ==  TWO_BYTES_BUF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entry,  false)  ==  TWO_BYTES_BUF)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(this.entry,  false)  ==  TWO_BYTES_BUF)  {	  }    else    if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    this.entry)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
173	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entry,  false)  ==  CpioUtil.BYTES_BUF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entry,  false)  ==  CpioUtil.BYTES_BUF)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(this.entry,  false)  ==  CpioUtil.BYTES_BUF)  {	  }    else    if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    this.entry)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
174	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  this.entryEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  this.entryEOF)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  this.entryEOF)  {	  }    else    if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
175	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)!=  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)!=  MAGIC_OLD_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)!=  MAGIC_OLD_BINARY)  {	  }    else    if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)!=    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
176	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(this.entry,  false)!=  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(this.entry,  false)!=  MAGIC_OLD_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(this.entry,  false)!=  MAGIC_OLD_BINARY)  {	  }    else    if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)!=    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
177	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entryBytesRead,  true)  ==  this.entry)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entryBytesRead,  true)  ==  this.entry)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(this.entryBytesRead,  true)  ==  this.entry)  {	  }    else    if(CpioUtil.byteArray2long(this.entryBytesRead,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
178	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(SIX_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(SIX_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(SIX_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {	  }    else    if(CpioUtil.byteArray2long(this.entryBytesRead,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
179	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entryBytesRead,  false)  ==  this.entry)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entryBytesRead,  false)  ==  this.entry)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(this.entryBytesRead,  false)  ==  this.entry)  {	  }    else    if(CpioUtil.byteArray2long(this.entryBytesRead,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
180	[BUG]  [BUGGY]  }  else  if(FOUR_BYTES_BUF.length  ==  CpioUtil.byteArray2long(this.entry,  false)  ==  this.entry)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(FOUR_BYTES_BUF.length  ==  CpioUtil.byteArray2long(this.entry,  false)  ==  this.entry)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(FOUR_BYTES_BUF.length  ==  CpioUtil.byteArray2long(this.entry,  false)  ==  this.entry)  {	  }    else    if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,    false)    ==    this.entry)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
181	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entry,  false)  ==  CPT_BYTES_BUF)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entry,  false)  ==  CPT_BYTES_BUF)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(this.entry,  false)  ==  CPT_BYTES_BUF)  {	  }    else    if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,    false)    ==    this.entry)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
182	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(true);  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(true);  }  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  this.entry  =  readNewEntry(true);  }	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    true)    ==    MAGIC_NEW)    {    this.entry    =    readNewEntry(true);    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
183	[BUG]  [BUGGY]  System.arraycopy(FOUR_BYTES_BUF,  0,  this.blockSize  +  1);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  System.arraycopy(FOUR_BYTES_BUF,  0,  this.blockSize  +  1);  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	System.arraycopy(FOUR_BYTES_BUF,  0,  this.blockSize  +  1);	  System.arraycopy(FOUR_BYTES_BUF,    0,    this.blockSize);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
184	[BUG]  [BUGGY]  System.arraycopy(FOUR_BYTES_BUF,  0,  this.entryBytesRead.length);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  System.arraycopy(FOUR_BYTES_BUF,  0,  this.entryBytesRead.length);  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	System.arraycopy(FOUR_BYTES_BUF,  0,  this.entryBytesRead.length);	  System.arraycopy(FOUR_BYTES_BUF,    0,    this.blockSize);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
185	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(false);  }  else  {  System.arraycopy(FOUR_BYTES_BUF  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(false);  }  else  {  System.arraycopy(FOUR_BYTES_BUF  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(false);  }  else  {  System.arraycopy(FOUR_BYTES_BUF	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    this.entry    =    readNewEntry(true);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    this.    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
186	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(false);  }  else  {  System.arraycopy(FOUR_BYTES_BU  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(false);  }  else  {  System.arraycopy(FOUR_BYTES_BU  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(false);  }  else  {  System.arraycopy(FOUR_BYTES_BU	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    this.entry    =    readNewEntry(true);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    this.    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
187	[BUG]  [BUGGY]  }  else  if(FOUR_BYTES_BUF.length  ==  CpioUtil.byteArray2long(this.entry,  true)  ==  this.entry)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(FOUR_BYTES_BUF.length  ==  CpioUtil.byteArray2long(this.entry,  true)  ==  this.entry)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(FOUR_BYTES_BUF.length  ==  CpioUtil.byteArray2long(this.entry,  true)  ==  this.entry)  {	  }    else    if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,    true)    ==    this.entry)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
188	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(false);  }  else  {  System.arraycopy(TWO_B  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(false);  }  else  {  System.arraycopy(TWO_B  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(false);  }  else  {  System.arraycopy(TWO_B	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    this.entry    =    readNewEntry(false);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
189	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(false);  }  else  {  System.arraycopy(TWO_  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(false);  }  else  {  System.arraycopy(TWO_  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(false);  }  else  {  System.arraycopy(TWO_	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    this.entry    =    readNewEntry(false);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
190	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(false);  }  else  {  System.arraycopy(TWO_  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(false);  }  else  {  System.arraycopy(TWO_  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  this.entry  =  readOldBinaryEntry(false);  }  else  {  System.arraycopy(TWO_	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    this.entry    =    readNewEntry(false);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
191	[BUG]  [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  this.entryEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  this.entryEOF)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  this.entryEOF)  {	  }    else    if(!CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
192	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(SIX_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(SIX_BYTES_BUF,  true)  ==  MAGIC_NEW)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(SIX_BYTES_BUF,  true)  ==  MAGIC_NEW)  {	  }    else    if(CpioUtil.byteArray2long(THIS_BYTES_BUF,    true)    ==    MAGIC_NEW)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
193	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  this.entryEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  this.entryEOF)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  this.entryEOF)  {	  }    else    if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
194	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  this.entryEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  this.entryEOF)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  this.entryEOF)  {	  }    else    if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,    false)    ==    MAGIC_NEW)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
195	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entry,  false)  ==  this.entry)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entry,  false)  ==  this.entry)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(this.entry,  false)  ==  this.entry)  {	  }    else    if(CpioUtil.byteArray2long(this.entry,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
196	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entry,  true)  ==  this.entry)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entry,  true)  ==  this.entry)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(this.entry,  true)  ==  this.entry)  {	  }    else    if(CpioUtil.byteArray2long(this.entry,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
197	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(SIX_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(SIX_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(SIX_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {	  }    else    if(CpioUtil.byteArray2long(THIS_BYTES_BUF,    true)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
198	[BUG]  [BUGGY]  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    this.entry    =    readNewEntry(false);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
199	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);  }  else  {  System.arraycopy(TWO  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);  }  else  {  System.arraycopy(TWO  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);  }  else  {  System.arraycopy(TWO	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    this.entry    =    readNewEntry(false);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
200	[BUG]  [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);  }  else  {  System.arraycopy(TWO_  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);  }  else  {  System.arraycopy(TWO_  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(CpioUtil.byteArray2long(FOUR_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);  }  else  {  System.arraycopy(TWO_	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    this.entry    =    readNewEntry(false);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
201	[BUG]  [BUGGY]  if(SIX_BYTES_BUF.length  <  SIX_BYTES_BUF.length)  {  this.entry  =  readOldBinaryEntry(false);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  if(SIX_BYTES_BUF.length  <  SIX_BYTES_BUF.length)  {  this.entry  =  readOldBinaryEntry(false);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	if(SIX_BYTES_BUF.length  <  SIX_BYTES_BUF.length)  {  this.entry  =  readOldBinaryEntry(false);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,	  if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    this.entry    =    readNewEntry(false);    }    else    {    System.arraycopy(TWO_BYTES_BUF,    0,    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
202	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entry,  false)  ==  CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  this.entry)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entry,  false)  ==  CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  this.entry)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(this.entry,  false)  ==  CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  this.entry)  {	  }    else    if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    this.entry)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
203	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entry,  false)  ==  CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(this.entry,  false)  ==  CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(this.entry,  false)  ==  CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {	  }    else    if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    false)    ==    this.entry)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
204	[BUG]  [BUGGY]  }  else  if(FOUR_BYTES_BUF.length  ==  CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(FOUR_BYTES_BUF.length  ==  CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(FOUR_BYTES_BUF.length  ==  CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {	  }    else    if(CpioUtil.byteArray2long(TWO_BYTES_BUF,    true)    ==    this.old_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
205	[BUG]  [BUGGY]  }  else  if(cpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  this.entry)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(cpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  this.entry)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(cpioUtil.byteArray2long(FOUR_BYTES_BUF,  true)  ==  this.entry)  {	  }    else    if(cpioUtil.byteArray2long(FOUR_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
206	[BUG]  [BUGGY]  }  else  if(CpioUtil.byteArray2long(THIS_BYTES_BUF,  false)  ==  this.entry)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  CpioArchiveEntry  getNextCPIOEntry()  throws  IOException  {  ensureOpen();  if  (this.entry  !=  null)  {  closeEntry();  }  readFully(TWO_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  false)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(false);      [BUGGY]  }  else  if(CpioUtil.byteArray2long(THIS_BYTES_BUF,  false)  ==  this.entry)  {  [BUGGY]      ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {  this.entry  =  readNewEntry(false);  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	0.7071067811865475	194	195	1	replace	}  else  if(CpioUtil.byteArray2long(THIS_BYTES_BUF,  false)  ==  this.entry)  {	  }    else    if(CpioUtil.byteArray2long(THIS_BYTES_BUF,    false)    ==    MAGIC_OLD_BINARY)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
