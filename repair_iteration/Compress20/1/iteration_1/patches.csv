bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.entry  =  readNEW();  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNEW();  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNEW();	  this.entry    =    readNEWEntry();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
2	[BUG]  [BUGGY]  this.entry  =  readNEW_Entry();  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNEW_Entry();  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNEW_Entry();	  this.entry    =    readNEWEntry();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
3	[BUG]  [BUGGY]  this.entry  =  readNEW(false);  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNEW(false);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNEW(false);	  this.entry    =    readNEWEntry();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
4	[BUG]  [BUGGY]  this.entry  =  readNEw();  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNEw();  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNEw();	  this.entry    =    readNEWEntry();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
5	[BUG]  [BUGGY]      String  magicString  =  ArchiveUtils.toAsciiString(MAGIC_NEW_CRC);  [CE]  variable  magicString  is  already  defined  in  method  getNextCPIOEntry()  [FE]    NullPointerException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]      String  magicString  =  ArchiveUtils.toAsciiString(MAGIC_NEW_CRC);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	        String  magicString  =  ArchiveUtils.toAsciiString(MAGIC_NEW_CRC);	  	non-compiled	[CE]  variable  magicString  is  already  defined  in  method  getNextCPIOEntry()	8	None	add
6	[BUG]  [BUGGY]      String  magicString  =  ArchiveUtils.toAsciiString(MAGIC_NEW_CRC);  this.entry  =  readNewEntry(false);  [CE]  variable  magicString  is  already  defined  in  method  getNextCPIOEntry()  [FE]      NullPointerException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]      String  magicString  =  ArchiveUtils.toAsciiString(MAGIC_NEW_CRC);  this.entry  =  readNewEntry(false);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	        String  magicString  =  ArchiveUtils.toAsciiString(MAGIC_NEW_CRC);  this.entry  =  readNewEntry(false);	  	non-compiled	[CE]  variable  magicString  is  already  defined  in  method  getNextCPIOEntry()	8	None	add
7	[BUG]  [BUGGY]      String  magicString  =  ArchiveUtils.toAsciiString(MAGIC_NEW_CRC);  this.entry  =  readNewEntry(true);  [CE]  variable  magicString  is  already  defined  in  method  getNextCPIOEntry()  [FE]        NullPointerException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]      String  magicString  =  ArchiveUtils.toAsciiString(MAGIC_NEW_CRC);  this.entry  =  readNewEntry(true);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	        String  magicString  =  ArchiveUtils.toAsciiString(MAGIC_NEW_CRC);  this.entry  =  readNewEntry(true);	  	non-compiled	[CE]  variable  magicString  is  already  defined  in  method  getNextCPIOEntry()	8	None	add
8	[BUG]  [BUGGY]      String  magicString  =  ArchiveUtils.toAsciiString(MAGIC_NEW);  [CE]  variable  magicString  is  already  defined  in  method  getNextCPIOEntry()  [FE]          NullPointerException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]      String  magicString  =  ArchiveUtils.toAsciiString(MAGIC_NEW);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	        String  magicString  =  ArchiveUtils.toAsciiString(MAGIC_NEW);	  	non-compiled	[CE]  variable  magicString  is  already  defined  in  method  getNextCPIOEntry()	8	None	add
9	[BUG]  [BUGGY]      String  magicString  =  ArchiveUtils.toAsciiString(MAGIC_NEW);  this.entry  =  readNewEntry(false);  [CE]  variable  magicString  is  already  defined  in  method  getNextCPIOEntry()  [FE]            NullPointerException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]      String  magicString  =  ArchiveUtils.toAsciiString(MAGIC_NEW);  this.entry  =  readNewEntry(false);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	        String  magicString  =  ArchiveUtils.toAsciiString(MAGIC_NEW);  this.entry  =  readNewEntry(false);	  	non-compiled	[CE]  variable  magicString  is  already  defined  in  method  getNextCPIOEntry()	8	None	add
10	[BUG]  [BUGGY]      String  magicString  =  ArchiveUtils.toAsciiString(MAGIC_NEW);  this.entry  =  readNewEntry(true);  [CE]  variable  magicString  is  already  defined  in  method  getNextCPIOEntry()  [FE]              NullPointerException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]      String  magicString  =  ArchiveUtils.toAsciiString(MAGIC_NEW);  this.entry  =  readNewEntry(true);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	        String  magicString  =  ArchiveUtils.toAsciiString(MAGIC_NEW);  this.entry  =  readNewEntry(true);	  	non-compiled	[CE]  variable  magicString  is  already  defined  in  method  getNextCPIOEntry()	8	None	add
11	[BUG]  [BUGGY]  [FE]  NumberFormatException  [FE]    IOException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(true);  this.entry  =  readNewEntry(true);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	add	this.entry    =    readNewEntry(true);    this.entry  =  readNewEntry(true);	  	compilable	  [FE]  NumberFormatException  	1	1	add
12	[BUG]  [BUGGY]  this.entry  =  readNewEntry(true);  this.entry  =  readNewEntry(true);  [FE]  NumberFormatException  [FE]    IOException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(true);  this.entry  =  readNewEntry(true);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry    =    readNewEntry(true);    this.entry  =  readNewEntry(true);	  	compilable	  [FE]  NumberFormatException  	1	1	add
13	[BUG]  [BUGGY]  [FE]  NumberFormatException  [FE]      IOException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(true);  this.entry  =  readNewEntry(false);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	add	this.entry    =    readNewEntry(true);    this.entry  =  readNewEntry(false);	  	compilable	  [FE]  NumberFormatException  	1	1	add
14	[BUG]  [BUGGY]  this.entry  =  readNewEntry(true);  this.entry  =  readNewEntry(false);  [FE]  NumberFormatException  [FE]      IOException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(true);  this.entry  =  readNewEntry(false);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry    =    readNewEntry(true);    this.entry  =  readNewEntry(false);	  	compilable	  [FE]  NumberFormatException  	1	1	add
15	[BUG]  [BUGGY]  this.entry  =  readNewEntry(true);  This.entry  =  readNewEntry(true);  [CE]  cannot  find  symbol  This  [FE]        IOException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(true);  This.entry  =  readNewEntry(true);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry    =    readNewEntry(true);    This.entry  =  readNewEntry(true);	  	non-compiled	[CE]  cannot  find  symbol  This	1	None	add
16	[BUG]  [BUGGY]  this.entry  =  readNewEntry(true);  this.entry  =  readNewEntry(true,  magicString);  [CE]  method  readNewEntry  in  class  CpioArchiveInputStream  cannot  be  applied  to  given  types;  [FE]          IOException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(true);  this.entry  =  readNewEntry(true,  magicString);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry    =    readNewEntry(true);    this.entry  =  readNewEntry(true,  magicString);	  	non-compiled	[CE]  method  readNewEntry  in  class  CpioArchiveInputStream  cannot  be  applied  to  given  types;	1	None	add
17	[BUG]  [BUGGY]  this.entry  =  readNewEntry(true);  This.entry  =  readNewEntry(false);  [CE]  cannot  find  symbol  This  [FE]            IOException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(true);  This.entry  =  readNewEntry(false);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry    =    readNewEntry(true);    This.entry  =  readNewEntry(false);	  	non-compiled	[CE]  cannot  find  symbol  This	1	None	add
18	[BUG]  [BUGGY]  this.entry  =  readNEW(true);  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNEW(true);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNEW(true);	  this.entry    =    readNEWEntry(true);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
19	[BUG]  [BUGGY]  this.entry  =  readNEW(true,  magicString);  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNEW(true,  magicString);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNEW(true,  magicString);	  this.entry    =    readNEWEntry(true);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
20	[BUG]  [BUGGY]  this.entry  =  readNewEntry(NEW_CRC);  [CE]  cannot  find  symbol  NEW_CRC  [FE]            IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(NEW_CRC);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNewEntry(NEW_CRC);	  this.entry    =    readNewEntry();    	non-compiled	[CE]  cannot  find  symbol  NEW_CRC	4	None	replace
21	[BUG]  [BUGGY]  this.entry  =  readNewEntry(null);  [CE]  method  readNewEntry  in  class  CpioArchiveInputStream  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(null);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNewEntry(null);	  this.entry    =    readNewEntry();    	non-compiled	[CE]  method  readNewEntry  in  class  CpioArchiveInputStream  cannot  be  applied  to  given  types;	4	None	replace
22	[BUG]  [BUGGY]  this.entry  =  readNewEntry(NEW_CRC,  MAX_NEW_CRC);  [CE]  cannot  find  symbol  NEW_CRC  [FE]                IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(NEW_CRC,  MAX_NEW_CRC);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNewEntry(NEW_CRC,  MAX_NEW_CRC);	  this.entry    =    readNewEntry();    	non-compiled	[CE]  cannot  find  symbol  NEW_CRC	4	None	replace
23	[BUG]  [BUGGY]  this.entry  =  readNewEntry(tmpbuf,  blockSize);  [CE]  method  readNewEntry  in  class  CpioArchiveInputStream  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(tmpbuf,  blockSize);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNewEntry(tmpbuf,  blockSize);	  this.entry    =    readNewEntry();    	non-compiled	[CE]  method  readNewEntry  in  class  CpioArchiveInputStream  cannot  be  applied  to  given  types;	4	None	replace
24	[BUG]  [BUGGY]  this.entry  =  readNEW(false,  magicString);  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNEW(false,  magicString);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNEW(false,  magicString);	  this.entry    =    readNEWEntry(false);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
25	[BUG]  [BUGGY]  this.entry  =  readNEWEntry(false,  magicString);  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNEWEntry(false,  magicString);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNEWEntry(false,  magicString);	  this.entry    =    readNEWEntry(false);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
26	[BUG]  [BUGGY]  this.entry  =  readNewEntry(true,  false);  [CE]  method  readNewEntry  in  class  CpioArchiveInputStream  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(true,  false);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNewEntry(true,  false);	  this.entry    =    readNewEntry(false,    true);    	non-compiled	[CE]  method  readNewEntry  in  class  CpioArchiveInputStream  cannot  be  applied  to  given  types;	7	None	replace
27	[BUG]  [BUGGY]  this.entry  =  readNewEntry(false,  true,  magicString);  [CE]  method  readNewEntry  in  class  CpioArchiveInputStream  cannot  be  applied  to  given  types;  [FE]                    IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(false,  true,  magicString);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNewEntry(false,  true,  magicString);	  this.entry    =    readNewEntry(false,    true);    	non-compiled	[CE]  method  readNewEntry  in  class  CpioArchiveInputStream  cannot  be  applied  to  given  types;	7	None	replace
28	[BUG]  [BUGGY]  this.entry  =  readNewEntry(true,  true);  [CE]  method  readNewEntry  in  class  CpioArchiveInputStream  cannot  be  applied  to  given  types;  [FE]                      IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(true,  true);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNewEntry(true,  true);	  this.entry    =    readNewEntry(false,    true);    	non-compiled	[CE]  method  readNewEntry  in  class  CpioArchiveInputStream  cannot  be  applied  to  given  types;	7	None	replace
29	[BUG]  [BUGGY]  this.entry  =  readNewEntry(false,  false,  magicString);  [CE]  method  readNewEntry  in  class  CpioArchiveInputStream  cannot  be  applied  to  given  types;  [FE]                        IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(false,  false,  magicString);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNewEntry(false,  false,  magicString);	  this.entry    =    readNewEntry(false,    true);    	non-compiled	[CE]  method  readNewEntry  in  class  CpioArchiveInputStream  cannot  be  applied  to  given  types;	7	None	replace
30	[BUG]  [BUGGY]  this.entry  =  readNewEntry(false,  true,  MAX_NEW_CRC);  [CE]  cannot  find  symbol  MAX_NEW_CRC  [FE]                          IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(false,  true,  MAX_NEW_CRC);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNewEntry(false,  true,  MAX_NEW_CRC);	  this.entry    =    readNewEntry(false,    true);    	non-compiled	[CE]  cannot  find  symbol  MAX_NEW_CRC	7	None	replace
31	[BUG]  [BUGGY]  this.entry  =  readNewEntry(false,  true,  MAGIC_NEW_CRC);  [CE]  method  readNewEntry  in  class  CpioArchiveInputStream  cannot  be  applied  to  given  types;  [FE]                            IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(false,  true,  MAGIC_NEW_CRC);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNewEntry(false,  true,  MAGIC_NEW_CRC);	  this.entry    =    readNewEntry(false,    true);    	non-compiled	[CE]  method  readNewEntry  in  class  CpioArchiveInputStream  cannot  be  applied  to  given  types;	7	None	replace
32	[BUG]  [BUGGY]  this.entry  =  readNewEntry(false,  true,  MISSING_NEW);  [CE]  cannot  find  symbol  MISSING_NEW  [FE]                              IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(false,  true,  MISSING_NEW);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNewEntry(false,  true,  MISSING_NEW);	  this.entry    =    readNewEntry(false,    true);    	non-compiled	[CE]  cannot  find  symbol  MISSING_NEW	7	None	replace
33	[BUG]  [BUGGY]  this.entry  =  readNewEntry(true,  magicString);  [CE]  method  readNewEntry  in  class  CpioArchiveInputStream  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(true,  magicString);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNewEntry(true,  magicString);	  this.entry    =    readNewEntry(false,    magicString);    	non-compiled	[CE]  method  readNewEntry  in  class  CpioArchiveInputStream  cannot  be  applied  to  given  types;	5	None	replace
34	[BUG]  [BUGGY]  this.entry  =  readNewEntry(false,  magicString,  tmpbuf);  [CE]  method  readNewEntry  in  class  CpioArchiveInputStream  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(false,  magicString,  tmpbuf);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNewEntry(false,  magicString,  tmpbuf);	  this.entry    =    readNewEntry(false,    magicString);    	non-compiled	[CE]  method  readNewEntry  in  class  CpioArchiveInputStream  cannot  be  applied  to  given  types;	5	None	replace
35	[BUG]  [BUGGY]  this.entry  =  readNewEntry(false,  magicString,  FOUR_BYTES_BUF);  [CE]  method  readNewEntry  in  class  CpioArchiveInputStream  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(false,  magicString,  FOUR_BYTES_BUF);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNewEntry(false,  magicString,  FOUR_BYTES_BUF);	  this.entry    =    readNewEntry(false,    magicString);    	non-compiled	[CE]  method  readNewEntry  in  class  CpioArchiveInputStream  cannot  be  applied  to  given  types;	5	None	replace
36	[BUG]  [BUGGY]  this.entry  =  readNewEntry(false,  MAX_NEW_CRC,  magicString);  [CE]  cannot  find  symbol  MAX_NEW_CRC  [FE]                    IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(false,  MAX_NEW_CRC,  magicString);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNewEntry(false,  MAX_NEW_CRC,  magicString);	  this.entry    =    readNewEntry(false,    magicString);    	non-compiled	[CE]  cannot  find  symbol  MAX_NEW_CRC	5	None	replace
37	[BUG]  [BUGGY]  this.entry  =  readNewEntry(false,  magicString,  FOUR_BYTES_BUF.length);  [CE]  method  readNewEntry  in  class  CpioArchiveInputStream  cannot  be  applied  to  given  types;  [FE]                      IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(false,  magicString,  FOUR_BYTES_BUF.length);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNewEntry(false,  magicString,  FOUR_BYTES_BUF.length);	  this.entry    =    readNewEntry(false,    magicString);    	non-compiled	[CE]  method  readNewEntry  in  class  CpioArchiveInputStream  cannot  be  applied  to  given  types;	5	None	replace
38	[BUG]  [BUGGY]  this.entry  =  readNewEntry(false,  magicString,  READ_NEW);  [CE]  cannot  find  symbol  READ_NEW  [FE]                        IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(false,  magicString,  READ_NEW);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNewEntry(false,  magicString,  READ_NEW);	  this.entry    =    readNewEntry(false,    magicString);    	non-compiled	[CE]  cannot  find  symbol  READ_NEW	5	None	replace
39	[BUG]  [BUGGY]  this.entry  =  readNewEntry(false,  magicString,  null);  [CE]  method  readNewEntry  in  class  CpioArchiveInputStream  cannot  be  applied  to  given  types;  [FE]                          IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(false,  magicString,  null);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNewEntry(false,  magicString,  null);	  this.entry    =    readNewEntry(false,    magicString);    	non-compiled	[CE]  method  readNewEntry  in  class  CpioArchiveInputStream  cannot  be  applied  to  given  types;	5	None	replace
40	[BUG]  [BUGGY]  this.entry  =  readNEwEntry(false);  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNEwEntry(false);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNEwEntry(false);	  this.entry    =    readNEwEntry(true);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
41	[BUG]  [BUGGY]  this.entry  =  readNEwEntry(true,  magicString);  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNEwEntry(true,  magicString);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNEwEntry(true,  magicString);	  this.entry    =    readNEwEntry(true);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
42	[BUG]  [BUGGY]  this.entry  =  readNEwEntry(true,  MAGIC_NEW_CRC);  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNEwEntry(true,  MAGIC_NEW_CRC);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNEwEntry(true,  MAGIC_NEW_CRC);	  this.entry    =    readNEwEntry(true);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
43	[BUG]  [BUGGY]  this.entry  =  readNEwEntry(true,  MAX_NEW_CRC);  [CE]  cannot  find  symbol  MAX_NEW_CRC  [FE]                IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNEwEntry(true,  MAX_NEW_CRC);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNEwEntry(true,  MAX_NEW_CRC);	  this.entry    =    readNEwEntry(true);    	non-compiled	[CE]  cannot  find  symbol  MAX_NEW_CRC	11	None	replace
44	[BUG]  [BUGGY]  this.entry  =  readNewEntry(true,  MISSING_NEW_CRC);  [CE]  cannot  find  symbol  MISSING_NEW_CRC  [FE]        IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(true,  MISSING_NEW_CRC);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNewEntry(true,  MISSING_NEW_CRC);	  this.entry    =    readNewEntry(false,    MISSING_NEW_CRC);    	non-compiled	[CE]  cannot  find  symbol  MISSING_NEW_CRC	13	None	replace
45	[BUG]  [BUGGY]  this.entry  =  readNewEntry(true,  MISSING_NEW);  [CE]  cannot  find  symbol  MISSING_NEW  [FE]          IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(true,  MISSING_NEW);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNewEntry(true,  MISSING_NEW);	  this.entry    =    readNewEntry(false,    MISSING_NEW_CRC);    	non-compiled	[CE]  cannot  find  symbol  MISSING_NEW	13	None	replace
46	[BUG]  [BUGGY]  this.entry  =  readNewEntry(true,  MISSING_NEW_CREATOR);  [CE]  cannot  find  symbol  MISSING_NEW_CREATOR  [FE]            IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(true,  MISSING_NEW_CREATOR);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNewEntry(true,  MISSING_NEW_CREATOR);	  this.entry    =    readNewEntry(false,    MISSING_NEW_CRC);    	non-compiled	[CE]  cannot  find  symbol  MISSING_NEW_CREATOR	13	None	replace
47	[BUG]  [BUGGY]  this.entry  =  readNewEntry(true,  FOUR_BYTES_BUF);  [CE]  method  readNewEntry  in  class  CpioArchiveInputStream  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(true,  FOUR_BYTES_BUF);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNewEntry(true,  FOUR_BYTES_BUF);	  this.entry    =    readNewEntry(false,    MISSING_NEW_CRC);    	non-compiled	[CE]  method  readNewEntry  in  class  CpioArchiveInputStream  cannot  be  applied  to  given  types;	13	None	replace
48	[BUG]  [BUGGY]  this.entry  =  readNewEntry(true,  MISSING_NEW_CLOSE);  [CE]  cannot  find  symbol  MISSING_NEW_CLOSE  [FE]                IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(true,  MISSING_NEW_CLOSE);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNewEntry(true,  MISSING_NEW_CLOSE);	  this.entry    =    readNewEntry(false,    MISSING_NEW_CRC);    	non-compiled	[CE]  cannot  find  symbol  MISSING_NEW_CLOSE	13	None	replace
49	[BUG]  [BUGGY]  this.entry  =  readNewEntry(false,  MISSING_NEW_ASCII);  [CE]  cannot  find  symbol  MISSING_NEW_ASCII  [FE]                  IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(false,  MISSING_NEW_ASCII);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNewEntry(false,  MISSING_NEW_ASCII);	  this.entry    =    readNewEntry(false,    MISSING_NEW_CRC);    	non-compiled	[CE]  cannot  find  symbol  MISSING_NEW_ASCII	13	None	replace
50	[BUG]  [BUGGY]  this.entry  =  readNewEntry(false,  FOUR_BYTES_BUF);  [CE]  method  readNewEntry  in  class  CpioArchiveInputStream  cannot  be  applied  to  given  types;  [FE]                    IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(false,  FOUR_BYTES_BUF);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNewEntry(false,  FOUR_BYTES_BUF);	  this.entry    =    readNewEntry(false,    MISSING_NEW_CRC);    	non-compiled	[CE]  method  readNewEntry  in  class  CpioArchiveInputStream  cannot  be  applied  to  given  types;	13	None	replace
51	[BUG]  [BUGGY]  this.entry  =  readNewEntry(true,  MAX_NEW_CRC);  [CE]  cannot  find  symbol  MAX_NEW_CRC  [FE]                IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(true,  MAX_NEW_CRC);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNewEntry(true,  MAX_NEW_CRC);	  this.entry    =    readNewEntry(false,    MAX_NEW_CRC);    	non-compiled	[CE]  cannot  find  symbol  MAX_NEW_CRC	6	None	replace
52	[BUG]  [BUGGY]  this.entry  =  readNewEntry(false,  MAX_NEW_ASCII);  [CE]  cannot  find  symbol  MAX_NEW_ASCII  [FE]                  IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(false,  MAX_NEW_ASCII);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNewEntry(false,  MAX_NEW_ASCII);	  this.entry    =    readNewEntry(false,    MAX_NEW_CRC);    	non-compiled	[CE]  cannot  find  symbol  MAX_NEW_ASCII	6	None	replace
53	[BUG]  [BUGGY]  this.entry  =  readNewEntry(false,  MISSING_ASCII);  [CE]  cannot  find  symbol  MISSING_ASCII  [FE]                    IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(false,  MISSING_ASCII);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNewEntry(false,  MISSING_ASCII);	  this.entry    =    readNewEntry(false,    MAX_NEW_CRC);    	non-compiled	[CE]  cannot  find  symbol  MISSING_ASCII	6	None	replace
54	[BUG]  [BUGGY]  this.entry  =  readNewEntry(false,  true,  tmpbuf);  [CE]  method  readNewEntry  in  class  CpioArchiveInputStream  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(false,  true,  tmpbuf);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNewEntry(false,  true,  tmpbuf);	  this.entry    =    readNewEntry(false,    true);    	non-compiled	[CE]  method  readNewEntry  in  class  CpioArchiveInputStream  cannot  be  applied  to  given  types;	7	None	replace
55	[BUG]  [BUGGY]  this.entry  =  readNewEntry(false,  true,  MAX_NEW);  [CE]  cannot  find  symbol  MAX_NEW  [FE]                    IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(false,  true,  MAX_NEW);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNewEntry(false,  true,  MAX_NEW);	  this.entry    =    readNewEntry(false,    true);    	non-compiled	[CE]  cannot  find  symbol  MAX_NEW	7	None	replace
56	[BUG]  [BUGGY]  this.entry  =  readNewEntry(false,  true,  MIGIC_NEW);  [CE]  cannot  find  symbol  MIGIC_NEW  [FE]                      IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(false,  true,  MIGIC_NEW);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNewEntry(false,  true,  MIGIC_NEW);	  this.entry    =    readNewEntry(false,    true);    	non-compiled	[CE]  cannot  find  symbol  MIGIC_NEW	7	None	replace
57	[BUG]  [BUGGY]  this.entry  =  readNEwEntry();  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNEwEntry();  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNEwEntry();	  this.entry    =    readNEwEntry(true);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
58	[BUG]  [BUGGY]  this.entry  =  readNEwEntry(true,  FOUR_BYTES_BUF);  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNEwEntry(true,  FOUR_BYTES_BUF);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNEwEntry(true,  FOUR_BYTES_BUF);	  this.entry    =    readNEwEntry(true);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
59	[BUG]  [BUGGY]  this.entry  =  readNEwEntry(true,  FOUR_BYTES_BUF.length);  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNEwEntry(true,  FOUR_BYTES_BUF.length);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNEwEntry(true,  FOUR_BYTES_BUF.length);	  this.entry    =    readNEwEntry(true);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
60	[BUG]  [BUGGY]  this.entry  =  readNEwEntry(true,  MAX_NEW);  [CE]  cannot  find  symbol  MAX_NEW  [FE]                IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNEwEntry(true,  MAX_NEW);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNEwEntry(true,  MAX_NEW);	  this.entry    =    readNEwEntry(true);    	non-compiled	[CE]  cannot  find  symbol  MAX_NEW	11	None	replace
61	[BUG]  [BUGGY]  this.entry  =  readNewEntry(true);  System.arraycopy(FOUR_BYTES_BUF,  0,  this.entry,  FOUR_BYTES_BUF.length);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]    IOException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(true);  System.arraycopy(FOUR_BYTES_BUF,  0,  this.entry,  FOUR_BYTES_BUF.length);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry    =    readNewEntry(true);    System.arraycopy(FOUR_BYTES_BUF,  0,  this.entry,  FOUR_BYTES_BUF.length);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	1	None	add
62	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]      IOException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(true);  System.arraycopy(FOUR_BYTES_BUF,  0,  this.entry,  FOUR_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	add	this.entry    =    readNewEntry(true);    System.arraycopy(FOUR_BYTES_BUF,  0,  this.entry,  FOUR_BYTES_BUF.length,  FOUR_BYTES_BUF.length);	  	compilable	  [FE]  ArrayStoreException  	1	1	add
63	[BUG]  [BUGGY]  this.entry  =  readNewEntry(true);  System.arraycopy(FOUR_BYTES_BUF,  0,  this.entry,  FOUR_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  [FE]  ArrayStoreException  [FE]      IOException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(true);  System.arraycopy(FOUR_BYTES_BUF,  0,  this.entry,  FOUR_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry    =    readNewEntry(true);    System.arraycopy(FOUR_BYTES_BUF,  0,  this.entry,  FOUR_BYTES_BUF.length,  FOUR_BYTES_BUF.length);	  	compilable	  [FE]  ArrayStoreException  	1	1	add
64	[BUG]  [BUGGY]  this.entry  =  readNewEntry(true);  System.arraycopy(FOUR_BYTES_BUF,  0,  this.entry,  FOUR_BYTES_BUF.length);  this.entry  =  readNewEntry(true);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]        IOException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(true);  System.arraycopy(FOUR_BYTES_BUF,  0,  this.entry,  FOUR_BYTES_BUF.length);  this.entry  =  readNewEntry(true);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry    =    readNewEntry(true);    System.arraycopy(FOUR_BYTES_BUF,  0,  this.entry,  FOUR_BYTES_BUF.length);  this.entry  =  readNewEntry(true);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	1	None	add
65	[BUG]  [BUGGY]  this.entry  =  readNewEntry(true);  System.arraycopy(FOUR_BYTES_BUF,  0,  this.entry,  FOUR_BYTES_BUF.length);  this.entry  =  readNewEntry(false);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]          IOException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(true);  System.arraycopy(FOUR_BYTES_BUF,  0,  this.entry,  FOUR_BYTES_BUF.length);  this.entry  =  readNewEntry(false);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry    =    readNewEntry(true);    System.arraycopy(FOUR_BYTES_BUF,  0,  this.entry,  FOUR_BYTES_BUF.length);  this.entry  =  readNewEntry(false);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	1	None	add
66	[BUG]  [BUGGY]  this.entry  =  readNewEntry(true);  System.arraycopy(FOUR_BYTES_BUF,  0,  this.entry,  SIX_BYTES_BUF.length);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]            IOException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(true);  System.arraycopy(FOUR_BYTES_BUF,  0,  this.entry,  SIX_BYTES_BUF.length);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry    =    readNewEntry(true);    System.arraycopy(FOUR_BYTES_BUF,  0,  this.entry,  SIX_BYTES_BUF.length);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	1	None	add
67	[BUG]  [BUGGY]  this.entry  =  readNewEntry(true);  System.arraycopy(FOUR_BYTES_BUF,  0,  this.entry,  FOUR_BYTES_BUF.length,  FIELD_NEW);  [CE]  cannot  find  symbol  FIELD_NEW  [FE]              IOException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(true);  System.arraycopy(FOUR_BYTES_BUF,  0,  this.entry,  FOUR_BYTES_BUF.length,  FIELD_NEW);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry    =    readNewEntry(true);    System.arraycopy(FOUR_BYTES_BUF,  0,  this.entry,  FOUR_BYTES_BUF.length,  FIELD_NEW);	  	non-compiled	[CE]  cannot  find  symbol  FIELD_NEW	1	None	add
68	[BUG]  [BUGGY]  System.arraycopy(FOUR_BYTES_BUF,  0,  magicString,  FOUR_BYTES_BUF.length);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]    NullPointerException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  System.arraycopy(FOUR_BYTES_BUF,  0,  magicString,  FOUR_BYTES_BUF.length);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	System.arraycopy(FOUR_BYTES_BUF,  0,  magicString,  FOUR_BYTES_BUF.length);	      	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	9	None	replace
69	[BUG]  [BUGGY]  System.arraycopy(FOUR_BYTES_BUF,  0,  magicString,  FOUR_BYTES_BUF.length);  this.entry  =  readNewEntry(false);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]      NullPointerException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  System.arraycopy(FOUR_BYTES_BUF,  0,  magicString,  FOUR_BYTES_BUF.length);  this.entry  =  readNewEntry(false);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	System.arraycopy(FOUR_BYTES_BUF,  0,  magicString,  FOUR_BYTES_BUF.length);  this.entry  =  readNewEntry(false);	      	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	9	None	replace
70	[BUG]  [BUGGY]  System.arraycopy(FOUR_BYTES_BUF,  0,  magicString,  FOUR_BYTES_BUF.length);  this.entry  =  readNewEntry(true);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]        NullPointerException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  System.arraycopy(FOUR_BYTES_BUF,  0,  magicString,  FOUR_BYTES_BUF.length);  this.entry  =  readNewEntry(true);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	System.arraycopy(FOUR_BYTES_BUF,  0,  magicString,  FOUR_BYTES_BUF.length);  this.entry  =  readNewEntry(true);	      	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	9	None	replace
71	[BUG]  [BUGGY]  System.arraycopy(FOUR_BYTES_BUF,  0,  this.entryBytesRead,  MAX_BYTES_BUF.length);  [CE]  cannot  find  symbol  MAX_BYTES_BUF  [FE]          NullPointerException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  System.arraycopy(FOUR_BYTES_BUF,  0,  this.entryBytesRead,  MAX_BYTES_BUF.length);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	System.arraycopy(FOUR_BYTES_BUF,  0,  this.entryBytesRead,  MAX_BYTES_BUF.length);	      	non-compiled	[CE]  cannot  find  symbol  MAX_BYTES_BUF	9	None	replace
72	[BUG]  [BUGGY]  this.entry  =  readNewEntry(NEW);  [CE]  cannot  find  symbol  NEW  [FE]            IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(NEW);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNewEntry(NEW);	  this.entry    =    readNewEntry();    	non-compiled	[CE]  cannot  find  symbol  NEW	4	None	replace
73	[BUG]  [BUGGY]  this.entry  =  readNewEntry(null,  null);  [CE]  method  readNewEntry  in  class  CpioArchiveInputStream  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(null,  null);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNewEntry(null,  null);	  this.entry    =    readNewEntry();    	non-compiled	[CE]  method  readNewEntry  in  class  CpioArchiveInputStream  cannot  be  applied  to  given  types;	4	None	replace
74	[BUG]  [BUGGY]  this.entry  =  readNewEntry(false,  magicString,  TWO_BYTES_BUF);  [CE]  method  readNewEntry  in  class  CpioArchiveInputStream  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(false,  magicString,  TWO_BYTES_BUF);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNewEntry(false,  magicString,  TWO_BYTES_BUF);	  this.entry    =    readNewEntry(false,    magicString);    	non-compiled	[CE]  method  readNewEntry  in  class  CpioArchiveInputStream  cannot  be  applied  to  given  types;	5	None	replace
75	[BUG]  [BUGGY]  this.entry  =  readNewEntry(false,  magicString,  BYTES_BUF);  [CE]  cannot  find  symbol  BYTES_BUF  [FE]                IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(false,  magicString,  BYTES_BUF);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNewEntry(false,  magicString,  BYTES_BUF);	  this.entry    =    readNewEntry(false,    magicString);    	non-compiled	[CE]  cannot  find  symbol  BYTES_BUF	5	None	replace
76	[BUG]  [BUGGY]      System.arraycopy(FOUR_BYTES_BUF,  0,  this.entryBytesRead,  0);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]    NullPointerException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]      System.arraycopy(FOUR_BYTES_BUF,  0,  this.entryBytesRead,  0);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	        System.arraycopy(FOUR_BYTES_BUF,  0,  this.entryBytesRead,  0);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	8	None	add
77	[BUG]  [BUGGY]  this.entry  =  readNewEntry(true,  0);  [CE]  method  readNewEntry  in  class  CpioArchiveInputStream  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(true,  0);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNewEntry(true,  0);	  this.entry    =    readNewEntry(false,    MAX_NEW_CRC);    	non-compiled	[CE]  method  readNewEntry  in  class  CpioArchiveInputStream  cannot  be  applied  to  given  types;	6	None	replace
78	[BUG]  [BUGGY]  this.entry  =  readNewEntry(true,  BYTES_NEW);  [CE]  cannot  find  symbol  BYTES_NEW  [FE]                  IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(true,  BYTES_NEW);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNewEntry(true,  BYTES_NEW);	  this.entry    =    readNewEntry(false,    MAX_NEW_CRC);    	non-compiled	[CE]  cannot  find  symbol  BYTES_NEW	6	None	replace
79	[BUG]  [BUGGY]  this.entry  =  readNewEntry(true,  MISSING_NEW_CUSTOM);  [CE]  cannot  find  symbol  MISSING_NEW_CUSTOM  [FE]        IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(true,  MISSING_NEW_CUSTOM);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNewEntry(true,  MISSING_NEW_CUSTOM);	  this.entry    =    readNewEntry(false,    MISSING_NEW_CRC);    	non-compiled	[CE]  cannot  find  symbol  MISSING_NEW_CUSTOM	13	None	replace
80	[BUG]  [BUGGY]  this.entry  =  readNewEntry(true,  MISSING_NEW_RCC);  [CE]  cannot  find  symbol  MISSING_NEW_RCC  [FE]          IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(true,  MISSING_NEW_RCC);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNewEntry(true,  MISSING_NEW_RCC);	  this.entry    =    readNewEntry(false,    MISSING_NEW_CRC);    	non-compiled	[CE]  cannot  find  symbol  MISSING_NEW_RCC	13	None	replace
81	[BUG]  [BUGGY]  this.entry  =  readNEWEnaryEntry(true);  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNEWEnaryEntry(true);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNEWEnaryEntry(true);	  this.entry    =    readNEWEntry(true);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
82	[BUG]  [BUGGY]  this.entry  =  readNEWEntry(true,  magicString);  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNEWEntry(true,  magicString);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNEWEntry(true,  magicString);	  this.entry    =    readNEWEntry(true);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
83	[BUG]  [BUGGY]  this.entry  =  readNewEntry(true,  cpioString);  [CE]  cannot  find  symbol  cpioString  [FE]    IOException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(true,  cpioString);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNewEntry(true,  cpioString);	  this.entry    =    readNewEntry(true);    	non-compiled	[CE]  cannot  find  symbol  cpioString	2	None	replace
84	[BUG]  [BUGGY]  this.entry  =  readNewEntry(true,  MAX_NEW_ASCII);  [CE]  cannot  find  symbol  MAX_NEW_ASCII  [FE]                IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(true,  MAX_NEW_ASCII);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNewEntry(true,  MAX_NEW_ASCII);	  this.entry    =    readNewEntry(false,    MAX_NEW_CRC);    	non-compiled	[CE]  cannot  find  symbol  MAX_NEW_ASCII	6	None	replace
85	[BUG]  [BUGGY]      System.arraycopy(FOUR_BYTES_BUF,  0,  this.entryBytesRead.length,  FOUR_BYTES_BUF.length);  [CE]  long  cannot  be  dereferenced  [FE]    NullPointerException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]      System.arraycopy(FOUR_BYTES_BUF,  0,  this.entryBytesRead.length,  FOUR_BYTES_BUF.length);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	        System.arraycopy(FOUR_BYTES_BUF,  0,  this.entryBytesRead.length,  FOUR_BYTES_BUF.length);	  	non-compiled	[CE]  long  cannot  be  dereferenced	8	None	add
86	[BUG]  [BUGGY]      if(magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  {  System.arraycopy(FOUR_BYTES_BUF,  0,  this.  [CE]  <identifier>  expected  [FE]      NullPointerException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]      if(magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  {  System.arraycopy(FOUR_BYTES_BUF,  0,  this.  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	        if(magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  {  System.arraycopy(FOUR_BYTES_BUF,  0,  this.	  	non-compiled	[CE]  <identifier>  expected	8	None	add
87	[BUG]  [BUGGY]      if(magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  {  System.arraycopy(FOUR_BYTES_BUF,  SIX_BYTES_BUF,  [CE]  ')'  expected  [FE]        NullPointerException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]      if(magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  {  System.arraycopy(FOUR_BYTES_BUF,  SIX_BYTES_BUF,  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	        if(magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  {  System.arraycopy(FOUR_BYTES_BUF,  SIX_BYTES_BUF,	  	non-compiled	[CE]  ')'  expected	8	None	add
88	[BUG]  [BUGGY]      if(magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(false);  }  else  {  System.arraycopy(FOUR_BYTES_BUF,  0,  this.  [CE]  <identifier>  expected  [FE]          NullPointerException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]      if(magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(false);  }  else  {  System.arraycopy(FOUR_BYTES_BUF,  0,  this.  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	        if(magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(false);  }  else  {  System.arraycopy(FOUR_BYTES_BUF,  0,  this.	  	non-compiled	[CE]  <identifier>  expected	8	None	add
89	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            NullPointerException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]      if(magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	add	        if(magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }	  	compilable	  [FE]  IllegalArgumentException  	8	1	add
90	[BUG]  [BUGGY]      if(magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  [FE]  IllegalArgumentException  [FE]            NullPointerException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]      if(magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	        if(magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }	  	compilable	  [FE]  IllegalArgumentException  	8	1	add
91	[BUG]  [BUGGY]      if(magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  {  System.arraycopy(FOUR_BYTES_BUF,  SIX_BYTES_BUF  [CE]  ')'  expected  [FE]              NullPointerException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]      if(magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  {  System.arraycopy(FOUR_BYTES_BUF,  SIX_BYTES_BUF  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	        if(magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  {  System.arraycopy(FOUR_BYTES_BUF,  SIX_BYTES_BUF	  	non-compiled	[CE]  ')'  expected	8	None	add
92	[BUG]  [BUGGY]  this.entry  =  readNewEntry(false,  magicString,  true);  [CE]  method  readNewEntry  in  class  CpioArchiveInputStream  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(false,  magicString,  true);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNewEntry(false,  magicString,  true);	  this.entry    =    readNewEntry(false,    true);    	non-compiled	[CE]  method  readNewEntry  in  class  CpioArchiveInputStream  cannot  be  applied  to  given  types;	7	None	replace
93	[BUG]  [BUGGY]  this.entry  =  readNewEntry(false,  magicString,  MISSING_NEW);  [CE]  cannot  find  symbol  MISSING_NEW  [FE]              IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(false,  magicString,  MISSING_NEW);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNewEntry(false,  magicString,  MISSING_NEW);	  this.entry    =    readNewEntry(false,    magicString);    	non-compiled	[CE]  cannot  find  symbol  MISSING_NEW	5	None	replace
94	[BUG]  [BUGGY]  this.entry  =  readNewEntry(false,  magicString,  STRICT_NEW);  [CE]  cannot  find  symbol  STRICT_NEW  [FE]                IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(false,  magicString,  STRICT_NEW);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNewEntry(false,  magicString,  STRICT_NEW);	  this.entry    =    readNewEntry(false,    magicString);    	non-compiled	[CE]  cannot  find  symbol  STRICT_NEW	5	None	replace
95	[BUG]  [BUGGY]  this.entry  =  readNewEntry(NEW_CRC,  FOUR_BYTES_BUF);  [CE]  cannot  find  symbol  NEW_CRC  [FE]            IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(NEW_CRC,  FOUR_BYTES_BUF);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNewEntry(NEW_CRC,  FOUR_BYTES_BUF);	  this.entry    =    readNewEntry();    	non-compiled	[CE]  cannot  find  symbol  NEW_CRC	4	None	replace
96	[BUG]  [BUGGY]  this.entry  =  readNEwEntry(true,  MISSING_NEW_CRC);  [CE]  cannot  find  symbol  MISSING_NEW_CRC  [FE]          IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNEwEntry(true,  MISSING_NEW_CRC);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNEwEntry(true,  MISSING_NEW_CRC);	  this.entry    =    readNEwEntry(true);    	non-compiled	[CE]  cannot  find  symbol  MISSING_NEW_CRC	11	None	replace
97	[BUG]  [BUGGY]  this.entry  =  readNEwEntry(true,  MIC_NEW_CRC);  [CE]  cannot  find  symbol  MIC_NEW_CRC  [FE]            IllegalArgumentException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNEwEntry(true,  MIC_NEW_CRC);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry  =  readNEwEntry(true,  MIC_NEW_CRC);	  this.entry    =    readNEwEntry(true);    	non-compiled	[CE]  cannot  find  symbol  MIC_NEW_CRC	11	None	replace
98	[BUG]  [BUGGY]  this.entry  =  readNewEntry(true);  this.entry  =  readNewEntry(null);  [CE]  method  readNewEntry  in  class  CpioArchiveInputStream  cannot  be  applied  to  given  types;  [FE]    IOException    [CONTEXT]    }  else  if  (CpioUtil.byteArray2long(TWO_BYTES_BUF,  true)  ==  MAGIC_OLD_BINARY)  {  this.entry  =  readOldBinaryEntry(true);  }  else  {  System.arraycopy(TWO_BYTES_BUF,  0,  SIX_BYTES_BUF,  0,  TWO_BYTES_BUF.length);  readFully(SIX_BYTES_BUF,  TWO_BYTES_BUF.length,  FOUR_BYTES_BUF.length);  String  magicString  =  ArchiveUtils.toAsciiString(SIX_BYTES_BUF);  if  (magicString.equals(MAGIC_NEW))  {    [BUGGY]  this.entry  =  readNewEntry(true);  this.entry  =  readNewEntry(null);  [BUGGY]    }  else  if  (magicString.equals(MAGIC_NEW_CRC))  {  this.entry  =  readNewEntry(true);  }  else  if  (magicString.equals(MAGIC_OLD_ASCII))  {  this.entry  =  readOldAsciiEntry();  }  else  {  throw  new  IOException(   "Unknown  magic  [   "  +  magicString  +     "].  Occured  at  byte:     "  +  getBytesRead());  }  }  [CLASS]  CpioArchiveInputStream  [METHOD]  getNextCPIOEntry  [RETURN_TYPE]  CpioArchiveEntry  [VARIABLES]  byte[]  FOUR_BYTES_BUF  SIX_BYTES_BUF  TWO_BYTES_BUF  tmpbuf  boolean  closed  entryEOF  InputStream  in  String  magicString  CpioArchiveEntry  entry  long  crc  entryBytesRead  int  blockSize  	projects/Compress20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	1.0	204	204	1	replace	this.entry    =    readNewEntry(true);    this.entry  =  readNewEntry(null);	  	non-compiled	[CE]  method  readNewEntry  in  class  CpioArchiveInputStream  cannot  be  applied  to  given  types;	1	None	add
